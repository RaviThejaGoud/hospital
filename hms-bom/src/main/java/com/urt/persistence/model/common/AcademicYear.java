package com.urt.persistence.model.common;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.annotations.Type;

import com.churchgroup.util.date.DateFormatter;
import com.hyniva.sms.ws.vo.AcademicYearVo;
import com.urt.persistence.model.base.PersistentObject;



/**
 * AbstractState generated by MyEclipse - Hibernate Tools
 */
@Entity
@Table(name = "academicYear")
public class AcademicYear  extends PersistentObject {

    private static final long serialVersionUID = -9190968485277417762L;
    private String academicYear;
    private String status;
    private long custId;
    private long pastYear;
    private Date startDate;
    private Date endDate;
    protected String startTime;
    protected String endTime;
    protected int noOfWorkingDays;
    protected int noOfHolidays;
    private Date nextAcademicStartDate;
    protected String morningBreakStartTime;
    protected String morningBreakEndTime;
    protected String eveningBreakStartTime;
    protected String eveningBreakEndTime;
    protected String lunchStartTime;
    protected String lunchEndTime;
    protected int attendancePercentage;
    protected boolean futureAcademicData;
    protected boolean classTeacherHandleFirstPeriod;
    protected String manageAttendanceBy; 
    protected String manageStaffAttendanceBy;
    protected String useBiometricForStaff;
    protected String useBiometricForStudent;
    protected boolean transportFeeByBoardingPoint;
    protected boolean sendBirthdayAlerts;
    protected String manageStudentsAdmissionsByFee;
    private boolean dispActivityDescField;
    private String holidayStatus;
    protected long allotedsms;
    private String isDefaultExamTypeStatus;
    protected String enableSchoolShift;
    protected boolean sendStaffBirthdayAlerts;
    protected long paidSms;
    protected String receiptGenerationType;
    protected boolean sendBirthdayAlertsByEmail;
    protected boolean sendStaffBirthdayAlertsByEmail;
    protected String captureAttendanceBy;    
    
    protected boolean sendEventAlertSMS;
    protected boolean sendEventAlertsByEmail;
    protected boolean assignmentSMSLoginUser;
    protected String captureAttendanceForStaff;
    private String feeModuleUsegeBy;
    private boolean timetableGenerationByManual; // Y - Manual,  N-Automatic
   
    
    @Column(name = "timetableGenerationByManual", columnDefinition="char(1) default 'N'")
    @Type(type="yes_no")
    public boolean isTimetableGenerationByManual() {
		return timetableGenerationByManual;
	}

	public void setTimetableGenerationByManual(boolean timetableGenerationByManual) {
		this.timetableGenerationByManual = timetableGenerationByManual;
	}
	@Column(name = "captureAttendanceForStaff", nullable = true, length = 1,columnDefinition="char(1) default 'O'")
	public String getCaptureAttendanceForStaff() {
		return captureAttendanceForStaff;
	}

	public void setCaptureAttendanceForStaff(String captureAttendanceForStaff) {
		this.captureAttendanceForStaff = captureAttendanceForStaff;
	}

	@Column(name = "assignmentSMSLoginUser", nullable = false, length = 1,columnDefinition="char(1) default 'N'")
   	@Type(type="yes_no")
    public boolean isAssignmentSMSLoginUser() {
		return assignmentSMSLoginUser;
	}

	public void setAssignmentSMSLoginUser(boolean assignmentSMSLoginUser) {
		this.assignmentSMSLoginUser = assignmentSMSLoginUser;
	}

	@Column(name = "sendEventAlertSMS", nullable = false, length = 1,columnDefinition="char(1) default 'N'")
   	@Type(type="yes_no")
	public boolean isSendEventAlertSMS() {
		return sendEventAlertSMS;
	}

	public void setSendEventAlertSMS(boolean sendEventAlertSMS) {
		this.sendEventAlertSMS = sendEventAlertSMS;
	}
	
	 @Column(name = "sendEventAlertsByEmail", nullable = false, length = 1,columnDefinition="char(1) default 'N'")
		@Type(type="yes_no")

	public boolean isSendEventAlertsByEmail() {
		return sendEventAlertsByEmail;
	}

	public void setSendEventAlertsByEmail(boolean sendEventAlertsByEmail) {
		this.sendEventAlertsByEmail = sendEventAlertsByEmail;
	}

	@Column(name = "captureAttendanceBy", nullable = true, length = 1,columnDefinition="char(1) default 'O'")
    public String getCaptureAttendanceBy() {
		return captureAttendanceBy;
	}

	public void setCaptureAttendanceBy(String captureAttendanceBy) {
		this.captureAttendanceBy = captureAttendanceBy;
	}
    @Column(name = "sendBirthdayAlertsByEmail", nullable = false, length = 1,columnDefinition="char(1) default 'Y'")
	@Type(type="yes_no")
    public boolean isSendBirthdayAlertsByEmail() {
		return sendBirthdayAlertsByEmail;
	}

	public void setSendBirthdayAlertsByEmail(boolean sendBirthdayAlertsByEmail) {
		this.sendBirthdayAlertsByEmail = sendBirthdayAlertsByEmail;
	}
	@Column(name = "sendStaffBirthdayAlertsByEmail", nullable = false, length = 1,columnDefinition="char(1) default 'Y'")
	@Type(type="yes_no")
	public boolean isSendStaffBirthdayAlertsByEmail() {
		return sendStaffBirthdayAlertsByEmail;
	}

	public void setSendStaffBirthdayAlertsByEmail(
			boolean sendStaffBirthdayAlertsByEmail) {
		this.sendStaffBirthdayAlertsByEmail = sendStaffBirthdayAlertsByEmail;
	}

	@Column(name = "paidSms", nullable = false, columnDefinition=" int default 0")
    public long getPaidSms() {
		return paidSms;
	}

	public void setPaidSms(long paidSms) {
		this.paidSms = paidSms;
	}

	@Column(name = "sendStaffBirthdayAlerts", nullable = false, length = 1,columnDefinition="char(1) default 'N'")
	@Type(type="yes_no")
    public boolean isSendStaffBirthdayAlerts() {
		return sendStaffBirthdayAlerts;
	}

	public void setSendStaffBirthdayAlerts(boolean sendStaffBirthdayAlerts) {
		this.sendStaffBirthdayAlerts = sendStaffBirthdayAlerts;
	}

    @Column(name = "enableSchoolShift", nullable = true, length = 1,columnDefinition="char(1) default 'N'")
    public String getEnableSchoolShift() {
		return enableSchoolShift;
	}

	public void setEnableSchoolShift(String enableSchoolShift) {
		this.enableSchoolShift = enableSchoolShift;
	}

	@Column(name = "isDefaultExamTypeStatus", nullable = false, length = 1,columnDefinition="char(2) default 'N'") 
    public String getIsDefaultExamTypeStatus() {
		return isDefaultExamTypeStatus;
	}

	
	public void setIsDefaultExamTypeStatus(String isDefaultExamTypeStatus) {
		this.isDefaultExamTypeStatus = isDefaultExamTypeStatus;
	}

	@Column(name = "allotedsms", nullable = false, columnDefinition=" int default 1")
    public long getAllotedsms() {
		return allotedsms;
	}

	public void setAllotedsms(long allotedsms) {
		this.allotedsms = allotedsms;
	}

    @Column(name = "holidayStatus", nullable = false, length = 1,columnDefinition="char(2) default 'SH'")
	public String getHolidayStatus() {
		return holidayStatus;
	}

	public void setHolidayStatus(String holidayStatus) {
		this.holidayStatus = holidayStatus;
	}
    /* Here we will main tain 3 types those are period subject wise as 'H',Daily two time as 'H' like morning and evening AM and PM, Day wise daily once as 'D' */
    //protected String studentAttendanceType;
        
    
    //protected Set<WeekDays> workingDays;
    
    /*@ManyToMany
    @JoinTable(name = "workingDays", joinColumns = { @JoinColumn(name = "academicYearId") },
       inverseJoinColumns = { @JoinColumn(name = "dayId") })
    public Set<WeekDays> getWorkingDays() {
		return workingDays;
	}
	public void setWorkingDays(Set<WeekDays> workingDays) {
		this.workingDays = workingDays;
	}*/
    
    
	/**
	 * @return the dispActivityDescField
	 */
    @Column(name = "dispActivityDescField", nullable = true, length = 1,columnDefinition="char(1) default 'Y'")
    @Type(type="yes_no")
	public boolean isDispActivityDescField() {
		return dispActivityDescField;
	}
    
    /*@Column(name = "studentAttendanceType", nullable = true, length = 1)
	public String getStudentAttendanceType() {
		return studentAttendanceType;
	}

	public void setStudentAttendanceType(String studentAttendanceType) {
		this.studentAttendanceType = studentAttendanceType;
	}*/

	/**
	 * @param dispActivityDescField the dispActivityDescField to set
	 */
	public void setDispActivityDescField(boolean dispActivityDescField) {
		this.dispActivityDescField = dispActivityDescField;
	}

	@Column(name = "classTeacherHandleFirstPeriod", nullable = true, length = 1,columnDefinition="char(1) default 'N'")
    @Type(type="yes_no")
    public boolean isClassTeacherHandleFirstPeriod() {
		return classTeacherHandleFirstPeriod;
	}
	
	@Column(name = "manageStudentsAdmissionsByFee", nullable = true, length = 1,columnDefinition="char(1) default 'Y'")
	public String getManageStudentsAdmissionsByFee() {
		return manageStudentsAdmissionsByFee;
	}


	public void setManageStudentsAdmissionsByFee(
			String manageStudentsAdmissionsByFee) {
		this.manageStudentsAdmissionsByFee = manageStudentsAdmissionsByFee;
	}


	/**
	 * @return the manageAttendanceBy
	 */
	@Column(name = "manageAttendanceBy", nullable = true, length = 1,columnDefinition="char(1) default 'D'")
	public String getManageAttendanceBy() {
		return manageAttendanceBy;
	}


	/**
	 * @param manageAttendanceBy the manageAttendanceBy to set
	 */
	public void setManageAttendanceBy(String manageAttendanceBy) {
		this.manageAttendanceBy = manageAttendanceBy;
	}

	
	@Column(name = "manageStaffAttendanceBy", nullable = true, length = 1,columnDefinition="char(1) default 'D'")
	public String getManageStaffAttendanceBy() {
		return manageStaffAttendanceBy;
	}


	public void setManageStaffAttendanceBy(String manageStaffAttendanceBy) {
		this.manageStaffAttendanceBy = manageStaffAttendanceBy;
	}

	

	@Column(name = "transportFeeByBoardingPoint", nullable = false, length = 1,columnDefinition="char(1) default 'N'")
	@Type(type="yes_no")
	public boolean isTransportFeeByBoardingPoint() {
		return transportFeeByBoardingPoint;
	}


	public void setTransportFeeByBoardingPoint(boolean transportFeeByBoardingPoint) {
		this.transportFeeByBoardingPoint = transportFeeByBoardingPoint;
	}


	public void setClassTeacherHandleFirstPeriod(
			boolean classTeacherHandleFirstPeriod) {
		this.classTeacherHandleFirstPeriod = classTeacherHandleFirstPeriod;
	}
    
	/**
	 * @return the futureAcademicData
	 */
    @Column(name = "futureAcademicData", nullable = true, length = 1,columnDefinition="char(1) default 'N'")
    @Type(type="yes_no")
	public boolean isFutureAcademicData() {
		return futureAcademicData;
	}
	/**
	 * @param futureAcademicData the futureAcademicData to set
	 */
	public void setFutureAcademicData(boolean futureAcademicData) {
		this.futureAcademicData = futureAcademicData;
	}
	/**
	 * @return the attendancePercentage
	 */
    @Column(name = "attendancePercentage", nullable = false, columnDefinition=" int default 0")
	public int getAttendancePercentage() {
		return attendancePercentage;
	}
	/**
	 * @param attendancePercentage the attendancePercentage to set
	 */
	public void setAttendancePercentage(int attendancePercentage) {
		this.attendancePercentage = attendancePercentage;
	}
	@Column(name = "morningBreakStartTime", nullable = true, length = 10,unique=false)
    public String getMorningBreakStartTime() {
		return morningBreakStartTime;
	}
	public void setMorningBreakStartTime(String morningBreakStartTime) {
		this.morningBreakStartTime = morningBreakStartTime;
	}
	@Column(name = "morningBreakEndTime", nullable = true, length = 10,unique=false)
	public String getMorningBreakEndTime() {
		return morningBreakEndTime;
	}
	public void setMorningBreakEndTime(String morningBreakEndTime) {
		this.morningBreakEndTime = morningBreakEndTime;
	}
	@Column(name = "eveningBreakStartTime", nullable = true, length = 10,unique=false)
	public String getEveningBreakStartTime() {
		return eveningBreakStartTime;
	}
	public void setEveningBreakStartTime(String eveningBreakStartTime) {
		this.eveningBreakStartTime = eveningBreakStartTime;
	}
	@Column(name = "eveningBreakEndTime", nullable = true, length = 10,unique=false)
	public String getEveningBreakEndTime() {
		return eveningBreakEndTime;
	}
	public void setEveningBreakEndTime(String eveningBreakEndTime) {
		this.eveningBreakEndTime = eveningBreakEndTime;
	}
	@Column(name = "lunchStartTime", nullable = true, length = 10,unique=false)
	public String getLunchStartTime() {
		return lunchStartTime;
	}
	public void setLunchStartTime(String lunchStartTime) {
		this.lunchStartTime = lunchStartTime;
	}
	@Column(name = "lunchEndTime", nullable = true, length = 10,unique=false)
	public String getLunchEndTime() {
		return lunchEndTime;
	}
	public void setLunchEndTime(String lunchEndTime) {
		this.lunchEndTime = lunchEndTime;
	}
	@Column(name = "nextAcademicStartDate", nullable = true, length = 10,unique=false)
    public Date getNextAcademicStartDate() {
		return nextAcademicStartDate;
	}
	public void setNextAcademicStartDate(Date nextAcademicStartDate) {
		this.nextAcademicStartDate = nextAcademicStartDate;
	}
	   	
	 // Constructors
	/** default constructor */
    public AcademicYear() {
    }
    
    /** full constructor */
    public AcademicYear(String academicYear, long custId,String status) {
        this.academicYear = academicYear;
        this.status = status;
        this.custId = custId;
    }

    public Date getEndDate() {
		return endDate;
	}
	public Date  setEndDate(Date endDate) {
		return this.endDate = endDate;
	}
	
    public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@Column(name = "startTime", nullable = true, length = 10,unique=false)
	public String getStartTime() {
		return startTime;
	}

	public void setStartTime(String startTime) {
		this.startTime = startTime;
	}

	@Column(name = "endTime", nullable = true, length = 10,unique=false)
	public String getEndTime() {
		return endTime;
	}

	public void setEndTime(String endTime) {
		this.endTime = endTime;
	}

	@Column(name = "noOfWorkingDays", nullable = false, columnDefinition=" int default 0")
	public int getNoOfWorkingDays() {
		return noOfWorkingDays;
	}

	public void setNoOfWorkingDays(int noOfWorkingDays) {
		this.noOfWorkingDays = noOfWorkingDays;
	}

	@Column(name = "noOfHolidays", nullable = false, columnDefinition=" int default 0")
	public int getNoOfHolidays() {
		return noOfHolidays;
	}

	public void setNoOfHolidays(int noOfHolidays) {
		this.noOfHolidays = noOfHolidays;
	}

	@Column(name="academicYear", nullable=true, length=20, unique=false)
    public String getAcademicYear() {
		return academicYear;
	}

	public void setAcademicYear(String academicYear) {
		this.academicYear = academicYear;
	}

	@Column(name = "status", nullable = false, length = 1,columnDefinition="char(1) default 'Y'")
	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

    @Column(name="custId", nullable=true, length=10, unique=false)
	public long getCustId() {
		return custId;
	}

	public void setCustId(long custId) {
		this.custId = custId;
	}

	
	@Column(name = "useBiometricForStaff", nullable = true, length = 1,columnDefinition="char(1) default 'N'")
	public String getUseBiometricForStaff() {
		return useBiometricForStaff;
	}


	public void setUseBiometricForStaff(String useBiometricForStaff) {
		this.useBiometricForStaff = useBiometricForStaff;
	}

	@Column(name = "useBiometricForStudent", nullable = true, length = 1,columnDefinition="char(1) default 'N'")
	public String getUseBiometricForStudent() {
		return useBiometricForStudent;
	}


	public void setUseBiometricForStudent(String useBiometricForStudent) {
		this.useBiometricForStudent = useBiometricForStudent;
	}
	

	@Column(name = "sendBirthdayAlerts", nullable = false, length = 1,columnDefinition="char(1) default 'N'")
	@Type(type="yes_no")
	public boolean isSendBirthdayAlerts() {
		return sendBirthdayAlerts;
	}

	public void setSendBirthdayAlerts(boolean sendBirthdayAlerts) {
		this.sendBirthdayAlerts = sendBirthdayAlerts;
	}


	/**
     * @see java.lang.Object#hashCode()
     */
    @Override
	public int hashCode() {
        return new HashCodeBuilder(-465592447, 1546771509).append(
                this.status).append(this.status).toHashCode();
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    @Override
	public boolean equals(Object object) {
        if (!(object instanceof AcademicYear)) {
            return false;
        }
        AcademicYear rhs = (AcademicYear) object;
        return new EqualsBuilder().append(this.status, rhs.status)
                .append(this.status, rhs.status).isEquals();
    }

    /**
     * @see java.lang.Object#toString()
     */
    @Override
	public String toString() {
        return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
                .append("id", this.getId())
               // .append("stateCode",
                 .append("stateCode",
                        this.status).append("Status", this.status)
                .toString();
    }

    /**
     * @see java.lang.Comparable#compareTo(Object)
     */
    @Override
	public int compareTo(Object object) {
    	AcademicYear myClass = (AcademicYear) object;
        return new CompareToBuilder().append(this.status, myClass.status)
                .toComparison();
    }

	/**
	 * @return the pastYear
	 */
    @Column(name="pastYear",nullable=true,length=10)
	public long getPastYear() {
		return pastYear;
	}

	/**
	 * @param pastYear the pastYear to set
	 */
	public void setPastYear(long pastYear) {
		this.pastYear = pastYear;
	}
	@Transient
	public String getStartDateStr() {
		return DateFormatter.formatDate(DateFormatter.MM_DD_YYYY_PATTERN1, getStartDate());
		
	}
	@Transient
	public String getEndDateStr() {
		return DateFormatter.formatDate(DateFormatter.MM_DD_YYYY_PATTERN1, getEndDate());
	}
	@Transient
	public String getNextAcademicStartDateStr() {
		return DateFormatter.formatDate(DateFormatter.MM_DD_YYYY_PATTERN1, getNextAcademicStartDate());
	}
	
	@Transient
    public String getAcademicStartDateStr()
    {
        return DateFormatter.formatDate(DateFormatter.MMDDCCYY_PATTERN, getStartDate()); 
    }
	@Transient
	public String getAcademicEndDateStr()
	{
		return DateFormatter.formatDate(DateFormatter.MMDDCCYY_PATTERN, getEndDate()); 
	}
	public void copyFrom(AcademicYear academicYear)
    {
		   	setAcademicYear(academicYear.getAcademicYear());
		    setStatus(academicYear.getStatus());
		    setCustId(academicYear.getCustId());
		    setPastYear(academicYear.getPastYear());
		    setStartDate(academicYear.getStartDate());
		    setEndDate(academicYear.getEndDate());
		    setStartTime(academicYear.getStartTime());
		    setEndTime(academicYear.getEndTime());
		    setNoOfWorkingDays(academicYear.getNoOfWorkingDays());
		    setNoOfHolidays(academicYear.getNoOfHolidays());
    }
	
	
	

	public AcademicYearVo copyFromEntityToVo(AcademicYear academicYear)
	{
		AcademicYearVo academicYearVo = new AcademicYearVo();
		
		academicYearVo.id = academicYear.id;
		academicYearVo.academicYear = academicYear.academicYear;
		academicYearVo.status = academicYear.status;
		academicYearVo.custId = academicYear.custId;
		academicYearVo.pastYear = academicYear.pastYear;
		academicYearVo.academicStartDate = academicYear.startDate;
		academicYearVo.academicEndDate = academicYear.endDate;
		academicYearVo.startTime = academicYear.startTime;
		academicYearVo.endTime = academicYear.endTime;
		academicYearVo.noOfWorkingDays = academicYear.noOfWorkingDays;
		academicYearVo.noOfHolidays = academicYear.noOfHolidays;
		//academicYearVo.nextAcademicStartDate = academicYear.nextAcademicStartDate;
		academicYearVo.morningBreakStartTime = academicYear.morningBreakStartTime;
		academicYearVo.morningBreakEndTime = academicYear.morningBreakEndTime;
		academicYearVo.eveningBreakStartTime = academicYear.eveningBreakStartTime;
		academicYearVo.eveningBreakEndTime = academicYear.eveningBreakEndTime;
		academicYearVo.lunchStartTime = academicYear.lunchStartTime;
		academicYearVo.lunchEndTime = academicYear.lunchEndTime;
		academicYearVo.attendancePercentage = academicYear.attendancePercentage;
		academicYearVo.futureAcademicData = academicYear.futureAcademicData;
		//academicYearVo.classTeacherHandleFirstPeriod = academicYear.classTeacherHandleFirstPeriod;
		academicYearVo.manageAttendanceBy = academicYear.manageAttendanceBy;
		academicYearVo.manageStaffAttendanceBy = academicYear.manageStaffAttendanceBy;
		academicYearVo.useBiometricForStaff = academicYear.useBiometricForStaff;
		academicYearVo.useBiometricForStudent = academicYear.useBiometricForStudent;
		academicYearVo.transportFeeByBoardingPoint = academicYear.transportFeeByBoardingPoint;
		academicYearVo.sendBirthdayAlerts = academicYear.sendBirthdayAlerts;
		academicYearVo.manageStudentsAdmissionsByFee = academicYear.manageStudentsAdmissionsByFee;
		academicYearVo.dispActivityDescField = academicYear.dispActivityDescField;
		academicYearVo.holidayStatus = academicYear.holidayStatus;
		academicYearVo.allotedsms = academicYear.allotedsms;
		academicYearVo.isDefaultExamTypeStatus = academicYear.isDefaultExamTypeStatus;
		academicYearVo.enableSchoolShift = academicYear.enableSchoolShift;
		academicYearVo.sendStaffBirthdayAlerts = academicYear.sendStaffBirthdayAlerts;
		academicYearVo.paidSms = academicYear.paidSms;
		academicYearVo.sendBirthdayAlertsByEmail = academicYear.sendBirthdayAlertsByEmail;
		academicYearVo.sendStaffBirthdayAlertsByEmail = academicYear.sendStaffBirthdayAlertsByEmail;
		return academicYearVo;
		
	}
	
	public AcademicYear copyFromVoToEntity(AcademicYear academicYear,AcademicYearVo academicYearVo)
	{
		if(academicYear.getId() == 0)
			academicYear.id = academicYearVo.id;
		academicYear.academicYear = academicYearVo.academicYear;
		academicYear.status = academicYearVo.status;
		academicYear.custId = academicYearVo.custId;
		academicYear.pastYear = academicYearVo.pastYear;
		//academicYear.startDate = academicYearVo.startDate;
		//academicYear.endDate = academicYearVo.endDate;
		academicYear.startTime = academicYearVo.startTime;
		academicYear.endTime = academicYearVo.endTime;
		academicYear.noOfWorkingDays = academicYearVo.noOfWorkingDays;
		academicYear.noOfHolidays = academicYearVo.noOfHolidays;
		//academicYear.nextAcademicStartDate = academicYearVo.nextAcademicStartDate;
		academicYear.morningBreakStartTime = academicYearVo.morningBreakStartTime;
		academicYear.morningBreakEndTime = academicYearVo.morningBreakEndTime;
		academicYear.eveningBreakStartTime = academicYearVo.eveningBreakStartTime;
		academicYear.eveningBreakEndTime = academicYearVo.eveningBreakEndTime;
		academicYear.lunchStartTime = academicYearVo.lunchStartTime;
		academicYear.lunchEndTime = academicYearVo.lunchEndTime;
		academicYear.attendancePercentage = academicYearVo.attendancePercentage;
		academicYear.futureAcademicData = academicYearVo.futureAcademicData;
		//academicYear.classTeacherHandleFirstPeriod = academicYearVo.classTeacherHandleFirstPeriod;
		academicYear.manageAttendanceBy = academicYearVo.manageAttendanceBy;
		academicYear.manageStaffAttendanceBy = academicYearVo.manageStaffAttendanceBy;
		academicYear.useBiometricForStaff = academicYearVo.useBiometricForStaff;
		academicYear.useBiometricForStudent = academicYearVo.useBiometricForStudent;
		academicYear.transportFeeByBoardingPoint = academicYearVo.transportFeeByBoardingPoint;
		academicYear.sendBirthdayAlerts = academicYearVo.sendBirthdayAlerts;
		academicYear.manageStudentsAdmissionsByFee = academicYearVo.manageStudentsAdmissionsByFee;
		academicYear.dispActivityDescField = academicYearVo.dispActivityDescField;
		academicYear.holidayStatus = academicYearVo.holidayStatus;
		academicYear.allotedsms = academicYearVo.allotedsms;
		academicYear.isDefaultExamTypeStatus = academicYearVo.isDefaultExamTypeStatus;
		academicYear.enableSchoolShift = academicYearVo.enableSchoolShift;
		academicYear.sendStaffBirthdayAlerts = academicYearVo.sendStaffBirthdayAlerts;
		academicYear.paidSms = academicYearVo.paidSms;
		academicYear.sendBirthdayAlertsByEmail = academicYearVo.sendBirthdayAlertsByEmail;
		academicYear.sendStaffBirthdayAlertsByEmail = academicYearVo.sendStaffBirthdayAlertsByEmail;
		academicYear.receiptGenerationType=academicYearVo.receiptGenerationType;
		academicYear.setFeeModuleUsegeBy(academicYearVo.getFeeModuleUsegeBy());
		
		return academicYear;
	}
	@Column(name = "receiptGenerationType", nullable = true, length = 1)
	public String getReceiptGenerationType() {
		return receiptGenerationType;
	}

	public void setReceiptGenerationType(String receiptGenerationType) {
		this.receiptGenerationType = receiptGenerationType;
	}

	/**
	 * @return the feeModuleUsegeBy
	 */
	@Column(name = "feeModuleUsegeBy", nullable = false, length = 1,columnDefinition="char(1) default 'W'")
	public String getFeeModuleUsegeBy() {
		return feeModuleUsegeBy;
	}

	/**
	 * @param feeModuleUsegeBy the feeModuleUsegeBy to set
	 */
	public void setFeeModuleUsegeBy(String feeModuleUsegeBy) {
		this.feeModuleUsegeBy = feeModuleUsegeBy;
	}
	

}