package com.urt.webapp.action.reports;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.zip.ZipOutputStream;

import jxl.Cell;
import jxl.CellView;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.Colour;
import jxl.format.VerticalAlignment;
import jxl.write.Blank;
import jxl.write.Label;
import jxl.write.NumberFormat;
import jxl.write.WritableCellFeatures;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;

import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellValue;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Actions;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper;
import org.springframework.util.StringUtils;

import com.churchgroup.common.constants.Constants;
import com.churchgroup.util.date.DateFormatter;
import com.churchgroup.util.date.DateFunctions;
import com.churchgroup.util.date.DateUtil;
import com.churchgroup.util.object.ConvertUtil;
import com.churchgroup.util.object.ObjectFunctions;
import com.churchgroup.util.pdf.PDFGenerator;
import com.churchgroup.util.pdf.PdfHeaderFooterMarkJasper;
import com.churchgroup.util.string.StringFunctions;
import com.churchgroup.util.string.StringUtil;
import com.churchgroup.util.xls.ExcelView;
import com.hyniva.common.cache.SMSLookUpDataCache;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.urt.exception.base.URTUniversalException;
import com.urt.json.JSONArray;
import com.urt.json.JSONObject;
import com.urt.persistence.model.common.AcademicYear;
import com.urt.persistence.model.common.Address;
import com.urt.persistence.model.common.AdmissionInquiry;
import com.urt.persistence.model.common.AdmissionSettings;
import com.urt.persistence.model.common.Attachment;
import com.urt.persistence.model.common.CastSettings;
import com.urt.persistence.model.common.Country;
import com.urt.persistence.model.common.HostelStudentDailyAttendance;
import com.urt.persistence.model.common.HouseType;
import com.urt.persistence.model.common.Medium;
import com.urt.persistence.model.common.ParentIncomeRange;
import com.urt.persistence.model.common.StaffDailyAttendance;
import com.urt.persistence.model.common.StaffMonthlyAttendance;
import com.urt.persistence.model.common.State;
import com.urt.persistence.model.common.StudentDailyAttendance;
import com.urt.persistence.model.common.StudentDailyAttendanceTimeTrack;
import com.urt.persistence.model.common.SubCastSettings;
import com.urt.persistence.model.common.VWStudentAttendance;
import com.urt.persistence.model.common.VWStudentClassAssignment;
import com.urt.persistence.model.common.ViewAllUsers;
import com.urt.persistence.model.customer.Customer;
import com.urt.persistence.model.customer.Hostel;
import com.urt.persistence.model.customer.Leave;
import com.urt.persistence.model.customer.SMSServiceProviders;
import com.urt.persistence.model.customer.SchoolTerms;
import com.urt.persistence.model.customer.ViewVoucherDetails;
import com.urt.persistence.model.exam.CommonType;
import com.urt.persistence.model.exam.ExamSchedules;
import com.urt.persistence.model.exam.ExamSchedulesComparator;
import com.urt.persistence.model.exam.ExamTypes;
import com.urt.persistence.model.exam.MotherTongue;
import com.urt.persistence.model.exam.SchoolGrades;
import com.urt.persistence.model.exam.ViewClassExamDetails;
import com.urt.persistence.model.fee.ChallanaPayment;
import com.urt.persistence.model.fee.SchoolFeeSetting;
import com.urt.persistence.model.fee.StudentFeeRefund;
import com.urt.persistence.model.fee.ViewStudentDeletedInvoiceDetails;
import com.urt.persistence.model.fee.ViewStudentFeeChallanaDetails;
import com.urt.persistence.model.fee.ViewStudentFeeRefundDetails;
import com.urt.persistence.model.hostel.Building;
import com.urt.persistence.model.hostel.ViewStaffAllotedBeds;
import com.urt.persistence.model.hostel.ViewStudentOutHostelDetails;
import com.urt.persistence.model.hostel.ViewStudentsAllotedBeds;
import com.urt.persistence.model.hostel.Visitors;
import com.urt.persistence.model.library.ViewIssuedBookAndSettings;
import com.urt.persistence.model.study.ClassAssignment;
import com.urt.persistence.model.study.ClassName;
import com.urt.persistence.model.study.ClassTeacher;
import com.urt.persistence.model.study.SchoolCategory;
import com.urt.persistence.model.study.SchoolHolidays;
import com.urt.persistence.model.study.Staff;
import com.urt.persistence.model.study.StaffRoleNameComparator;
import com.urt.persistence.model.study.Student;
import com.urt.persistence.model.study.StudentClassAssignment;
import com.urt.persistence.model.study.StudentPayment;
import com.urt.persistence.model.study.StudentRollNumberComparator;
import com.urt.persistence.model.study.StudyClass;
import com.urt.persistence.model.study.StudySubject;
import com.urt.persistence.model.study.TransferCertificate;
import com.urt.persistence.model.study.ViewClassAssignmentDetails;
import com.urt.persistence.model.study.ViewClassSectionDetails;
import com.urt.persistence.model.study.ViewStaffPersonAccountDetails;
import com.urt.persistence.model.study.ViewStudentClassDetails;
import com.urt.persistence.model.study.ViewStudentClassFeePaymentDetails;
import com.urt.persistence.model.study.ViewStudentFeePaymentDetails;
import com.urt.persistence.model.study.ViewStudentFineFeeDetails;
import com.urt.persistence.model.study.ViewStudentLeaveDetails;
import com.urt.persistence.model.study.ViewStudentPersonAccountDetails;
import com.urt.persistence.model.study.ViewStudentTransportFeePaymentDetails;
import com.urt.persistence.model.study.ViewStudentsTCDetails;
import com.urt.persistence.model.subscription.OrganizationTypes;
import com.urt.persistence.model.transport.Route;
import com.urt.persistence.model.transport.RouteBoardingPoints;
import com.urt.persistence.model.transport.ViewStudentsTransportDetails;
import com.urt.persistence.model.transport.ViewVehicleMaintenanceByMonth;
import com.urt.persistence.model.user.OnlineApplicationDetails;
import com.urt.persistence.model.user.OnlineApplicationDetailsView;
import com.urt.persistence.model.user.Role;
import com.urt.persistence.model.user.User;
import com.urt.util.common.PasswordUtils;
import com.urt.util.common.RayGunException;
import com.urt.util.excel.staff.PrepareStaffEligibleSubjectsExcel;
import com.urt.util.excel.student.ExcelReport;
import com.urt.util.excel.student.PrepareStudentExcel;
import com.urt.util.excel.student.StudentsMarksReport;
import com.urt.webapp.action.base.BaseAction;
import com.urt.webapp.action.jrexception.JRExceptionClient;

import fr.opensagres.xdocreport.document.IXDocReport;
import fr.opensagres.xdocreport.document.registry.XDocReportRegistry;
import fr.opensagres.xdocreport.template.IContext;
import fr.opensagres.xdocreport.template.TemplateEngineKind;



/**
 * Action for facilitating Resources Management feature.
 */
@Namespace("/reports")
@Actions( {
		@Action(value = "ajaxDoImportAttendanceTemplate", results = { @Result(location = "../admin/reports/importStudentAttendanceDetails.jsp", name = "success") }),
		@Action(value = "ajaxDoImportStudentRegistrationTemplate", results = { @Result(location = "../admin/reports/importStudentRegisterDetails.jsp", name = "success") }),
		@Action(value = "ajaxDaysBetweenByVisitors", results = { @Result(location = "../admin/reports/ajaxGetVisitorDetailsByDaysBetween.jsp", name = "success") }),
		@Action(value = "ajaxDoImportStudentAttendanceTemplate", results = { @Result(location = "../admin/reports/importStudentAttendanceCountTemplate.jsp", name = "success") }),
		@Action(value = "ajaxAadminGetHelpDocuments", results = {@Result(location = "../admin/reports/ajaxGetHelpDocuments.jsp", name = "success") }),
		@Action(value = "ajaxScorecardsdoc", results = {@Result(location = "../admin/reports/ajaxSelectScorecards.jsp", name = "success") }),
		@Action(value = "ajaxDoDesktopSoftwareDownload", results = {@Result(location = "../admin/reports/ajaxDownloadDesktopSoftwares.jsp", name = "success") })

})
public class ReportsAction extends BaseAction {
	private static final long serialVersionUID = -1646390427462403153L;
	private ViewStudentClassDetails viewStudentClassDetails;
	private AdmissionInquiry openedAdmissionSettings;
	private boolean onlyNonTermFee = false;
	private List<MotherTongue> motherTongueList;
	private String selectedMotherTongueId;
	
	public boolean isOnlyNonTermFee() {
		return onlyNonTermFee;
	}
	public void setOnlyNonTermFee(boolean onlyNonTermFee) {
		this.onlyNonTermFee = onlyNonTermFee;
	}
	/**
	 * @return the viewStudentClassDetails
	 */
	public ViewStudentClassDetails getViewStudentClassDetails() {
		return viewStudentClassDetails;
	}
	/**
	 * @param viewStudentClassDetails the viewStudentClassDetails to set
	 */
	public void setViewStudentClassDetails(
			ViewStudentClassDetails viewStudentClassDetails) {
		this.viewStudentClassDetails = viewStudentClassDetails;
	}
	@Actions( {
		@Action(value = "ajaxViewStaffEligibleSubjects", results = {@Result(location = "../admin/reports/ajaxGetStaffEligibleSubjects.jsp", name = "success") })
	})
	public String ajaxViewStaffEligibleSubjects() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxViewStaffEligibleSubjects' method");
	}
	try {
		List<ViewStaffPersonAccountDetails> staffsList = adminManager.getAll(ViewStaffPersonAccountDetails.class," rolename in('ROLE_TEACHER','ROLE_ADMIN_COORDINATOR','ROLE_PRINCIPAL','ROLE_HOD','ROLE_VICEPRINCIPAL') and custId="+getUserCustId()+" and academicYearId<="+getUserAcademicYearId()+" and status='Y' ");
		setObjectList(staffsList);
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	
	@Actions( {
		@Action(value = "ajaxDoSelectedStaffDetailsReport", results = {@Result(location = "../admin/reports/ajaxDoSelectedStaffDetails.jsp", name = "success") })
	})
	public String ajaxRolenames() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxDoSelectedStaffDetailsReport' method");
	}
	try {
		setObjectList(adminManager.getAll(ViewAllUsers.class, " custId="+getUserCustId()+" and roleName!='ROLE_STUDENT' and roleName!='ROLE_PARENT' and roleName!='ROLE_ADMIN' and roleName!='ROLE_ADMINOFFICER' group by rolename"));
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	@Actions( { @Action(value = "printViewSelectedClassFeeDetails", results = { }) })
	
	public void generateViewClassSectionDefaulterReports(
			Set studentFeeAbove60List, PDFGenerator pDFGenerator, long reqYear,String selectedId) {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'generateViewClassSectionDefaulterReports' method");
			}
			Customer customer = getCustomerByCustId();
			String fileName = "School Student Payment Defaulters"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
			FontFactory.register(fontPath);
			getResponse().setContentType(pDFGenerator.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
			pDFGenerator.createDocumentJasper();
			pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
			PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
			pDFGenerator.getPdfWriter().setPageEvent(phfmj);
			phfmj = null;
			pDFGenerator.getDocument().open();
			// creating pDF page event to set header and Footer to document
			PdfPTable mainTable = new PdfPTable(1);
			mainTable.setWidthPercentage(100);
			mainTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			PdfPTable defaultersHeaderReport = new PdfPTable(8);
			defaultersHeaderReport.setWidthPercentage(100);
			int[] widths = { 14, 14, 17, 11, 18, 10, 6, 10 };
			defaultersHeaderReport.setWidths(widths);
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 8, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 8, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("School Class Fee Defaulters",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
			}
			List<StudyClass> studyClasseList=studentManager.getStudyClassesByClassNameClassId(Long.valueOf(selectedId), getUserCustId(), reqYear);
			if(!ObjectFunctions.isNullOrEmpty(studyClasseList)){
				for(StudyClass studyClass : studyClasseList){
				if(!ObjectFunctions.isNullOrEmpty(studyClass)){
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class Name: "+ studyClass.getClassAndSection().toUpperCase(), 8, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_LEFT, 5.0f));
					}
				}
			}
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasper("Roll No", "#000", fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasper("Student Name", "#000",fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasper("Parent Phone #", "#000",fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasper("Fee Type", "#000", fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasper("Due Date", "#000", fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasper("Fee Amount", "#000", fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasper("Balance", "#000", fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
			if (!ObjectFunctions.isNullOrEmpty(studentFeeAbove60List)) {
				List studentFeeDefaultersList = ConvertUtil.convertSetToList(studentFeeAbove60List);
				for (Object obj : studentFeeDefaultersList) {
					ViewStudentClassFeePaymentDetails paymentDetails = (ViewStudentClassFeePaymentDetails) obj;
					if (!ObjectFunctions.isNullOrEmpty(paymentDetails)) {

						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8,fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8,fontPath));

						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8,fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8,fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasper(String.valueOf(paymentDetails.getRollNumber()), fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasper(paymentDetails.getFirstName(), fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasper(paymentDetails.getPhoneNumber(), fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasper(paymentDetails.getTermName(), fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasper(paymentDetails.getDueDateStr(), fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasper(String.valueOf(paymentDetails.getFeeAmount()), fontPath));
					}
					paymentDetails = null;
				}
			}
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
			mainTable.addCell(defaultersHeaderReport);
			pDFGenerator.getDocument().add(mainTable);
			pDFGenerator.getDocument().close();
			pDFGenerator = null;
			mainTable = null;
			defaultersHeaderReport = null;
		} catch (Exception ex) {
			log.debug("Entering 'generateAllSchoolStudentDefaultersDetails' catch Block");
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
		
	
	@Actions( { @Action(value = "ajaxStudentPaymentPdfReport", results = { @Result(location = "jasper/fee/feeReceipt.jasper", type = "jasper", name = "success", params = {"dataSource", "studentsFeeTypeList", "format", "PDF" }), 
			                                                               @Result(location = "jasper/fee/feesTermWiseReceipt.jasper", type = "jasper", name = "SUCCESSAll", params = {"dataSource", "studentsFeeTypeList", "format", "PDF" }) 
			}) })
	public String ajaxStudentPaymentPdfReport() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentPaymentPdfReport' method");
		}
		try {
			String pdf = getParamValue("pdfId");
			String spId = getParamValue("spId");
			//String termId = getParamValue("termId");
			String schoolTermIds = null;
			String invoiceNumber=null;
			String currentDate = getParamValue("createdDate");
			double disAmt=0;
			String disType="Discount Acmount";
			double totalAmountDue = 0;
			if(getTempId()!=0){
				invoiceNumber=String.valueOf(getTempId());
			}else {
				invoiceNumber=getParamValue("invoiceNumber");
			}
			ViewStudentClassFeePaymentDetails feeAmount ;
			setCustomer((Customer)adminManager.get(Customer.class, getUserCustId()));
			if(!ObjectFunctions.isNullOrEmpty(getCustomer())){
				setCustomerName(getCustomer().getOrganization());
				setAnyId(getCustomer().getOrganizationFullAddress());
				//setWebSiteUrl("http://localhost:8080/sms"+getCustomer().getCustomerLogo());
				setWebSiteUrl(getSession().getServletContext().getRealPath(getCustomer().getCustomerLogoPath()));
			}
			Student student=(Student)adminManager.get(Student.class, Long.valueOf(spId));
			if(!ObjectFunctions.isNullOrEmpty(student)){
				List<ViewStudentClassFeePaymentDetails> schoolFeeList=adminManager.getFeesPaymentListByStudentPaymentId("ViewStudentFeePaymentDetails",student.getId(),student.getClassNameClassId().getId(),getUserCustId(),Long.valueOf(getUserAcademicYearId()),currentDate,Constants.PAYMENT_STATUS,Long.valueOf(invoiceNumber));
				if(!ObjectFunctions.isNullOrEmpty(schoolFeeList)){
					for (Object schoolTermObject : schoolFeeList) {
						feeAmount = (ViewStudentClassFeePaymentDetails) schoolTermObject;
						if (!ObjectFunctions.isNullOrEmpty(feeAmount.getSchoolTermId())) {
							getAllUsersSet().add(feeAmount.getSchoolTermId());
						}
					}
				}
				setAnyTitle(student.getClassSection().getClassAndSection());
			}
			if(!ObjectFunctions.isNullOrEmpty(getAllUsersSet())){
				schoolTermIds= String.valueOf(getAllUsersSet());
			}else{
				schoolTermIds= getParamValue("termIds");
			}
			student=null;
			if (!ObjectFunctions.isNullOrEmpty(spId)) {
			if(!ObjectFunctions.isNullOrEmpty(schoolTermIds)){
            	String[] termIds=schoolTermIds.substring(1, schoolTermIds.length()-1).split(",");
            	if(!ObjectFunctions.isNullOrEmpty(termIds)){
            		for(String id:termIds){
        				if (!ObjectFunctions.isNullOrEmpty(studentsFeeTypeList)) {
        					for (Object fee : studentsFeeTypeList) {
        						feeAmount = (ViewStudentClassFeePaymentDetails) fee;
        						if(!ObjectFunctions.isNullOrEmpty(feeAmount)){
	        						StringBuffer ret = new StringBuffer(10);    
	        						if (!StringFunctions.isNullOrEmpty(feeAmount.getTermName())) {
	    				                ret.append(feeAmount.getTermName());
	    				                ret.append("(");
	    				            }
	    				            if (!StringFunctions.isNullOrEmpty(feeAmount.getFromMonthName())) {
	    				            	ret.append(feeAmount.getFromMonthName().substring(0, 3));
	    				            }
	    				            if (!StringFunctions.isNullOrEmpty(feeAmount.getToMonthName())) {
	    				            	ret.append(" - ");
	    				            	ret.append(feeAmount.getToMonthName().substring(0, 3));
	    				            	ret.append(" ) ");
	    				            }
	        				        feeAmount.setTermName(ret.toString());
	        						getStudentsFeeTypeList().add(feeAmount);
        						}
        						feeAmount=null;
        						fee=null;
        					}
        				}
        				setFooter("");
        				if (disAmt != 0)
        				{
        					setWishTitle(disType);
        					setFooter(String.valueOf(disAmt));
        				}
        				
        				setTotalAmount(totalAmountDue - disAmt);
        				id=null;
            		}
            		if ("pdf".equalsIgnoreCase(pdf)) {
        				getResponse().setHeader("Content-Disposition","attachment; filename=feesTermWiseReceipt" + StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN) , " ", "-") + ".pdf");
        			}
            		return "SUCCESSAll";
            	}
	            }else{
					if (!ObjectFunctions.isNullOrEmpty(getStudentsFeeTypeList())) {
						for (Object fee : getStudentsFeeTypeList()) {
							feeAmount = (ViewStudentClassFeePaymentDetails) fee;
						  }
					}
					setFooter("");
					if (disAmt != 0)
					{
						setWishTitle(disType);
						setFooter(String.valueOf(disAmt));
					}
					setTotalAmount(totalAmountDue - disAmt);
	            }
				if ("pdf".equalsIgnoreCase(pdf)) {
					getResponse().setHeader("Content-Disposition","attachment; filename=feesReceipt" + StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN) , " ", "-") + ".pdf");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
 * Date              	Name               Description
 * ========          	============       ==================
 * May 29th, 2014       Seshu		       In payment screen if user click on Save&Print option getting Row update exception.
/********************************************************************/	
	@Actions( { 
        @Action(value = "ajaxStudentPaymentAdmissionPdfFeeReport", results = {@Result(location = "../admin/reports/popupViewStudentAdmissionReciept.jsp", name = "success"),
                                                                              @Result(location = "../admin/reports/feeReciept/ajaxViewStudentFeeReciept.jsp", name = "feeReceiptForNigeria")}) })

    public String ajaxStudentPaymentPdfFeeReportPopup() throws URTUniversalException {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'ajaxStudentPaymentPdfFeeReportPopup' method");
    }
    StudentPayment studentPayment = null;
    Object[] totalConfiigureAmount=null;
    Object[] totalTransportConfiigureAmount=null;
	Object[] totalPaidAmount=null;
	Object[] totalTransportPaidAmount=null;
	double totalAmount=0;
	double paymentAmount=0;
	double discountAmount=0;
	double paymentConcessionAmount=0;
	Object[] paidAmount= null;
    try {
        AcademicYear academicYear = getCurrentAcademicYear();
        setAcademicYear(academicYear);
        if(getAcademicYearId() != getUserAcademicYearId() && getAcademicYearId() > 0){
            setAcademicYearId(getAcademicYearId()); 
        }else{
        	setAcademicYearId(getUserAcademicYearId());
        }
        String paybtn = getParamValue("downloadrecipt");
        String spId = getParamValue("spId");
        setAnyTitle(getParamValue("createdDate"));
        setAnyId(getParamValue("invoiceNumber"));
        setAlertSendType(getParamValue("invoiceString"));
        setPlTitle(getPlTitle()); // here get the fine amount in words from page
        SimpleDateFormat fm = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
        setReceiptGenarationDate(fm.format(new Date()));
        if(!StringFunctions.isNullOrEmpty(spId)){
	        setCustomer(getCustomerByCustId());
	        //Added By Siva for displaying country currency symbol
	        setCountry((Country)adminManager.get(Country.class, getCustomer().getAddress().getCountryId()));
	        setViewStudentClassDetails((ViewStudentClassDetails)adminManager.get(ViewStudentClassDetails.class,"studId="+spId+" and custId="+getUserCustId()+" and studDiscontinueDesc is null"));
	        if(ObjectFunctions.isNullOrEmpty(getViewStudentClassDetails())){
	        	setViewStudentClassDetails((ViewStudentClassDetails)adminManager.get(ViewStudentClassDetails.class,"studId="+spId+" and custId="+getUserCustId()));
	        }
	        if(!ObjectFunctions.isNullOrEmpty(getViewStudentClassDetails())){
	        	if("Y".equalsIgnoreCase(getCustomer().getShowTotalOrPaidAmount())){
	        		StringBuffer query1=new StringBuffer();
	        		StringBuffer query = new StringBuffer("studentId="+getViewStudentClassDetails().getStudId()+" and deleteStatus='"+Constants.NO_STRING+"' and paymentCommitFeeStatus='"+Constants.NO_STRING+"' ");
	        		StringBuffer queryInvoice = null;
	        		StringBuilder queryStr = new StringBuilder("select IFNULL(CONVERT(group_concat(schoolTermId), CHAR),0) as schoolTermId  from vw_studentFeePaymentDetails where custId=").append(getUserCustId()).append(" and academicYearId=").append(getViewStudentClassDetails().getAcademicYearId()).append(" and studentId=").append(getViewStudentClassDetails().getStudId());
					if (academicYear.getReceiptGenerationType().equalsIgnoreCase("A")){
						queryStr.append(" and invoiceNumber=" + getAnyId());
						query.append(" and invoiceNumber=" + getAnyId());
						queryInvoice = new StringBuffer("select IFNULL(CONVERT(group_concat(invoiceNumber), CHAR),0) as schoolTermId  from vw_studentFeePaymentDetails where custId=").append(getUserCustId()).append(" and academicYearId=").append(getViewStudentClassDetails().getAcademicYearId()).append(" and studentId=").append(getViewStudentClassDetails().getStudId());
						queryInvoice.append(" and invoiceNumber not in (" + getAnyId()).append(")");
						studentPayment=(StudentPayment) adminManager.get(StudentPayment.class, "studentId="+ getViewStudentClassDetails().getStudId()+ " and deleteStatus='"+ Constants.NO_STRING+ "' and invoiceNumber="+ getAnyId());
					}else{
						queryStr.append(" and invoiceString='"+ getAlertSendType() + "'");
						query.append(" and invoiceString='"+ getAlertSendType() + "'");
						queryInvoice = new StringBuffer("select IFNULL(CONVERT(group_concat(invoiceString), CHAR),0) as schoolTermId  from vw_studentFeePaymentDetails where custId=").append(getUserCustId()).append(" and academicYearId=").append(getViewStudentClassDetails().getAcademicYearId()).append(" and studentId=").append(getViewStudentClassDetails().getStudId());
						queryInvoice.append(" and invoiceString not in ('"+ getAlertSendType() + "'").append(")");
						studentPayment=(StudentPayment) adminManager.get(StudentPayment.class, "studentId="+ getViewStudentClassDetails().getStudId()+ " and deleteStatus='"+ Constants.NO_STRING+ "' and invoiceString='"+ getAlertSendType()+ "' ");
					}
					List<String> invoiceTermIds = adminManager.getAll(queryStr.toString());
					String tempquery = query.toString();
					query.append(" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+") group by schoolTermId,feeId");
					
					queryInvoice.append(" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+")");

					setStudentPaymentList(adminManager.getAll(ViewStudentFeePaymentDetails.class,query.toString()));
					
					//Siva: The below list is to display the transport fee list along with term fee
					query1.append(tempquery);
					//query1.append(" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+") group by schoolTermId,transportFeeId");
					query1.append(" group by schoolTermId,transportFeeId");
					setStudentTransportTermsList(adminManager.getAll(ViewStudentTransportFeePaymentDetails.class,query1.toString()));
					//System.out.println("studentTransportTermsList::"+getStudentTransportTermsList().size());
					
    				List<String> invoiceNumbers = adminManager.getAll(queryInvoice.toString());
    				//Siva: Below code is to find school fee setting using schooltermId. If non term displaying "Paid on" in receipt. 
    				if (academicYear.getReceiptGenerationType().equalsIgnoreCase("A"))
    					setClassFeeCountList(adminManager.getAll(StudentPayment.class, "custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and invoiceNumber in ("+StringUtil.convertListToString(invoiceNumbers)+") and concessionStatus='N' AND lastUpdatedDate <= "+"'"+studentPayment.getLastUpdatedDate()+"'"));
    				else
    					setClassFeeCountList(adminManager.getAll(StudentPayment.class, "custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and invoiceString in ("+StringUtil.convertListToString(invoiceNumbers)+") and concessionStatus='N' AND lastUpdatedDate <= "+"'"+studentPayment.getLastUpdatedDate()+"'"));
    				List<String> feeSettingIds = adminManager.getAll("SELECT IFNULL(CONVERT(group_concat(id), CHAR),0) as feesettingId FROM schoolFeeSetting where id in(select feeSettingId FROM schoolTerms where id in("+invoiceTermIds.get(0)+"))");
    				if(!ObjectFunctions.isNullOrEmpty(feeSettingIds)){
	    				if(feeSettingIds.get(0).equalsIgnoreCase("1")){
	    					setOnlyNonTermFee(true);
	    				}
    				}
    				//Siva: showing only invoice total balance amount instead of showing latest balance
    				if(!ObjectFunctions.isNullOrEmpty(studentPayment) && !ObjectFunctions.isNullOrEmpty(studentPayment.getTermwiseTotalBalanceAmount()) && studentPayment.getTermwiseTotalBalanceAmount() >= 0 
              				&& !ObjectFunctions.isNullOrEmpty(studentPayment.getTotalBalanceAmount()) && studentPayment.getTotalBalanceAmount() >= 0) {
              			setPlSubTopic(String.valueOf(studentPayment.getTermwiseTotalBalanceAmount()));
              			setTempString3(String.valueOf(studentPayment.getTotalBalanceAmount()));
              		}
              		else{
	                    totalConfiigureAmount=adminManager.get("select ifNULL(sum(feeAmount),0) as feeAmount,feeId from vw_studentClassFees where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and description is null");
		               	 if(!ObjectFunctions.isNullOrEmpty(totalConfiigureAmount)){
		               		totalPaidAmount= adminManager.get("select IFNULL(sum(paymentAmount),0) as paymentAmount,IFNULL(sum(discountAmount),0) as discountAmount,IFNULL(sum(paymentConcessionAmount),0) as paymentConcessionAmount,id from vw_studentFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+"  and description is null");
							totalTransportPaidAmount = adminManager.get("select IFNULL(sum(IFNULL(paymentAmount,0)),0) as paymentAmount,IFNULL(sum(IFNULL(discountAmount,0)),0) as discountAmount,IFNULL(sum(IFNULL(paymentConcessionAmount,0)),0) as paymentConcessionAmount,id,termwiseTotalBalanceAmount,totalBalanceAmount from vw_studentTransportFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and description is null");
    						paymentAmount=(Double.valueOf(totalPaidAmount[0].toString())+Double.valueOf(totalTransportPaidAmount[0].toString()));
    						discountAmount=(Double.valueOf(totalPaidAmount[1].toString())+Double.valueOf(totalTransportPaidAmount[1].toString()));
                      		paymentConcessionAmount=(Double.valueOf(totalPaidAmount[2].toString())+Double.valueOf(totalTransportPaidAmount[2].toString()));
                      		setTempString3(String.valueOf(Double.valueOf(totalConfiigureAmount[0].toString())-(paymentAmount+discountAmount+paymentConcessionAmount)));
		               	 }
		               	 
						Object[] invoiceTermTotalAmount = adminManager.get("select ifNULL(sum(feeAmount),0) as feeAmount,feeId from vw_studentClassFees where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+") and description is null");
						if(!ObjectFunctions.isNullOrEmpty(invoiceTermTotalAmount)){
							Object[]  totalTermPaidAmount= adminManager.get("select IFNULL(sum(paymentAmount),0) as paymentAmount,IFNULL(sum(discountAmount),0) as discountAmount,IFNULL(sum(paymentConcessionAmount),0) as paymentConcessionAmount,id,termwiseTotalBalanceAmount,totalBalanceAmount from vw_studentFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+")  and description is null");
							Object[]   totalTransportTermPaidAmount = adminManager.get("select IFNULL(sum(IFNULL(paymentAmount,0)),0) as paymentAmount,IFNULL(sum(IFNULL(discountAmount,0)),0) as discountAmount,IFNULL(sum(IFNULL(paymentConcessionAmount,0)),0) as paymentConcessionAmount,id,termwiseTotalBalanceAmount,totalBalanceAmount from vw_studentTransportFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+")  and description is null");
							paymentAmount=(Double.valueOf(totalTermPaidAmount[0].toString())+Double.valueOf(totalTransportTermPaidAmount[0].toString()));
    						discountAmount=(Double.valueOf(totalTermPaidAmount[1].toString())+Double.valueOf(totalTransportTermPaidAmount[1].toString()));
                      		paymentConcessionAmount=(Double.valueOf(totalTermPaidAmount[2].toString())+Double.valueOf(totalTransportTermPaidAmount[2].toString()));
							setPlSubTopic(String.valueOf(Double.valueOf(invoiceTermTotalAmount[0].toString())-(paymentAmount+discountAmount+paymentConcessionAmount)));
						}
              		}
					//end
        	}
	        else{
            	StringBuffer query = new StringBuffer("studentId="+getViewStudentClassDetails().getStudId()+" and deleteStatus='"+Constants.NO_STRING+"' and paymentCommitFeeStatus='"+Constants.NO_STRING+"' ");
    			if (getAcademicYearId() > 0 && !ObjectFunctions.isNullOrEmpty(getViewStudentClassDetails().getFutureAcademicClassSecId())) {
    				//studentId-anyid,ctrDateStr-todayDate,invoiceNumber-tempId,academicYearId-tempId1,feePaymentType,paidAmount-totalAmount,tempString,invoiceString-alertSendType
    					setStudentPaymentList(adminManager.getFutureAcademicYearStudentFeeReceipts(getViewStudentClassDetails().getStudId(),getAcademicYearId(), getAnyId()));
    			} else {
    				if (academicYear.getReceiptGenerationType().equalsIgnoreCase("A")) {
    					//query.append(" and invoiceNumber='" + getAnyId()+"'");
    					query.append(" and invoiceNumber="+getAnyId());
    					if (getUserCustId()==180 || getUserCustId()==109 || getUserCustId()==116) {
    						query.append(" group by feeTypeId");
    					} else {
    						query.append(" order by schoolTermId,feeTypeId");
    					}
    					studentPayment=(StudentPayment) adminManager.get(StudentPayment.class, "studentId="+ getViewStudentClassDetails().getStudId()+ " and deleteStatus='"+ Constants.NO_STRING+ "' and invoiceNumber="+ getAnyId());
    				} else {
    					query.append(" and invoiceString='"+ getAlertSendType() + "'");
    					if (getUserCustId()==180 || getUserCustId()==109 || getUserCustId()==116) {
    						query.append(" group by feeTypeId");
    					} else {
    						query.append(" order by schoolTermId,feeTypeId");
    					}
    					studentPayment=(StudentPayment) adminManager.get(StudentPayment.class, "studentId="+ getViewStudentClassDetails().getStudId()+ " and deleteStatus='"+ Constants.NO_STRING+ "' and invoiceString='"+ getAlertSendType()+ "' ");
    				}
    				setStudentPaymentList(adminManager.getAll(ViewStudentFeePaymentDetails.class,query.toString()));
    				setStudentTransportTermsList(adminManager.getAll(ViewStudentTransportFeePaymentDetails.class,query.toString()));
    			}
               
                /*@Ganesh Below code is to show fee balance amount */
                if (!ObjectFunctions.isNullOrEmpty(getViewStudentClassDetails().getFutureAcademicClassSecId())) {
    					//setStudentPaymentList(adminManager.getFutureAcademicYearStudentFeeReceipts(getViewStudentClassDetails().getStudId(),getAcademicYearId(), getAnyId()));
    	        		StringBuilder queryStr = new StringBuilder("select IFNULL(CONVERT(group_concat(schoolTermId), CHAR),0) as schoolTermId  from vw_studentsFutureAcademicFeeDetails where custId=").append(getUserCustId()).append(" and futureAcademicId=").append(getAcademicYearId()).append(" and studentId=").append(getViewStudentClassDetails().getStudId());
    					if (academicYear.getReceiptGenerationType().equalsIgnoreCase("A"))
    						queryStr.append(" and invoiceNumber=" + getAnyId());
    					else
    						queryStr.append(" and invoiceString='"+ getAlertSendType() + "'");
    					List<String> invoiceTermIds = adminManager.getAll(queryStr.toString());
    					Object[] invoiceTermTotalAmount = adminManager.get("select ifNULL(sum(feeAmount),0) as feeAmount,feeId from vw_futureYearStudentClassFees where custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+") and description is null");
    					if(!ObjectFunctions.isNullOrEmpty(invoiceTermTotalAmount)){
    						Object[]  totalTermPaidAmount= adminManager.get("select IFNULL(sum(paymentAmount),0) as paymentAmount,IFNULL(sum(discountAmount),0) as discountAmount,IFNULL(sum(concessionAmount),0) as concessionAmount,id,termwiseTotalBalanceAmount,totalBalanceAmount  from vw_studentsFutureAcademicFeeDetails where custId="+getUserCustId()+" and futureAcademicId="+getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+")  and description is null");
    						setPlSubTopic(String.valueOf(Double.valueOf(invoiceTermTotalAmount[0].toString())-(Double.valueOf(totalTermPaidAmount[0].toString())+Double.valueOf(totalTermPaidAmount[1].toString())+Double.valueOf(totalTermPaidAmount[2].toString()))));
    					}
    			}
                else{
                	//Siva: showing only invoice total balance amount instead of showing latest balance
              		if(!ObjectFunctions.isNullOrEmpty(studentPayment) && !ObjectFunctions.isNullOrEmpty(studentPayment.getTermwiseTotalBalanceAmount()) && studentPayment.getTermwiseTotalBalanceAmount() >= 0 
              				&& !ObjectFunctions.isNullOrEmpty(studentPayment.getTotalBalanceAmount()) && studentPayment.getTotalBalanceAmount() >= 0) {
              			setPlSubTopic(String.valueOf(studentPayment.getTermwiseTotalBalanceAmount()));
              			setTempString3(String.valueOf(studentPayment.getTotalBalanceAmount()));
              		}
              		else
              		{
                		StringBuilder queryStr = new StringBuilder("select IFNULL(CONVERT(group_concat(schoolTermId), CHAR),0) as schoolTermId  from vw_studentFeePaymentDetails where custId=").append(getUserCustId()).append(" and academicYearId=").append(getViewStudentClassDetails().getAcademicYearId()).append(" and studentId=").append(getViewStudentClassDetails().getStudId()).append(" and feeSettingId !=3");
    					StringBuilder queryTransportStr = new StringBuilder("select IFNULL(CONVERT(group_concat(schoolTermId), CHAR),0) as schoolTermId  from vw_studentTransportFeePaymentDetails where custId=").append(getUserCustId()).append(" and academicYearId=").append(getViewStudentClassDetails().getAcademicYearId()).append(" and studentId=").append(getViewStudentClassDetails().getStudId());
    					if (academicYear.getReceiptGenerationType().equalsIgnoreCase("A")){
    						queryStr.append(" and invoiceNumber=" + getAnyId());
    						queryTransportStr.append(" and invoiceNumber=" + getAnyId());
    					}else{
    						queryStr.append(" and invoiceString='"+ getAlertSendType() + "'");
    						queryTransportStr.append(" and invoiceString='"+ getAlertSendType() + "'");
    					}
    					List<String> invoiceTermIds = adminManager.getAll(queryStr.toString());
    					List<String> invoiceTransportTermIds = adminManager.getAll(queryTransportStr.toString());
    					if(!ObjectFunctions.isNullOrEmpty(invoiceTransportTermIds))
    						invoiceTermIds.addAll(invoiceTransportTermIds);
    					invoiceTransportTermIds=null;
    					Object[] invoiceTermTotalAmount = adminManager.get("select ifNULL(sum(feeAmount),0) as feeAmount,feeId from vw_studentClassFees where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+") and description is null");
    					Object[] invoiceTransTermTotalAmount =adminManager.get("select ifNULL(sum(feeAmount),0) as feeAmount,transportFeeId from vw_studentTransportFees where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+") and description is null");
    					if(!ObjectFunctions.isNullOrEmpty(invoiceTermTotalAmount)){
    						totalAmount=Double.valueOf(invoiceTermTotalAmount[0].toString());
                      		 if(!ObjectFunctions.isNullOrEmpty(invoiceTransTermTotalAmount)){
                      			totalAmount +=Double.valueOf(invoiceTransTermTotalAmount[0].toString());
                      		 }
    						Object[]  totalTermPaidAmount= adminManager.get("select IFNULL(sum(IFNULL(paymentAmount,0)),0) as paymentAmount,IFNULL(sum(IFNULL(discountAmount,0)),0) as discountAmount,IFNULL(sum(IFNULL(paymentConcessionAmount,0)),0) as paymentConcessionAmount,id,termwiseTotalBalanceAmount,totalBalanceAmount from vw_studentFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+")  and description is null");
    						Object[]   totalTransportTermPaidAmount = adminManager.get("select IFNULL(sum(IFNULL(paymentAmount,0)),0) as paymentAmount,IFNULL(sum(IFNULL(discountAmount,0)),0) as discountAmount,IFNULL(sum(IFNULL(paymentConcessionAmount,0)),0) as paymentConcessionAmount,id,termwiseTotalBalanceAmount,totalBalanceAmount from vw_studentTransportFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and schoolTermId in ("+StringUtil.convertListToString(invoiceTermIds)+")  and description is null");
    						paymentAmount=(Double.valueOf(totalTermPaidAmount[0].toString())+Double.valueOf(totalTransportTermPaidAmount[0].toString()));
    						discountAmount=(Double.valueOf(totalTermPaidAmount[1].toString())+Double.valueOf(totalTransportTermPaidAmount[1].toString()));
                      		paymentConcessionAmount=(Double.valueOf(totalTermPaidAmount[2].toString())+Double.valueOf(totalTransportTermPaidAmount[2].toString()));
                      		setPlSubTopic(String.valueOf(totalAmount-(paymentAmount+discountAmount+paymentConcessionAmount)));
                      		
                      		
                      		
                      		String sqlquery="select IFNULL(sum(IFNULL(feeAmount,0)),0) as feeAmount,IFNULL(sum(IFNULL(paymentAmount,0)),0) as paymentAmount,IFNULL(sum(IFNULL(discountAmount,0)),0) as discountAmount,IFNULL(sum(IFNULL(concessionAmount,0)),0) as concessionAmount "
        							+ "from vw_studentFeeParticularsPayment where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and deleteStatus='"+Constants.NO_STRING+"' and description is null and feeSettingId != 3";
        					String sqlTransQuery="select IFNULL((select SUM(IFNULL(feeAmount,0)) as feeAmount from vw_studentTransportFees where custId="+getUserCustId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and academicYearId="+getAcademicYearId()+"),0) as feeAmount,IFNULL(sum(IFNULL(paymentAmount,0)),0) as paymentAmount,IFNULL(sum(IFNULL(discountAmount,0)),0) as discountAmount,IFNULL((select SUM(IFNULL(concessionAmount,0)) as concessionAmount from vw_studentTransportFees where custId="+getUserCustId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and academicYearId="+getAcademicYearId()+"),0) as concessionAmount "
        							+ "from vw_studentTransportFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getViewStudentClassDetails().getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+"  and description is null and deleteStatus='"+Constants.NO_STRING+"' ";
                       		 
                       		 
                       		 totalPaidAmount= adminManager.get(sqlquery);
                       		 totalTransportPaidAmount = adminManager.get(sqlTransQuery);
                       		 totalAmount = (Double.valueOf(totalPaidAmount[0].toString())+Double.valueOf(totalTransportPaidAmount[0].toString()));
                       		 paymentAmount=(Double.valueOf(totalPaidAmount[1].toString())+Double.valueOf(totalTransportPaidAmount[1].toString()));
                       		 discountAmount=(Double.valueOf(totalPaidAmount[2].toString())+Double.valueOf(totalTransportPaidAmount[2].toString()));
                       		 paymentConcessionAmount=(Double.valueOf(totalPaidAmount[3].toString())+Double.valueOf(totalTransportPaidAmount[3].toString()));
                       		 setTempString3(String.valueOf(totalAmount-(paymentAmount+discountAmount+paymentConcessionAmount)));
                       	
    					}
    					invoiceTransTermTotalAmount=null;
    					invoiceTermTotalAmount=null;
              		}
    			}
        	}
	        	if(academicYear.getReceiptGenerationType().equalsIgnoreCase("A")){
	                    setAnyId(getAnyId());
	                    paidAmount=adminManager.get("select IFNULL(sp.paidAmount,0) as paidAmount,IFNULL(sp.discountAmount,0) as discountAmount,IFNULL(ep.excessAmount,0) as excessAmount,sp.id,sp.discountDesc,sum(uep.excessAmount) as usedExcessAmount,sp.desktopReceiptNumber  from studentPayment sp LEFT JOIN excessPayment ep on (sp.id=ep.paymentId) LEFT JOIN excessPayment uep on (sp.id=uep.usedPaymentId) where sp.custId="+getUserCustId()+" and sp.invoiceNumber="+getAnyId()+" and sp.studentId="+getViewStudentClassDetails().getStudId());
	            }else 
	                   paidAmount=adminManager.get("select IFNULL(sp.paidAmount,0) as paidAmount,IFNULL(sp.discountAmount,0) as discountAmount,IFNULL(ep.excessAmount,0) as excessAmount,sp.id,sp.discountDesc,sum(uep.excessAmount) as usedExcessAmount,sp.invoiceString  from studentPayment sp LEFT JOIN excessPayment ep on (sp.id=ep.paymentId) LEFT JOIN excessPayment uep on (sp.id=uep.usedPaymentId) where sp.custId="+getUserCustId()+" and sp.invoiceString='"+getAlertSendType()+"' and sp.studentId="+getViewStudentClassDetails().getStudId());
	                
                if(!ObjectFunctions.isNullOrEmpty(paidAmount)){
                   
                    if (Double.valueOf(paidAmount[1].toString()) != 0)
                        setThirtyTotalAmount(Double.valueOf(paidAmount[1].toString()));
                    if(getPaymentAmount() >0)
                        setTotalAmount(Double.valueOf(paidAmount[0].toString())+getPaymentAmount());
                    else{
                        if(getUserCustId()==180 || getUserCustId()==109 || getUserCustId()==116){
                            String[] amountStringTokens=paidAmount[0].toString().split(Pattern.quote("."));
                            if(!ObjectFunctions.isNullOrEmpty(amountStringTokens)){
                                setRoomId(amountStringTokens[0]);
                                setEventId(amountStringTokens[1]);
                            }
                        }
                        else
                            setTotalAmount(Double.valueOf(paidAmount[0].toString()));
                    }
                    if(!ObjectFunctions.isNullOrEmpty(paidAmount[4]))
                        setQueryString(paidAmount[4].toString()); //this is stored to discount reason desc
                    if(!ObjectFunctions.isNullOrEmpty(paidAmount[5])){
                        if(Double.valueOf(paidAmount[5].toString()) !=0)
                            setDescription(paidAmount[5].toString());
                    }
                    // if user use desk top payment we have to show desktop invoice number
                    if(academicYear.getReceiptGenerationType().equalsIgnoreCase("A")){
                        if(!ObjectFunctions.isNullOrEmpty(paidAmount[6])){
                            setAnyId(paidAmount[6].toString());
                        }
                    }else{
                        if(!ObjectFunctions.isNullOrEmpty(paidAmount[6])){
                            setAlertSendType(paidAmount[6].toString());
                        }
                    }
                    paidAmount=null;
                    if(!ObjectFunctions.isNullOrEmpty(studentPayment)){
                    	  setPaymentAmount(studentPayment.getFineAmount());
                    	  Date paymentDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,studentPayment.getPaymentDate()));
  						  Date paymentCreatedDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,studentPayment.getCreatedDate()));
  						  if(paymentDate.compareTo(paymentCreatedDate)==0){
  							  	SimpleDateFormat sfm= new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
  								setAnyTitle(sfm.format(studentPayment.getCreatedDate()));
  						  }
                    	if(studentPayment.getId()>0){
                			Object[] excessAmt = adminManager.get("select sum(excessAmount),status from excessPayment where paymentId="+studentPayment.getId());
            				if(!ObjectFunctions.isNullOrEmpty(excessAmt) && !ObjectFunctions.isNullOrEmpty(excessAmt[0])){
            					setTempString1(excessAmt[0].toString());
            				}
            				
            				Object[] excesUsedsAmt = adminManager.get("select sum(excessAmount),status from excessPayment where usedPaymentId="+studentPayment.getId());
            				if(!ObjectFunctions.isNullOrEmpty(excesUsedsAmt) && !ObjectFunctions.isNullOrEmpty(excesUsedsAmt[0])){
            					setTempString2(String.valueOf((Double.valueOf(excesUsedsAmt[0].toString()) - Double.valueOf(ObjectFunctions.isNullOrEmpty(excessAmt[0])? "0": excessAmt[0].toString()))));
            					setDescription(getTempString2());
            				}
                		}
                    }
                }
        	
        	}
        }
        if(!ObjectFunctions.isNullOrEmpty(getCustomer()) && !ObjectFunctions.isNullOrEmpty(getCustomer().getFeeReceiptModel()) && getCustomer().getFeeReceiptModel().equalsIgnoreCase(Constants.A_FOUR)){
        	setStudentSize((getStudentPaymentList().size()+getStudentTransportTermsList().size()));
        }
        if(!"download".equalsIgnoreCase(paybtn)){
            Student student = (Student) adminManager.get(Student.class, getViewStudentClassDetails().getStudId());
            prepareStudentSchoolFeeSettingList(student);
            if(academicYear.getReceiptGenerationType().equalsIgnoreCase("A"))
                ajaxGenerateFeeReceiptPDFReport(getViewStudentClassDetails(),getStudentPaymentList(),getTotalAmount(),studentPayment,getTempString(),getCustomer(),academicYear,student,getStudentTransportTermsList());
            else
                ajaxGenerateFeeReceiptPDFReport(getViewStudentClassDetails(),getStudentPaymentList(),getTotalAmount(),studentPayment,getTempString(),getCustomer(),academicYear,student,getStudentTransportTermsList());
        }
        if(getUserCustId()==180 || getUserCustId()==109 || getUserCustId()==116){
        	StringBuffer feeTypeStr = new StringBuffer();
        	int i=1;
        	if(!ObjectFunctions.isNullOrEmpty(getStudentPaymentList())){
        		for(Object obj : getStudentPaymentList()){
        			ViewStudentFeePaymentDetails feePaymentDetails = (ViewStudentFeePaymentDetails)obj;
        			feeTypeStr.append(feePaymentDetails.getFeeType());
        			if(i!=getStudentPaymentList().size()){
        				feeTypeStr.append(",");
        			}
        			i++;
        		}
        		setQueryString(feeTypeStr.toString());
        	}
            return "feeReceiptForNigeria";
        }
    } catch (Exception ex) {
        ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
        JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
    }
    finally{
    	studentPayment=null;
    }
    return SUCCESS;
    }
	@Actions( { @Action(value = "ajaxStudentPaymentPdfFeeReport", results = {@Result(location = "../admin/reports/printAllStudentDetailReceipts.jsp", name = "success")}) })
	public String ajaxStudentPaymentPdfFeeReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentPaymentPdfFeeReport' method");
		}
		try {
			long disAmt=0;
			String disType="Discount Amount";
			long totalAmountDue = 0;
			long totalPaidAmount = 0;
			setCustomer((Customer)adminManager.get(Customer.class, getUserCustId()));
			 if(!StringFunctions.isNullOrEmptyNoTrim(getParamValue("selectedClassIds").trim())){
				String[] ids=getParamValue("selectedClassIds").split("~");
				if(!ObjectFunctions.isNullOrEmpty(ids)){
					Student student=null;
					if(ids.length>0){
						for (String token : ids) {
							if(!StringFunctions.isNullOrEmpty(token)){	
								String[] stringTokens=token.split(",");
								if(!ObjectFunctions.isNullOrEmpty(stringTokens)){
									String studentId=stringTokens[0];
									String paymentDateStr=stringTokens[1];
									String invoiceNumber=stringTokens[2];
									setAnyTitle(paymentDateStr);
									if(!StringFunctions.isNullOrEmpty(studentId)){
										student = adminManager.getStudentByCustIdAndStudentIdAndStatus(Long.valueOf(studentId), getUserCustId(), Constants.YES_STRING,getUserAcademicYearId());
										setStudentPaymentList(adminManager.getAll(ViewStudentFeePaymentDetails.class, " studentId="+student.getId()+" and deleteStatus='"+Constants.NO_STRING+"' and invoiceNumber="+Long.valueOf(invoiceNumber)));
										if (!ObjectFunctions.isNullOrEmpty(getStudentPaymentList())) {
											Student student2=new Student();
											student2.setRollNumber(student.getRollNumber());
											student2.setClassSection(student.getClassSection());
											student2.setDescription(student.getStudentName());
											student2.setRegisterNumber(student.getAccount().getPerson().getMobileNumber());
											//student2.setFeeDetailsList(getStudentPaymentList());
											student2.setTempString(invoiceNumber); 
											ViewStudentFeePaymentDetails feeAmount ;
											for (Object fee : getStudentPaymentList()) {
												feeAmount = (ViewStudentFeePaymentDetails) fee;
												totalAmountDue += Double.valueOf(feeAmount.getPaymentAmount()+feeAmount.getDiscountAmount());
												totalPaidAmount +=feeAmount.getPaymentAmount();
												if (feeAmount.getDiscountAmount() > 0 )
												{
													disAmt += feeAmount.getDiscountAmount();
												}
											}
											if(disAmt !=0){
												student2.setCustId(disAmt);
												setWishTitle(disType);
												disAmt=0;
											}
											student2.setCategoryId(totalAmountDue);
											student2.setCategoryId(totalPaidAmount);
											totalAmountDue=0;
											totalPaidAmount=0;
											getObjectList().add(student2);
											student2=null;
											student=null;
											setStudentPaymentList(null);
										}
									}	
								}
							}
						}
					}
				}
			 }
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "printViewSchoolCommunityDetails", results = {}) })
	public String printViewSchoolCommunityDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'printViewSchoolCommunityDetails' method");
			}
			if (getUserAcademicYearId()!=0) {
				String fileName = null;
				int classesCount = adminManager.getCount("class","custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
				List<ClassName> classNameList = adminManager.getAll(ClassName.class," id in"+getSelectedId());
				int selectedClassSize = classNameList.size();
				if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
					 fileName = "HostelWiseCommunityMatrix";
				}else{
					 fileName = "SchoolWiseCommunityMatrix";
				}
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					if(!ObjectFunctions.isNullOrEmpty(classNameList)){
						setCastSettingList(adminManager.getAllByCustId("CastSettings", getUserCustId(),0));
						 fileName = "Community Information"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
						String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
						FontFactory.register(fontPath);
						
						// creating pDF page event to set header and Footer to document
						PdfPTable mainTable = new PdfPTable(1);
						mainTable.setWidthPercentage(100);
						mainTable.setSplitLate(false);
						mainTable.getDefaultCell().setBorder(Rectangle.BOX);
						int size = getCastSettingList().size();
						int width =size*2+5;
						PdfPTable defaultersHeaderReport = new PdfPTable(width);
						defaultersHeaderReport.setWidthPercentage(100);
						PdfPTable headerReport = new PdfPTable(100);
						headerReport.setWidthPercentage(100);
						if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
							hostelOrganizationDetailsForPdf(fontPath,headerReport,100);
							if(classesCount==selectedClassSize)
							headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("HOSTEL WIDE COMMUNITY MATRIX ",100, fontPath));
						}else{
							organizationDetailsForPdf(fontPath,headerReport,100 );
							if(classesCount==selectedClassSize)
							headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("SCHOOL WIDE COMMUNITY MATRIX ",100, fontPath));
						}
						if(classesCount>selectedClassSize )
							headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("CLASSES WISE COMMUNITY MATRIX ",100, fontPath));
						mainTable.addCell(headerReport);
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Class", "#000", fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("#Sections", "#000", fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Total Students", "#000", fontPath));
						String[] genders = { "Male", "Female"};
						//Genders 
						genarateGenders(defaultersHeaderReport,fontPath,size);
						
						//CastSettings 
						genaratecastsettings(defaultersHeaderReport,getCastSettingList(),genders,fontPath);
						int gendersSize=getCastSettingList().size()+1;
						int noOfSections =0;
						for(ClassName className:classNameList){
							Object[] genderCastCount = adminManager.getAllStudentsByClassNameAndCastName(getUserCustId(),getUserAcademicYearId(),castSettingList,className.getId(),getUsername());
							if(!ObjectFunctions.isNullOrEmpty(genderCastCount)){
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(className.getClassName(), "#000", fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(className.getNoOfSections()), "#000", fontPath));
								 noOfSections += className.getNoOfSections();
									for (int j = 0; j < genderCastCount.length; j++) {
										if(!ObjectFunctions.isNullOrEmpty(genderCastCount[j])){
											if(j==0)
											    defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(genderCastCount[j].toString(), "#000", fontPath));
											else{
												if(j > gendersSize){
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassWithColor(genderCastCount[j].toString(), "#000", fontPath));
												}else{
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperWithBorder(genderCastCount[j].toString(), "#000", fontPath));
												}
											}
										}else {
											if(j > gendersSize){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassWithColor("0", "#000", fontPath));
											}else{
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperWithBorder("0", "#000", fontPath));
											}
										}
									}
								genderCastCount=null;
							}
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Grand Total:", "#000", fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(noOfSections), "#000", fontPath));
						Object[] castWiseCount = adminManager.getAllStudentsCountByCastWise(getUserCustId(),getUserAcademicYearId(),getCastSettingList(),getUsername(),getSelectedId());
						if(!ObjectFunctions.isNullOrEmpty(castWiseCount)){
							for (int l = 0; l < castWiseCount.length; l++) {
								if (!ObjectFunctions.isNullOrEmpty(castWiseCount[l])) {
									if(l==0)
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(castWiseCount[l].toString(), "#000", fontPath));
									else{
										if(l > gendersSize){
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassWithColor(castWiseCount[l].toString(), "#000", fontPath));
										}else{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperWithBorder(castWiseCount[l].toString(), "#000", fontPath));	
										}
									}
								}else {
									if(l > gendersSize){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassWithColor("0", "#000", fontPath));
									}else{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperWithBorder("0", "#000", fontPath));
									}
								}
							}
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAlign("Signature of the Headmaster",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						mainTable.addCell(defaultersHeaderReport);
						pDFGenerator.getDocument().add(mainTable);
						pDFGenerator.getDocument().close();
						pDFGenerator = null;
						mainTable = null;
						defaultersHeaderReport = null;
					}
					phfmj = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
/********************************************************************
   * Date              Name               Description
   * ============      =======		    ==================
   * April 15, 2013    Cvs		    	Modularization  below method  disable the staff community summary.
   * August 26, 2013   Seshu			Removed validation for getAllClassNames() method because in this we are validating.
  /********************************************************************/
	@Actions( {
			@Action(value = "ajaxDoComunityDetails", results = { @Result(location = "../admin/reports/ajaxSelectComunityReports.jsp", name = "success") }),
			@Action(value = "ajaxDoReligionWiseDetails", results = { @Result(location = "../admin/reports/ajaxDoSelectReligionReports.jsp", name = "success") }),
			@Action(value = "ajaxClassWideTc", results = { @Result(location = "../admin/reports/ajaxClassWideTc.jsp", name = "success") }),
			@Action(value = "ajaxCommunityAndCasteWiseDetails", results = { @Result(location = "../admin/reports/ajaxCommunityAndCasteWiseDetails.jsp", name = "success") })
			})
	public String ajaxDoComunityDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoComunityDetails' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			if (!StringFunctions.isNullOrEmpty(getTempString())&& getPlTitle().equalsIgnoreCase("ReligionDetails")) {
				setAnyId(getAnyId());
				setTempString(getTempString());
				setTempList(adminManager.getAllCommonTypesByCustIdandType(getUserCustId(), "RELIGION"));
			}
			checkClassHavingStudentsOrNot(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
			setCastSettingList(adminManager.getAll(CastSettings.class," custId=" + getUserCustId()));
			setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(), getUserAcademicYearId(),null));
			setAnyTitle("ClassWiseCommunityDetails");
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxClassAndComunityWiseMarks", results = { @Result(location = "../admin/reports/ajaxClassAndComunityWiseMarks.jsp", name = "success") }) })
	public String ajaxClassAndComunityWiseMarks() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxClassAndComunityWiseMarks' method");
		}
		try {
				if (!StringFunctions.isNullOrEmpty(getTempString())&& getPlTitle().equalsIgnoreCase("ReligionWiseMarks")) {
					setAnyId(getAnyId());
					setTempString(getTempString());
					setTempList(adminManager.getAllCommonTypesByCustIdandType(getUserCustId(), "RELIGION"));
				}
			if (!StringFunctions.isNullOrEmpty(getTempString())&& getPlTitle().equalsIgnoreCase("classAndCommunityWise")) {
				setTempList(adminManager.getAll(CastSettings.class, " custId="+getUserCustId()));
			}
			checkStudyClassHavingStudentsOrNot();	
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxDoSelectStudyClasses", results = { @Result(location = "../admin/reports/ajaxDoSelectReligionReports.jsp", name = "success")}), 
		@Action(value = "ajaxDoSelectExamSchedules", results = { @Result(location = "../admin/reports/ajaxDoSelectExamSchedulesForStudent.jsp", name = "success"),
				                                                 @Result(location = "../admin/reports/ajaxDoViewParentChildrens.jsp", name = "children") }) }) 
	public String ajaxDoSelectStudyClasses() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoComunityDetails' method");
		}
		try {
			if(getUser().isSchoolStudent() || getUser().isParent() && !getUser().isSchoolAdmin()){
				if(getUser().isParent()){
					String clause = " accountId="+getUser().getSelectedStudentId()+" and academicYearId="+getUserAcademicYearId()+" and description is null";
					setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, clause));
					if (!StringFunctions.isNullOrEmpty(getTempString()) && getPlTitle().equalsIgnoreCase("Exam Schedules")) {
						setExamTypeList(adminManager.getAllByCustId("ExamTypes", getUserCustId(),getUserAcademicYearId()));
					}
					return "children";
				}else{
					if(getUser().getId()!=0){
						Student student = studentManager.getStudentByAccountId(getUser().getId(), getUserAcademicYearId(),getUserCustId());
						if(!ObjectFunctions.isNullOrEmpty(student)){
							StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, " id="+student.getClassSectionId());	
							if(!ObjectFunctions.isNullOrEmpty(studyClass)){
							getStudyClassList().add(studyClass);
							}
							List<Object[]> examSchedulesList = adminManager.getAll("select examTypeId,id from examSchedules where custId =" + getUserCustId() +" and academicYearId = "+ getUserAcademicYearId()+" and classSectionId="+student.getClassSectionId()+" and endDate >='"+DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN, new Date())+"' group by classSectionId,examTypeId order by startDate ASC LIMIT 1");
							if(!ObjectFunctions.isNullOrEmpty(examSchedulesList)){
								StringBuffer examTypeId = new StringBuffer("(");
								for(Object[] obj : examSchedulesList){
									if((!ObjectFunctions.isNullOrEmpty(obj)) && !ObjectFunctions.isNullOrEmpty(obj[0])){
										examTypeId.append(Long.valueOf(obj[0].toString()));
										examTypeId.append(",");
									}
								}
								examTypeId.append("0)");
								setExamTypeList(adminManager.getAll(ExamTypes.class, "id in "+examTypeId.toString()));
								examSchedulesList = null;
							}
						}
						student=null;
					}
				}
			}else{
				if (!StringFunctions.isNullOrEmpty(getTempString())) {
					if(getUser().isSchoolTeacher()){
						Staff staff = (Staff)(adminManager.get(Staff.class,"custId=" + getUserCustId() + " and academicYearId<="+ getUserAcademicYearId()+" and accountId="+getUser().getId()));
						if(!ObjectFunctions.isNullOrEmpty(staff)){
							List<ClassTeacher> teacherClasses = adminManager.getAll(ClassTeacher.class,"custId=" + getUserCustId() + " and academicYearId="+ getUserAcademicYearId()+" and teacherId="+staff.getId());
							if(!ObjectFunctions.isNullOrEmpty(teacherClasses)){
								StringBuffer buffer = new StringBuffer();
								buffer.append("(");
								for(ClassTeacher studyClassId:teacherClasses){
									buffer.append(studyClassId.getStudyClassId());
									buffer.append(",");
								}
								buffer.append("0)");
								setStudyClassList(adminManager.getAll(StudyClass.class,"custId=" + getUserCustId() + " and academicYearId="+ getUserAcademicYearId()+" and filledSeats > 0"+" and id in"+buffer.toString()));
								 Collections.sort(getStudyClassList());
								 List examTypeList=adminManager.getUsersStartAndEndDateExamSchedulesDetails(getUser().getId(),getUserAcademicYearId(),null,true,0,0);
								 if(!ObjectFunctions.isNullOrEmpty(examTypeList)){
									 setExamTypeList(examTypeList);
								}
								 examTypeList = null;
							 }
						}
					}
					if(!getUser().isSchoolTeacher()){
					    setExamTypeList(adminManager.getAllByCustId("ExamTypes", getUserCustId(),getUserAcademicYearId()));
					    checkStudyClassHavingStudentsOrNot();
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxPrintStudentSchoolWideCommunityDetails", results = {}) })
	public void ajaxPrintStudentSchoolWideCommunityDetails()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrintStudentSchoolWideCommunityDetails' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				if(StringFunctions.isNotNullOrEmpty(getTempString()) && StringFunctions.isNotNullOrEmpty(getAnyTitle()) && StringFunctions.isNotNullOrEmpty(getAnyId())){
					String fileName = "StudentSchoolWideComunityDetails_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					ExcelView excelView = new ExcelView();
					WritableCellFormat cellFormat =null;
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					WritableFont font = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
					setClassList(adminManager.getAll(ClassName.class," id in"+getAnyId()));
					setCastSettingList(adminManager.getAll(CastSettings.class," id in"+getAnyTitle()));
					
					WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
					font1.setColour(Colour.WHITE);
					cellFormat=ExcelView.getUserFormattedCell(font1, Colour.GREEN, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
					cellFormat=ExcelView.getUserFormattedCell(font, Colour.AQUA, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
			    	if(!ObjectFunctions.isNullOrEmpty(getClassList())){		
			    		Collections.sort(getClassList());
			    		for(ClassName className:getClassList()){
			    			int rowCount=8;
			    			int studentCount=1;
			    			excelView.setWorkSheetName(className.getClassName()+" class");
			    			excelView.createWorkSheet(0);
			    			excelView.setDefaultFormat(excelView.getArial10format());
			    			schoolAddresDetailsOnlyForExcel(excelView,18);
					    	excelView.getWs().removeRow(0);
			    			
					    	excelView.getWs().setColumnView(0,6);
							excelView.getWs().setColumnView(1,13);
							excelView.getWs().setColumnView(2,6);
							excelView.getWs().setColumnView(3,25);
							excelView.getWs().setColumnView(4,15);
							excelView.getWs().setColumnView(5,8);
							excelView.getWs().setColumnView(6,25);
							excelView.getWs().setColumnView(7,20);
							excelView.getWs().setColumnView(8,20);
							excelView.getWs().setColumnView(9,20);
							excelView.getWs().setColumnView(10,10);
							excelView.getWs().setColumnView(11,10);
							excelView.getWs().setColumnView(12,40);
							excelView.getWs().setColumnView(13,15);
							excelView.getWs().setColumnView(14,15);
							excelView.getWs().setColumnView(15,14);
							excelView.getWs().setColumnView(16,15);
							excelView.getWs().setColumnView(17,10);
							excelView.getWs().mergeCells(0, 6, 18, 6);
							excelView.getWs().addCell(new Label(0,6, className.getClassName().toUpperCase()+" - CLASS WISE COMMUNITY DETAILS", cellFormat));
			    		 	excelView.getWs().addCell(new Label(0,7, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(1,7, "#Admission", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(2,7, "#Roll", excelView.getUsermore10BoldformatGreenBgClr()));
							excelView.getWs().addCell(new Label(3,7, "Student Name", excelView.getUsermore10BoldformatGreenBgClr()));
							excelView.getWs().addCell(new Label(4,7, "Class & Section", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(5,7, "Gender", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(6,7, "Father Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(7,7, "Father Occupation", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(8,7, "Mother Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(9,7, "Mother Occupation", excelView.getUsermore10BoldformatGreenBgClr()));		    		    	
					    	excelView.getWs().addCell(new Label(10,7, "D.O.B", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(11,7, "D.O.J", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(12,7, "Address", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(13,7, "State", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(14,7, "City", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(15,7, "Phone Number", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(16,7, "Caste", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(17,7, "Income", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(18,7, "Religion", excelView.getUsermore10BoldformatGreenBgClr()));
			    			if(!ObjectFunctions.isNullOrEmpty(getCastSettingList())){
			    				for(CastSettings castSettings: getCastSettingList()){
			    					excelView.getWs().mergeCells(0, rowCount, 18, rowCount);
			    					cellFormat=ExcelView.getUserFormattedCell(font, Colour.AQUA, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
			    					excelView.getWs().addCell(new Label(0,rowCount, castSettings.getCastName()+" Community", cellFormat));
			    					
			    					if(castSettings.getCastName().equalsIgnoreCase("Other"))
			    					    setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId()+" and classNameClassId="+className.getId()+" and castId in ("+castSettings.getId()+",0) and academicYearId="+getUserAcademicYearId()+" and gender='"+castSettings.getCastName()+"' and description is null order by fullName"));
			    					else
			    					   setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId()+" and classNameClassId="+className.getId()+" and castId="+castSettings.getId()+" and academicYearId="+getUserAcademicYearId()+" and gender in"+getTempString()+" and description is null order by fullName"));
			    					
			    					rowCount+=1;
			    					if(!ObjectFunctions.isNullOrEmpty(getViewStudentPersonAccountDetailsList())){
			    						for(ViewStudentPersonAccountDetails personAccountDetails:getViewStudentPersonAccountDetailsList()){
			    							excelView.getWs().addCell(new Label(0,rowCount, String.valueOf(studentCount), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(1,rowCount, personAccountDetails.getAdmissionNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(2,rowCount, String.valueOf(personAccountDetails.getRollNumber()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(3,rowCount, personAccountDetails.getPersonFullName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(4,rowCount, personAccountDetails.getClassAndSection(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(5,rowCount, personAccountDetails.getGender(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(6,rowCount, personAccountDetails.getFatherName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(7,rowCount, personAccountDetails.getFatherOccupation(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(8,rowCount, personAccountDetails.getMotherName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(9,rowCount, personAccountDetails.getMotherOccupation(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(10,rowCount, personAccountDetails.getDateOfBirthStr(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(11,rowCount, personAccountDetails.getStudentDateOfJoing(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(12,rowCount, personAccountDetails.getStreetName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(13,rowCount, personAccountDetails.getStateName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(14,rowCount, personAccountDetails.getCity(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(15,rowCount, personAccountDetails.getMobileNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(16,rowCount, String.valueOf(personAccountDetails.getSubCastName()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(17,rowCount, String.valueOf(personAccountDetails.getAnnualIncome()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(18,rowCount, personAccountDetails.getReligion(), excelView.getDefaultFormat()));
			    							studentCount+=1;
			    							rowCount+=1;
			    						}
			    					}else{
			    						excelView.getWs().mergeCells(0, rowCount, 18, rowCount);
			    						excelView.getWs().addCell(new Label(0,rowCount, "No students found for this community.", excelView.getDefaultFormat()));
			    					}
			    					rowCount+=1;
			    				}
			    			}
			    			rowCount+=1;
			    			showSchoolUrlInExcelSheetFooter(rowCount-2,excelView,18);
			    		}
			    	}
			    	excelView.getWb().write();
					excelView.getWb().close();
				}else{
					super.addActionError("Please select class,community and gender.");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Actions( { @Action(value = "ajaxPrintClassWiseStudentDetails", results = {}) })
	public void ajaxPrintClassWiseStudentDetails()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrintClassWiseStudentDetails' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				if(StringFunctions.isNotNullOrEmpty(getSelectedId())){
					String description = "";
					if("Y".equalsIgnoreCase(getAnyTitle()))
					{
						description="description is null";
					}
					else
					{
						description="description is not null";
					}
					String fileName = "Class&SectionWiseStudentDetails "+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					ExcelView excelView = new ExcelView();
					WritableCellFormat cellFormat =null;
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					WritableFont font = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
					setClassList(adminManager.getAll(ClassName.class," id in"+getSelectedId()));
					WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
					font1.setColour(Colour.WHITE);
					cellFormat=ExcelView.getUserFormattedCell(font1, Colour.GREEN, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.NONE);
					cellFormat=ExcelView.getUserFormattedCell(font, Colour.AQUA, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.NONE);
					
					//For School Name
					int rowCount=0;
			    	if(!ObjectFunctions.isNullOrEmpty(getClassList())){		
			    		Collections.sort(getClassList());
			    		for(ClassName className:getClassList()){
			    			rowCount=8;
			    			int studentCount=1;
			    			excelView.setWorkSheetName(className.getClassName()+" class");
			    			excelView.createWorkSheet(0);
			    			excelView.setDefaultFormat(excelView.getArial10format());
			    			
			    			schoolAddresDetailsOnlyForExcel(excelView,36); 
			    			excelView.getWs().removeRow(0);
					    	excelView.getWs().setColumnView(0,6);
							excelView.getWs().setColumnView(1,13);
							excelView.getWs().setColumnView(2,6);
							excelView.getWs().setColumnView(3,25);
							excelView.getWs().setColumnView(4,10);
							excelView.getWs().setColumnView(5,18);
							excelView.getWs().setColumnView(6,25);
							excelView.getWs().setColumnView(7,20);
							excelView.getWs().setColumnView(8,20);
							excelView.getWs().setColumnView(9,20);
							excelView.getWs().setColumnView(10,10);
							excelView.getWs().setColumnView(11,30);
							excelView.getWs().setColumnView(12,30);
							excelView.getWs().setColumnView(13,18);
							excelView.getWs().setColumnView(14,15);
							excelView.getWs().setColumnView(15,14);
							excelView.getWs().setColumnView(16,15);
							excelView.getWs().setColumnView(17,10);
							excelView.getWs().setColumnView(33,18);
							excelView.getWs().setColumnView(34,18);
							excelView.getWs().setColumnView(35,18);
							excelView.getWs().setColumnView(36,12);
							excelView.getWs().mergeCells(0, 6, 36, 6);
							excelView.getWs().addCell(new Label(0,6, className.getClassName().toUpperCase()+" - CLASS WISE STUDENT DETAILS", cellFormat));
			    		 	excelView.getWs().addCell(new Label(0,7, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(1,7, "#Admission", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(2,7, "#Roll", excelView.getUsermore10BoldformatGreenBgClr()));
							excelView.getWs().addCell(new Label(3,7, "Student Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(4,7, "Gender", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(5,7, "D.O.B", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(6,7, "D.O.J", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(7,7, "Father Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(8,7, "Father Occupation", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(9,7, "Mother Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(10,7, "Mother Occupation", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(11,7, "Parent Email", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(12,7, "Annual Income", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(13,7, "Community", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(14,7, "Caste", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(15,7, "Blood Group", excelView.getUsermore10BoldformatGreenBgClr()));	
					    	excelView.getWs().addCell(new Label(16,7, "Mobile Number", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(17,7, "Phone Number", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(18,7, "Nationality", excelView.getUsermore10BoldformatGreenBgClr()));	
					    	excelView.getWs().addCell(new Label(19,7, "Religion", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(20,7, "Street name", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(21,7, "State", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(22,7, "City", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(23,7, "Postal Code", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(24,7, "Personal Identification1", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(25,7, "Personal Identification2", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(26,7, "Height", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(27,7, "Weight", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(28,7, "Teeth", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(29,7, "Vision", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(30,7, "Oral Hygiene", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(31,7, "Ration Card Number", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(32,7, "Community Number", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(33,7, "Place Of Birth", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(34,7, "Last School Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(35,7, "Last Class Studied", excelView.getUsermore10BoldformatGreenBgClr()));
					    	excelView.getWs().addCell(new Label(36,7, "House Type", excelView.getUsermore10BoldformatGreenBgClr()));
					    	//excelView.getWs().removeRow(9);
					    	//excelView.getWs().removeRow(10);
					    	setStudyClassList(adminManager.getAll(StudyClass.class,"classNameClassId="+className.getId()+" and custId="+getUserCustId()));
			    			if(!ObjectFunctions.isNullOrEmpty(getStudyClassList())){
			    				for(StudyClass studyClass: getStudyClassList()){
			    					excelView.getWs().mergeCells(0, rowCount, 36, rowCount);
			    					excelView.getWs().addCell(new Label(0,rowCount, studyClass.getClassAndSection()+" Students", cellFormat));
			    					if("HostelStudents".equalsIgnoreCase(getPlSubjectName())){
			    						setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId()+" and classSectionId="+studyClass.getId()+" and "+ description +" and academicYearId="+getUserAcademicYearId()+" and hostelMode='"+Constants.HOSTEL_STATUS+"' "));
			    					}else{
			    						setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId()+" and classSectionId="+studyClass.getId()+" and "+ description +" and academicYearId="+getUserAcademicYearId()));
			    					}
			    					rowCount+=1;
			    					if(!ObjectFunctions.isNullOrEmpty(getViewStudentPersonAccountDetailsList())){
			    						for(ViewStudentPersonAccountDetails personAccountDetails:getViewStudentPersonAccountDetailsList()){
			    							excelView.getWs().addCell(new Label(0,rowCount, String.valueOf(studentCount), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(1,rowCount, personAccountDetails.getAdmissionNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(2,rowCount, String.valueOf(personAccountDetails.getRollNumber()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(3,rowCount, personAccountDetails.getPersonFullName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(4,rowCount, personAccountDetails.getGender(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(5,rowCount, personAccountDetails.getDateOfBirthStr(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(6,rowCount, personAccountDetails.getStudentDateOfJoing(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(7,rowCount, personAccountDetails.getFatherName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(8,rowCount, personAccountDetails.getFatherOccupation(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(9,rowCount, personAccountDetails.getMotherName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(10,rowCount, personAccountDetails.getMotherOccupation(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(11,rowCount, personAccountDetails.getParentEmail(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(12,rowCount, String.valueOf(personAccountDetails.getAnnualIncome()), excelView.getDefaultFormat()));
			    							if(!ObjectFunctions.isNullOrEmpty(personAccountDetails.getCastName())){
			    								excelView.getWs().addCell(new Label(13,rowCount, String.valueOf(personAccountDetails.getCastName()), excelView.getDefaultFormat()));
			    							}else{
			    								excelView.getWs().addCell(new Label(13,rowCount, String.valueOf("-"), excelView.getDefaultFormat()));
			    							}
			    							excelView.getWs().addCell(new Label(14,rowCount, String.valueOf(personAccountDetails.getSubCastName()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(15,rowCount, String.valueOf(personAccountDetails.getBloodGroup()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(16,rowCount, personAccountDetails.getMobileNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(17,rowCount, personAccountDetails.getPhoneNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(18,rowCount, String.valueOf(personAccountDetails.getNationality()), excelView.getDefaultFormat()));
			    							if(!ObjectFunctions.isNullOrEmpty(personAccountDetails.getReligion())){
			    								excelView.getWs().addCell(new Label(19,rowCount, String.valueOf(personAccountDetails.getReligion()), excelView.getDefaultFormat()));
			    							}else{
			    								excelView.getWs().addCell(new Label(19,rowCount, String.valueOf("-"), excelView.getDefaultFormat()));
			    							}
			    							if(StringFunctions.isNull(personAccountDetails.getStreetName()))
			    								excelView.getWs().addCell(new Label(20,rowCount, "", excelView.getDefaultFormat()));
			    							else
			    								excelView.getWs().addCell(new Label(20,rowCount, personAccountDetails.getStreetName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(21,rowCount, personAccountDetails.getState(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(22,rowCount, personAccountDetails.getCity(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(23,rowCount, String.valueOf(personAccountDetails.getPostalCode()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(24,rowCount, personAccountDetails.getIdentification1(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(25,rowCount, personAccountDetails.getIdentification2(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(26,rowCount, String.valueOf(personAccountDetails.getHeight()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(27,rowCount, String.valueOf(personAccountDetails.getWeight()), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(28,rowCount, personAccountDetails.getTeeth(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(29,rowCount, personAccountDetails.getVisionL(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(30,rowCount, personAccountDetails.getOralHygiene(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(29,rowCount, personAccountDetails.getVisionR(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(31,rowCount, personAccountDetails.getRationCardNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(32,rowCount, personAccountDetails.getCommunityNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(33,rowCount, personAccountDetails.getPlaceOfBirth(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(34,rowCount, personAccountDetails.getLastSchool(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(35,rowCount, personAccountDetails.getClassJoined(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(36,rowCount, personAccountDetails.getHouseType(), excelView.getDefaultFormat()));
			    							
			    							studentCount+=1;
			    							rowCount+=1;
			    						}
			    					}else{
			    						excelView.getWs().mergeCells(0, rowCount,33, rowCount);
			    						excelView.getWs().addCell(new Label(0,rowCount, "No students found for this Class.", excelView.getDefaultFormat()));
			    					}
			    					rowCount+=1;
			    				}
			    			}
			    			rowCount+=1;
			    			showSchoolUrlInExcelSheetFooter(rowCount-2,excelView,35);
			    		}
			    	}
			    	excelView.getWb().write();
					excelView.getWb().close();
				}else{
					super.addActionError("Please select classes.");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	public void ajaxClassAndSetionWiseGenderReports() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxClassAndSetionWiseGenderReports' method");
		}
		try {
			String fileName =  "School_Student_Strength_Report";
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
			excelView.setWorkSheetName("Studnet Strength Details");
			excelView.createWorkSheet(0);
			excelView.setDefaultFormat(excelView.getArial10format());
			int size = 8;
			//For data with white color
			WritableCellFormat cellFormatWht10 = getCellFormatWhtX(10);
			Customer customer = getCustomerByCustId();
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
					excelView.getWs().mergeCells(0, 1, size,4);
					excelView.getWs().addCell(new Label(0,1, customer.getOrganization()+"\n"+customer.getOrganizationFullAddress(), getCellFormatWhtX(12)));
				}
			}
			excelView.getWs().removeRow(0);
			excelView.getWs().setColumnView(0,15);
			excelView.getWs().setColumnView(1,10);
			excelView.getWs().setColumnView(2,10);
			excelView.getWs().setColumnView(3,10);
			excelView.getWs().setColumnView(4,15);
			excelView.getWs().setColumnView(5,30);
			excelView.getWs().setColumnView(6,30);
			excelView.getWs().setColumnView(7,25);
			excelView.getWs().setColumnView(8,25);

			AcademicYear academicYear  =getCurrentAcademicYear();
			String currentAcademicYearStr = academicYear.getAcademicYear();

			AcademicYear featureAcademicYear  = adminManager.getFeatureAcademicYear(getUserCustId(),academicYear.getId());
			String featureAcademicYearStr = "-";
			Map<String,Integer> featureAdmittedStudnetMap  = new HashMap<String,Integer>(); 
			if(!ObjectFunctions.isNullOrEmpty(featureAcademicYear)){
				featureAcademicYearStr = featureAcademicYear.getAcademicYear();
				List<Object[]> classWiseAdmittedStudentList = studentManager.getAllClassesWiseNewAdmittedStudentCountByCustId(getUserCustId(), featureAcademicYear.getId(),getSelectedId());
				if(!ObjectFunctions.isNullOrEmpty(classWiseAdmittedStudentList)) {
					for (Object[] obj1 : classWiseAdmittedStudentList) {
						featureAdmittedStudnetMap.put(obj1[1].toString(), Integer.valueOf(obj1[2].toString()));
					}
				}
			}
			List<Object[]> classWiseGenderList = studentManager.getAllClassesAndSetionWiseReportsByCustId("ViewStudentPersonAccountDetails",getUserCustId(), getUserAcademicYearId(),getSelectedId());

			List<Object[]> classWiseTCTakenList = studentManager.getAllClassesWiseTCTakenStudentCountByCustId(getUserCustId(), getUserAcademicYearId(),getSelectedId());
			Map<Integer,Integer> studnetTCTakenMap  = new HashMap<Integer,Integer>(); 
			if(!ObjectFunctions.isNullOrEmpty(classWiseTCTakenList)) {
				for (Object[] obj1 : classWiseTCTakenList) {
					studnetTCTakenMap.put(Integer.valueOf(obj1[0].toString()), Integer.valueOf(obj1[1].toString()));
				}
			}
			int rowCount = 4;	
			if(!ObjectFunctions.isNullOrEmpty(classWiseGenderList)) {
				excelView.getWs().addCell(new Label(0,rowCount, "STUDENT STRENGTH AS ON DATE  " + DateFormatter.formatDate(DateFormatter.ddMMMyyyy_PATTERN1, new Date()), cellFormatWht10));
				excelView.getWs().mergeCells(0, rowCount, size,rowCount);
				rowCount = rowCount +1 ;
				excelView.getWs().addCell(new Label(0,rowCount, "CLASS", cellFormatWht10));
				excelView.getWs().addCell(new Label(1,rowCount, "BOYS", cellFormatWht10));
				excelView.getWs().addCell(new Label(2,rowCount, "GIRLS", cellFormatWht10));
				excelView.getWs().addCell(new Label(3,rowCount, "TOTAL", cellFormatWht10));
				excelView.getWs().addCell(new Label(4,rowCount, "GRAND TOTAL", cellFormatWht10));
				excelView.getWs().addCell(new Label(5,rowCount, "TOTAL NEW ADM FOR CURRENT ACADEMIC YEAR ("	+ currentAcademicYearStr+ ")", cellFormatWht10));
				excelView.getWs().addCell(new Label(6,rowCount, "TC FOR CURRENT ACADEMIC YEAR ("+ currentAcademicYearStr+ ")", cellFormatWht10));
				excelView.getWs().addCell(new Label(7,rowCount,  "NEW ADM FOR NEXT ACADEMIC YEAR ("	+featureAcademicYearStr + ")", cellFormatWht10)); 
				excelView.getWs().addCell(new Label(8,rowCount,  "TC FOR NEXT ACADEMIC YEAR ("	+featureAcademicYearStr + ")", cellFormatWht10)); 
				rowCount = 6;	
				int maleCount = 0;
				int  femaleCount = 0;
				int total = 0;
				int classGranTotal = 0;
				int classId = 0;
				int previousMergedRow = 6;
				int classNewAdmisionCount = 0 ;
				int boysTotal = 0;
				int girlsTotal = 0;
				int newAdmisionTotal = 0;
				int tcTakenTotal = 0;
				int featureAdmisitionTotal = 0;
				String className ="";
				for (Object[] obj1 : classWiseGenderList) {
					if (!ObjectFunctions.isNullOrEmpty(obj1)) {
						maleCount = 0;
						femaleCount = 0 ;
						total = 0;
						if(classId != Integer.valueOf(obj1[0].toString())){
							if(classId > 0){
								excelView.getWs().mergeCells(4, previousMergedRow, 4,rowCount-1);
								excelView.getWs().addCell(new Label(4,previousMergedRow, classGranTotal+"", cellFormatWht10));
								//new Admissions
								excelView.getWs().mergeCells(5, previousMergedRow, 5,rowCount-1);
								excelView.getWs().addCell(new Label(5,previousMergedRow, classNewAdmisionCount+"", cellFormatWht10));
								// feature academic admissions
								excelView.getWs().mergeCells(7, previousMergedRow, 7,rowCount-1);
								if(!ObjectFunctions.isNullOrEmpty(featureAdmittedStudnetMap.get(className))){
									featureAdmisitionTotal = featureAdmisitionTotal + featureAdmittedStudnetMap.get(className);
									excelView.getWs().addCell(new Label(7,previousMergedRow, featureAdmittedStudnetMap.get(className)+"", cellFormatWht10));
								}else{
									excelView.getWs().addCell(new Label(7,previousMergedRow, "0", cellFormatWht10));
								}
								
							}
							classId = Integer.valueOf(obj1[0].toString());
							className = obj1[6].toString();
							classGranTotal = 0;
							classNewAdmisionCount = 0 ;
							previousMergedRow = rowCount;
						}
						maleCount = Integer.valueOf(obj1[3].toString());
						femaleCount = Integer.valueOf(obj1[4].toString());
						total = maleCount + femaleCount;
						classGranTotal = classGranTotal + total ;
						classNewAdmisionCount = classNewAdmisionCount +Integer.valueOf(obj1[5].toString());

						boysTotal = boysTotal + maleCount;
						girlsTotal = girlsTotal + femaleCount;
						newAdmisionTotal = newAdmisionTotal + Integer.valueOf(obj1[5].toString());

						excelView.getWs().addCell(new Label(0,rowCount, obj1[2].toString(), cellFormatWht10));
						excelView.getWs().addCell(new Label(1,rowCount,maleCount+"", cellFormatWht10));
						excelView.getWs().addCell(new Label(2,rowCount,femaleCount+"", cellFormatWht10));
						excelView.getWs().addCell(new Label(3,rowCount, total+"", cellFormatWht10));
						//TC Taken
						if(!ObjectFunctions.isNullOrEmpty(studnetTCTakenMap.get(Integer.valueOf(obj1[1].toString())))){
							tcTakenTotal = tcTakenTotal + studnetTCTakenMap.get(Integer.valueOf(obj1[1].toString()));
							excelView.getWs().addCell(new Label(6,rowCount, studnetTCTakenMap.get(Integer.valueOf(obj1[1].toString()))+"", cellFormatWht10));
						}else{
							excelView.getWs().addCell(new Label(6,rowCount, "0", cellFormatWht10));
						}
						excelView.getWs().addCell(new Label(8,rowCount, "", cellFormatWht10));

					}
					rowCount = rowCount +1;	
				}
				//For last Class total
				if(classId > 0){
					excelView.getWs().mergeCells(4, previousMergedRow, 4,rowCount-1);
					excelView.getWs().addCell(new Label(4,previousMergedRow, classGranTotal+"", cellFormatWht10));
					//new Admissions
					excelView.getWs().mergeCells(5, previousMergedRow, 5,rowCount-1);
					excelView.getWs().addCell(new Label(5,previousMergedRow, classNewAdmisionCount+"", cellFormatWht10));
					// feature academic admissions
					excelView.getWs().mergeCells(7, previousMergedRow, 7,rowCount-1);
					if(!ObjectFunctions.isNullOrEmpty(featureAdmittedStudnetMap.get(className))){
						featureAdmisitionTotal = featureAdmisitionTotal + featureAdmittedStudnetMap.get(className);
						excelView.getWs().addCell(new Label(7,previousMergedRow, featureAdmittedStudnetMap.get(className)+"", cellFormatWht10));
					}else{
						excelView.getWs().addCell(new Label(7,previousMergedRow, "0", cellFormatWht10));
					}
				}
				excelView.getWs().addCell(new Label(0,rowCount, "GRAND TOTAL", cellFormatWht10));
				excelView.getWs().addCell(new Label(1,rowCount,boysTotal+"", cellFormatWht10));
				excelView.getWs().addCell(new Label(2,rowCount,girlsTotal+"", cellFormatWht10));
				excelView.getWs().addCell(new Label(3,rowCount, (boysTotal+girlsTotal)+"", cellFormatWht10));
				excelView.getWs().addCell(new Label(4,rowCount, (boysTotal+girlsTotal)+"", cellFormatWht10));
				excelView.getWs().addCell(new Label(5,rowCount, newAdmisionTotal+"", cellFormatWht10));
				excelView.getWs().addCell(new Label(6,rowCount, tcTakenTotal+"", cellFormatWht10)); //TC
				excelView.getWs().addCell(new Label(7,rowCount, featureAdmisitionTotal+"", cellFormatWht10));
				excelView.getWs().addCell(new Label(8,rowCount, "", cellFormatWht10));

				rowCount = rowCount +1;	
				showSchoolUrlInExcelSheetFooter(rowCount-1,excelView,size);
				excelView.getWb().write();
				excelView.getWb().close();


			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Actions( { @Action(value = "ajaxCheckTc", results = { @Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }) }) })
	public String ajaxCheckTc() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckTc' method");
		}
		try{
		    String accountId = getParamValue("accountId");
			setObjectList(adminManager.getAll(TransferCertificate.class, " accountId="+Long.valueOf(accountId)));
			if(ObjectFunctions.isNotNullOrEmpty(getObjectList())){
				TransferCertificate certificate = (TransferCertificate)getObjectList().get(0);
				if(!ObjectFunctions.isNullOrEmpty(certificate)){
					JSONArray res = new JSONArray();
				    JSONObject j;
				    j = new JSONObject();
				    j.put("accountId", certificate.getAccountId());
				    res.put(j);
				    j = new JSONObject();
				    j.put("data", res);
				    getResponse().getOutputStream().print(j.toString());
				   
				}
				 certificate=null;
	        }
			
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxDownloadStudentsPromotionList", results = {}) })
	public void ajaxDownloadStudentsPromotionList()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadStudentsPromotionList' method");
		}
	try {
		if("scholastic".equalsIgnoreCase(getAlertSendType())){
			ajaxDownloadStudentsPromotionReport();
		}else{
			if (getUserAcademicYearId() != 0) {
				if(StringFunctions.isNotNullOrEmpty(getAnyTitle()) && StringFunctions.isNotNullOrEmpty(getAnyId())){
					String fileName = "ClassWiseStudentPromotionDetails_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					ExcelView excelView = new ExcelView();
					WritableCellFormat headerCellFormat,numberContentCellFormat =null;
					WritableFont font,numberFont =null;
					Cell cell=null;
					int studentMarksStartRow=0,examTypesStartColumn=0,subjectsStartColumn=0,sno=0,totalWorkingDays=0,absentiesCount=0;
					int subFailCount;
					int examTypeNameMergeCount;
					HashMap<String,Integer> scheduleColumns=null;
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					font = new WritableFont(WritableFont.createFont("droidsans"), 10,WritableFont.BOLD);
					numberFont= new WritableFont(WritableFont.createFont("droidsans"), 10,WritableFont.NO_BOLD);
					Customer customer = getCustomerByCustId();
					List<Object[]> classList=adminManager.getAll("select id,className,higherStandard from class where id in"+getAnyId()+" order by sortingOrder");
					List<Object[]> examtypesList= adminManager.getAll("select id,examType from examTypes where id in"+getAnyTitle());
					List<ViewClassExamDetails> examScheduleDetails=null;
					List<Object[]> classStudentsList=null;
					List<Object[]> studentMarks=null;
					ViewClassExamDetails classSchedule=null;
					List<Object[]> studyClassList=null;
					List schoolHolidaysList=null;
					AcademicYear academicYear=null;
					int headerNoColumns=0;
					int headerMergeCount=0;
					int holidayCount=0;
					int columnNum=0;
			    	if(ObjectFunctions.isNotNullOrEmpty(classList) && ObjectFunctions.isNotNullOrEmpty(examtypesList)){
			    		academicYear=(AcademicYear)adminManager.get(AcademicYear.class,getUserAcademicYearId());
			    		// Calculate the no. of working days by excluing the holidays and Sat & Sun
			    		// if Sat is working day, how are you going to include it
			    		if(!ObjectFunctions.isNullOrEmpty(academicYear.getStartDate()) && !ObjectFunctions.isNullOrEmpty(academicYear.getEndDate())){
							totalWorkingDays=DateFunctions.daysBetween(academicYear.getStartDate(), academicYear.getEndDate())+1;
							schoolHolidaysList=adminManager.getAll(SchoolHolidays.class, "academicYearId="+academicYear.getId());
							if(ObjectFunctions.isNotNullOrEmpty(schoolHolidaysList))
								holidayCount=schoolHolidaysList.size();
							totalWorkingDays-=holidayCount;
						}
			    		//For School Address
						WritableCellFormat cellFormat8= getCellFormat8();
						//For School name
						WritableCellFormat cellFormat10= getCellFormat10();
				    	// cellFormat =getCellFormat();
						headerCellFormat=ExcelView.getUserFormattedCell(font, Colour.WHITE, true, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
						numberContentCellFormat=ExcelView.getUserFormattedCell(numberFont, Colour.WHITE, true, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
		    		for(Object[] className:classList){
		    			studyClassList=adminManager.getAll("select classSectionId,groupNumber,classMedium,filledSeats,academicYear,className,section,higherStandard from vw_classSectionDetails where classId="+className[0].toString()+" order by section");
		    			if(ObjectFunctions.isNotNullOrEmpty(studyClassList)){
		    				for(Object[] studyClass:studyClassList){
		    					int row=3;
		    					excelView.setWorkSheetName(studyClass[5].toString()+"-"+studyClass[6].toString()+" class");
		    	    			excelView.createWorkSheet(0);
		    	    			excelView.setDefaultFormat(excelView.getArial10format());
		    	    			//For displaying school Name
		    	    			if (!ObjectFunctions.isNullOrEmpty(customer)) {
		    			        	if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
		    					        excelView.getWs().mergeCells(0, 0, 18,1);
		    					    	excelView.getWs().addCell(new Label(0,0, customer.getOrganization(), cellFormat10));
		    			        	}
		    			        	if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
		    					    	excelView.getWs().mergeCells(0, 2, 18,2);
		    					    	excelView.getWs().addCell(new Label(0,2, customer.getCustomerFormattedAddress(), cellFormat8));
		    			        	}
		    			        }
		    					headerNoColumns = adminManager.getCount("vw_classExamDetails","classSectionId="+studyClass[0].toString()+" and custId="+getUserCustId()+" and eid in"+getAnyTitle());
		    					if(studyClass[7].toString().equalsIgnoreCase("Y")){
		    						headerNoColumns+=8;
		    						if(headerNoColumns == 8)
			    						headerNoColumns = 21;
			    					excelView.getWs().mergeCells(0, row, headerNoColumns, row);
			        				excelView.getWs().addCell(new Label(0,row, className[1].toString()+" STD DISTRICT LEVEL COMMON EXAMINATION - "+(Long.valueOf(academicYear.getPastYear())+1), headerCellFormat));
			        				row++;
			    					excelView.getWs().mergeCells(0, row, headerNoColumns, row);
		    						excelView.getWs().addCell(new Label(0,row, "NUMBER & NAME OF THE SCHOOL - "+customer.getSchoolCode()+" & "+customer.getOrganization(), headerCellFormat));
		    						row++;
		    						headerMergeCount =  headerNoColumns/3;
		    						excelView.getWs().mergeCells(0, row, headerMergeCount-1, row);
		    						if(ObjectFunctions.isNullOrEmpty(studyClass[1]))
		    							excelView.getWs().addCell(new Label(0,row, "GROUP CODE: ", headerCellFormat));
		    						else
		    							excelView.getWs().addCell(new Label(0,row, "GROUP CODE: "+studyClass[1].toString(), headerCellFormat));
		    						excelView.getWs().mergeCells(headerMergeCount, row, 2*headerMergeCount -1, row);
		    						if(ObjectFunctions.isNullOrEmpty(studyClass[2]))
		    							excelView.getWs().addCell(new Label(headerMergeCount,row, "MEDIUM: ", headerCellFormat));
		    						else
		    							excelView.getWs().addCell(new Label(headerMergeCount,row, "MEDIUM: "+studyClass[2].toString(), headerCellFormat));
		    						excelView.getWs().mergeCells(2*headerMergeCount, row, 3*headerMergeCount, row);
		    						excelView.getWs().addCell(new Label(2*headerMergeCount,row, "TOTAL NO.OF CANDIDATES: "+studyClass[3].toString(), headerCellFormat));
		    						row++;
									int headerStartRowCount=row+1;
									int headerEndRowsCount=row+2;
									excelView.getWs().setColumnView(1,25);
									excelView.getWs().setColumnView(2,12);
									excelView.getWs().setColumnView(3, 12);
									excelView.getWs().mergeCells(0, headerStartRowCount, 0, headerEndRowsCount);
									excelView.getWs().addCell(new Label(0,headerStartRowCount,"S.NO", headerCellFormat));
									excelView.getWs().mergeCells(1, headerStartRowCount, 1, headerEndRowsCount);
									excelView.getWs().addCell(new Label(1,headerStartRowCount,"NAME OF THE CANDIDATE", headerCellFormat));
									excelView.getWs().mergeCells(2, headerStartRowCount, 2, headerEndRowsCount);
									excelView.getWs().addCell(new Label(2,headerStartRowCount,"COMMUNITY", headerCellFormat));
									excelView.getWs().mergeCells(3, headerStartRowCount, 3, headerEndRowsCount);
									excelView.getWs().addCell(new Label(3,headerStartRowCount,"REGISTER NO", headerCellFormat));
									subjectsStartColumn=4;
		    					}
		    					else{
		    					  row=3;
		    						headerNoColumns+=9;
		    						if(headerNoColumns == 9)
			    						headerNoColumns = 21;
		    						headerMergeCount =  headerNoColumns/4;
		    						excelView.getWs().mergeCells(0, row, headerNoColumns, row);
			        				excelView.getWs().addCell(new Label(0,row, /*className[1].toString()+*/"STUDENTS PROMOTION LIST FOR HIGHER SCHOOL", headerCellFormat));
			        				row++;
			    					excelView.getWs().mergeCells(0, row, headerMergeCount-1, row);
		    						excelView.getWs().addCell(new Label(0,row, "SCHOOL: "+customer.getCustomerShortName().toUpperCase(), headerCellFormat));
		    						excelView.getWs().mergeCells(headerMergeCount, row, 2*headerMergeCount - 1, row);
		    						excelView.getWs().addCell(new Label(headerMergeCount,row, "STANDARD: "+studyClass[5].toString(), headerCellFormat));
		    						excelView.getWs().mergeCells(2*headerMergeCount, row, 3*headerMergeCount -1, row);
		    						if(ObjectFunctions.isNullOrEmpty(studyClass[2]))
		    							excelView.getWs().addCell(new Label(2*headerMergeCount,row, "SECTION: "+studyClass[6], headerCellFormat));
		    						else
		    							excelView.getWs().addCell(new Label(2*headerMergeCount,row, "SECTION: "+studyClass[6]+" ("+studyClass[2].toString()+")", headerCellFormat));
		    						excelView.getWs().mergeCells(3*headerMergeCount, row, 4*headerMergeCount, row);
		    						excelView.getWs().addCell(new Label(3*headerMergeCount,row, "ACADEMIC YEAR: "+studyClass[4].toString(), headerCellFormat));
		    						row++;
									int headerStartRowCount=row+1;
									int headerEndRowsCount=row+2;
									excelView.getWs().setColumnView(1,13);
									excelView.getWs().setColumnView(2,12);
									excelView.getWs().setColumnView(3, 25);
									excelView.getWs().setColumnView(4, 12);
									excelView.getWs().mergeCells(0, headerStartRowCount, 0, headerEndRowsCount);
									excelView.getWs().addCell(new Label(0,headerStartRowCount,"S.No", headerCellFormat));
									excelView.getWs().mergeCells(1, headerStartRowCount, 1, headerEndRowsCount);
									excelView.getWs().addCell(new Label(1,headerStartRowCount,"EXAMINATION NO.", headerCellFormat));
									excelView.getWs().mergeCells(2, headerStartRowCount, 2, headerEndRowsCount);
									excelView.getWs().addCell(new Label(2,headerStartRowCount,"ADMISSION\nNUMBER", headerCellFormat));
									excelView.getWs().mergeCells(3, headerStartRowCount, 3, headerEndRowsCount);
									excelView.getWs().addCell(new Label(3,headerStartRowCount,"NAME", headerCellFormat));
									excelView.getWs().mergeCells(4, headerStartRowCount, 4, headerEndRowsCount);
									excelView.getWs().addCell(new Label(4,headerStartRowCount,"COMMUNITY", headerCellFormat));
									subjectsStartColumn=5;
		    					}
								studentMarksStartRow=0;
								examTypesStartColumn=subjectsStartColumn;
								scheduleColumns = new HashMap<String, Integer>();
									for(Object[] examType:examtypesList){
										examScheduleDetails=adminManager.getAll(ViewClassExamDetails.class,"classSectionId="+studyClass[0].toString()+" and custId="+getUserCustId()+" and eid="+examType[0].toString());
										examTypeNameMergeCount=0;
										if(ObjectFunctions.isNotNullOrEmpty(examScheduleDetails)){
											Collections.sort(examScheduleDetails, new ExamSchedulesComparator());
											Map<String,List> subjectMap=new LinkedHashMap<String,List>();
											for(ViewClassExamDetails schedule:examScheduleDetails){				
												if(!ObjectFunctions.isNullOrEmpty(schedule))
									    		{   
													List sechuduleObjects=new ArrayList();
													if(subjectMap.containsKey(schedule.getName())){
														sechuduleObjects=subjectMap.get(schedule.getName());
														sechuduleObjects.add(schedule);
														subjectMap.put(schedule.getName(),sechuduleObjects);
													}else{
														examTypeNameMergeCount +=1;
														if(schedule.isHigherStandard() && schedule.isLanguage())
															examTypeNameMergeCount +=1;
														sechuduleObjects.add(schedule);
														subjectMap.put(schedule.getName(),sechuduleObjects);
													}
													sechuduleObjects=null;
									    		}
												schedule=null;
											}
											if(!ObjectFunctions.isNullOrEmpty(subjectMap)){
												//for merging examType name with respect to schedule size
												if(studyClass[7].toString().equalsIgnoreCase("Y"))
													excelView.getWs().mergeCells(examTypesStartColumn, row, examTypesStartColumn+examScheduleDetails.size()+examTypeNameMergeCount, row);
												else
													excelView.getWs().mergeCells(examTypesStartColumn, row, examTypesStartColumn+examScheduleDetails.size(), row);
												excelView.getWs().addCell(new Label(examTypesStartColumn,row,examType[1].toString(), headerCellFormat));
												Iterator it = subjectMap.entrySet().iterator();
												int startMergeCell=examTypesStartColumn;
											    while (it.hasNext()) {
											        Map.Entry pairs = (Map.Entry)it.next();
											        String subject=(String)pairs.getKey();
											        ArrayList<ViewClassExamDetails> subjectSchedules=(ArrayList<ViewClassExamDetails>) pairs.getValue();
											        int mergeCount=subjectSchedules.size();			       
											        int endMergeCell=0;
											        if(subjectSchedules.size() > 0)
											        	classSchedule=subjectSchedules.get(0);
											        //for displaying subjects names and merging same subject name cells
											        if(studyClass[7].toString().equalsIgnoreCase("Y")){
											        	if(!ObjectFunctions.isNullOrEmpty(classSchedule))
											        		excelView.getWs().addCell(new Label(startMergeCell,row+1, subject.toUpperCase()+"\n"+classSchedule.getSubjectNumber(), headerCellFormat));
											        	else
											        		excelView.getWs().addCell(new Label(startMergeCell,row+1, subject.toUpperCase(), headerCellFormat));
											        }
											        else
											        	excelView.getWs().addCell(new Label(startMergeCell,row+1, subject.toUpperCase(), headerCellFormat));
											        endMergeCell=startMergeCell+mergeCount-1;
											        if(!ObjectFunctions.isNullOrEmpty(classSchedule)){
											        	if(classSchedule.isHigherStandard()){
											        		if(classSchedule.isLanguage())
											        			endMergeCell=startMergeCell+mergeCount+1;
											        		else
											        			endMergeCell=startMergeCell+mergeCount;
											        	}
											        }
											        excelView.getWs().mergeCells(startMergeCell, row+1, endMergeCell, row+1);
											        startMergeCell=endMergeCell+1;
											        for(ViewClassExamDetails schedule:subjectSchedules){				
											        	excelView.getWs().setColumnView(examTypesStartColumn,(schedule.getSubTypeUpperCase()+ schedule.getScheduleMaxMarks()).length());
											        	scheduleColumns.put(schedule.getScheduleId()+"_"+schedule.getEid(), examTypesStartColumn);
											        	if(StringFunctions.isNullOrEmpty(getTempString()))
											        		excelView.getWs().addCell(new Label(examTypesStartColumn,row+2, schedule.getSubTypeUpperCase()+"\n"+schedule.getScheduleMaxMarks(), headerCellFormat));
											        	else	
											        		excelView.getWs().addCell(new Label(examTypesStartColumn,row+2, schedule.getSubTypeUpperCase()+"\n"+Math.round(schedule.getScheduleMaxMarks()), headerCellFormat));			    		
											    		examTypesStartColumn++;
													}
											        if(!ObjectFunctions.isNullOrEmpty(classSchedule)){
											        	if(classSchedule.isHigherStandard()){
											        		scheduleColumns.put(classSchedule.getEid()+"_"+classSchedule.getScheduleId()+"_MOD", examTypesStartColumn);
											        		excelView.getWs().addCell(new Label(examTypesStartColumn,row+2, "MOD", headerCellFormat));
											        		examTypesStartColumn++;
											        		if(classSchedule.isLanguage()){
											        			scheduleColumns.put(classSchedule.getEid()+"_"+classSchedule.getClassSubjectId()+"_LangTotal", examTypesStartColumn);
												        		excelView.getWs().addCell(new Label(examTypesStartColumn,row+2, "Total", headerCellFormat));
												        		examTypesStartColumn++;
											        		}
											        	}
											        }
											        scheduleColumns.put("Total_"+examType[0].toString()+"_"+studyClass[0].toString(),examTypesStartColumn);
											        subjectSchedules=null;
											    }	
											    excelView.getWs().mergeCells(examTypesStartColumn, row+1, examTypesStartColumn, row+2);
											    excelView.getWs().addCell(new Label(examTypesStartColumn,row+1, "Total", headerCellFormat));
											    examTypesStartColumn++;
											  }	
											subjectMap=null;
											}else{
												//If exam schedules not found we need to show msg.
												excelView.getWs().mergeCells(examTypesStartColumn, row, examTypesStartColumn+4, row);
												excelView.getWs().addCell(new Label(examTypesStartColumn,row,examType[1].toString(), headerCellFormat));
												excelView.getWs().mergeCells(examTypesStartColumn, row+3, examTypesStartColumn+4, row+3);
												excelView.getWs().addCell(new Label(examTypesStartColumn,row+3,"No marks found for this exam type.", excelView.getUser14format()));
												examTypesStartColumn+=5;
											}
											examType=null;
										}
											excelView.getWs().mergeCells(examTypesStartColumn, row, examTypesStartColumn, row+2);
										    excelView.getWs().addCell(new Label(examTypesStartColumn,row, "E.V.S", headerCellFormat));
										    examTypesStartColumn++;
										    excelView.getWs().setColumnView(examTypesStartColumn, 12);
										    excelView.getWs().mergeCells(examTypesStartColumn, row, examTypesStartColumn+1, row);
										    excelView.getWs().addCell(new Label(examTypesStartColumn,row, "ATTENDANCE", headerCellFormat));
										    excelView.getWs().setColumnView(examTypesStartColumn, 15);
										    excelView.getWs().mergeCells(examTypesStartColumn, row+1, examTypesStartColumn, row+2);
										    scheduleColumns.put(studyClass[0].toString()+"_TotalPDays", examTypesStartColumn);
										    excelView.getWs().addCell(new Label(examTypesStartColumn,row+1, "TOTAL\nPRESENT\nDAYS", headerCellFormat));
										    examTypesStartColumn++;
										    excelView.getWs().setColumnView(examTypesStartColumn, 12);
										    excelView.getWs().mergeCells(examTypesStartColumn, row+1, examTypesStartColumn, row+2);
										    scheduleColumns.put(studyClass[0].toString()+"_Percentage", examTypesStartColumn);
										    excelView.getWs().addCell(new Label(examTypesStartColumn,row+1, "PERCENTAGE", headerCellFormat));
										    examTypesStartColumn++;
										    excelView.getWs().setColumnView(examTypesStartColumn, 12);
										    excelView.getWs().mergeCells(examTypesStartColumn, row+1, examTypesStartColumn, row+2);
										    scheduleColumns.put(studyClass[0].toString()+"_Remarks", examTypesStartColumn);
										    excelView.getWs().addCell(new Label(examTypesStartColumn,row+1, "REMARKS", headerCellFormat));
											studentMarksStartRow=row+3;
											if(StringFunctions.isNullOrEmpty(getQueryString())){
												classStudentsList = adminManager.getAll("select studId,classSectionId,higherStandard,fullName,castName,admissionNumber,accountId,absentiesCount,registerNumber from vw_studentClassAndAttendanceDetails where classSectionId="+studyClass[0].toString()+" and academicYearId="+getUserAcademicYearId()+" and status='Y' order by fullName");
											}else {
												classStudentsList = adminManager.getAll("select studId,classSectionId,higherStandard,fullName,castName,admissionNumber,accountId,absentiesCount,registerNumber from vw_studentClassAndAttendanceDetails where classSectionId="+studyClass[0].toString()+" and academicYearId="+getUserAcademicYearId()+" and status='Y' order by "+getQueryString());
											}
											
									if(ObjectFunctions.isNotNullOrEmpty(classStudentsList)){
										sno=1;
									 int size = classStudentsList.size()*2+2;
									for(Object[] studentDetails:classStudentsList){
										subFailCount=0;
										if(!ObjectFunctions.isNullOrEmpty(studentDetails)){
											excelView.getWs().addCell(new Label(0,studentMarksStartRow, String.valueOf(sno), numberContentCellFormat));
											if(studentDetails[2].toString().equalsIgnoreCase("Y")){
												excelView.getWs().addCell(new Label(1,studentMarksStartRow, studentDetails[3].toString().toUpperCase(), excelView.getDefaultFormat()));
												excelView.getWs().addCell(new Label(2,studentMarksStartRow, studentDetails[4].toString(), excelView.getDefaultFormat()));
												if(ObjectFunctions.isNullOrEmpty(studentDetails[8]))
													excelView.getWs().addCell(new Label(3,studentMarksStartRow, "", excelView.getDefaultFormat()));
												else		
													excelView.getWs().addCell(new Label(3,studentMarksStartRow, studentDetails[8].toString(), numberContentCellFormat));
											}else{
												if(ObjectFunctions.isNullOrEmpty(studentDetails[8]))
													excelView.getWs().addCell(new Label(1,studentMarksStartRow, "", excelView.getDefaultFormat()));
												else
													excelView.getWs().addCell(new Label(1,studentMarksStartRow, studentDetails[8].toString(), numberContentCellFormat));
												excelView.getWs().addCell(new Label(2,studentMarksStartRow, studentDetails[5].toString(), numberContentCellFormat));
												excelView.getWs().addCell(new Label(3,studentMarksStartRow, studentDetails[3].toString().toUpperCase(), excelView.getDefaultFormat()));
												excelView.getWs().addCell(new Label(4,studentMarksStartRow, studentDetails[4].toString(), excelView.getDefaultFormat()));
											}
											studentMarks=studentManager.getAll("select examTypeId,scheduleId,present,obtainedMarks,moderationMarks,minMarks,'',language,subjectId from vw_studentExamMarks where studId="+studentDetails[0].toString());
											if(ObjectFunctions.isNotNullOrEmpty(studentMarks)){
												for(Object[] marks: studentMarks){
													if(!ObjectFunctions.isNullOrEmpty(scheduleColumns.get(marks[1].toString()+"_"+marks[0].toString()))){
														columnNum=scheduleColumns.get(marks[1].toString()+"_"+marks[0].toString());
														if(marks[2].toString().equalsIgnoreCase("Y")){
															if(StringFunctions.isNullOrEmpty(getTempString()))
																excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, String.valueOf(marks[3].toString()), numberContentCellFormat));
															else	
																excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, String.valueOf(Math.round(Double.valueOf(marks[3].toString()))), numberContentCellFormat));
														}
														else{
															subFailCount++;
															excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, String.valueOf("AB"), numberContentCellFormat));
														}
														if(!ObjectFunctions.isNullOrEmpty(scheduleColumns.get("Total_"+marks[0].toString()+"_"+studyClass[0].toString()))){
															columnNum=scheduleColumns.get("Total_"+marks[0].toString()+"_"+studyClass[0].toString());
															cell=excelView.getWs().getCell(columnNum, studentMarksStartRow);
															if(StringFunctions.isNotNullOrEmpty(cell.getContents())){
																if(StringFunctions.isNullOrEmpty(getTempString()))
																	excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Double.valueOf(cell.getContents())+Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString())), numberContentCellFormat));
																else
																	excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Math.round(Double.valueOf(cell.getContents())+Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString()))), numberContentCellFormat));
															}else{
																if(StringFunctions.isNullOrEmpty(getTempString()))
																	excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString())), numberContentCellFormat));
																else
																	excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Math.round(Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString()))), numberContentCellFormat));
															}
															cell=null;
														}
														if(marks[7].toString().equalsIgnoreCase("Y") && !ObjectFunctions.isNullOrEmpty(scheduleColumns.get(marks[0].toString()+"_"+marks[8].toString()+"_LangTotal"))){
																columnNum=scheduleColumns.get(marks[0].toString()+"_"+marks[8].toString()+"_LangTotal");
																cell=excelView.getWs().getCell(columnNum, studentMarksStartRow);
																if(StringFunctions.isNotNullOrEmpty(cell.getContents())){
																	if(StringFunctions.isNullOrEmpty(getTempString()))
																		excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Double.valueOf(cell.getContents())+Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString())), numberContentCellFormat));
																	else
																		excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Math.round(Double.valueOf(cell.getContents())+Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString()))), numberContentCellFormat));
																}else{
																	if(StringFunctions.isNullOrEmpty(getTempString()))
																		excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString())), numberContentCellFormat));
																	else
																		excelView.getWs().addCell(new Label(cell.getColumn(),studentMarksStartRow, String.valueOf(Math.round(Double.valueOf(marks[3].toString())+Double.valueOf(marks[4].toString()))), numberContentCellFormat));
																}
																cell=null;
														}
														/*if(Double.valueOf(marks[6].toString()) < Double.valueOf(marks[5].toString()))
															subFailCount++;*/
													}
													if(!ObjectFunctions.isNullOrEmpty(scheduleColumns.get(marks[0].toString()+"_"+marks[1].toString()+"_MOD"))){
														columnNum=scheduleColumns.get(marks[0].toString()+"_"+marks[1].toString()+"_MOD");
														if(Double.valueOf(marks[4].toString()) > 0){
															if(StringFunctions.isNullOrEmpty(getTempString()))
																excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, marks[4].toString(), numberContentCellFormat));
															else
																excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, String.valueOf(Math.round(Double.valueOf(marks[4].toString()))), numberContentCellFormat));
														}
														else
															excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, "", excelView.getDefaultFormat()));
													}
													marks=null;
												}
												studentMarks=null;
											}else
												subFailCount++;
											if(!ObjectFunctions.isNullOrEmpty(scheduleColumns.get(studentDetails[1].toString()+"_TotalPDays"))){
												columnNum=scheduleColumns.get(studentDetails[1].toString()+"_TotalPDays");
												absentiesCount=Integer.valueOf(studentDetails[7].toString());
												if(totalWorkingDays > 0){
													excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, String.valueOf(totalWorkingDays - absentiesCount), numberContentCellFormat));
													if(!ObjectFunctions.isNullOrEmpty(scheduleColumns.get(studentDetails[1].toString()+"_Percentage"))){
														columnNum=scheduleColumns.get(studentDetails[1].toString()+"_Percentage");
														excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, String.valueOf(roundTwoDecimals(((double) (totalWorkingDays - absentiesCount) / (double) totalWorkingDays) * 100)), numberContentCellFormat));
														if((roundTwoDecimals(((double) (totalWorkingDays - absentiesCount) / (double) totalWorkingDays) * 100)) < academicYear.getAttendancePercentage())
															subFailCount++;
													}
												}
											}
											if(!ObjectFunctions.isNullOrEmpty(scheduleColumns.get(studentDetails[1].toString()+"_Remarks"))){
												columnNum=scheduleColumns.get(studentDetails[1].toString()+"_Remarks");
												if(subFailCount > 0)
													excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, "DETAINED" , excelView.getDefaultFormat()));
												else
													excelView.getWs().addCell(new Label(columnNum,studentMarksStartRow, "PROMOTED", excelView.getDefaultFormat()));
											}
											studentMarksStartRow++;
											studentDetails=null;
											sno++;
										}
									  }
									classStudentsList=null;
									}
								row=studentMarksStartRow+1;
								studyClass=null;
								showSchoolUrlInExcelSheetFooter(row-1,excelView,columnNum);
		    				}
		    				studyClassList=null;
		    			}
		    			className=null;
		    		}
		    		classList = null;
		    		examtypesList=null;
		    		academicYear=null;
		    		excelView.getWb().write();
					excelView.getWb().close();
		    	}
				}else{
					super.addActionError("Please select class,community and gender.");
				}
			}
		}
	} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Actions( { @Action(value = "ajaxDownloadStudentsPromotionReport", results = {}) })
	public void ajaxDownloadStudentsPromotionReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadStudentsPromotionReport' method");
		}
		try {
			if (getUserAcademicYearId() != 0 && StringFunctions.isNotNullOrEmpty(getAnyTitle()) && StringFunctions.isNotNullOrEmpty(getAnyId())) {
				String fileName = "Student_Promotion__Details_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				getResponse().setContentType("application/vnd.ms-excel");
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				List<ExamTypes> examTypes = adminManager.getAll(ExamTypes.class,"id in"+getAnyTitle());
				List<StudyClass> classesList = adminManager.getAll(StudyClass.class, "classNameClassId in"+getAnyId());
				if(ObjectFunctions.isNotNullOrEmpty(classesList)){
					Collections.sort(classesList);
					StudentsMarksReport prepareStudentExcel = new StudentsMarksReport();
					List<Object[]> studentInfo = null; 
					List<ViewStudentClassDetails> studentsDetails = null;
					StringBuffer sheetTitleDesc = new StringBuffer();
					sheetTitleDesc.append("School Name : ");
					if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("organization"))) {
						sheetTitleDesc.append((String) getSession().getAttribute("organization"));
					}
					sheetTitleDesc.append(", Academic Year : ");
					if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYearName"))) {
						sheetTitleDesc.append((String) getSession().getAttribute("academicYearName"));

					}
					for(StudyClass studyClass: classesList){
						if(ObjectFunctions.isNotNullOrEmpty(examTypes)){
							for(ExamTypes examType : examTypes){
								studentInfo=adminManager.getAll("select subTypeId,subTypeName,scheduleMaxMarks,subTypeSortingOrder from vw_classExamDetails where eid="+examType.getId()+" and classSectionId="+studyClass.getId()+" group by subTypeId order by IF(subTypeSortingOrder = 0,subTypeId,subTypeSortingOrder)");
								if(!ObjectFunctions.isNullOrEmpty(studentInfo)){
									examType.setTempList(studentInfo);
								}
							}
							prepareStudentExcel.setClassSection(studyClass);
							prepareStudentExcel.setExamTypes(examTypes);
							if(StringFunctions.isNullOrEmpty(getQueryString())){
								studentsDetails = adminManager.getAll(ViewStudentClassDetails.class, "classSectionId="+studyClass.getId()+" and studDiscontinueDesc is null  order by fullName");
							}else{
								studentsDetails = adminManager.getAll(ViewStudentClassDetails.class, "classSectionId="+studyClass.getId()+" and studDiscontinueDesc is null order by "+getQueryString());
							}
							if(ObjectFunctions.isNotNullOrEmpty(studentsDetails)){
								prepareStudentExcel.createStudentMarksSheet(studyClass.getClassAndSection(),sheetTitleDesc.toString()+"\n"+" Class Name : "+studyClass.getClassAndSection(),studentsDetails,getTempString());
								studentsDetails = null;
							}
						}
						studyClass = null;
					}
					classesList = null;
					prepareStudentExcel.getWb().write(getResponse().getOutputStream());
				}
				
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxAllStaffWithCommunity", results = {}) })
	public void ajaxAllStaffWithCommunity()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAllStaffWithCommunity' method");
		}
		try {
			// TODO what if no academic year
			if (getUserAcademicYearId() != 0) {
				String fileName = "Staff Category Information"+ getUserAcademicYearId();
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
						// List<Staff> StaffsList = adminManager.getAllByCustId("Staff", getUserCustId(),String.valueOf(getUserAcademicYearId()));
						 if (getUser().getId() != 0) {
							    //setTempList(adminManager.getAll(CastSettings.class,"custId="+ getUserCustId()+" and id in"+getAnyTitle()));
							 List<CastSettings> castSettingsList =  adminManager.getAll(CastSettings.class,"custId="+ getUserCustId()+" and id in"+getAnyTitle());
							    if (!ObjectFunctions.isNullOrEmpty(castSettingsList)) 
							    {
							    	List<Object[]> staffDesignationList = adminManager.getAllStaffDetailsByDesignation(getUserCustId(),getUserAcademicYearId(),castSettingsList,getUsername());	
							     // List<CastSettings> castSettingsList = getTempList();   
									if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
										excelView.setWorkSheetName("HostelStaff Category Information");
									}else{
										excelView.setWorkSheetName("School Staff Category Information");
									}
									excelView.setWorkSheetName("Staff Category Information");
							    	excelView.createWorkSheet(0);
							    	excelView.setDefaultFormat(excelView.getArial10format());
							        int size = castSettingsList.size()*2+3;
							        //For School Name
							        WritableCellFormat cellFormat10= getCellFormat10();
									//For School Address
							        WritableCellFormat cellFormat8= getCellFormat8();
							    	//For data with white color
							        WritableCellFormat cellFormatWht10 = getCellFormatWht10();
									//For Male
							        WritableCellFormat  maleCell =getMaleCell();
						    		//For FEMale
							        WritableCellFormat  femaleCell = getFemaleCell();
						    		
						    		WritableCellFormat[] formats =new WritableCellFormat[size];
						    		formats[0]=maleCell;
						    		formats[1]=femaleCell;
						    		
						    		hostelOrganizationDetailsForExcel(excelView,cellFormat10,cellFormat8,size); 
						    		excelView.getWs().removeRow(0);
						    		
						    		if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
						    			excelView.getWs().mergeCells(0, 5, size,5);
						    	    	excelView.getWs().addCell(new Label(0,5, "HOSTEL SATFF COMMUNITY DETAILS", cellFormatWht10));
						    		}else{
						    			excelView.getWs().mergeCells(0, 5, size,5);
						    	    	excelView.getWs().addCell(new Label(0,5, "SCHOOL SATFF COMMUNITY DETAILS", cellFormatWht10));
						    		}
							        excelView.getWs().setColumnView(0,20);
							    	String[] genders = { "M", "F"};
							    	excelView.getWs().mergeCells(0, 6, 0,7);
							    	excelView.getWs().addCell(new Label(0,6, "Category", excelView.getWrapCellFormat()));
							    		int StartMerg =1;
							    		int endMerge=2;
							    		int startGender=1;
											for (CastSettings castSettings : castSettingsList) {
												excelView.getWs().mergeCells(StartMerg, 6, endMerge,6);
												excelView.getWs().addCell(new Label(StartMerg,6, castSettings.getCastName(),cellFormatWht10));
												for (int k = 0; k < genders.length; k++) {
													excelView.getWs().addCell(new Label(startGender,7, genders[k], formats[k]));
													startGender++;
											   }
												StartMerg = StartMerg+2;
												endMerge=endMerge+2;
										}
											endMerge =endMerge + 1;
									excelView.getWs().mergeCells(StartMerg, 6, endMerge,6);
									excelView.getWs().addCell(new Label(StartMerg,6, "All", cellFormatWht10));
									for (int k = 0; k < genders.length; k++) {
										excelView.getWs().addCell(new Label(startGender,7, genders[k], formats[k]));
										startGender++;
								   }
									excelView.getWs().addCell(new Label(startGender,7, "Total", cellFormatWht10));
										
										int cellStart =0;
										int columnStart =8;
										if(!ObjectFunctions.isNullOrEmpty(staffDesignationList)){
											for(Object[] object : staffDesignationList)
							                 {
												 if (!ObjectFunctions.isNullOrEmpty(object)) {
											    	 for (int l = 0; l < object.length; l++) {
											    		 if (!ObjectFunctions.isNullOrEmpty(object[l])) {
											    		 if (l==0) {
																excelView.getWs().addCell(new Label(cellStart, columnStart,object[l].toString(),excelView.getWrapCellFormat()));
															} else {
																excelView.getWs().addCell(new Label(cellStart,columnStart, object[l].toString(),cellFormatWht10));
															}
														} else {
															excelView.getWs().addCell(new Label(cellStart, columnStart, "0"));
														}
														cellStart++;
											    	 }
											    	 columnStart++;
											    	 cellStart =0;
											     }
							                 }
										}
										 Object[] AllStaffListByGender = adminManager.getAllStaffsCountByCastWise(getUserCustId(),getUserAcademicYearId(),castSettingsList,getUsername());	
										 int startCount =0;
										 excelView.getWs().addCell(new Label(startCount,columnStart,"Grand Total",cellFormatWht10));
										  startCount++;
										 if (!ObjectFunctions.isNullOrEmpty(AllStaffListByGender)) {
											 for (int l = 0; l < AllStaffListByGender.length; l++) {
									    		 if (!ObjectFunctions.isNullOrEmpty(AllStaffListByGender[l])) {
									    			 if (l==0) {
															excelView.getWs().addCell(new Label(startCount, columnStart,AllStaffListByGender[l].toString(),cellFormatWht10));
														} else {
															excelView.getWs().addCell(new Label(startCount,columnStart, AllStaffListByGender[l].toString(),cellFormatWht10));
														}
													} else {
														excelView.getWs().addCell(new Label(startCount, columnStart, "0"));
													}
									    		 startCount++;
									    		 }
											 }
										 columnStart++;
										 int col =columnStart+2;
										 excelView.getWs().mergeCells(0, columnStart,size,col);
										 excelView.getWs().addCell(new Label(0,columnStart,"Signature of the Headmaster",excelView.getWrapCellFormatCenter()));
										 showSchoolUrlInExcelSheetFooter(col,excelView,size);
						    		//int column=3;  
							}
						}
					excelView.getWb().write();
					excelView.getWb().close();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions( { @Action(value = "printStaffDetailsByCategory", results = {}) })
	public String printStaffDetailsByCategory() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'printStaffDetailsByCategory' method");
			}
			if (getUserAcademicYearId()!=0) {
					String fileName = null;
					List<Object[]> staffDesignationList = null;
					if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
						fileName = "Hostel Staff Category Information";
					}else{
						fileName = "School Staff Category Information";
					}
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					//List staffsList = adminManager.getAllByCustId("Staff", getUserCustId(),String.valueOf(getUserAcademicYearId()));
					List<CastSettings> castSettingList = adminManager.getAll(CastSettings.class,"custId="+ getUserCustId()+" and id in"+getAnyTitle());
					//setTempList(adminManager.getAll(CastSettings.class,"custId="+ getUserCustId()+" and id in"+getAnyTitle()));
					if(!ObjectFunctions.isNullOrEmpty(castSettingList)){
					   // List<CastSettings> castSettingList = getTempList();
						staffDesignationList = adminManager.getAllStaffDetailsByDesignation(getUserCustId(),getUserAcademicYearId(),castSettingList,getUsername());	
						String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
						FontFactory.register(fontPath);
						pDFGenerator.getDocument().open();
						// creating pDF page event to set header and Footer to document
						PdfPTable mainTable = new PdfPTable(1);
						mainTable.setWidthPercentage(100);
						mainTable.setSplitLate(false);
						mainTable.getDefaultCell().setBorder(Rectangle.BOX);
						int size = castSettingList.size();
						int width =size*2+4;
						String[] genders = { "M", "F"};
						PdfPTable defaultersHeaderReport = new PdfPTable(width);
						defaultersHeaderReport.setWidthPercentage(100);
						
						PdfPTable headerReport = new PdfPTable(100);
						headerReport.setWidthPercentage(100);
						if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
							fileName = "Hostel Staff Category Information"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
							hostelOrganizationDetailsForPdf(fontPath,headerReport,100);
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("STAFF COMMUNITY DETAILS IN HOSTEL",100, fontPath));
						}else{
							fileName = "School Staff Category Information"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
							organizationDetailsForPdf(fontPath,headerReport,100 );
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("STAFF COMMUNITY DETAILS IN SCHOOL",100, fontPath));
							
						}
						mainTable.addCell(headerReport);
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Category", "#000", fontPath));
							for (CastSettings castSettings : castSettingList) {
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJaspersForFemale(castSettings.getCastName(), 2, fontPath));
							}
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJaspersForFemale("All", 3, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("", "#000", fontPath));
							for (CastSettings castSettings : castSettingList) {
									for (int k = 0; k < genders.length; k++) {
										if(k < genders.length-1)
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale(genders[k],"#000", fontPath));
										else{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(genders[k],"#000", fontPath));
										}
									}
							}
							for (int k = 0; k < genders.length; k++) {
								  if(k ==0)
									 defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale(genders[k],"#000", fontPath));
								 else{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(genders[k],"#000", fontPath));
									}
							}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Total","#000", fontPath));
						
						if (!ObjectFunctions.isNullOrEmpty(staffDesignationList)) {
							for (Object[] object : staffDesignationList) {
								if (!ObjectFunctions.isNullOrEmpty(object)) {
									for (int l = 0; l < object.length; l++) {
										if (!ObjectFunctions.isNullOrEmpty(object[l])) {
											if(l==0)
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(object[l].toString(), "#000", fontPath));
											else{
												if(l <size*2+1)
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(object[l].toString(), "#000", fontPath));
												else{
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(object[l].toString(), "#000", fontPath));	
												}
											}
										}else{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
										}
											
									}
								}
							}
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Grand Total", "#000", fontPath));
						Object[] AllStaffListByGender = adminManager.getAllStaffsCountByCastWise(getUserCustId(),getUserAcademicYearId(), castSettingList,getUsername());	
						if (!ObjectFunctions.isNullOrEmpty(AllStaffListByGender)) {
							for (int l = 0; l < AllStaffListByGender.length; l++) {
								if (!ObjectFunctions.isNullOrEmpty(AllStaffListByGender[l])) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(AllStaffListByGender[l].toString(),"#000", fontPath));
								} else {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
								}
							}
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAlign("Signature of the Headmaster",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
						mainTable.addCell(defaultersHeaderReport);
						pDFGenerator.getDocument().add(mainTable);
						pDFGenerator.getDocument().close();
						pDFGenerator = null;
						mainTable = null;
						defaultersHeaderReport = null;
					}
					staffDesignationList = null;
					castSettingList = null;
					phfmj = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxMediumWiseStudentsDetails", results = {}) })
	public void ajaxMediumWiseStudentsDetails()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxMediumWiseStudentsDetails' method");
		}
		try {
			String fileName = null;
			// TODO what if no academic year
			if (getUserAcademicYearId() != 0) {
				if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
					fileName = "Student Medium Wise Details"+ getUserAcademicYearId();
				}else{
					fileName = "Student Medium Wise Details"+ getUserAcademicYearId();
				}
				
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					 if (getUser().isOnlySchoolAdmin() || getUser().isSchoolPrincipal() || getUser().isSchoolDirector()) {
						List<Medium> schoolMediumsList = (List<Medium>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MEDIUM_LIST);
						if (getUser().getId() != 0) {
							List<ClassName> classNameList = adminManager.getAll(ClassName.class, " custId="+getUserCustId()+" and id in"+getSelectedId());
								if (!ObjectFunctions.isNullOrEmpty(schoolMediumsList) && !ObjectFunctions.isNullOrEmpty(classNameList)) {
									if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
										excelView.setWorkSheetName("Hostel Medium Wise Details");
									}else{
										excelView.setWorkSheetName("Student Medium Wise Details");
									}
									
							    	excelView.createWorkSheet(0);
							    	excelView.setDefaultFormat(excelView.getArial10format());
							        int size = schoolMediumsList.size()*2+2;
							        
							        //For School Name
						        	WritableCellFormat cellFormat10= getCellFormat10();
									//For School Address
						        	WritableCellFormat cellFormat8= getCellFormat8();
							    	//For data with white color
						        	WritableCellFormat cellFormatWht10 = getCellFormatWht10();
									//For Male
						        	WritableCellFormat  maleCell =getMaleCell();
						    		//For FEMale
						        	WritableCellFormat  femaleCell = getFemaleCell();
						    		
						    		WritableCellFormat[] formats =new WritableCellFormat[2];
						    		formats[0]=maleCell;
						    		formats[1]=femaleCell;
						    		
						    		hostelOrganizationDetailsForExcel(excelView,cellFormat10,cellFormat8,size);
						    		excelView.getWs().removeRow(0);
							        excelView.getWs().setColumnView(0,20);
							        							        
							    	String[] SchoolStandards = { "High", "Hr.Sec."};
									excelView.getWs().mergeCells(0, 5, size,6);
							    	excelView.getWs().addCell(new Label(0,5, "MEDIUM WISE STUDENTS", cellFormatWht10));
							    	excelView.getWs().mergeCells(0, 7, 0,8);
							    	excelView.getWs().addCell(new Label(0,7, "Class Name", excelView.getWrapCellFormat()));
							    		int cellCount =1;
							    		int cellNum=1;
										for (int k = 0; k < SchoolStandards.length; k++) {
											for (Medium medium : schoolMediumsList) {
													excelView.getWs().addCell(new Label(cellCount,8, medium.getName(), formats[k]));
													cellCount++;
											}
											excelView.getWs().addCell(new Label(cellCount,8, "Total", formats[k]));
											excelView.getWs().mergeCells(cellNum, 7,cellCount,7);
											excelView.getWs().addCell(new Label(cellNum,7, SchoolStandards[k], formats[k]));
											cellCount++;
											cellNum=cellNum+schoolMediumsList.size()+1;
										}
										cellCount=0;
									int coloumnStart = 9;
									for (ClassName className : classNameList) {
										Object[] mediumWiseStudents = adminManager.getMediumWiseStudentDetailsForEachClass(getUserCustId(), getUserAcademicYearId(), String.valueOf("("+className.getId()+")"), schoolMediumsList,getUsername());
										if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents)) {
											excelView.getWs().addCell(new Label(cellCount, coloumnStart, className.getClassName(), excelView.getWrapCellFormat()));
											cellCount++;
											for (int i = 0; i < mediumWiseStudents.length; i++) {
												if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents[i])) {
													if(i==0){
													for (int j = 1; j <= mediumWiseStudents.length; j++) {
													  if(cellCount <= mediumWiseStudents.length)
														  excelView.getWs().addCell(new Label(cellCount, coloumnStart,"0", cellFormatWht10));
													      cellCount++;
														}
														excelView.getWs().addCell(new Label(cellCount, coloumnStart,mediumWiseStudents[i].toString(), cellFormatWht10));
													  
													}else{
														excelView.getWs().addCell(new Label(cellCount, coloumnStart,mediumWiseStudents[i].toString(), cellFormatWht10));
													}
												} else {
													if(i==0){
														for (int j = 1; j <= mediumWiseStudents.length; j++) {
														  if(cellCount <= mediumWiseStudents.length)
															  excelView.getWs().addCell(new Label(cellCount, coloumnStart,"0", cellFormatWht10));
														      cellCount++;
															}
														  
														}
													excelView.getWs().addCell(new Label(cellCount, coloumnStart, "0",cellFormatWht10));
													
												}
												cellCount++;
											}
										}
										coloumnStart++;
										cellCount=0;
									}
									excelView.getWs().addCell(new Label(cellCount,coloumnStart, "Grand Total", cellFormatWht10));
									cellCount++;
									Object[] mediumWiseStudents = adminManager.getMediumWiseStudentDetailsForEachClass(getUserCustId(), getUserAcademicYearId(), getSelectedId(), schoolMediumsList,getUsername());
									if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents)) {
										for (int i = 0; i < mediumWiseStudents.length; i++) {
											if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents[i])) {
												if(i==0){
												for (int j = 1; j <= mediumWiseStudents.length; j++) {
												  if(cellCount <= mediumWiseStudents.length)
													  excelView.getWs().addCell(new Label(cellCount, coloumnStart,"0", cellFormatWht10));
												      cellCount++;
													}
													excelView.getWs().addCell(new Label(cellCount, coloumnStart,mediumWiseStudents[i].toString(), cellFormatWht10));
												  
												}else{
													excelView.getWs().addCell(new Label(cellCount, coloumnStart,mediumWiseStudents[i].toString(), cellFormatWht10));
												}
											} else {
												if(i==0){
													for (int j = 1; j <= mediumWiseStudents.length; j++) {
													  if(cellCount <= mediumWiseStudents.length)
														  excelView.getWs().addCell(new Label(cellCount, coloumnStart,"0", cellFormatWht10));
													      cellCount++;
														}
													  
													}
												excelView.getWs().addCell(new Label(cellCount, coloumnStart, "0",cellFormatWht10));
												
											}
											cellCount++;
										}
									}
									coloumnStart++;
									 int col =coloumnStart+2;
									 excelView.getWs().mergeCells(0, coloumnStart,size,col);
									 excelView.getWs().addCell(new Label(0,coloumnStart,"Signature of the Headmaster",excelView.getWrapCellFormatCenter()));
									 showSchoolUrlInExcelSheetFooter(col,excelView,size);
						    		//int column=3;  
							}
						}
					excelView.getWb().write();
					excelView.getWb().close();
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}

	@Actions( { @Action(value = "printMediumWiseStudentsDetails", results = {}) })
	public String printMediumWiseStudentsDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'printMediumWiseStudentsDetails' method");
			}
			if (getUserAcademicYearId() != 0) {
				String fileName = "Student Medium Wise Details";
				PDFGenerator pDFGenerator = new PDFGenerator();
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
				pDFGenerator.getPdfWriter().setPageEvent(phfmj);
				pDFGenerator.getDocument().open();

				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				pDFGenerator.getDocument().open();
				// creating pDF page event to set header and Footer to document
				PdfPTable mainTable = new PdfPTable(1);
				mainTable.setWidthPercentage(100);
				mainTable.setSplitLate(false);
				mainTable.getDefaultCell().setBorder(Rectangle.BOX);
				List<ClassName> classNameList = adminManager.getAll(ClassName.class," id in"+getSelectedId());
				setTempList((List<Medium>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MEDIUM_LIST));
				int size = getTempList().size();
				int width = getTempList().size() * 2 + 3;
				String[] SchoolStandards = { "High", "Hr.Sec." };
				PdfPTable defaultersHeaderReport = new PdfPTable(width);
				defaultersHeaderReport.setWidthPercentage(100);
				PdfPTable headerReport = new PdfPTable(100);
				headerReport.setWidthPercentage(100);
				if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
					hostelOrganizationDetailsForPdf(fontPath,headerReport,100);
					headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM WISE STUDENT In HOSTEL",100, fontPath));
				}else{
					organizationDetailsForPdf(fontPath,headerReport,100 );
					headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM WISE STUDENTS In SCHOOL ",100, fontPath));
				}
				mainTable.addCell(headerReport);

				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Class Name", "#000",fontPath));
				for (int k = 0; k < SchoolStandards.length; k++) {
					if(k==0)
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(SchoolStandards[k],size+1, fontPath));
					else{
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJaspersForFemale(SchoolStandards[k],size+1, fontPath));
					}
				}
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(" ", "#000",fontPath));
				for (int k = 0; k < SchoolStandards.length; k++) {
					for (Object object : getTempList()) {
						Medium medium = (Medium) object;
						if(k==0)
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale(medium.getName(),"#000", fontPath));
						else{
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(medium.getName(),"#000", fontPath));						}
					}
					if(k==0)
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("Total", "#000",fontPath));
					else{
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("Total", "#000",fontPath));
					}
				}
				
				for(ClassName className:classNameList){
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(className.getClassName(),"#000", fontPath));
					Object[] mediumWiseStudents = adminManager.getMediumWiseStudentDetailsForEachClass(getUserCustId(), getUserAcademicYearId(),String.valueOf("("+className.getId()+")"), getTempList(),getUsername());
					if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents)) {
						for (int l = 0; l < mediumWiseStudents.length; l++) {
							if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents[l])) {
								if (l == 0) {
									for (int j = 1; j <= mediumWiseStudents.length; j++) {
										if (j <= mediumWiseStudents.length)
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("0", "#000", fontPath));
									}
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(mediumWiseStudents[l].toString(),"#000", fontPath));
								}else{
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(mediumWiseStudents[l].toString(),"#000", fontPath));
								}
									
							} else {
								if(l==0){
									for (int j = 1; j <= mediumWiseStudents.length; j++) {
										if (j <= mediumWiseStudents.length)
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("0", "#000", fontPath));
									}
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("0", "#000", fontPath));
							}
						}
					}
				}
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Grand Total", "#000",fontPath));
				Object[] mediumWiseStudents = adminManager.getMediumWiseStudentDetailsForEachClass(getUserCustId(), getUserAcademicYearId(),getSelectedId(), getTempList(),getUsername());
				if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents)) {
					if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents)) {
						for (int l = 0; l < mediumWiseStudents.length; l++) {
							if (!ObjectFunctions.isNullOrEmpty(mediumWiseStudents[l])) {
								if (l == 0) {
									for (int j = 1; j <= mediumWiseStudents.length; j++) {
										if (j <= mediumWiseStudents.length)
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("0", "#000", fontPath));
									}
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(mediumWiseStudents[l].toString(),"#000", fontPath));
								}else{
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(mediumWiseStudents[l].toString(),"#000", fontPath));
								}
							} else {
								if(l==0){
									for (int j = 1; j <= mediumWiseStudents.length; j++) {
										if (j <= mediumWiseStudents.length)
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("0", "#000", fontPath));
									}
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("0", "#000", fontPath));
							}
						}
					}
				}
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAlign("Signature of the Headmaster",width, fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
				mainTable.addCell(defaultersHeaderReport);
				pDFGenerator.getDocument().add(mainTable);
				pDFGenerator.getDocument().close();
				pDFGenerator = null;
				mainTable = null;
				defaultersHeaderReport = null;
				phfmj = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxReligionWiseStaffDetails", results = {}) })
	public void ajaxReligionWiseStaffDetails()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxReligionWiseStaffDetails' method");
		}
		try {
			// TODO what if no academic year
			if (getUserAcademicYearId() != 0) {
				String fileName = "Staff_Religion Wide Details"+ getUserAcademicYearId();
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
						// List<Staff> satffsList = adminManager.getAllByCustId("Staff", getUserCustId(),String.valueOf(getUserAcademicYearId()));
						if (getUser().getId() != 0) {
							String religionIds =getAnyTitle();
							List religionsList = adminManager.getAll(CommonType.class," id in"+getAnyTitle());
								if (!ObjectFunctions.isNullOrEmpty(religionsList)) {
									if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
										 excelView.setWorkSheetName("Hostel Staff Religion Wise Details");
									 }else{
										 excelView.setWorkSheetName("School Staff Religion Wise Details");
									 }
									
							    	excelView.createWorkSheet(0);
							    	excelView.setDefaultFormat(excelView.getArial10format());
							    	//setObjectList(adminManager.getAll(MotherTongue.class));
							    	List<MotherTongue> motherTongueList = (List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST);
							    	if (!ObjectFunctions.isNullOrEmpty(motherTongueList)) {
							    		 int size = religionsList.size()+motherTongueList.size()+5;
									        //For School Name
								        	WritableCellFormat cellFormat10= getCellFormat10();
											//For School Address
								        	WritableCellFormat cellFormat8= getCellFormat8();
									    	//For data with white color
								        	WritableCellFormat cellFormatWht10 = getCellFormatWht10();
											//For Male
								        	WritableCellFormat  maleCell =getMaleCell();
								    		//For FEMale
								        	WritableCellFormat  femaleCell = getFemaleCell();
								        	
								    		WritableCellFormat[] formats =new WritableCellFormat[2];
								    		formats[0]=maleCell;
								    		formats[1]=femaleCell;
								    		
								    		hostelOrganizationDetailsForExcel(excelView,cellFormat10,cellFormat8,size);
								    		excelView.getWs().removeRow(0);
									        excelView.getWs().setColumnView(0,20);
									        String[] SchoolStandards = { "Religion Minority", "Linguistic Minority"};
									        if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
									        	 excelView.getWs().mergeCells(0, 5, size,6);
									 	    	excelView.getWs().addCell(new Label(0,5, "HOSTEL SATFF RELIGION WISE DETAILS", cellFormatWht10));
									        }else{
									        	 excelView.getWs().mergeCells(0, 5, size,6);
									 	    	excelView.getWs().addCell(new Label(0,5, "SCHOOL SATFF RELIGION WISE DETAILS", cellFormatWht10));
									        } 
									       
									    	excelView.getWs().mergeCells(0, 7, 0,8);
									    	excelView.getWs().addCell(new Label(0,7, "Organization Type", excelView.getWrapCellFormat()));
									    		int cellCount =1;
									    		int cellNum=1;
												for (int k = 0; k < SchoolStandards.length; k++) {
													if(k==0){
													for (Object obj : religionsList) {
														CommonType commonType1 =(CommonType)obj ; 
															excelView.getWs().addCell(new Label(cellCount,8, commonType1.getSkillTypeName(), formats[k]));
															cellCount++;
													}
													}else{
														for (MotherTongue motherTongue : motherTongueList) {
																excelView.getWs().addCell(new Label(cellCount,8, motherTongue.getName(), formats[k]));
																cellCount++;
														}
													}
													excelView.getWs().addCell(new Label(cellCount,8, "OTHERS", formats[k]));
													cellCount++;
													excelView.getWs().addCell(new Label(cellCount,8, "Total", formats[k]));
													excelView.getWs().mergeCells(cellNum, 7,cellCount,7);
													excelView.getWs().addCell(new Label(cellNum,7, SchoolStandards[k], formats[k]));
													cellCount++;
													cellNum=cellCount;
												}
												excelView.getWs().addCell(new Label(cellCount,8, "Grand Total",excelView.getWrapCellFormat()));
												cellCount=0;
												int columnStart=9;
											//setOrganizationTypesList(adminManager.getAll(OrganizationTypes.class));
												List<OrganizationTypes> organizationTypeLsit = adminManager.getAll(OrganizationTypes.class);
											for (OrganizationTypes organizationTypes : organizationTypeLsit) {
												excelView.getWs().addCell(new Label(cellCount, columnStart, organizationTypes.getOrganizationType(), excelView.getWrapCellFormat()));
												cellCount++;
												Object[] staffCountByReligion = adminManager.getAllStaffCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),organizationTypes.getId(),religionIds,getUsername());
												//int SchoolStandardsCount=0;
											if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion)) {
												for (int l = 0; l < staffCountByReligion.length; l++) {
														excelView.getWs().addCell(new Label(cellCount,columnStart, organizationTypes.getOrganizationType(), excelView.getWrapCellFormat()));
														if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion[l])) {
															if (l == 0)
																excelView.getWs().addCell(new Label(cellCount, columnStart,staffCountByReligion[l].toString(),cellFormatWht10));
															else {
																excelView.getWs().addCell(new Label(cellCount,columnStart,staffCountByReligion[l].toString(), cellFormatWht10));
															}
														} else {
															excelView.getWs().addCell(new Label(cellCount,columnStart,"0", cellFormatWht10));
														}
														cellCount++;
													}
												}
											  columnStart++;
											  cellCount=0;
											}
											excelView.getWs().addCell(new Label(cellCount,columnStart, "Grand Total",excelView.getWrapCellFormat()));
											cellCount++;
											Object[] staffCountByReligion = adminManager.getAllStaffCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),0,religionIds,getUsername());
											//int SchoolStandardsCount=0;
											if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion)) {
												for (int l = 0; l < staffCountByReligion.length; l++) {
														if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion[l])) {
															if (l == 0)
																excelView.getWs().addCell(new Label(cellCount,columnStart, staffCountByReligion[l].toString(),cellFormatWht10));
															else {
																excelView.getWs().addCell(new Label(cellCount,columnStart, staffCountByReligion[l].toString(),cellFormatWht10));
															}
														} else {
															excelView.getWs().addCell(new Label(cellCount,columnStart,"0",cellFormatWht10));
														}
														cellCount++;
													}
												}
								    		//int column=3; 
											showSchoolUrlInExcelSheetFooter(columnStart, excelView, size);
							    	}
							    	motherTongueList = null;
						}
					}
					excelView.getWb().write();
					excelView.getWb().close();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions( { @Action(value = "ajaxselectedTypeReports",  results = { @Result(location = "../admin/doViewAllReports.do", type = "redirect", name = "TC")})})
	public String ajaxselectedTypeReports()
	throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxselectedTypeReports' method");
		}
		try {
			//Student 
			if (!StringFunctions.isNullOrEmpty(getTempString()) && getTempString().equalsIgnoreCase("Student")) {
				//Student pdf
				if (getAnyId().equalsIgnoreCase("PDF")) {
					if(getPlTitle().equalsIgnoreCase("CommunityDetails")){
						printViewSchoolCommunityDetails();
					}else if (getPlTitle().equalsIgnoreCase("MediumWiseDetails")) {
						printMediumWiseStudentsDetails();
					}
				}else{
					//Student excel
					if(getPlTitle().equalsIgnoreCase("CommunityDetails")){
						ajaxAllStudentsCountWithCommunity();
					}else if (getPlTitle().equalsIgnoreCase("MediumWiseDetails")){
						ajaxMediumWiseStudentsDetails();
					}else if (getPlTitle().equalsIgnoreCase("ClassWiseCommunityDetails")){
						ajaxPrintStudentSchoolWideCommunityDetails();
					}else if (getPlTitle().equalsIgnoreCase("ViewStudentClassSectionDetails")){
						ajaxDoViewStudentCommunityClassSheets();
					}else if (getPlTitle().equalsIgnoreCase("ClassWiseStudentDetails")){
						ajaxPrintClassWiseStudentDetails();
					}
					else if (getPlTitle().equalsIgnoreCase("CommunityAndCasteDetails")){
						ajaxAllStudentsCountWithCommunityAndCaste();
					}
					else if (getPlTitle().equalsIgnoreCase("GenderwiseDetails")) {
						ajaxClassAndSetionWiseGenderReports();
						
					}
				}
				//Staff
			}else if (getTempString().equalsIgnoreCase("Staff")) {
				//Staff pdf
				if (getAnyId().equalsIgnoreCase("PDF")) {
					if(getPlTitle().equalsIgnoreCase("CommunityDetails")){
						printStaffDetailsByCategory();
					}
				}else{
					//Staff excel
					if(getPlTitle().equalsIgnoreCase("CommunityDetails")){
						ajaxAllStaffWithCommunity();
					}
				}
			}/*else{
				if (getAnyId().equalsIgnoreCase("PDF")) {
					if (getPlTitle().equalsIgnoreCase("ClassWiseFineFeeDetails")){
						ajaxDoViewFineFeeClassSheets();
					}
				}
			}*/
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "ajaxStudentsReligionWiseDetails", results = {}) })
	public void ajaxStudentsReligionWiseDetails()
	throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentsReligionWiseDetails' method");
		}
		try {
			if(getTempString().equalsIgnoreCase("Student")){
				if(getAnyId().equalsIgnoreCase("PDF")){
					printStudentReligionWiseDetails();
					
				}else {
					String religionIds =getAnyTitle();
					List religionsList = adminManager.getAll(CommonType.class," id in"+getAnyTitle());
					if (getUserAcademicYearId() != 0) {
						String fileName = "Student_Religion Wide Details"+ getUserAcademicYearId();
						ExcelView excelView = new ExcelView();
						getResponse().setContentType(excelView.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
						excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
						if (getUser().isOnlySchoolAdmin() || getUser().isSchoolPrincipal() || getUser().isSchoolDirector()) {
							 List studentList = adminManager.getAllByCustId("ViewStudentPersonAccountDetails", getUserCustId(),getUserAcademicYearId());
							if (getUser().getId() != 0) {
								if (!ObjectFunctions.isNullOrEmpty(religionsList) && !ObjectFunctions.isNullOrEmpty(studentList)) {
									generateStudentReligionDetailsInExcel(religionsList,getStudentsList(), excelView,getUserAcademicYearId(), religionIds);
								}
							}
							excelView.getWb().write();
							excelView.getWb().close();
						}
					}
				}
			}else{
				if(getAnyId().equalsIgnoreCase("PDF")){
					//String religionIds =getAnyTitle();
					printStaffReligionWiseDetails();
				}else {
					//String religionIds =getAnyTitle();
					ajaxReligionWiseStaffDetails();	
				}
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	//Modified By Balu on 07/05/2013
	public void generateStudentReligionDetailsInExcel(List religionsList, List studentList,ExcelView excelView,long academicYearId,String religionIds) {
		try {			
			if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
				excelView.setWorkSheetName("Religion Wise Students In Hostel");
			}else{
				excelView.setWorkSheetName("Religion Wise Students In School");
			}
			excelView.createWorkSheet(0);
			excelView.setDefaultFormat(excelView.getArial10format());
			setObjectList((List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST));
			setClassNameList(adminManager.getAllByCustId("ClassName", getUserCustId(),getUserAcademicYearId()));
			int size = religionsList.size()+getObjectList().size()+5;
			 //For School Name
        	WritableCellFormat cellFormat10= getCellFormat10();
			//For School Address
        	WritableCellFormat cellFormat8= getCellFormat8();
	    	//For data with white color
        	WritableCellFormat cellFormatWht10 = getCellFormatWht10();
			//For Male
        	WritableCellFormat  maleCell =getMaleCell();
    		//For FEMale
        	WritableCellFormat  femaleCell = getFemaleCell();
			
			WritableCellFormat[] formats =new WritableCellFormat[2];
			formats[0]=maleCell;
			formats[1]=femaleCell;
			
			hostelOrganizationDetailsForExcel(excelView,cellFormat10,cellFormat8,size);
			excelView.getWs().removeRow(0);
			//excelView.getWs().setColumnView(0,20);
			String[] SchoolStandards = { "Religion Minority", "Linguistic Minority"};
			if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")){
				excelView.getWs().mergeCells(0, 6, size,7);
				excelView.getWs().addCell(new Label(0,6, "RELIGION WISE STUDENTS IN HOSTEL", cellFormatWht10));
			}else{
				excelView.getWs().mergeCells(0, 6, size,7);
				excelView.getWs().addCell(new Label(0,6, "RELIGION WISE STUDENTS IN SCHOOL", cellFormatWht10));
			}
			
			excelView.getWs().mergeCells(0, 8, 0,9);
			excelView.getWs().addCell(new Label(0,8, "Class Name", excelView.getWrapCellFormat()));
			int cellCount =1;
			int cellNum=1;
			for (int k = 0; k < SchoolStandards.length; k++) {
				if(k==0){
					for (Object obj : religionsList) {
						CommonType commonType1 =(CommonType)obj ; 
						excelView.getWs().addCell(new Label(cellCount,9, commonType1.getSkillTypeName(), formats[k]));
						cellCount++;
					}
				}else{
					for (Object obj : getObjectList()) {
						MotherTongue motherTongue =(MotherTongue)obj ; 
						excelView.getWs().addCell(new Label(cellCount,9, motherTongue.getName(), formats[k]));
						cellCount++;
					}
				}
				excelView.getWs().addCell(new Label(cellCount,9, "OTHERS", formats[k]));
				cellCount++;
				excelView.getWs().addCell(new Label(cellCount,9, "Total", formats[k]));
				excelView.getWs().mergeCells(cellNum, 8,cellCount,8);
				excelView.getWs().addCell(new Label(cellNum,8, SchoolStandards[k], formats[k]));
				cellCount++;
				cellNum=cellNum+religionsList.size()+2;
			}
			excelView.getWs().addCell(new Label(cellCount,9, "Grand Total",excelView.getWrapCellFormat()));
			cellCount=0;
			int coloumnStart=10;
			for (Object obj : getClassNameList()) {
				 ClassName  className = (ClassName)obj;
				Object[] studentCountByReligion = adminManager.getAllStudentsCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),className.getId(),religionIds,getUsername());
				if (!ObjectFunctions.isNullOrEmpty(studentCountByReligion)) {
					excelView.getWs().addCell(new Label(cellCount, coloumnStart, className.getClassName(), excelView.getWrapCellFormat()));
					cellCount++;
					for (int i = 0; i < studentCountByReligion.length; i++) {
						if (!ObjectFunctions.isNullOrEmpty(studentCountByReligion[i])) {
							if(i==0){
								excelView.getWs().addCell(new Label(cellCount, coloumnStart,studentCountByReligion[i].toString(), cellFormatWht10));
							  
							}else{
								excelView.getWs().addCell(new Label(cellCount, coloumnStart,studentCountByReligion[i].toString(), cellFormatWht10));
							}
						} else {
							excelView.getWs().addCell(new Label(cellCount, coloumnStart, "0",cellFormatWht10));
							
						}
						cellCount++;
					}
				}
				coloumnStart++;
				cellCount=0;
			}
			cellCount=0;
			excelView.getWs().addCell(new Label(cellCount,coloumnStart, "Grand Total",excelView.getWrapCellFormat()));
			Object[] studentCountByReligion = adminManager.getAllStudentsCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),0,religionIds,getUsername());
			if (!ObjectFunctions.isNullOrEmpty(studentCountByReligion)) {
				cellCount++;
				for (int i = 0; i < studentCountByReligion.length; i++) {
					if (!ObjectFunctions.isNullOrEmpty(studentCountByReligion[i])) {
						if(i==0){
							excelView.getWs().addCell(new Label(cellCount, coloumnStart,studentCountByReligion[i].toString(), cellFormatWht10));
						  
						}else{
							excelView.getWs().addCell(new Label(cellCount, coloumnStart,studentCountByReligion[i].toString(), cellFormatWht10));
						}
					} else {
						excelView.getWs().addCell(new Label(cellCount, coloumnStart, "0",cellFormatWht10));
						
					}
					cellCount++;
				}
			}
			coloumnStart++;
			 int col =coloumnStart+2;
			 excelView.getWs().mergeCells(0, coloumnStart,size,col);
			 excelView.getWs().addCell(new Label(0,coloumnStart,"Signature of the Headmaster",excelView.getWrapCellFormatCenter()));
			 showSchoolUrlInExcelSheetFooter(col,excelView,size);
			//int column=3;    		
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions( { @Action(value = "printStudentReligionWiseDetails", results = {}) })
	public String printStudentReligionWiseDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'printStudentReligionWiseDetails' method");
			}
			List studentsList = null;
			List religionsList = null;
			String fileName = null;
			if (getUserAcademicYearId()!=0) {
				if(StringFunctions.isNotNullOrEmpty(getAnyTitle())){
					religionsList = adminManager.getAll(CommonType.class," id in"+getAnyTitle());
				}
				if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
					fileName = "Religion Wise Students In Hostel";
				}else{
					fileName = "Religion Wise Students In School";
				}
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
						studentsList =adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId()+" and status='"+Constants.YES_STRING+"' and academicYearId="+getUserAcademicYearId());
					}else{
						studentsList = adminManager.getAllByCustId("ViewStudentPersonAccountDetails", getUserCustId(),getUserAcademicYearId());
					}
							if (!ObjectFunctions.isNullOrEmpty(religionsList) && !ObjectFunctions.isNullOrEmpty(studentsList)) {
								if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
									fileName = "Religion Wise Students In Hostel"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
								}else{
									fileName = "Religion Wise Students In School"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
								}
								String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
								FontFactory.register(fontPath);
								// creating pDF page event to set header and Footer to document
								PdfPTable mainTable = new PdfPTable(1);
								mainTable.setWidthPercentage(100);
								mainTable.setSplitLate(false);
								mainTable.getDefaultCell().setBorder(Rectangle.BOX);
								setObjectList((List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST));
								setClassNameList(adminManager.getAllByCustId("ClassName", getUserCustId(), getUserAcademicYearId()));
								int width = religionsList.size()+getObjectList().size()+6;
								String[] SchoolStandards = { "Religion Minority", "Linguistic Minority"};
								PdfPTable defaultersHeaderReport = new PdfPTable(width);
								defaultersHeaderReport.setWidthPercentage(100);
								
								PdfPTable headerReport = new PdfPTable(100);
								headerReport.setWidthPercentage(100);
								if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
									hostelOrganizationDetailsForPdf(fontPath,headerReport,100);
									headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("RELIGION WISE STUDENTS IN HOSTEL",100, fontPath));
								}else{
									organizationDetailsForPdf(fontPath,headerReport,100 );
									headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("RELIGION WISE STUDENTS IN SCHOOL",100, fontPath));
								}
								mainTable.addCell(headerReport);
								int size =religionsList.size()+1;
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("ClassName ", "#000",fontPath));
								for (int k = 0; k < SchoolStandards.length; k++) {
									if(k==0)
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(SchoolStandards[k],size+1, fontPath));
									else{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJaspersForFemale(SchoolStandards[k],width-1, fontPath));
									}
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(" ", "#000",fontPath));
								for (int k = 0; k < SchoolStandards.length; k++) {
									if(k==0){
										for (Object obj : religionsList) {
											CommonType commonType1 =(CommonType)obj ; 
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale(commonType1.getSkillTypeName(),"#000", fontPath));
										}
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("OTHERS","#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("Total","#000", fontPath));
										
									}else{
										for (Object obj : getObjectList()) {
											MotherTongue motherTongue =(MotherTongue)obj ; 
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(motherTongue.getName(),"#000", fontPath));
										}
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("OTHERS","#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Total","#000", fontPath));
									}
									
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("GrandTotal","#000", fontPath));
								for (Object obj : getClassNameList()) {
									Object[] studentCountByReligion = null;
									 ClassName  className = (ClassName)obj;
									 if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
										 studentCountByReligion = adminManager.getAllStudentsCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),className.getId(),getAnyTitle(),getUsername());
									 }else{
										studentCountByReligion = adminManager.getAllStudentsCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),className.getId(),getAnyTitle(),getUsername());					 
									 }
									if (!ObjectFunctions.isNullOrEmpty(studentCountByReligion)) {
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(className.getClassName(),"#000", fontPath));
										for (int i = 0; i < studentCountByReligion.length; i++) {
											if (!ObjectFunctions.isNullOrEmpty(studentCountByReligion[i])) {
												if(i<=religionsList.size()+1)
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale(studentCountByReligion[i].toString(),"#000", fontPath));
												else if(i<=religionsList.size()+1+getObjectList().size()+1){
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(studentCountByReligion[i].toString(),"#000", fontPath));
												}else{
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(studentCountByReligion[i].toString(),"#000", fontPath));
												}
											} else {
												if(i<=religionsList.size())
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("0","#000", fontPath));
												else if(i<=religionsList.size()+1+getObjectList().size()+1){
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("0","#000", fontPath));
												}else{
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
												}
											}
										}
									}
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("GrandTotal","#000", fontPath));
									Object[] studentCountByReligion = adminManager.getAllStudentsCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),0,getAnyTitle(),getUsername());
									for (int i = 0; i < studentCountByReligion.length; i++) {
										if (!ObjectFunctions.isNullOrEmpty(studentCountByReligion[i])) {
											if(i<=religionsList.size()+1)
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(studentCountByReligion[i].toString(),"#000", fontPath));
											else if(i<=religionsList.size()+1+getObjectList().size()+1){
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(studentCountByReligion[i].toString(),"#000", fontPath));
											}else{
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(studentCountByReligion[i].toString(),"#000", fontPath));
											}
										} else {
											if(i<=religionsList.size())
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
											else if(i<=religionsList.size()+1+getObjectList().size()+1){
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
											}else{
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
											}
										}
									}
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAlign("Signature of the Headmaster",width, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
									mainTable.addCell(defaultersHeaderReport);
									pDFGenerator.getDocument().add(mainTable);
									pDFGenerator.getDocument().close();
									pDFGenerator = null;
									mainTable = null;
									defaultersHeaderReport = null;
									phfmj = null;
							}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}

	/* @Description 15rd Apr cvs: Modularization  below method  staff religion wise summary */  
	@Actions( { @Action(value = "printStaffReligionWiseDetails", results = {}) })
	public String printStaffReligionWiseDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'printStaffReligionWiseDetails' method");
			}
			if (getUserAcademicYearId()!=0) {
				String religionIds =getAnyTitle();
				List<CommonType> religionsList =adminManager.getAll(CommonType.class," id in"+getAnyTitle());
				String fileName = null;
				if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
					 fileName = "Religion Wise Staff In Hostel";
				}else{
					fileName = "Religion Wise Staff In School";
				}
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
						 //List<Staff> StaffsList = adminManager.getAllByCustId("Staff", getUserCustId(),String.valueOf(getUserAcademicYearId()));
						if (getUser().getId() != 0) {
							if (!ObjectFunctions.isNullOrEmpty(religionsList)) {
								String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
								FontFactory.register(fontPath);
								pDFGenerator.getDocument().open();
								// creating pDF page event to set header and Footer to document
								PdfPTable mainTable = new PdfPTable(1);
								mainTable.setWidthPercentage(100);
								mainTable.setSplitLate(false);
								mainTable.getDefaultCell().setBorder(Rectangle.BOX);
								List<MotherTongue> motherTongueList = (List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST);
								int width = religionsList.size()+motherTongueList.size()+6;
								String[] SchoolStandards = { "Religion Minority", "Linguistic Minority"};
								PdfPTable defaultersHeaderReport = new PdfPTable(width);
								defaultersHeaderReport.setWidthPercentage(100);
								
								PdfPTable headerReport = new PdfPTable(100);
								headerReport.setWidthPercentage(100);
								if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
									fileName = "Religion Wise Staff In Hostel"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
									hostelOrganizationDetailsForPdf(fontPath,headerReport,100);
									headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("RELIGION WISE STAFF IN HOSTEL",100, fontPath));
								}else{
									fileName = "Religion Wise Staff In School"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
									organizationDetailsForPdf(fontPath,headerReport,100 );
									headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("RELIGION WISE STAFF IN SCHOOL",100, fontPath));
								}
								mainTable.addCell(headerReport);
								
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Organization Type", "#000",fontPath));
								int size =religionsList.size()+1;
								for (int k = 0; k < SchoolStandards.length; k++) {
									if(k==0)
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(SchoolStandards[k],size+1, fontPath));
									else{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJaspersForFemale(SchoolStandards[k],width-2, fontPath));
									}
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(" ", "#000",fontPath));
								for (int k = 0; k < SchoolStandards.length; k++) {
									if(k==0){
										for (CommonType commonType1 : religionsList) {
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(commonType1.getSkillTypeName(),"#000", fontPath));
										}
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("OTHERS","#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("Total","#000", fontPath));
									}else{
										for (MotherTongue motherTongue : motherTongueList) {
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale(motherTongue.getName(),"#000", fontPath));
										}
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("OTHERS","#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Total","#000", fontPath));
									}
									
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("GrandTotal","#000", fontPath));
								List<OrganizationTypes> organizationTypesList = adminManager.getAll(OrganizationTypes.class);
								for (OrganizationTypes organizationTypes : organizationTypesList) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(organizationTypes.getOrganizationType(),"#000", fontPath));
									Object[] staffCountByReligion = adminManager.getAllStaffCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),organizationTypes.getId(),religionIds,getUsername());
									//int SchoolStandardsCount=0;
								if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion)) {
									for (int l = 0; l < staffCountByReligion.length; l++) {
											if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion[l])) {
												if (l == 0)
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(staffCountByReligion[l].toString(),"#000", fontPath));
												else {
													if(l<=religionsList.size()+1)
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale(staffCountByReligion[l].toString(),"#000", fontPath));
													else if(l<=religionsList.size()+1+getObjectList().size()+1){
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale(staffCountByReligion[l].toString(),"#000", fontPath));
													}else{
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffCountByReligion[l].toString(),"#000", fontPath));
													}
												}
											} else {
												if (l == 0)
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("0","#000", fontPath));
												else {
													if(l<=religionsList.size()+1)
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForFemale("0","#000", fontPath));
													else if(l<=religionsList.size()+1+getObjectList().size()+1){
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassForMale("0","#000", fontPath));
													}else{
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
													}
												}
											}
										}
									}
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("GrandTotal","#000", fontPath));
								Object[] staffCountByReligion = adminManager.getAllStaffCountByReligionWide(getUserCustId(),getUserAcademicYearId(),religionsList,getObjectList(),0,religionIds,getUsername());
								//int SchoolStandardsCount=0;
								if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion)) {
									for (int l = 0; l < staffCountByReligion.length; l++) {
											if (!ObjectFunctions.isNullOrEmpty(staffCountByReligion[l])) {
												if (l == 0)
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffCountByReligion[l].toString(),"#000", fontPath));
												else {
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffCountByReligion[l].toString(),"#000", fontPath));
												}
											} else {
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("0","#000", fontPath));
											}
										}
									}
								
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAlign("Signature of the Headmaster",width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(" ",width, fontPath));
								mainTable.addCell(defaultersHeaderReport);
								pDFGenerator.getDocument().add(mainTable);
								mainTable = null;
								defaultersHeaderReport = null;
								motherTongueList = null;
							}
						}
					pDFGenerator.getDocument().close();
					pDFGenerator = null;
					phfmj = null;
					
					religionsList = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}

	
	@Actions( {
		@Action(value = "ajaxDoViewHostelReports", results = { @Result(location = "../admin/reports/ajaxHostelReports.jsp", name = "success") }),
		@Action(value = "ajaxManageHostelReports", results = { @Result(location = "../admin/reports/ajaxManageReports.jsp", name = "success") })
	})
		public String ajaxDoViewHostelReports() throws URTUniversalException  {
		if (log.isDebugEnabled()) {
		    log.debug("Entering 'ajaxDoViewHostelReports' method");
		}
		try {
		    setClassList(adminManager.getAll(ClassName.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
		    if(ObjectFunctions.isNotNullOrEmpty(getClassList()))
				Collections.sort(getClassList());
		    setBuildingList(adminManager.getAll(Building.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
		} catch (Exception ex) {
    		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
    	}
    	return SUCCESS;
    }
	@Actions({		
		@Action(value = "ajaxSelectGenerateHostelReports", results = { @Result(location = "../admin/reports/ajaxHostelReports.jsp",name="success") })
		})
		public String ajaxSelectGenerateHostelReports() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSelectGenerateHostelReports' method");
		}
		try
		{ 
		    setClassList(adminManager.getAll(ClassName.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
		    setBuildingList(adminManager.getAll(Building.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
		}
		catch(Exception ex)
		{
			log.error("Entering into 'catch block':"+ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}		
		return SUCCESS;
	}
	@Actions({		
		@Action(value = "ajaxGenerateHostelReports", results = { @Result(location = "jasper/hostel/studentsAllotedBedsReport.jasper",type="jasper", name = "success",params = {"dataSource", "tempList", "format", "PDF"}),
																  @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" })}) })
		public String ajaxGenerateHostelReports() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateHostelReports' method");
		}
		try
		{
			if(StringFunctions.isNotNullOrEmpty(getAnyId()) && StringFunctions.isNotNullOrEmpty(getAnyTitle()) && StringFunctions.isNotNullOrEmpty(getTempString())){
				if(StringFunctions.isNullOrEmpty(getQueryString()))
					setTempList(adminManager.getAll(ViewStudentsAllotedBeds.class,"classId in"+getAnyId()+" and buildingId in"+getAnyTitle()+" and gender in"+getTempString()+" order by buildingName"));
				else
					setTempList(adminManager.getAll(ViewStudentsAllotedBeds.class,"classId in"+getAnyId()+" and buildingId in"+getAnyTitle()+" and gender in"+getTempString()+" order by buildingName,"+getQueryString()));
			}
			if(ObjectFunctions.isNullOrEmpty(getTempList())){
				setAlertSendType("Currently there are no existing hostel students");
				getResponse().setHeader("Content-Disposition","attachment; filename=verticalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
				return "errorMessage";
			}
			 getResponse().setHeader("Content-Disposition","attachment; filename=studentsAllotedBedsReport"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
		}
		catch(Exception ex)
		{
			log.error("Entering into 'catch block':"+ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}		
		return SUCCESS;
	}
	
	
	/********************************************************************
	 * Date              Name               Description
	 * ========          ============       ==================
	 * July 17, 2013      Rama		        Modified this method for generating id card for classsectionwise and admissionnumberwise.
	 * 
	/********************************************************************/	
	@Actions( { @Action(value = "ajaxAllStudentIdCardGeneration", results = {@Result(location = "jasper/admission/horizontalIdCardGenerator.jasper", type = "jasper", name = "success", params = {"dataSource", "objectList", "format", "PDF" }),
			@Result(location = "jasper/admission/horizontalIdCardGeneratorWithoutBloodgroup.jasper", type = "jasper", name = "noBloodGroupHorizontalSuccess", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/admission/verticalIdCardGenerator.jasper", type = "jasper", name = "SuccessVertical", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/jawaharHorizontalIdCardGenerator.jasper", type = "jasper", name = "jawaharMemorialSchool", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/puttanaHorizontalIdCardGeneratorWithoutBloodgroup.jasper", type = "jasper", name = "puttanaPublicSchool", params = {"dataSource", "objectList", "format", "PDF" }),
																			 
			@Result(location = "jasper/admission/verticalIdCardGeneratorWithoutBloodgroup.jasper", type = "jasper", name = "SuccessVerticalNoBloodGroup", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/admission/dynamicHorizontalIdCardGenerator.jasper", type = "jasper", name = "colorHorizontalId", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/admission/dynamicVerticalIdCardGenerator.jasper", type = "jasper", name = "colorVerticalIdCard", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/sharonHorizontalIdCardGenerator.jasper", type = "jasper", name = "sharonHorizontalId", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/library/libraryIdCardsGeneration.jasper", type = "jasper", name = "libraryIdCards", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/sriRamaVidyalayaVerticallIdCardGenerator.jasper", type = "jasper", name = "custId-194", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/sacredChildrenhorizontalIdCardGenerator.jasper", type = "jasper", name = "custId-147", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/AntonyverticalIdCardGenerator.jasper", type = "jasper", name = "custId-37", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/holyFathHorizontalIdCardGenerator.jasper", type = "jasper", name = "custId-285", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/jubileeSchoolVerticalIdCardGenerator.jasper", type = "jasper", name = "custId-275", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/jubileePrimarySchoolVerticalIdCardGenerator.jasper", type = "jasper", name = "custId-269", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/padmasreehorizontalIdCardGenerator.jasper", type = "jasper", name = "custId-281", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/jonhsonverticalIdCardGenerator.jasper", type = "jasper", name = "custId-256", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/SANVidyanikathanHorizontalIdCardGenerator.jasper", type = "jasper", name = "custId-193", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/clarenceSchoolHorizontalIdCard.jasper", type = "jasper", name = "CLARENCEID", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/sriLakshmiHorizontalIdCardGenerator.jasper", type = "jasper", name = "custId-344", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/idcards/ShikshaNiketanHorizontalIdCard-1.jasper", type = "jasper", name = "custId-86", params = {"dataSource", "objectList", "format", "PDF" }),
																			 @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" })}) })
	
    public String ajaxAllStudentIdCardGeneration() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAllStudentIdCardGeneration' method");
		}
		String returnPage = "libraryIdCards";
		try {
			if (getUserAcademicYearId() != 0 || getAcademicYearId() !=0) {
				String admissionNumber = getAnyId();
				setCustomer(getCustomerByCustId());
				if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
					setCustomerName(getCustomer().getOrganization().toUpperCase());
					setAnyId(getCustomer().getOrganizationFullAddress()); 
					setTempString3(getCustomer().getContactNumber());
				}
				Date newDate = new Date();
			//	DateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");
				SimpleDateFormat newDateFormat = new SimpleDateFormat("dd-MMM-yyyy");
				String currentdate = newDateFormat.format(newDate);
				String dateFormat = "View All Student ID Card Generation "+ currentdate;
				setTodayDate(dateFormat);
				String cardStr=getParamValue("cardType");	
				
				if(getAcademicYearId()>0)
				{
					if(!StringFunctions.isNullOrEmpty(getSelectedId())){
						setObjectList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+ getUserCustId() + " and status='"+ Constants.YES_STRING+ "' and academicYearId="+ getAcademicYearId()+" and classNameClassId in "+getSelectedId()+" and joinedThroughAdmissions='Y' order by classSectionId "));		        
					}
					else if(!StringFunctions.isNullOrEmpty(admissionNumber)){
						setObjectList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+ getUserCustId() + " and academicYearId="+ getAcademicYearId()+"  and username in "+admissionNumber+" "));	
					}
				}else{
					if(!StringFunctions.isNullOrEmpty(getSelectedId())){
						setObjectList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+ getUserCustId() + " and status='"+ Constants.YES_STRING+ "' and academicYearId="+ getUserAcademicYearId()+" and classSectionId in "+getSelectedId()+" order by classSectionId "));		        
					}
					else if(!StringFunctions.isNullOrEmpty(admissionNumber) && !ObjectFunctions.isNullOrEmpty(getUserAcademicYearId())){
						setObjectList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+ getUserCustId() + " and academicYearId="+ getUserAcademicYearId()+"  and username in "+admissionNumber+" "));	
					}
				}	
				if(!ObjectFunctions.isNullOrEmpty(getObjectList()))
				{
				  if("H".equalsIgnoreCase(cardStr)) {
					  getResponse().setHeader("Content-Disposition","attachment; filename=horizontalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
					  if(getUserCustId() == 26){
						  returnPage = "colorHorizontalId";
					  }else if(getUserCustId() == 116){
						  returnPage = "sharonHorizontalId";
					  }else if(getUserCustId() == 147){  // SACRED TRUST
						  returnPage = "custId-147";
					  }else if(getUserCustId() == 285){  // HOLY FAITH SCHOOL
						  returnPage = "custId-285";
					  }else if(getUserCustId() == 281){  // PADMASHREE SCHOOL
						  returnPage = "custId-281";
					  }else if(getUserCustId() == 193){  // SAN VIDHYANIKETHAN
						  returnPage = "custId-193";
					  }else if(getUserCustId() == 318){  // CLARENCE SCHOOL
						  returnPage = "CLARENCEID";
					  }else if(getUserCustId() == 344){  // SRI LAKSHMI SCHOOL
						  returnPage = "custId-344";
					  }else if(getUserCustId() == 243 || getUserCustId() == 190){ //JAWAHAR MEMORIAL ENGLISH HIGH SCHOOL
						  returnPage = "jawaharMemorialSchool";
					  }else if(getUserCustId() == 245 || getUserCustId() == 225){ //PUTTANA PUBLIC SCHOOL
						  returnPage = "puttanaPublicSchool";
					  }else if(getUserCustId() == 86 || getUserCustId() == 13){ //JAWAHAR MEMORIAL ENGLISH HIGH SCHOOL
						  returnPage = "custId-86";
					  }
					  
					  else{
						  getResponse().setHeader("Content-Disposition","attachment; filename=horizontalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
						  if("Y".equalsIgnoreCase(getCustomer().getDisplayBloogGroupInStudentIdCards()))
							  returnPage =  SUCCESS;
						  else
							  returnPage =  "noBloodGroupHorizontalSuccess";
					  }
				   }else if("V".equalsIgnoreCase(cardStr)){
					   getResponse().setHeader("Content-Disposition","attachment; filename=verticalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
					   if(getUserCustId() == 26){
						   return "colorVerticalIdCard";
					   }else if(getUserCustId() == 194 || getUserCustId() == 236){ // SRI RAMA VIDYALAYA
						   return "custId-194";
					   }else if(getUserCustId() == 37){ // ANTONY'S SCHOOL
						   return "custId-37";
					   }else if(getUserCustId() == 275){ // JUBILEE SCHOOL
						   return "custId-275";
					   }else if(getUserCustId() == 63){ // JUBILLEE PRIMARY SCHOOL
						   return "custId-269";
					   }else if(getUserCustId() == 256){ // JOHNSON SCHOOL
						   return "custId-256";
					   }
					   else{
						   getResponse().setHeader("Content-Disposition","attachment; filename=verticalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
						   if("Y".equalsIgnoreCase(getCustomer().getDisplayBloogGroupInStudentIdCards()))
								  returnPage =  "SuccessVertical";
							  else
								  returnPage =  "SuccessVerticalNoBloodGroup";
					   }
				   } 
				   else{
					   getResponse().setHeader("Content-Disposition","attachment; filename=StudentsLibraryIdCards"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
				   }
				}
			  else{
					setAlertSendType("Currently there are no active students.");
					getResponse().setHeader("Content-Disposition","attachment; filename=verticalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
					returnPage = "errorMessage";
				}
				setSelectedId(null);
				admissionNumber = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return returnPage;
	}
	
	@Actions( { @Action(value = "ajaxAllStaffIdCardGeneration", results = {@Result(location = "jasper/admission/horizontalStaffIdCardGenerator.jasper", type = "jasper", name = "success", params = {"dataSource", "objectList", "format", "PDF" }),
			 																@Result(location = "jasper/admission/verticalStaffIdCardGenerator.jasper", type = "jasper", name = "SuccessVertical", params = {"dataSource", "objectList", "format", "PDF" }),	
			 																@Result(location = "jasper/library/staffLibraryIdCardsGeneration.jasper", type = "jasper", name = "staffLibraryIdCards", params = {"dataSource", "objectList", "format", "PDF" }),
			 																@Result(location = "jasper/idcards/padmasreeStaffHorizontalIdCardGenerator.jasper", type = "jasper", name = "custId-281", params = {"dataSource", "objectList", "format", "PDF" }),
			 																@Result(location = "jasper/idcards/johnsonStaffVerticalIdCardGenerator.jasper", type = "jasper", name = "custId-256", params = {"dataSource", "objectList", "format", "PDF" }),
			 																@Result(location = "jasper/idcards/SANVidyanikathanStaffHorizontalIdCard.jasper", type = "jasper", name = "SANHorizontal", params = {"dataSource", "objectList", "format", "PDF" }),
			 																@Result(location = "jasper/idcards/puttanaStaffHorizontalIdCard.jasper", type = "jasper", name = "PuttannaHorizontal", params = {"dataSource", "objectList", "format", "PDF" }),
			 																@Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" })}) })
	public String ajaxAllStaffIdCardGeneration() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAllStaffIdCardGeneration' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				setCustomer(getCustomerByCustId());
				if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
					setCustomerName(getCustomer().getOrganization().toUpperCase());
					setAnyTitle(getCustomer().getOrganizationFullAddress());
					setTempString3(getCustomer().getContactNumber());
				}
				Date newDate = new Date();
			//	DateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");
				SimpleDateFormat newDateFormat = new SimpleDateFormat("dd-MMM-yyyy");
				String currentdate = newDateFormat.format(newDate);
				String dateFormat = "View All Staff ID Card Generation "+ currentdate;
				setTodayDate(dateFormat);
				String cardStr=getParamValue("cardType");				
				if(!StringFunctions.isNullOrEmpty(getSelectedId())){
                    setObjectList(adminManager.getAll(ViewStaffPersonAccountDetails.class, " custId="+ getUserCustId() + " and roleId in "+getSelectedId()+" and status='"+ Constants.YES_STRING+ "' and academicYearId<='"+ getUserAcademicYearId()+"' order by roleId"));                
                }
				if(!StringFunctions.isNullOrEmpty(getPlTitle())){
                    setObjectList(adminManager.getAll(ViewStaffPersonAccountDetails.class, " custId="+ getUserCustId() + " and roleName in "+getPlTitle().replaceAll(",0", "")+" and status='"+ Constants.YES_STRING+ "' and academicYearId<='"+ getUserAcademicYearId()+"' order by roleId"));                
                }
				if(!StringFunctions.isNullOrEmpty(getAnyId())){
                    setObjectList(adminManager.getAll(ViewStaffPersonAccountDetails.class, " custId="+ getUserCustId() + " and accountId in "+getAnyId()+" and status='"+ Constants.YES_STRING+ "' and academicYearId<='"+ getUserAcademicYearId()+"'"));                
                }
							
				if(!ObjectFunctions.isNullOrEmpty(getObjectList())){
				  if("H".equalsIgnoreCase(cardStr)) {
					  getResponse().setHeader("Content-Disposition","attachment; filename=horizontalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
					  if(getUserCustId() == 281){  // Padmashree school
						  return "custId-281";
					  }
					   else if(getUserCustId() == 193){ // SAN SCHOOL
						  return "SANHorizontal";
					  }
					   else if(getUserCustId() == 245){ // Puttanna School
							  return "PuttannaHorizontal";
						  }
					  else
						  getResponse().setHeader("Content-Disposition","attachment; filename=horizontalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
						  return SUCCESS;
				  }else if("V".equalsIgnoreCase(cardStr)){
					getResponse().setHeader("Content-Disposition","attachment; filename=verticalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
					if(getUserCustId() == 256)  // Johnson school
						  return "custId-256";
				   }
				  else{
					   getResponse().setHeader("Content-Disposition","attachment; filename=staffLibraryIdCards"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
					   return "staffLibraryIdCards";
				   }
				}
			  else{
					setAlertSendType("Currently there are no active staff.");
					getResponse().setHeader("Content-Disposition","attachment; filename=verticalIdCard"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
					return "errorMessage";
				}
				setSelectedId(null);
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return "SuccessVertical";
	}
	
	
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxAllStudentsCountWithCommunity", results = {}) })
	public void ajaxAllStudentsCountWithCommunity()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAllStudentsCountWithCommunity' method");
		}
		try {
			// TODO what if no academic year
			if (getUserAcademicYearId() != 0) {
				String fileName = null;
				if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
					fileName = "Hostel_community_import_template_"+ getUserAcademicYearId();
				}else{
					fileName = "school_community_import_template_"+ getUserAcademicYearId();
				}
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
						 List<CastSettings> castSettingList = adminManager.getAllByCustId("CastSettings", getUserCustId(),0);
						if (getUser().getId() != 0) {
							int classesCount = adminManager.getCount("class","custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
							List<ClassName> classNameList = adminManager.getAll(ClassName.class," id in"+getSelectedId());
							int selectedClassSize = classNameList.size();
								if (!ObjectFunctions.isNullOrEmpty(castSettingList) && !ObjectFunctions.isNullOrEmpty(classNameList)) {
									excelView.setWorkSheetName("Community Information");
							    	excelView.createWorkSheet(0);
							    	excelView.setDefaultFormat(excelView.getArial10format());
							    	
							        int size = castSettingList.size()*2+4;
							        //For School Name
						        	WritableCellFormat cellFormat10= getCellFormat10();
									//For School Address
						        	WritableCellFormat cellFormat8= getCellFormat8();
							    	//For data with white color
						        	WritableCellFormat cellFormatWht10 = getCellFormatWht10();
									//For Male
						        	WritableCellFormat  maleCell =getMaleCell();
						    		//For FEMale
						        	WritableCellFormat  femaleCell = getFemaleCell();
						    		
						    		WritableCellFormat[] formats =new WritableCellFormat[2];
						    		formats[0]=maleCell;
						    		formats[1]=femaleCell;
						    		//excelView.getWs().removeRow(0);
						     		hostelOrganizationDetailsForExcel(excelView,cellFormat10,cellFormat8,size); 
						     		excelView.getWs().removeRow(0);
							        excelView.getWs().setColumnView(0,20);
							        excelView.getWs().setColumnView(1,10);
							        excelView.getWs().setColumnView(2,10);
							        //excelView.getWs().removeRow(6);
							    	String[] genders = { "Male", "Female"};
									excelView.getWs().mergeCells(0, 5, size,5);
									if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
										if(classesCount==selectedClassSize)
										excelView.getWs().addCell(new Label(0,5, "HOSTEL WIDE COMMUNITY MATRIX", cellFormatWht10));
									}else{
										if(classesCount==selectedClassSize)
										excelView.getWs().addCell(new Label(0,5, "SCHOOL WIDE COMMUNITY MATRIX", cellFormatWht10));
									}
									if(classesCount>selectedClassSize)
										excelView.getWs().addCell(new Label(0,5, "CLASSES WISE COMMUNITY MATRIX", cellFormatWht10));
									//excelView.getWs().removeRow(6);
							    	excelView.getWs().mergeCells(0, 6, 0,7);
							    	excelView.getWs().addCell(new Label(0,6, "Class", excelView.getWrapCellFormat()));
							    	excelView.getWs().mergeCells(1, 6, 1,7);
							    	excelView.getWs().addCell(new Label(1,6, "#Sections", cellFormatWht10));
							    	excelView.getWs().mergeCells(2, 6, 2,7);
							    	excelView.getWs().addCell(new Label(2,6, "Total Students", cellFormatWht10));
							    		int cellCount =3;
							    		int cellNum=3;
										for (int k = 0; k < genders.length; k++) {
											for (CastSettings castSettings : castSettingList) {
													excelView.getWs().addCell(new Label(cellCount,7, castSettings.getCastName(), formats[k]));
													cellCount++;
											}
											excelView.getWs().addCell(new Label(cellCount,7, "Total", formats[k]));
											excelView.getWs().mergeCells(cellNum, 6,cellCount,6);
											excelView.getWs().addCell(new Label(cellNum,6, genders[k], formats[k]));
											cellCount++;
											cellNum=cellNum+castSettingList.size()+1;
										}
										cellNum +=cellNum+castSettingList.size()+1;
										int cellstart =0;
										int cellRowNum=8;
										int gendersSize=castSettingList.size()+1;
										int noOfSections =0;
										Object[] genderCastCount = null;
										for(ClassName className:classNameList){
												genderCastCount = adminManager.getAllStudentsByClassNameAndCastName(getUserCustId(),getUserAcademicYearId(),castSettingList,className.getId(),getUsername());
											if(!ObjectFunctions.isNullOrEmpty(genderCastCount)){
												excelView.getWs().addCell(new Label(cellstart,cellRowNum, className.getClassName(),excelView.getWrapCellFormat()));
												cellstart++;
												excelView.getWs().addCell(new Label(cellstart,cellRowNum, String.valueOf(className.getNoOfSections()),cellFormatWht10));
												 noOfSections += className.getNoOfSections();
												cellstart++;
													int genderCount=0; 
													for (int j = 0; j < genderCastCount.length; j++) {
														if(j > gendersSize)
															genderCount=1;
														if(!ObjectFunctions.isNullOrEmpty(genderCastCount[j])){
															if(j==0)
																excelView.getWs().addCell(new Label(cellstart,cellRowNum, genderCastCount[j].toString(),cellFormatWht10));
															else{
																excelView.getWs().addCell(new Label(cellstart,cellRowNum, genderCastCount[j].toString(),formats[genderCount]));									
																}
														}else {
																excelView.getWs().addCell(new Label(cellstart,cellRowNum, "0",formats[genderCount]));
														}
														cellstart++;
													}
													cellRowNum++;
													cellstart=0;
												genderCastCount=null;
											}
										}
										excelView.getWs().addCell(new Label(0,cellRowNum, "Grand Total",cellFormatWht10));
										excelView.getWs().addCell(new Label(1,cellRowNum, String.valueOf(noOfSections),cellFormatWht10));
										int starts =2;
										Object[] castWiseCount  = null;
											 castWiseCount = adminManager.getAllStudentsCountByCastWise(getUserCustId(),getUserAcademicYearId(),castSettingList,getUsername(),getSelectedId());
										int genderCount=0;
										
										for (int l = 0; l < castWiseCount.length; l++) {
											if(l > gendersSize)
												genderCount=1;
											if(!ObjectFunctions.isNullOrEmpty(castWiseCount[l])){
												if(l==0)
													excelView.getWs().addCell(new Label(starts,cellRowNum, castWiseCount[l].toString(),cellFormatWht10));
												else{
													excelView.getWs().addCell(new Label(starts,cellRowNum, castWiseCount[l].toString(),formats[genderCount]));									
													}
											}else {
													excelView.getWs().addCell(new Label(starts,cellRowNum, "0",formats[genderCount]));
											}
											starts++;
										}
										cellRowNum++;
										starts=0;
										castWiseCount=null;
										
										 int col =cellRowNum+2;
										 excelView.getWs().mergeCells(0, cellRowNum,size,col);
										 excelView.getWs().addCell(new Label(0,cellRowNum,"Signature of the Headmaster",excelView.getWrapCellFormatCenter()));
										 showSchoolUrlInExcelSheetFooter(col,excelView,size);
 										//int column=3;
							}
						}
					
					excelView.getWb().write();
					excelView.getWb().close();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions({
		@Action(value = "ajaxGenerateStaffHostelReports", results = {  @Result(location = "jasper/hostel/staffAllotedBedsReport.jasper", type="jasper", name = "success",params = {"dataSource","tempList","format", "PDF"}),
					                                                             @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" }) }) })
		public String ajaxGenerateStaffHostelReports() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateStaffHostelReports' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getAnyTitle()) && StringFunctions.isNotNullOrEmpty(getTempString())){
				if(StringFunctions.isNullOrEmpty(getQueryString()))
					setTempList(adminManager.getAll(ViewStaffAllotedBeds.class,"buildingId in"+getAnyTitle()+" and gender in"+getTempString()+" order by buildingName"));
				else
					setTempList(adminManager.getAll(ViewStaffAllotedBeds.class,"buildingId in"+getAnyTitle()+" and gender in"+getTempString()+" order by buildingName,"+getQueryString()));
			}
			if (!ObjectFunctions.isNullOrEmpty(getTempList()) ) {
				 getResponse().setHeader("Content-Disposition","attachment; filename=staffAllotedBedsReport.pdf");
			}else{
				setAlertSendType("Currently there are no staff assigned to the hostel.");
				return "errorMessage";
			}
		}
		catch(Exception ex) {
			log.error("Entering into 'catch block':"+ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}		
		return SUCCESS;
	}
	/* @Description 15rd Apr cvs: Modularization */ 
	@Actions( { @Action(value = "ajaxDoViewStaffHostelReports", results = { @Result(location = "../admin/reports/ajaxStaffHostelReports.jsp", name = "success") })
	})
	public String ajaxDoViewStaffHostelReports() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoViewStaffHostelReports' method");
		}
		try {
			setBuildingList(adminManager.getAll(Building.class, " custId="+ getUserCustId() + " and academicYearId="+ getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxPrintCustomerStudentSchoolDetails", results = {}) })
	public void ajaxPrintCustomerStudentSchoolDetails()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrintCustomerStudentSchoolDetails' method");
		}
		try {
    		// TODO what if no academic year
    		if(getUserAcademicYearId() != 0 ){
    			String fileName =null;
    			if(ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYearName")))
    				fileName = "Student Details";
    			else
    				fileName = "Student Details_"+getSession().getAttribute("academicYearName");	
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				excelView.setWorkSheetName("Studnet Details");
		    	excelView.createWorkSheet(0);
		    	excelView.setDefaultFormat(excelView.getArial10format());
		    	//For School Name
		    //	WritableCellFormat cellFormat10= getCellFormat10();
	        	 excelView.getWs().setColumnView(5,10);
	        	 excelView.getWs().setColumnView(0,15);
	        	 excelView.getWs().setColumnView(1,30);
	        	 excelView.getWs().setColumnView(2,20);
    			excelView.getWs().addCell(new Label(0,0, "Customer Id",excelView.getUsermore10BoldformatGreenBgClr()));
    			excelView.getWs().addCell(new Label(1,0, String.valueOf(getUserCustId())));
    			excelView.getWs().addCell(new Label(0,1, "Account Id" ,excelView.getUsermore10BoldformatGreenBgClr()));
    			excelView.getWs().addCell(new Label(1,1, "First Name",excelView.getUsermore10BoldformatGreenBgClr()));
    			excelView.getWs().addCell(new Label(2,1, "Last Name",excelView.getUsermore10BoldformatGreenBgClr()));
    			List<ViewStudentPersonAccountDetails> personAccountDetails=adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId());
				if (ObjectFunctions.isNotNullOrEmpty(personAccountDetails)) {
					int columnStart = 2;
					for (ViewStudentPersonAccountDetails accountDetails : personAccountDetails) {
						if (!ObjectFunctions.isNullOrEmpty(accountDetails)) {
							excelView.getWs().addCell(new Label(0,columnStart,String.valueOf(accountDetails.getAccountId())));
							excelView.getWs().addCell(new Label(1,columnStart,accountDetails.getFirstName()));
							excelView.getWs().addCell(new Label(2,columnStart,accountDetails.getLastName()));
							columnStart++;
						}
					}
				}
				excelView.getWb().write();
				excelView.getWb().close();
    		}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}

	@Actions( { @Action(value = "ajaxVisitorInOutReports", results = {@Result(location = "jasper/marks/hostelVisitorsInOutDetails.jasper", type = "jasper", name = "success", params = {
					"dataSource", "tempList", "format", "PDF" }),
			@Result(location = "jasper/marks/hostelStudentInOutReports.jasper", type = "jasper", name = "SUCCESSAll", params = {"dataSource", "tempList", "format", "PDF" }) }) })
	public String ajaxVisitorInOutReports() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxVisitorInOutReports' method");
		}
		try {
			String pdf = getAnyId();
			Address address = null;
			ViewStudentLeaveDetails visitorDetails = null;
			String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
			String toDayDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN, getParamValue("endDate"));
			if (getUserAcademicYearId() != 0) {
				if (!ObjectFunctions.isNullOrEmpty(fromDate) && !ObjectFunctions.isNullOrEmpty(toDayDate)) {
					setHostel((Hostel) adminManager.get(Hostel.class, "custId=" + getUserCustId()));
					if (!ObjectFunctions.isNullOrEmpty(getHostel())) {
						setCustomerName(getHostel().getHostelName());
						address = (Address) adminManager.get(Address.class,getHostel().getAddressId());
						setTempString(address.getStreetName() + ", " + address.getCity() + ", " + address.getState() + ", PIN:" + address.getPostalCode());
					}
					if ("Visitor".equalsIgnoreCase(getPlTitle())) {
						setObjectList(adminManager.getAllVisitorsByBetweenDated(getUserCustId(),getUserAcademicYearId(), toDayDate,fromDate));
						for (Object obj : getObjectList()) {
							visitorDetails = new ViewStudentLeaveDetails();
							Visitors visitors = (Visitors) obj;
							setViewStudentPersonAccountDetails((ViewStudentPersonAccountDetails) adminManager.get(ViewStudentPersonAccountDetails.class,getUserCustId()));
							visitorDetails.setLastName(visitors.getVisitorName());
							visitorDetails.setMiddleName(visitors.getRelation());
							visitorDetails.setFirstName(getViewStudentPersonAccountDetails().getFullFormattedName(true, true,true));
							visitorDetails.setClassName(getViewStudentPersonAccountDetails().getClassName());
							visitorDetails.setStartDate(visitors.getInDate());
							visitorDetails.setStartTime(visitors.getInTime());
							visitorDetails.setEndDate(visitors.getOutDate());
							visitorDetails.setEndTime(visitors.getOutTime());
							visitorDetails.setDescription(visitors.getReason());
							getTempList().add(visitorDetails);
						}
						if ("PDF".equalsIgnoreCase(pdf)) {
							getResponse().setHeader("Content-Disposition","attachment; filename=VisitorInOutDetails"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
						}
					}
					if ("Student".equalsIgnoreCase(getPlTitle())) {
						String clause = "academicYearId="+ getUserAcademicYearId() + " and custId = "+ getUserCustId() + " ORDER BY outDate DESC";
						setTempList(hostelManager.getAll(ViewStudentOutHostelDetails.class, clause));
						if ("PDF".equalsIgnoreCase(pdf)) {
							getResponse().setHeader("Content-Disposition","attachment; filename=HostelStudentInOutDetails"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
						}
						return "SUCCESSAll";
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
		@Actions( { @Action(value = "ajaxDailyAttendanceReportsOld", results = {@Result(location = "jasper/admission/dailyStudentsAttendanceReports.jasper", type = "jasper", name = "success", params = {"dataSource", "tempList", "format", "PDF" }),
				                                                             @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" }),
				                                                             @Result(location = "jasper/marks/examSchedulesWithClassesAndExamTypes.jasper", type="jasper", name = "studentExamSchedules",params = {"dataSource","getObjectList()","format", "PDF"}) }) })
	public String ajaxDailyAttendanceReportsOld() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDailyAttendanceReportsOld' method");
		}
		try {
			if (getPlTitle().equalsIgnoreCase("Exam Schedules")) {
				viewExamSchedulesForParents();
				if(!ObjectFunctions.isNullOrEmpty(getObjectList())){
					return "studentExamSchedules";
				}else {
					setAlertSendType("There is no examSchedules for this class.");
					return "errorMessage";
				}
				
			}else if (getPlTitle().equalsIgnoreCase("Class Wise Marks")) {
				ajaxClassWiseMArksDetails();
			}else{
			String pdf = "pdf";
			String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
			if (getUserAcademicYearId() != 0) {
				//setCustomer((Customer) adminManager.get(Customer.class,getUserCustId()));
				setCustomer(getCustomerByCustId());
				if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
					setCustomerName(getCustomer().getOrganization().toUpperCase());
				}
				if (!ObjectFunctions.isNullOrEmpty(fromDate) && "Student".equalsIgnoreCase(getTempString()) && !StringFunctions.isNullOrEmptyNoTrim(getParamValue("selectedId").trim())) {
					if(getUser().isSchoolStudent() || getUser().isParent()){
						if(getUser().isParent()){
							//String clause = "studentId ="+getParamValue("selectedId").trim()+ " and custId = "+ getUserCustId() + " and attendanceDate='"+fromDate+" 00:00:00'"+" and parentId="+getUser().getId();
							String clause = "studentId ="+getParamValue("selectedId").trim()+ " and custId = "+ getUserCustId() + " and attendanceDate='"+fromDate+" 00:00:00'"+" and accountId="+getUser().getSelectedStudentId();
							setTempList(hostelManager.getAll(VWStudentAttendance.class, clause));
						}else{
							String clause = "classSectionId ="+getParamValue("selectedId").trim()+ " and custId = "+ getUserCustId() + " and attendanceDate='"+fromDate+" 00:00:00'"+" and accountId="+getUser().getId();
							setTempList(hostelManager.getAll(VWStudentAttendance.class, clause));
						}
					}else{
						String clause = "classSectionId in "+getParamValue("selectedId").trim()+ " and custId = "+ getUserCustId() + " and attendanceDate='"+fromDate+" 00:00:00'";
						setTempList(hostelManager.getAll(VWStudentAttendance.class, clause));
					}
			  }
			}
			if ("PDF".equalsIgnoreCase(pdf) && !ObjectFunctions.isNullOrEmpty(getTempList()) ) {
				getResponse().setHeader("Content-Disposition","attachment; filename=DailyAttendanceDetails"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
			}else{
				setAlertSendType("There is no attendance with this date.");
				getResponse().setHeader("Content-Disposition","attachment; filename=DailyAttendanceDetails"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
				return "errorMessage";
			}
		}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
 * Date              Name               Description
 * ============      =======		    ==================
 * Aug 26, 2013      Seshu		    	Changed code for getting class names list
/********************************************************************/	
	@Actions( { @Action(value = "ajaxDoDownloadStudAttendanceTemplate", results = { @Result(location = "../admin/reports/ajaxAttendanceTemplateClasses.jsp", name = "success") }),
		@Action(value = "ajaxDoClassWiseStudentDetails", results = { @Result(location = "../admin/reports/ajaxDoGenerateClassWiseStudentsReport.jsp", name = "success") })
		})
	public String ajaxDoDownloadStudAttendanceTemplate() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoDownloadStudAttendanceTemplate' method");
		}
		try {
			setCustomer(getCustomerByCustId()); //here check hostel module above page by cvs on 13-3-2014.
			checkClassHavingStudentsOrNot(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxMonthwiseStudentAttendanceTemplate", results = {}) })
	public void ajaxMonthwiseStudentAttendanceTemplate()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxMonthwiseStudentAttendanceTemplate' method");
		}
		try {
			log.debug("Start Time"+new Date());
			if(ObjectFunctions.isNotNullOrEmpty(getChkBoxSelectedIds()) && StringFunctions.isNotNullOrEmpty(getTempString())){
				ExcelView excelView = new ExcelView();
				String fileName = "studentsMonthwiseAttendance_"+DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				
				//For School name
				WritableCellFormat cellFormat10= getCellFormat10();
				//For School Address
				WritableCellFormat cellFormat8= getCellFormat8();
		    	
				Customer customer = getCustomerByCustId();
				JSONArray classesJsonAray=new JSONArray(getTempString());
				JSONObject classJsonObj = null;
				String className = null;
				String classSectionId= null;
				List<Object[]> studentsList;
				Object[] totalWrkgDays = null;
				List<Object[]> totalPresentAtt = null;
				int row=0;
				int sNo=0;
				StringBuilder monthString=new StringBuilder("(");
	    		for(String month : getChkBoxSelectedIds()){
	    			monthString.append("'").append(month).append("',");
	    		}
	    		monthString.append("'").append(0).append("')");
	    		log.debug(monthString.toString());
	    		
				for(int i=0;i<classesJsonAray.length();i++)
				{
					classJsonObj=classesJsonAray.getJSONObject(i);
					if(!ObjectFunctions.isNullOrEmpty(classJsonObj))
					{
						className = (String)classJsonObj.get("className");
						classSectionId =(String) classJsonObj.get("classSectionId");
						if(StringFunctions.isNotNullOrEmpty(className) && StringFunctions.isNotNullOrEmpty(classSectionId)){
							//log.debug("className :"+className+" classSectionId :"+classSectionId);
							excelView.setWorkSheetName(className+" class");
					    	excelView.createWorkSheet(0);
					    	excelView.setDefaultFormat(excelView.getArial10format());
							if (!ObjectFunctions.isNullOrEmpty(customer)) {
					        	if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
							        excelView.getWs().mergeCells(0, 0, getChkBoxSelectedIds().size()+4,1);
							    	excelView.getWs().addCell(new Label(0,0, customer.getOrganization(), cellFormat10));
					        	}
					        	if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
							    	excelView.getWs().mergeCells(0, 2, getChkBoxSelectedIds().size()+4,2);
							    	excelView.getWs().addCell(new Label(0,2, customer.getCustomerFormattedAddress(), cellFormat8));
					        	}
					        }
							excelView.getWs().mergeCells(0, 3, getChkBoxSelectedIds().size()+3, 3);
							excelView.getWs().addCell(new Label(0,3, "Note :- You shouldn't change green colour fields."));
							int monthCol=5;
							excelView.getWs().addCell(new Label(0,4, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
							excelView.getWs().addCell(new Label(1,4, "Roll Number", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(2,4, "Admission Number", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(3,4, "Student Name", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().setRowView(4,600);
				    		excelView.getWs().mergeCells(0, 5, 3,5);
				    		excelView.getWs().addCell(new Label(0,5," Total Working Days :" , excelView.getUsermore10BoldformatGreenBgClr()));
				    		//log.debug(StringFunctions.convertListToCommaDelimitedString(getChkBoxSelectedIds()));
				    		
				    		log.debug("class starting -->"+className);
				    		//log.debug("select monthName,max(totalWorkingDays) from vw_StudentMonthlyAttendance where classSectionId="+classSectionId+" and academicYearId="+getUserAcademicYearId()+" and monthName in "+monthString.toString()+" group by monthName");
				    		List<Object[]> monthWiseDays = adminManager.getAll("select monthName,max(totalWorkingDays) from vw_StudentMonthlyAttendance where classSectionId="+classSectionId+" and academicYearId="+getUserAcademicYearId()+" and monthName in "+monthString.toString()+" group by monthName");
				    		Map<String, Object[]> monthWorkingDayMap = new HashMap<String, Object[]>();
				    		for(Object[] monthWorkingDays: monthWiseDays){
				    			monthWorkingDayMap.put(monthWorkingDays[0].toString(), monthWorkingDays);
				    		}
				    		Map<String, Integer> monthColMap = new HashMap<String, Integer>();
				    		
				    		for(String month : getChkBoxSelectedIds()){
				    			excelView.getWs().setColumnView(monthCol,20);
				    			excelView.getWs().addCell(new Label(monthCol,4, month, excelView.getUsermore10BoldformatGreenBgClr()));
				    			totalWrkgDays= monthWorkingDayMap.get(month);
				    			if(ObjectFunctions.isNullOrEmpty(totalWrkgDays) || ObjectFunctions.isNullOrEmpty(totalWrkgDays[1])){
				    				//excelView.getWs().addCell(new Label(monthCol,5, monthWiseWorkingDays.get(month)+"", excelView.getDefaultFormat()));
				    				excelView.getWs().addCell(new Label(monthCol,5, "", excelView.getDefaultFormat()));
				    			}else{
				    				excelView.getWs().addCell(new Label(monthCol,5, totalWrkgDays[1].toString(), excelView.getDefaultFormat()));
				    				monthColMap.put(totalWrkgDays[0].toString(), monthCol);
				    			}
				    			excelView.getWs().addCell(new Label(monthCol,6, month, excelView.getDefaultFormat()));
				    			excelView.getWs().addCell(new Label(monthCol,7, "Present Days Count", excelView.getUsermore10BoldformatGreenBgClr()));
				    			
				    			monthCol++;
				    		}
				    		
				    		log.debug(monthString.toString());
				    		CellView cv=new CellView();
					        cv.setHidden(true);
					        excelView.getWs().setColumnView(4, cv);
					        excelView.getWs().setRowView(6, cv);
					        cv=null;
					        excelView.getWs().setColumnView(1,10);
							excelView.getWs().setColumnView(2,10);
							excelView.getWs().setColumnView(3,25);
							if(getUserCustId() == 2)
								studentsList=adminManager.getAll("select studId,admissionNumber,fullName,rollNumber from vw_studentClassDetails where classSectionId="+classSectionId+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and studDiscontinueDesc is null  order by gender desc,fullName");
							else
								studentsList=adminManager.getAll("select studId,admissionNumber,fullName,rollNumber from vw_studentClassDetails where classSectionId="+classSectionId+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and studDiscontinueDesc is null  order by "+getAnyId());
							if(("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber())) && "RollNumber".equalsIgnoreCase(getAnyId()))
								Collections.sort(studentsList,new StudentRollNumberComparator());
							if(ObjectFunctions.isNotNullOrEmpty(studentsList)){
								row=8;
								sNo=1;
								for(Object[] student: studentsList){
									excelView.getWs().addCell(new Label(0,row, ""+sNo++, excelView.getUsermore10BoldformatGreenBgClr()));
									excelView.getWs().addCell(new Label(1,row, ""+student[3].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(2,row, student[1].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(3,row, student[2].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(4,row, student[0].toString()+":"+classSectionId, excelView.getUsermore10BoldformatGreenBgClr()));
						    		monthCol=5;
						    		totalPresentAtt = adminManager.getAll("select monthName,noOfPresentDays from vw_StudentMonthlyAttendance  where classSectionId="+classSectionId+" and academicYearId="+getUserAcademicYearId()+" and monthName in "+monthString+" and studentId="+student[0].toString()+" group by monthName");
						    		for(Object[] totalPresent : totalPresentAtt){
						    			if(!ObjectFunctions.isNullOrEmpty(totalPresentAtt) && !ObjectFunctions.isNullOrEmpty(totalPresent[1])){
						    				excelView.getWs().addCell(new Label(monthColMap.get(totalPresent[0].toString().trim()),row, totalPresent[1].toString(), excelView.getDefaultFormat()));
						    			}
						    			monthCol++;
						    		}
						    		student=null;
						    		row++;
								}
								showSchoolUrlInExcelSheetFooter(row-1, excelView, monthCol-1);
								studentsList=null;
							}else{
								excelView.getWs().mergeCells(0, 8, getChkBoxSelectedIds().size()+4,8);
								excelView.getWs().addCell(new Label(0,8, "No students found for "+className+" class.", excelView.getUsermore10BoldformatGreenBgClr()));
							}
						}
					}
				}
				excelView.getWb().write();
				excelView.getWb().close();
				log.debug("End Time"+new Date());
				excelView = null;
				studentsList= null;
				classesJsonAray = null;
				classJsonObj = null;
				//monthWiseWorkingDays = null;
				className = null;
				classSectionId = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	 
	@Actions( { @Action(value = "ajaxClassWiseMonthlyAttendance", results = {@Result(location = "jasper/admission/dailyStudentsAttendanceReports.jasper", type = "jasper", name = "success", params = {"dataSource", "tempList", "format", "PDF" }) }) })
	public String ajaxClassWiseMonthlyAttendance() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxClassWiseMonthlyAttendance' method");
		}
		try {
			String pdf = getAnyId();
			
			String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
			if (getUserAcademicYearId() != 0) {
				setCustomer(getCustomerByCustId());
				if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
					setCustomerName(getCustomer().getOrganization().toUpperCase());
				}
				if (!ObjectFunctions.isNullOrEmpty(fromDate) && "Student".equalsIgnoreCase(getTempString()) && !StringFunctions.isNullOrEmptyNoTrim(getParamValue("SelectedId").trim())) {
					String clause = "classSectionId in "+getParamValue("SelectedId")+ " and custId = "+ getUserCustId() +"and status='Y'"+ " and attendanceDate='"+fromDate+" 00:00:00'";
					setTempList(hostelManager.getAll(VWStudentAttendance.class, clause));
					}
			}
			if ("PDF".equalsIgnoreCase(pdf)) {
				getResponse().setHeader("Content-Disposition","attachment; filename=DailyAttendanceDetails"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/*
	* Removed the for loop and use modularity is done by venkatesh - 03-05-2013
	*/
	@Actions( { @Action(value = "ajaxStudentClassWiseMonthlyAttendance", results = {}) })
	public String studentClassWiseMonthlyAttendance() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'studentClassWiseMonthlyAttendance' method");
			}
			if (getUserAcademicYearId()!=0) {
				Object[] totalWorkingDays = null;
				String[] montNames=getParamValue("monthNameIds").split(",");
				String fileName = "Class Wise Monthly Attendance";
				Customer customer = getCustomerByCustId();
				AcademicYear year=getCurrentAcademicYear();
				String standardType = customer.getStandardType();
				String captureAttendanceby = null;
				if("T".equalsIgnoreCase(year.getCaptureAttendanceBy()))
					captureAttendanceby = year.getCaptureAttendanceBy();
				int width = montNames.length+1;
				int studentsMonthlyReportWidth = montNames.length+5;
				String classIdsArr[] = getSelectedId().replace("0)", "").replace("(", "").split(",");
				int monthId;
				if(getPlTitle().equalsIgnoreCase("Attendance Not Submitted Details")){
					generateAttendanceNotSubmittedReport(customer,classIdsArr,year,montNames);
				}
				else{
				if("Excel".equalsIgnoreCase(getAnyId())) {
					if("Monthly".equalsIgnoreCase(getBankName()))
					ajaxStudentMonthlyAttendanceSheet(customer,classIdsArr,year,montNames);
				else
					GenerateMonthlyAttendanceReport(customer,classIdsArr,year,montNames);
				}
				else{
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
					FontFactory.register(fontPath);
					// creating pDF page event to set header and Footer to document
					PdfPTable mainTable = new PdfPTable(1);
					mainTable.setWidthPercentage(100);
					mainTable.setSplitLate(false);
					mainTable.getDefaultCell().setBorder(Rectangle.BOX);
					PdfPTable defaultersHeaderReport =null;
					long presentCount = 0;
					long absentCount = 0;
					double twotimesPresentCount = 0.0;
					double twotimesAbsentCount = 0.0;
					long twotimesMorningSessionCount = 0 ;
					long twotimesAfternoonSessionCount = 0 ;
					int monthTotalDays;
					int headerStudentMonthToalDays=0;
					int studentCount = 0;
					double studentPresentPercentage =0;
					long totalStudentPresentDays=0;
					long totalStudentMonthDays=0;
					Object[] attendancevalues ;
					double twotimesTotalStudentPresentDays = 0.0;
					if (!ObjectFunctions.isNullOrEmpty(customer)) {
						if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)")) {
							fileName = "Class Wise Attendance Summary"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
							 defaultersHeaderReport = new PdfPTable(studentsMonthlyReportWidth);
							 defaultersHeaderReport.setWidthPercentage(100);
							 if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), studentsMonthlyReportWidth,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
								}
								if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), studentsMonthlyReportWidth,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
								}
									if(!ObjectFunctions.isNullOrEmpty(montNames)){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("CLASS WISE MONTHLY ATTENDANCE",studentsMonthlyReportWidth, fontPath));
								}
								
						}else{
							 fileName = "Class Wise Monthly Attendance"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
							 defaultersHeaderReport = new PdfPTable(width);
							 defaultersHeaderReport.setWidthPercentage(100);
							 if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
								}
								if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
								}
								if(!ObjectFunctions.isNullOrEmpty(montNames)){
									if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) {
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("CLASS WISE MONTHLY ATTENDANCE",width, fontPath));
									}
								}
						}
					}
					long checkId = 0;
					for(String classId : classIdsArr)
					{
						HashMap<Integer,Integer> toalWorkingMonthDays = new HashMap<Integer,Integer>();
						if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)")) {
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Roll No",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Admission No",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Student Name",1, fontPath));
						}else{
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("",1, fontPath));
						}
						for (String monthName : montNames) 
						{	
							monthId = getMonthNumberFromMonthName(monthName);
							if(!ObjectFunctions.isNullOrEmpty(year.getManageAttendanceBy()))
								if(year.getManageAttendanceBy().equalsIgnoreCase("M"))
								{
									totalWorkingDays = adminManager.get("select max(totalWorkingDays),classSectionId,classNameAndSection from vw_StudentMonthlyAttendance where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId='"+classId+"' and monthName='"+ monthName +"' and totalWorkingDays is not null");
									if(!ObjectFunctions.isNullOrEmpty(totalWorkingDays) && !ObjectFunctions.isNullOrEmpty(totalWorkingDays[0]))
									{
										headerStudentMonthToalDays=headerStudentMonthToalDays+Integer.valueOf(totalWorkingDays[0].toString());
										toalWorkingMonthDays.put(monthId, Integer.valueOf(totalWorkingDays[0].toString()));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName+"( W.Days = " + totalWorkingDays[0].toString() + " )",1, fontPath));
									}
									else
									{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName+"( W.Days = 0 )",1, fontPath));
										toalWorkingMonthDays.put(monthId, 0);
									}
									totalWorkingDays= null;
								}
							else 
							{
								monthTotalDays = getWorkingDaysByMonth(monthId,year, classId); //here getClassId used to academicyear settings have class wise holiday(CH).
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName+"("+monthTotalDays+")",1, fontPath));
								toalWorkingMonthDays.put(monthId, monthTotalDays);
								headerStudentMonthToalDays=headerStudentMonthToalDays+monthTotalDays;
							}
						}
						if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)")) {
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Total Working Days("+headerStudentMonthToalDays+")",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Percentage %",1, fontPath));
						}
						if(!ObjectFunctions.isNullOrEmpty(year.getManageAttendanceBy()))
						if(year.getManageAttendanceBy().equalsIgnoreCase("D")){
							if(getUser().isSchoolStudent()){
								if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) {
									studentCount = adminManager.getCount("vw_studentDetails", "classSectionId='"+classId+"' and academicYearId="+getUserAcademicYearId() +" and status='Y' and accountId="+getUser().getId());
								}else
									studentCount = adminManager.getCount("vw_studentDetails", "classSectionId='"+classId+"' and academicYearId="+getUserAcademicYearId() +" and custId="+getUserCustId() +" and accountId="+getUser().getId()+" and status='Y'");
							}else{
								if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) {
									studentCount = adminManager.getCount("vw_studentDetails", "classSectionId='"+classId+"' and academicYearId="+getUserAcademicYearId() +" and status='Y'");
								}else
									studentCount = adminManager.getCount("vw_studentDetails", "classSectionId='"+classId+"' and academicYearId="+getUserAcademicYearId() +" and custId="+getUserCustId() +" and status='Y'");
							}
						}else{
							if(getUser().isSchoolStudent())
								studentCount = adminManager.getCount("vw_studentDetails", "classSectionId='"+classId+"' and academicYearId="+getUserAcademicYearId() +" and status='Y' and accountId="+getUser().getId());
							else
								studentCount = adminManager.getCount("vw_studentDetails", "classSectionId='"+classId+"' and academicYearId="+getUserAcademicYearId() +" and status='Y'");
						}
						List<ViewStudentPersonAccountDetails> studentList = null;
						if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)")){
							if(getUser().isSchoolStudent())
								studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId='"+classId+"' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" and  description is null  order by classSectionId");
							else if(getUser().isParent())
								studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId='"+classId+"' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getSelectedStudentId()+" and  description is null  order by classSectionId");
							else
								studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId='"+classId+"' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  description is null  order by classSectionId");
						}
						else if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) 
							studentList =staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId='"+classId+"' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null group by classSectionId");
						if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber()))
						    	Collections.sort(studentList,new StudentRollNumberComparator());
						for(ViewStudentPersonAccountDetails student:studentList){
							if(checkId != student.getClassSectionId()){
								if (!getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(student.getClassAndSection(),studentsMonthlyReportWidth, fontPath));
								}
							}
							if (!getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) {
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000", fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000", fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000", fontPath));
								log.debug(student.getPersonFullName());
							}else{
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getClassAndSection(), "#000", fontPath));
							}
							int attendanceSubmittedDaysCount =0;
							for (String monthName : montNames) { 
								if (!ObjectFunctions.isNullOrEmpty(monthName)) {
								 	monthId = getMonthNumberFromMonthName(monthName);
								 	attendanceSubmittedDaysCount = 0;
									if (monthId > 0){
										monthTotalDays = toalWorkingMonthDays.get(monthId);
										if("P".equalsIgnoreCase(standardType)){// for preschool
													twotimesPresentCount = adminManager.getCount("studentDailyAttendanceTimeTrack","studentId = "+student.getStudentId()+" and  month(attendanceDate) = "+ monthId+ " and academicYearId="+getUserAcademicYearId());
													twotimesAbsentCount = Double.valueOf(monthTotalDays) - twotimesPresentCount;
													
												
												if(twotimesPresentCount>0.0 && monthTotalDays>0){
													double presentPercentage  = 0.0;
													if(twotimesPresentCount >0.0)
														presentPercentage = roundTwoDecimals((twotimesPresentCount / (double) monthTotalDays) * 100);
													else
														presentPercentage = roundTwoDecimals((twotimesPresentCount / (double) monthTotalDays) * 100);
													
													if(getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")){
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(presentPercentage), "#000",fontPath));
													}else{
															String number = String.valueOf(twotimesPresentCount).substring(String.valueOf(twotimesPresentCount).indexOf(".")).substring(1);
															if(Long.valueOf(number.toString()) == 0){
																defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf((long) twotimesPresentCount), "#000",fontPath));
																twotimesTotalStudentPresentDays=twotimesTotalStudentPresentDays+(long) twotimesPresentCount;
															}else{
																defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(twotimesPresentCount), "#000",fontPath));
																twotimesTotalStudentPresentDays=twotimesTotalStudentPresentDays+twotimesPresentCount;
															}
													}
												}else{
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
												}
										}else{
											// Get the count of attendance submitted days.
											attendanceSubmittedDaysCount = adminManager.getCount("staffDailyAttendanceSubmitTrack"," classSectionId = "+Long.valueOf(student.getClassSectionId())+" and month(attendanceDate) = "+ monthId+ " and academicYearId="+getUserAcademicYearId());
											if(year.getManageAttendanceBy().equalsIgnoreCase("D"))
											{
												if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) {
													absentCount= staffManager.getStudentsAttendanceByClassSectionIdAndMonthId(Long.valueOf(student.getClassSectionId()),monthId,getUserAcademicYearId(),getUserCustId(),Constants.NO_STRING);
													twotimesAfternoonSessionCount = adminManager.getCount("vw_StudentDailyAttendance", "classSectionId="+Long.valueOf(student.getClassSectionId())+" and studentId="+student.getStudentId()+" and monthName='" + monthName+ "'  and afternoonSession='"+ "N'");
													twotimesAbsentCount = (double)(absentCount+twotimesAfternoonSessionCount)/2;
													twotimesPresentCount = Double.valueOf(attendanceSubmittedDaysCount) - twotimesAbsentCount;
													
												}else{
													twotimesMorningSessionCount = adminManager.getCount("vw_StudentDailyAttendance", "studentId="+student.getStudentId()+" and monthName='" + monthName+ "'  and present='"+ "N'");
													twotimesAfternoonSessionCount = adminManager.getCount("vw_StudentDailyAttendance", "studentId="+student.getStudentId()+" and monthName='" + monthName+ "'  and afternoonSession='"+ "N'");
													twotimesAbsentCount = (double)(twotimesMorningSessionCount+twotimesAfternoonSessionCount)/2;
													twotimesPresentCount = Double.valueOf(attendanceSubmittedDaysCount) - twotimesAbsentCount;
												}
											}
											else{
												if(getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")){
													 attendancevalues =  adminManager.get("select sum(noOfPresentDays),studentId from  vw_StudentMonthlyAttendance where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and month="+monthId+" and classSectionId="+Long.valueOf(student.getClassSectionId())+" group by classSectionId,month,custId,academicYearId");
												}else{
													 attendancevalues =  adminManager.get("select sum(noOfPresentDays),studentId from  vw_StudentMonthlyAttendance where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and month="+monthId+" and classSectionId="+Long.valueOf(student.getClassSectionId())+" and studentId="+student.getStudentId()+" group by classSectionId,month,custId,academicYearId,studentId");
												}
												if(!ObjectFunctions.isNullOrEmpty(attendancevalues)){
													if(!ObjectFunctions.isNullOrEmpty(attendancevalues[0]))
														twotimesPresentCount = Double.valueOf(attendancevalues[0].toString());
												}
												twotimesAbsentCount = Double.valueOf(monthTotalDays) - twotimesPresentCount;
											}
											if(twotimesPresentCount>0.0 && monthTotalDays>0){
												double presentPercentage  = 0.0;
												if(twotimesPresentCount >0.0)
													presentPercentage = roundTwoDecimals((twotimesPresentCount / (double) monthTotalDays) * 100);
												else
													presentPercentage = roundTwoDecimals((twotimesPresentCount / (double) monthTotalDays) * 100);
												
												if(getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")){
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(presentPercentage), "#000",fontPath));
												}else{
														String number = String.valueOf(twotimesPresentCount).substring(String.valueOf(twotimesPresentCount).indexOf(".")).substring(1);
														if(Long.valueOf(number.toString()) == 0){
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf((long) twotimesPresentCount), "#000",fontPath));
															twotimesTotalStudentPresentDays=twotimesTotalStudentPresentDays+(long) twotimesPresentCount;
														}else{
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(twotimesPresentCount), "#000",fontPath));
															twotimesTotalStudentPresentDays=twotimesTotalStudentPresentDays+twotimesPresentCount;
														}
												}
											}else{
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
											}
									
										}
										totalStudentMonthDays=totalStudentMonthDays+monthTotalDays;
									}
									attendancevalues = null;
									monthName=null;
								}
							}
							 if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)")) {
								if(twotimesTotalStudentPresentDays >0.0){
									String number = String.valueOf(twotimesTotalStudentPresentDays).substring(String.valueOf(twotimesTotalStudentPresentDays).indexOf(".")).substring(1);
									if(Long.valueOf(number.toString()) == 0){
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf((long) twotimesTotalStudentPresentDays), "#000",fontPath));
									}else
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(twotimesTotalStudentPresentDays), "#000",fontPath));
									
									studentPresentPercentage = roundTwoDecimals((twotimesTotalStudentPresentDays / (double) totalStudentMonthDays) * 100);
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(studentPresentPercentage), "#000",fontPath));
								}else{
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
								}
								totalStudentPresentDays=0;
								totalStudentMonthDays=0;
								studentPresentPercentage=0;
								twotimesTotalStudentPresentDays = 0.0;  
								twotimesPresentCount = 0.0;
							} 
							checkId = student.getClassSectionId();
						}studentList=null;
						
					}
					mainTable.addCell(defaultersHeaderReport);
					pDFGenerator.getDocument().add(mainTable);
					pDFGenerator.getDocument().close();
					pDFGenerator = null;
					mainTable = null;
					defaultersHeaderReport = null;
					pDFGenerator = null;
					phfmj = null;
				}
			}	
			}		
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	public String ajaxStudentMonthlyAttendanceSheet(Customer customer,String studyClassIdsArr[],AcademicYear year,String[] montNames){
		if (log.isDebugEnabled()) {
			log.debug("Entering AdminManager 'ajaxStudentMonthlyAttendanceSheet' method");
		}
		try {
			int monthId;
			long presentCount = 0;
			int monthTotalDays=0;
			Object[] totalWorkingDays = null;
			String standardType = customer.getStandardType();
			HashMap<Integer,Integer> toalWorkingMonthDays = new HashMap<Integer,Integer>();
			if (getUserAcademicYearId() != 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
					String fileName = "students_Montly_Attendance"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					ExcelView excelView = new ExcelView();
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					//For School Address
					WritableCellFormat cellFormat8= getCellFormat8();
					//For School name
					WritableCellFormat cellFormat10= getCellFormat10();
					WritableCellFormat cellFormat =getCellFormat();
					String commaDelimitedString = StringUtil.convertListToString(Arrays.asList(studyClassIdsArr));
	                 List<Object[]> studyClassObjList = adminManager.getAll("select id,classNameClassId,className,section from studyClass where id in ("+commaDelimitedString +") and custId="+customer.getId()+" and academicYearId="+year.getId());
	                 for(Object[] studyClassObj : studyClassObjList) {
							if(Long.valueOf(studyClassObj[1].toString())>0){
								String classId= studyClassObj[0].toString();
				    			excelView.setWorkSheetName(studyClassObj[2].toString()+" class");
				    			excelView.createWorkSheet(0);
				    			String classSection = "";
				    			if (!StringFunctions.isNullOrEmpty(studyClassObj[3].toString())) {
				    				classSection = 	studyClassObj[2].toString().trim() + "-" + studyClassObj[3].toString();
								}else{
									classSection = studyClassObj[2].toString();
								}
				    			excelView.setDefaultFormat(excelView.getArial10format());
				    			if (!ObjectFunctions.isNullOrEmpty(customer)) {
						        	if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
								        excelView.getWs().mergeCells(0, 0, 6,1);
								    	excelView.getWs().addCell(new Label(0,0, customer.getOrganization(), cellFormat10));
						        	}
						        	if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
								    	excelView.getWs().mergeCells(0, 2, 6,2);
								    	excelView.getWs().addCell(new Label(0,2, customer.getCustomerFormattedAddress(), cellFormat8));
						        	}
						        }
						    	excelView.getWs().setColumnView(0,10);
						    	excelView.getWs().setColumnView(1,30);
						    	excelView.getWs().setColumnView(2,25);
						        excelView.getWs().mergeCells(0, 3, 6, 3);
								excelView.getWs().addCell(new Label(0,3, ""));
								excelView.getWs().mergeCells(0, 4, 6,4);
								excelView.getWs().addCell(new Label(0,4, classSection, cellFormat));
				    		 	excelView.getWs().addCell(new Label(0,5, "Roll.No", excelView.getWrapCellFormat()));
				    		 	excelView.getWs().addCell(new Label(2,5, "Admission No", excelView.getWrapCellFormat()));	
					    		excelView.getWs().addCell(new Label(1,5, "Student Name", excelView.getWrapCellFormat()));
					    					    		
								int cellStart = 3;
								int totWorkingDays=0;
								int daywiseTotalDays=0;
								String captureAttendnaceBy = null;
								if("T".equalsIgnoreCase(year.getCaptureAttendanceBy()))
									captureAttendnaceBy = year.getCaptureAttendanceBy();
					    		for (String monthName : montNames) 
								{	
					    			excelView.getWs().setColumnView(cellStart,30);
									monthId = getMonthNumberFromMonthName(monthName);
									if(year.getManageAttendanceBy().equalsIgnoreCase("M"))
									{
										totalWorkingDays = adminManager.get("select max(totalWorkingDays),classSectionId,classNameAndSection from vw_StudentMonthlyAttendance where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+classId+" and monthName='"+ monthName +"' and totalWorkingDays is not null");
										if(!ObjectFunctions.isNullOrEmpty(totalWorkingDays) && !ObjectFunctions.isNullOrEmpty(totalWorkingDays[0]))
										{
											totWorkingDays=totWorkingDays+Integer.valueOf(totalWorkingDays[0].toString());
											toalWorkingMonthDays.put(monthId, Integer.valueOf(totalWorkingDays[0].toString()));
											excelView.getWs().addCell(new Label(cellStart,5,monthName+" ( Working Days = " + totalWorkingDays[0].toString() + " )", excelView.getWrapCellFormat()));
										}
										else
										{
											excelView.getWs().addCell(new Label(cellStart,5,monthName, excelView.getWrapCellFormat()));
											toalWorkingMonthDays.put(monthId, 0);
										}
										totalWorkingDays= null;
									} 
									else{
										monthTotalDays = getWorkingDaysByMonth(monthId,year, classId); //here getClassId used to academicyear settings have class wise holiday(CH).
										excelView.getWs().addCell(new Label(cellStart,5,monthName+" ( Working Days = " + monthTotalDays + " )", excelView.getWrapCellFormat()));
										toalWorkingMonthDays.put(monthId, monthTotalDays);
										if(year.getManageAttendanceBy().equalsIgnoreCase("D")){
											totWorkingDays=totWorkingDays+Integer.valueOf(monthTotalDays);
										}
									}
									cellStart++;
								}
					    		excelView.getWs().setColumnView(cellStart,30);
					    		excelView.getWs().setColumnView(cellStart+1,30);
					    		excelView.getWs().addCell(new Label(cellStart,5, "Total Working Days ("+totWorkingDays+")", excelView.getWrapCellFormat()));
					    		excelView.getWs().addCell(new Label(cellStart+1,5, " Percentage % ", excelView.getWrapCellFormat()));
					    		cellStart=0;
					    		//studentCount = adminManager.getCount("vw_studentDetails", "classSectionId="+classId+" and academicYearId="+getUserAcademicYearId() +" and status='Y'");
								List<ViewStudentPersonAccountDetails> studentList = null;
								if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)")){
									if(getUser().isSchoolStudent())
										studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId="+classId+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" and  description is null  order by classSectionId");
									else if(getUser().isParent())
										//studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId="+classId+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and parentId="+getUser().getId()+" and  description is null  order by classSectionId");
										studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId="+classId+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getSelectedStudentId()+" and  description is null  order by classSectionId");
									else
										studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId="+classId+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  description is null  order by classSectionId");
								}
								else if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")) 
									studentList =staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId="+classId+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null");
								if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber()))
									Collections.sort(studentList,new StudentRollNumberComparator());
								int row = 6;
								for(ViewStudentPersonAccountDetails student:studentList){
									int col = 3;
										excelView.getWs().addCell(new Label(0,row, String.valueOf(student.getRollNumber()), excelView.getDefaultFormat()));
										excelView.getWs().addCell(new Label(1,row, student.getPersonFullName(), excelView.getDefaultFormat()));
										excelView.getWs().addCell(new Label(2,row, String.valueOf(student.getAdmissionNumber()), excelView.getDefaultFormat()));
										double presentPercentage =0;
										long totalPresentDays=0;
										int totMonthDays=0;
										long absentCount = 0;
										Object[] days =null;
										double twiceAbsentCount = 0.0;
										int morningAtten = 0;
										int afternoonAtten = 0;
										double twicePresentCount = 0.0;
										double twiceTotalPresentDays=0.0;
										int attendanceSubmittedDaysCount = 0;
										for (String monthName : montNames) { 
											attendanceSubmittedDaysCount = 0;
											if (!ObjectFunctions.isNullOrEmpty(monthName)) {
											 	monthId = getMonthNumberFromMonthName(monthName);
												// Get the count of attendance submitted days.
												attendanceSubmittedDaysCount = adminManager.getCount("staffDailyAttendanceSubmitTrack","classSectionId = "+student.getClassSectionId()+" and month(attendanceDate) = "+ monthId+ " and academicYearId="+getUserAcademicYearId());
												
												if (monthId > 0){
													if("P".equalsIgnoreCase(standardType)){// for preschool
													monthTotalDays = toalWorkingMonthDays.get(monthId);
													totMonthDays=totMonthDays+monthTotalDays;
														
													twicePresentCount = adminManager.getCount("studentDailyAttendanceTimeTrack","studentId = "+student.getStudentId()+" and  month(attendanceDate) = "+ monthId+" and academicYearId="+getUserAcademicYearId());
													twiceTotalPresentDays = twiceTotalPresentDays + twicePresentCount ;
													 if(twicePresentCount > 0.0){
															excelView.getWs().addCell(new Label(col,row,String.valueOf((long)twicePresentCount), excelView.getDefaultFormat()));
													}else{
														excelView.getWs().addCell(new Label(col,row,"-", excelView.getDefaultFormat()));
													}
													
													}else{

														monthTotalDays = toalWorkingMonthDays.get(monthId);
														//monthTotalDays = studentCount * monthTotalDays;
														totMonthDays=totMonthDays+monthTotalDays;
														 if(year.getManageAttendanceBy().equalsIgnoreCase("D"))
														 {
															 morningAtten = adminManager.getCount("vw_StudentDailyAttendance", "studentId="+student.getStudentId()+" and monthName='" + monthName+ "'  and present='"+ "N'");
															 afternoonAtten = adminManager.getCount("vw_StudentDailyAttendance", "studentId="+student.getStudentId()+" and monthName='" + monthName+ "'  and afternoonSession='"+ "N'");
															 twiceAbsentCount = (double)(morningAtten+afternoonAtten)/2;
															// twicePresentCount = (double)monthTotalDays - twiceAbsentCount;
															 twicePresentCount = (double)attendanceSubmittedDaysCount - twiceAbsentCount;
																 
															 twiceTotalPresentDays=(double)twiceTotalPresentDays+twicePresentCount;
														 } else { 
															if(getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)")){
																days = adminManager.get("select totalWorkingDays,noOfPresentDays from vw_StudentMonthlyAttendance where custId="+customer.getId()+" and academicYearId="+year.getId()+" and month="+monthId);
																//presentCount= staffManager.getStudentsMonthlyAttendanceByClassSectionIdAndMonthId(Long.valueOf(student.getClassSectionId()),monthId,getUserAcademicYearId(),getUserCustId(),0);
															}else{
																days = adminManager.get("select totalWorkingDays,noOfPresentDays from vw_StudentMonthlyAttendance where custId="+customer.getId()+" and academicYearId="+year.getId()+" and classSectionId="+student.getClassSectionId()+" and month="+monthId+" and studentId="+student.getStudentId()+" ");
																//presentCount= staffManager.getStudentsMonthlyAttendanceByClassSectionIdAndMonthId(Long.valueOf(student.getClassSectionId()),monthId,getUserAcademicYearId(),getUserCustId(),student.getStudentId());
															}
															if(!ObjectFunctions.isNullOrEmpty(days)){
																twicePresentCount=twicePresentCount+Double.valueOf(days[1].toString());
																twiceTotalPresentDays=twiceTotalPresentDays+twicePresentCount;
															}
														}
														if(presentCount>0 || twicePresentCount > 0.0){
															String number = String.valueOf(twicePresentCount).substring(String.valueOf(twicePresentCount).indexOf(".")).substring(1);
															if(Long.valueOf(number.toString()) == 0){
															//	presentCount = (long)twicePresentCount;
																excelView.getWs().addCell(new Label(col,row,String.valueOf((long)twicePresentCount), excelView.getDefaultFormat()));
															}else{
																excelView.getWs().addCell(new Label(col,row,String.valueOf(twicePresentCount), excelView.getDefaultFormat()));
															}
															
														}else{
															excelView.getWs().addCell(new Label(col,row,"-", excelView.getDefaultFormat()));
														}
													
													}
												}
												monthName=null;
												presentCount=0;
												absentCount=0;
												twicePresentCount = 0.0;
												twiceAbsentCount =0.0;
											}
											col++;
										}
										if(totalPresentDays>0 || twiceTotalPresentDays>0.0){
											String number = String.valueOf(twiceTotalPresentDays).substring(String.valueOf(twiceTotalPresentDays).indexOf(".")).substring(1);
											if(Long.valueOf(number.toString()) == 0){
												excelView.getWs().addCell(new Label(col,row,String.valueOf((long)twiceTotalPresentDays), excelView.getDefaultFormat()));
											}else{
												excelView.getWs().addCell(new Label(col,row,String.valueOf(twiceTotalPresentDays), excelView.getDefaultFormat()));
											}
										}else
											excelView.getWs().addCell(new Label(col,row,"-", excelView.getDefaultFormat()));
										
										if((totalPresentDays >0 && totMonthDays>0) || (twiceTotalPresentDays>0.0 && totMonthDays>0)){
											presentPercentage = roundTwoDecimals((twiceTotalPresentDays / (double) totMonthDays) * 100);
											excelView.getWs().addCell(new Label(col+1,row,String.valueOf(presentPercentage), excelView.getDefaultFormat()));
										}else{
											excelView.getWs().addCell(new Label(col+1,row,"-", excelView.getDefaultFormat()));
										}
						    		row ++;
						    		totMonthDays=0;
								}studentList=null;
								row=0;
						}studyClassObj=null;
					}
					excelView.getWb().write();
					excelView.getWb().close();
			} 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	
	public String GenerateMonthlyAttendanceReport(Customer customer,String studyClassIdsArr[],AcademicYear year,String[] montNames){
		if (log.isDebugEnabled()) {
			log.debug("Entering AdminManager 'GenerateMonthlyAttendanceReport' method");
		}
		try {
			if (getUserCustId() > 0 && getUserAcademicYearId() > 0  && !ObjectFunctions.isNullOrEmpty(studyClassIdsArr))
	        {
				String years[] = year.getAcademicYear().split("-");
				String yearName = years[0];
					
				ZipOutputStream zipOutStream = new ZipOutputStream(getResponse().getOutputStream());
                getResponse().setContentType("application/zip");
                getResponse().addHeader("Content-Disposition", "attachment; filename=StudentMonthlyAttendanceReport.zip");
                 
				File file  = new File(getSession().getServletContext().getRealPath("userFiles/MonthlyAttendance/"+yearName+".xlsx"));
				if(file.exists())
				{
					
	                 String commaDelimitedString = StringUtil.convertListToString(Arrays.asList(studyClassIdsArr));
	                 List<Object[]> studyClassObjList = adminManager.getAll("select id,classNameClassId,className,section from studyClass where id in ("+commaDelimitedString +") and custId="+customer.getId()+" and academicYearId="+year.getId());
	                 
	                 StringBuffer  generatedScoreCardsFilePath = new StringBuffer("userFiles/MonthlyAttendance/").append(customer.getId()).append("/"+year.getAcademicYear());
	                 
                     File outFile = new File(getSession().getServletContext().getRealPath(generatedScoreCardsFilePath.toString()));
                     if(outFile.exists())
                       FileUtils.deleteQuietly(outFile);
                     generatedScoreCardsFilePath.append("/Attendance/");
                     outFile.mkdirs();
                     outFile = null; 
                     
                   // Object[] holidayStatusObj = adminManager.get("select id,holidayStatus from academicYear where id="+getUserAcademicYearId());
                   // adminManager.getAll(AcademicYear.class);
                     
					for(Object[] studyClassObj : studyClassObjList)
					{
                        StringBuffer classFilePath = new StringBuffer(generatedScoreCardsFilePath).append(studyClassObj[2].toString().trim().replaceAll(" ", ""));
                        
                        if(!ObjectFunctions.isNullOrEmpty(studyClassObj[3]))
                        	classFilePath.append("_").append(studyClassObj[3].toString().replaceAll("/", ""));
                        classFilePath.append(".xlsx");
                        File classFile = new File(getSession().getServletContext().getRealPath(classFilePath.toString()));
                        FileUtils.copyFile(file, classFile);
	                     
						XSSFCell cell = null;
						XSSFSheet sheet = null;
						XSSFRow studentRow = null;
						
						FileInputStream templateFile= new FileInputStream(classFile);
						XSSFWorkbook workbook = new XSSFWorkbook(templateFile);
						
						if(workbook.getSheetIndex("YearToDate") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("YearToDate"), 2);
				  		if(workbook.getSheetIndex("Jan") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Jan"), 2);
				  		if(workbook.getSheetIndex("Feb") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Feb"), 2);
				  		if(workbook.getSheetIndex("Mar") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Mar"), 2);
				  		if(workbook.getSheetIndex("Apr") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Apr"), 2);
				  		if(workbook.getSheetIndex("May") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("May"), 2);
				  		if(workbook.getSheetIndex("Jun") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Jun"), 2);
				  		if(workbook.getSheetIndex("Jul") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Jul"), 2);
				  		if(workbook.getSheetIndex("Aug") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Aug"), 2);
				  		if(workbook.getSheetIndex("Sep") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Sep"), 2);
				  		if(workbook.getSheetIndex("Oct") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Oct"), 2);
				  		if(workbook.getSheetIndex("Nov") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Nov"), 2);
				  		if(workbook.getSheetIndex("Dec") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("Dec"), 2);
				  		if(workbook.getSheetIndex("©") != -1)
				  			workbook.setSheetHidden(workbook.getSheetIndex("©"), 2);
						
						FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
						
						 sheet = workbook.getSheet("YearToDate");
						 if(!ObjectFunctions.isNullOrEmpty(sheet))
						 {
							 studentRow =  sheet.getRow(5);
							 studentRow.getCell(4).setCellValue(yearName);
							 
							 cell =  studentRow.getCell(5);
							 if(cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {
					                evaluator.evaluateFormulaCell(cell);
					            }
						 }
						 
						 for(String monthName : montNames)
						 {
							int monthId=DateFunctions.getMonthNumberByMonthName(monthName);
							// int yearId = DateFunctions.getDayOfYear(new Date());
							String months = monthName.substring(0, 3);
							sheet = workbook.getSheet(months);
							List<SchoolHolidays> schoolHolidaysList  = null;
							if(!ObjectFunctions.isNullOrEmpty(sheet))
							{
								XSSFRow textRow = sheet.getRow(4);
								XSSFCell textRowCell = textRow.getCell(3);
								textRowCell.setCellValue("Enter: P = Present,  A = Absent,  H = Holiday,  or L = Leaves");
								
								textRow = null;
								textRowCell = null;
								
								XSSFRow changeRow = sheet.getRow(6);
				           		
				           		for (int y = 34; y <= 37; y++)
						        {
				           			XSSFCell changeRowCell = changeRow.getCell(y);
				           			if(y == 34)
				           				changeRowCell.setCellValue("P");
				           			else if(y == 35)
				           				changeRowCell.setCellValue("A");
				           			else if(y == 36)
				           				changeRowCell.setCellValue("H");
				           			else if(y == 37)
				           				changeRowCell.setCellValue("L");
				           			changeRowCell = null;
						        }
				           		
			                  HashMap<String, Long> holidaysInfo = new HashMap<String, Long>();
			                  HashMap<Long, String> attendanceInfo = new HashMap<Long, String>();
			                 
				             if(!ObjectFunctions.isNullOrEmpty(year)){
			            		   if("SH".equalsIgnoreCase(year.getHolidayStatus()))
			      	             	  schoolHolidaysList = adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getUserAcademicYearId(),null,null,null,null,null,null,monthId,null,null);
			            		   else{
			            			   if(!ObjectFunctions.isNullOrEmpty(studyClassObj)){
			            				   if(!ObjectFunctions.isNullOrEmpty(studyClassObj[1].toString()))
			     	      	             	  schoolHolidaysList = adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getUserAcademicYearId(),null,null,null,studyClassObj[1].toString(),null,null,monthId,null,null);
			            			   }
			            	   }
				            }
			               if(!ObjectFunctions.isNullOrEmpty(schoolHolidaysList)){
				             	for(SchoolHolidays holidaysObj : schoolHolidaysList){
				             		holidaysInfo.put(holidaysObj.getHolidayDate(),holidaysObj.getId());
				             	 }
			               }
			               
			               studentRow = sheet.getRow(1);
			               if(!ObjectFunctions.isNullOrEmpty(studyClassObj[3].toString()) && !ObjectFunctions.isNullOrEmpty(studyClassObj[2].toString()))
			                	studentRow.getCell(13).setCellValue(studyClassObj[2].toString().concat("-").toString().concat(studyClassObj[3].toString()));
			               else
			            	   studentRow.getCell(13).setCellValue(studyClassObj[2].toString());
			               
			               studentRow = sheet.getRow(2);
			               cell = studentRow.getCell(28);
			               //studentRow.getCell(28).setCellValue(yearId);
			               if(cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {
				                evaluator.evaluateFormulaCell(cell);
				            }
			              List<Object[]> studentPresentCountList = adminManager.getMonthlyStudentAttendanceSP(monthId,Long.valueOf(studyClassObj[0].toString()),getUserCustId(),getUserAcademicYearId());
			              if(!ObjectFunctions.isNullOrEmpty(studentPresentCountList)){
			            	  for(Object[] studentAttendanceObj : studentPresentCountList){
			            		  attendanceInfo.put( Long.valueOf(studentAttendanceObj[0].toString()), studentAttendanceObj[2].toString());
			              	  }
						 long studentId = 0;
			           	 String attendancedate = null;
			           	 String studentName = null;
			           	 Date attDate=null;
			           	 XSSFFont font = null;
			           	 XSSFCellStyle style = null;
			           	// int mStudentNameColNo = 2;
			           	 
			           	Calendar cal =Calendar.getInstance();
				        cal.set(Calendar.MONTH, monthId-1);
				        cal.set(Calendar.DAY_OF_MONTH, 1);
						//attDate = cal.getTime();
			           	//int actualMonthDays= DateFunctions.geActualMonthDaysByMonthName(monthName);
			           	int actualMonthDays= cal.getActualMaximum(cal.DAY_OF_MONTH);
			           	int mStudentNameColNo = 7;
			           		for(Object[] studentAbsentDetailsobj : studentPresentCountList){
			           			
			           			attDate = cal.getTime();
								studentId = Long.valueOf(studentAbsentDetailsobj[0].toString());
								if(!ObjectFunctions.isNullOrEmpty(studentAbsentDetailsobj[1]))
									studentName = studentAbsentDetailsobj[1].toString();
								attendancedate = studentAbsentDetailsobj[3].toString();
								studentRow = sheet.getRow(mStudentNameColNo);
								if(!ObjectFunctions.isNullOrEmpty(studentRow))
									studentRow.getCell(1).setCellValue(studentName);
								int k=1;
								for (int i = 3; i <= 37; i++)
		                        {
		                            try {
										cell = studentRow.getCell(i);
										if(!ObjectFunctions.isNullOrEmpty(cell)){
											font = workbook.createFont();
											font.setBold(true);
											style = workbook.createCellStyle();
											style.setFont(font);
										 if (k > actualMonthDays)
										 {
											// break;
											if(cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {
										        evaluator.evaluateFormulaCell(cell);
										    }
										 }
										 else {
											 if (ObjectFunctions.isNullOrEmpty(holidaysInfo.get(DateUtil.getDateTime(DateFormatter.CCYY_MM_DD_PATTERN,attDate))))
										        {
													if(cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) 
													{
												        evaluator.evaluateFormulaCell(cell);
												    }
										            if (attendancedate.equalsIgnoreCase(DateUtil.getDateTime(DateFormatter.CCYY_MM_DD_PATTERN,attDate)) && !ObjectFunctions.isNullOrEmpty(attendanceInfo.get(studentId)))
										            {
										            	if("L".equalsIgnoreCase(attendanceInfo.get(studentId)))
										            		studentRow.getCell(i).setCellValue("L");
										            	else
										            		studentRow.getCell(i).setCellValue("A");
										            	font = workbook.createFont();
										    			font.setBoldweight(XSSFFont.COLOR_RED);
										    			;
										            	studentRow.getCell(i).getCellStyle().getFont().setBoldweight(XSSFFont.COLOR_RED);
										            }
										            else
										            {
										            	studentRow.getCell(i).setCellValue("P");
										            }
										        }
										        else
										        {
										        	studentRow.getCell(i).setCellValue("H");
										        	font = workbook.createFont();
													font.setBoldweight(XSSFFont.COLOR_NORMAL);
										        	studentRow.getCell(i).getCellStyle().getFont().setBoldweight(XSSFFont.COLOR_RED);
										        }
										    }
										 }
									} catch (Exception e) {
										e.printStackTrace();
										JRExceptionClient jre = new JRExceptionClient();jre.sendException(e);jre = null;
									}
		                               
		                            k++;
		                            attDate = DateFunctions.add(attDate, 1);
		                        }
								  mStudentNameColNo += 1;
							 }
			           		for(int i = mStudentNameColNo; i<=106;i++)
			           		{
			           			sheet.removeRow(sheet.getRow(i));
			           		}
			           		
			           		//sheet.removeRow(sheet.getRow(i));
			           		
			           		XSSFRow startRow = sheet.getRow(7);
			           		XSSFRow endRow = sheet.getRow(mStudentNameColNo-1);
			           		
			           		XSSFRow createTotalRow = sheet.createRow(mStudentNameColNo);
			           		
			           		for (int y = 34; y <= 37; y++)
					        {
								XSSFCell startRowCell = startRow.getCell(y);
								XSSFCell endRowCell = endRow.getCell(y);
								
								XSSFCell createTotalRowCell = createTotalRow.createCell(y);
								
								createTotalRowCell.setCellStyle(endRowCell.getCellStyle());
								
								String formula= "SUM("+startRowCell.getCTCell().getR()+":"+endRowCell.getCTCell().getR()+")";
								createTotalRowCell.setCellFormula(formula);
								 
								createTotalRow.getCell(y).getCellStyle().setBorderTop(CellStyle.BORDER_THIN);
								createTotalRow.getCell(y).getCellStyle().setBorderBottom(CellStyle.BORDER_THIN);
								 
								 
								cell = createTotalRow.getCell(y);
								 
								if(cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {
							        evaluator.evaluateFormulaCell(cell);
							    }
					        }
			           		
			           		startRow = null;
							endRow = null;
							 mStudentNameColNo += 1;
			              }
			             
						  }
						
					  		if(workbook.getSheetIndex(monthName.substring(0, 3)) != -1)
					  			workbook.setSheetHidden(workbook.getSheetIndex(monthName.substring(0, 3)),false);
					  		
						 }
				  		if(!ObjectFunctions.isNullOrEmpty(classFile))
				  		{
				  			templateFile.close();
                            if(classFile.exists())
                            {
                            	FileOutputStream outFile1 =new FileOutputStream(classFile);
                                workbook.write(outFile1);
                                outFile1.close();
                                classFile = null;
                            }
                        }
                        workbook = null;
					}
					
					if(!StringFunctions.isNullOrEmpty(generatedScoreCardsFilePath.toString())){
	                    File directory = new File(getSession().getServletContext().getRealPath(generatedScoreCardsFilePath.toString()));
	                    StringFunctions.zipFiles(directory,zipOutStream);
	                    
	                    FileOutputStream fileWriter = new FileOutputStream(getSession().getServletContext().getRealPath("userFiles/MonthlyAttendance/"+customer.getId()+"/"+year.getAcademicYear()+"/Attendance.zip"));
	                    ZipOutputStream zipout =null;
	                    zipout = new ZipOutputStream(fileWriter);
	                    StringFunctions.zipFiles(directory,zipout);
	                    zipout.close();
	                    zipout=null;
	                }
					
	            }
	        }	
		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	//Modified By Balu on 07/05/2013
	@Actions( { @Action(value = "ajaxDoViewStudentCommunityClassSheets", results = {}) })
	public void ajaxDoViewStudentCommunityClassSheets()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoViewStudentCommunityClassSheets' method");
		}
		try {
			List<Object[]> classStudentsList=null;
			List<StudyClass> studyClassList = null;
			if (getUserAcademicYearId() != 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
					String fileName = "studentsRegisterNumberDetails"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					ExcelView excelView = new ExcelView();
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					//For School Address
					WritableCellFormat cellFormat8= getCellFormat8();
					//For School name
					WritableCellFormat cellFormat10= getCellFormat10();
					WritableCellFormat cellFormat =getCellFormat();
					Customer customer = getCustomerByCustId();
					studyClassList = adminManager.getAll(StudyClass.class, " id in"+getSelectedId());
					if(ObjectFunctions.isNotNullOrEmpty(studyClassList)){
						for (StudyClass studyclass : studyClassList) {
							if(!ObjectFunctions.isNullOrEmpty(studyclass)){
				    			excelView.setWorkSheetName(studyclass.getClassAndSection()+" class");
				    			excelView.createWorkSheet(0);
				    			excelView.setDefaultFormat(excelView.getArial10format());
				    			if (!ObjectFunctions.isNullOrEmpty(customer)) {
						        	if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
								        excelView.getWs().mergeCells(0, 0, 6,1);
								    	excelView.getWs().addCell(new Label(0,0, customer.getOrganization(), cellFormat10));
						        	}
						        	if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
								    	excelView.getWs().mergeCells(0, 2, 6,2);
								    	excelView.getWs().addCell(new Label(0,2, customer.getCustomerFormattedAddress(), cellFormat8));
						        	}
						        }
						    	excelView.getWs().setColumnView(0,6);
						    	excelView.getWs().setColumnView(1,10);
								excelView.getWs().setColumnView(2,20);
								excelView.getWs().setColumnView(3,20);
								excelView.getWs().setColumnView(4,25);
								CellView cv=new CellView();
						        cv.setHidden(true);
						        excelView.getWs().setColumnView(1, cv);
						        cv=null;
						        excelView.getWs().mergeCells(0, 3, 6, 3);
								excelView.getWs().addCell(new Label(0,3, "Note :- If register number starts with 0 type \" ' \" symbol before 0."));
								excelView.getWs().mergeCells(0, 4, 6,4);
								excelView.getWs().addCell(new Label(0,4, studyclass.getClassAndSection()+" - View Student Register Details", cellFormat));
				    		 	excelView.getWs().addCell(new Label(0,5, "R.No", excelView.getUsermore10BoldformatGreenBgClr()));
				    		 	excelView.getWs().addCell(new Label(1,5, "Student Id", excelView.getUsermore10BoldformatGreenBgClr()));
					    		excelView.getWs().addCell(new Label(2,5, "First Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    		excelView.getWs().addCell(new Label(3,5, "Last Name", excelView.getUsermore10BoldformatGreenBgClr()));
					    		excelView.getWs().addCell(new Label(4,5, "Community", excelView.getUsermore10BoldformatGreenBgClr()));
								excelView.getWs().addCell(new Label(5,5, "Register Number", excelView.getUsermore10BoldformatGreenBgClr()));
								excelView.getWs().addCell(new Label(6,5, "Admission Number", excelView.getUsermore10BoldformatGreenBgClr()));
							classStudentsList = adminManager.getAll("select studId,firstName,lastName,rollNumber,IFNULL(castName,''),registerNumber,admissionNumber from vw_studentClassDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  classSectionId="+studyclass.getId()+" and description is null  order by registerNumber,rollNumber");
							if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber()))
								Collections.sort(classStudentsList,new StudentRollNumberComparator());
					    	if(!ObjectFunctions.isNullOrEmpty(classStudentsList)){
					    		int rowCount=6;
					    		for(Object[] studentDetails:classStudentsList){
			    					if(!ObjectFunctions.isNullOrEmpty(studentDetails)){
			    							excelView.getWs().addCell(new Label(0,rowCount, studentDetails[3].toString(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(1,rowCount, studentDetails[0].toString(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(2,rowCount, studentDetails[1].toString(), excelView.getDefaultFormat()));
			    							if(ObjectFunctions.isNullOrEmpty(studentDetails[2]))
			    								excelView.getWs().addCell(new Label(3,rowCount, "", excelView.getDefaultFormat()));
			    							else
			    								excelView.getWs().addCell(new Label(3,rowCount, studentDetails[2].toString(), excelView.getDefaultFormat()));
			    							if(ObjectFunctions.isNullOrEmpty(studentDetails[4]))
			    								excelView.getWs().addCell(new Label(4,rowCount, "", excelView.getDefaultFormat()));
			    							else
			    								excelView.getWs().addCell(new Label(4,rowCount, studentDetails[4].toString(), excelView.getDefaultFormat()));
			    							if(ObjectFunctions.isNullOrEmpty(studentDetails[5]))
			    								excelView.getWs().addCell(new Label(5,rowCount, "", excelView.getDefaultFormat()));
			    							else
			    								excelView.getWs().addCell(new Label(5,rowCount, studentDetails[5].toString(), excelView.getDefaultFormat()));
			    							if(ObjectFunctions.isNullOrEmpty(studentDetails[6]))
			    								excelView.getWs().addCell(new Label(6,rowCount, "", excelView.getDefaultFormat()));
			    							else
			    								excelView.getWs().addCell(new Label(6,rowCount, studentDetails[6].toString(), excelView.getDefaultFormat()));
			    					}else{
			    						excelView.getWs().mergeCells(0, rowCount, 5, rowCount);
			    						excelView.getWs().addCell(new Label(0,rowCount, "No students found for this community.", excelView.getDefaultFormat()));
			    					}
			    					rowCount+=1;
					    	}
					    		showSchoolUrlInExcelSheetFooter(rowCount-1,excelView,6);
					    	}
						}studyclass=null;
						}
					}
					excelView.getWb().write();
					excelView.getWb().close();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions( { @Action(value = "ajaxDoCustomerSmsWiseReportDetails", results = { @Result(location = "jasper/fee/customerWiseSmsCountReport.jasper", type = "jasper", name = "success", params = {
			"dataSource", "objectList", "format", "PDF" }) }) })
	  public String ajaxDoCustomerSmsWiseReportDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCustomerSmsWiseReportDetails' method");
		}
		try {
			String pdf = getParamValue("pdfId");
			List<Customer> customerList=null;
			 customerList= adminManager.getAll(Customer.class);
			 if(!ObjectFunctions.isNullOrEmpty(customerList)){
				 for(Customer customer:customerList){
					 if(!ObjectFunctions.isNullOrEmpty(customer)){
						 setSmsCnt(staffManager.getTotalSmsCount(customer.getId(),getUserAcademicYearId()));
						 Customer customer1= new Customer();
						 customer1.setOrganization(customer.getOrganization());
						 customer1.setCustEmail(customer.getCustEmail());
						 customer1.setContactNumber(customer.getContactNumber());
						 customer1.setAllowedTotalSms(customer.getAllowedTotalSms());
						 customer1.setCreatedById(getSmsCnt());
						 getObjectList().add(customer1);
					 }
					 customer=null;
				 }
			 }
			if ("pdf".equalsIgnoreCase(pdf)) {
				getResponse().setHeader("Content-Disposition","attachment; filename=customerWiseSmsCountReport" + StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN) , " ", "-") + ".pdf");
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxImportStudentsRegisterNumber", results = { @Result(location = "../admin/reports/ajaxDoSelectReligionReports.jsp", name = "success") ,
			@Result(location = "../admin/reports/ajaxDoSelectReligionReports.jsp", name = "dummyInit") })})
	public String ajaxImportStudentsRegisterNumber() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxImportStudentsRegisterNumber' method");
		}
		try {
				boolean excelFileType = false;
				excelFileType = validateExcelFileType(getUploadContentType());
				if(excelFileType){
					log.debug("No file to upload....");
					super.addActionError("File type not matched.");
					return "dummyInit";
				}
			    Student student = null;
			    if (getUserAcademicYearId() > 0) {
				WorkbookSettings ws = new WorkbookSettings();
				ws.setLocale(new Locale("en", "EN"));
				Workbook workbook = Workbook.getWorkbook(getUpload(), ws);
				Sheet sheet = null;
				int admissionsAvailableCount=0;
				List<BigInteger> castId=null;
				StringBuffer failureMsg=new StringBuffer();
				StringBuffer failureReg=new StringBuffer();
				failureMsg.append("The following admission number(s) is(are) already available.");
				boolean isFailedRecords = false;
				Customer customer = getCustomerByCustId();
				for (int sheetNum = 0; sheetNum < workbook.getNumberOfSheets(); sheetNum++) {
				    sheet = workbook.getSheet(sheetNum);
				    int rowSize = sheet.getRows();
				    String classname= sheet.getName().substring(0, sheet.getName().length()-5);
				    failureReg.append(" "+classname+" (");
				    for (int i = 6; i < rowSize; i++) {
				    	if (!StringFunctions.isNullOrEmpty(sheet.getCell(1,i).getContents())) {
				    		long studentId = Long.valueOf(sheet.getCell(1,i).getContents());
					    	student = (Student) hostelManager.get(Student.class,studentId);
					    if (!ObjectFunctions.isNullOrEmpty(student)) {
					    	if(StringFunctions.isNotNullOrEmpty(sheet.getCell(5,i).getContents())){
					    		student.setRegisterNumber(sheet.getCell(5,i).getContents());
					    	}
					    	else{
					    		failureReg.append(i+1+",");
					    		continue;
					    	}
					    	if(!ObjectFunctions.isNullOrEmpty(student.getAccount())){
					    		if(!ObjectFunctions.isNullOrEmpty(student.getAccount().getPerson())){
					    			if(StringFunctions.isNotNullOrEmpty(sheet.getCell(2,i).getContents())){
					    				student.getAccount().getPerson().setFirstName(sheet.getCell(2,i).getContents());
					    			}
					    			if(StringFunctions.isNotNullOrEmpty(sheet.getCell(3,i).getContents())){
					    				student.getAccount().getPerson().setLastName(sheet.getCell(3,i).getContents());
					    			}
					    			if(StringFunctions.isNotNullOrEmpty(sheet.getCell(4,i).getContents())){
						    			castId=adminManager.getAll("select id from castSettings where custId="+getUserCustId()+" and castName='"+sheet.getCell(4,i).getContents().trim().toUpperCase()+"'");
						    			if( !ObjectFunctions.isNullOrEmpty(castId)){
						    				for (BigInteger cast :  castId) {
						    					student.getAccount().getPerson().setCastId(cast.longValue());
											}
						    			}else{
						    				CastSettings castSetting = new CastSettings();
						    				castSetting.setCastName(sheet.getCell(4,i).getContents().trim().toUpperCase());
						    				castSetting.setCreatedById(getUser().getId());
						    				castSetting.setCreatedDate(new Date());
						    				castSetting.setCustId(getUserCustId());
						    				castSetting.setLastAccessDate(new Date());
						    				adminManager.save(castSetting);
						    				student.getAccount().getPerson().setCastId(castSetting.getId());
						    				castSetting=null;
						    			}
					    			}
					    		}
						    	if(StringFunctions.isNotNullOrEmpty(sheet.getCell(6,i).getContents())){
						    		admissionsAvailableCount=adminManager.getCount("Account", "custId="+getUserCustId()+" and admissionNumber='"+sheet.getCell(6,i).getContents()+"' and id !="+student.getAccount().getId());
						    		if(admissionsAvailableCount > 0 ){
						    			isFailedRecords=true;
						    			failureMsg.append(sheet.getCell(6,i).getContents()+" ");
						    		}
						    		else{
						    			if(!ObjectFunctions.isNullOrEmpty(customer)){
											if (StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName()) && StringFunctions.isNotNullOrEmpty(sheet.getCell(6,i).getContents())) {
												if (!adminManager.IsUserAccountExists(customer.getCustomerShortName().toLowerCase(),sheet.getCell(6,i).getContents().toLowerCase(),"")) {
													if(StringFunctions.isNotNullOrEmpty(getUsername())){
														student.getAccount().setAdmissionNumber(sheet.getCell(6,i).getContents());
														student.getAccount().setUsername(getUsername());
														String encryptPassword=PasswordUtils.passwordEncoder(getUsername(),null); 				
														student.getAccount().setPassword(encryptPassword);
													}
												} 
											}
										}
						    		}
						    	}
					    	}
					    	adminManager.save(student);
					    	student=null;
					    }
				    }
				   }
				    failureReg.deleteCharAt(failureReg.length()-1);
		    		failureReg.append(")");
				}
				if(isFailedRecords){
					super.addActionError(failureMsg.toString());
				}
				else if(failureReg.length()>0){
					super.addActionError("Please add the register number for the class(row) :"+failureReg.toString());
				}
				else
				 super.addActionMessage("Successfully uploaded the student register number.");
			   }
			}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			  ajaxDoSelectStudyClasses();
		}
		return SUCCESS;
	}
	
	
	
	@Actions( { @Action(value = "ajaxClassWiseMArksDetails", results = {}) })
	public String ajaxClassWiseMArksDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxClassWiseMArksDetails' method");
			}
			List<StudyClass> studyClassList = null;
			if (getUserAcademicYearId()!=0) {
				if(getUser().isParent()){
					studyClassList=adminManager.getAll(StudyClass.class,"id in"+getParamValue("selectedId")+" group by id");
				}else {
					studyClassList=adminManager.getAll(StudyClass.class,"id in"+getParamValue("selectedId").trim());
				}
				List<ExamTypes> examtypesList= adminManager.getAll(ExamTypes.class,"id in"+getExamType());
				List<ViewClassExamDetails> examScheduleDetails=null;
					String  fileName= null;
					
					if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
						fileName = "Term Wise Marks Details In Hostel";
					}else{
						fileName = "Term Wise Marks Details In School";
					}
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					fileName = "Class Wise Marks Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
					FontFactory.register(fontPath);
					// creating pDF page event to set header and Footer to document
					PdfPTable mainTable = null;
					PdfPTable defaultersSubHeaderReport  = null;
					PdfPTable subTypesReport  = null;
					PdfPTable defaultersHeaderReport=null;
					int tableWidth =0;
					Collections.sort(studyClassList);
					StringBuffer scheduleIds = null;
					StringBuffer query = null;
				for (Object studyClass : studyClassList) {
					StudyClass class1 = (StudyClass) studyClass;
					if (!ObjectFunctions.isNullOrEmpty(class1)) {
						Collections.sort(examtypesList);
						for (ExamTypes examTypes : examtypesList) {
							mainTable = new PdfPTable(1);
							mainTable.setWidthPercentage(100);
							mainTable.setSplitLate(false);
							defaultersHeaderReport = new PdfPTable(100);
							if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
								hostelOrganizationDetailsForPdf(fontPath,defaultersHeaderReport,100);
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("TERM WISE MARKS DETAILS IN HOSTEL", 100,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}else{
								organizationDetailsForPdf(fontPath,defaultersHeaderReport,100 );
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("TERM WISE MARKS DETAILS IN SCHOOL", 100,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}
							mainTable.addCell(defaultersHeaderReport);
							if (!ObjectFunctions.isNullOrEmpty(examTypes)) {
								examScheduleDetails = adminManager.getAll(ViewClassExamDetails.class, "classSectionId="+ class1.getId() + " and custId="+ getUserCustId() + " and eid="+ examTypes.getId());
									if (ObjectFunctions.isNotNullOrEmpty(examScheduleDetails)) {
										tableWidth = examScheduleDetails.size() + 3;
										defaultersSubHeaderReport = new PdfPTable(tableWidth);
										defaultersSubHeaderReport.setWidthPercentage(100);
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("CLASS : "+ class1.getClassAndSection(), 30,fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("EXAM TYPE : "+ examTypes.getExamType(),30,fontPath));
										if(!ObjectFunctions.isNullOrEmpty(class1.getMediumId())){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : "+ class1.getMediumId().getName(),40,fontPath));
										}else{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : ",40,fontPath));
										}
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder("STUDENT NAME","#000", fontPath));
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder("ADMISSION NO","#000", fontPath));
										subTypesReport = new PdfPTable(tableWidth);
										subTypesReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder("", "#fff",fontPath));
										subTypesReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder("", "#fff",fontPath));
									Collections.sort(examScheduleDetails,new ExamSchedulesComparator());
									scheduleIds = new StringBuffer();
									for (ViewClassExamDetails schedule : examScheduleDetails) {
										if (!ObjectFunctions.isNullOrEmpty(schedule)) {
											if(scheduleIds.length() > 0)
												scheduleIds.append(",").append(schedule.getScheduleId());
											else
												scheduleIds.append(schedule.getScheduleId());
											defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder(schedule.getName().toUpperCase(),"#000",fontPath));
											subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(schedule.getSubTypeName(),"#000",fontPath));
										}
									}
									subTypesReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder(" ","#000", fontPath));
									defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithinTableSubHeaders("TOTAL",1, fontPath));
									mainTable.addCell(defaultersSubHeaderReport);
										List<Object[]> studentsList = null;
										if(getUser().isSchoolStudent() || getUser().isParent()){
											if(getUser().isParent()){
												StringBuffer sql = new StringBuffer();
												//sql.append("from Student stud WHERE stud.account.parentId=").append(getUser().getId()).append(" and stud.status='Y'").append(" and  classSectionId=").append(class1.getId());
												sql.append("from Student stud WHERE stud.account.id=").append(getUser().getSelectedStudentId()).append(" and stud.status='Y'").append(" and  classSectionId=").append(class1.getId());
												List<Student> accntIds = adminManager.getAllHqlQuery(sql.toString());
												if(!ObjectFunctions.isNullOrEmpty(accntIds)){
													for(Student accntId :accntIds ){
														studentsList = adminManager.getAll("select studId,fullName,admissionNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ class1.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and status='"+Constants.YES_STRING+"'"+" and studId ="+accntId.getId());
													}
												}
											}else{
												if(getUserCustId() == 2)
												{
													studentsList = adminManager.getAll("select studId,fullName,admissionNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ class1.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and status='"+Constants.YES_STRING+"'"+" and accountId="+getUser().getId()+" order by gender desc,firstName");
												}
												else
												{
													studentsList = adminManager.getAll("select studId,fullName,admissionNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ class1.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and status='"+Constants.YES_STRING+"'"+" and accountId="+getUser().getId());
												}
											}
										}else{
											if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
												 studentsList = adminManager.getAll("select studId,fullName,admissionNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ class1.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and status='"+Constants.YES_STRING+"'"+" and bedId!=0");
											}else{
												 studentsList = adminManager.getAll("select studId,fullName,admissionNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ class1.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and status='"+Constants.YES_STRING+"'");
											}
										}
										if(ObjectFunctions.isNotNullOrEmpty(studentsList)){
											for (Object[] accountDetails : studentsList) {
												subTypesReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(accountDetails[1].toString(),"#000",fontPath));
												subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(accountDetails[2].toString(),"#000",fontPath));
												/*SELECT es.id as scheduleId,s.id as studentId,sm.obtainedMarks,sm.moderationMarks,(sm.obtainedMarks+sm.moderationMarks) as totalMarksObtained
												FROM examSchedules es JOIN student s on (es.classSectionId = s.classSectionId and es.academicYearId = s.academicYearId and s.description is null) LEFT JOIN studentMarks sm on (es.id = sm.examScheduleId and s.id = sm.studId) WHERE es.examTypeId=117 and s.id = 30554 and es.id in(6257,6258,6259,6260,6261,6262,6263,6264,6265,6266) order by FIELD(es.id,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266);*/
												query = new StringBuffer("SELECT (IFNULL(sm.obtainedMarks,0)+IFNULL(sm.moderationMarks,0)) as totalMarksObtained,sm.present FROM examSchedules es JOIN student s on (es.classSectionId = s.classSectionId and es.academicYearId = s.academicYearId and s.description is null)")
												 .append(" LEFT JOIN studentMarks sm on (es.id = sm.examScheduleId and s.id = sm.studId) WHERE es.examTypeId=").append(examTypes.getId()).append(" and s.id = ").append(accountDetails[0].toString()).append(" and es.id in(").append(scheduleIds.toString()).append(")").append(" order by FIELD(es.id,").append(scheduleIds.toString()).append(")");
												List<Object[]> studentMarks = adminManager.getAll(query.toString());
												double total = 0;
												if (!ObjectFunctions.isNullOrEmpty(studentMarks)) {
													for (Object[] object : studentMarks) {
														if(ObjectFunctions.isNullOrEmpty(object[1])){
															subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter("0.0","#000",fontPath));
														}else if (!ObjectFunctions.isNullOrEmpty(object[0])) {
															subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(object[0].toString(),"#000",fontPath));
															total+= Double.valueOf(object[0].toString());
														}
													}
													subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(total),"#000",fontPath));
												}
											}
										}else{
											subTypesReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("No students found for this class.",examScheduleDetails.size()+2,fontPath));
										}
										mainTable.addCell(subTypesReport);
									}
									else{
										defaultersSubHeaderReport = new PdfPTable(100);
										defaultersSubHeaderReport.setWidthPercentage(100);
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("CLASS : "+ class1.getClassAndSection(), 20,fontPath));
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("EXAM TYPE : "+ examTypes.getExamType(),50,fontPath));
										if(!ObjectFunctions.isNullOrEmpty(class1.getMediumId())){
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : "+ class1.getMediumId().getName(), 30,fontPath));
										}else{
											defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : ",40,fontPath));
										}
										
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("No exam schedules created for this exam type.",100,fontPath));
										mainTable.addCell(defaultersSubHeaderReport);
							}
							}
							pDFGenerator.getDocument().add(mainTable);
							pDFGenerator.getDocument().newPage();
							mainTable = null;
							defaultersHeaderReport = null;
						}
					}
				}
			pDFGenerator.getDocument().close();
			pDFGenerator = null;
			phfmj = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}

	@Actions( { @Action(value = "ajaxCommunityWiseMArks", results = {}) })
	public String ajaxCommunityWiseMArks() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCommunityWiseMArks' method");
			}
			List<CommonType> religionsList = null;
			List<CastSettings> castSettingsList = null;
			setTempList(null);
			Set<ExamTypes> studyClassExamTypes;
			if (getUserAcademicYearId()!=0) {
				List<StudyClass> studyClassList=adminManager.getAll(StudyClass.class," id in" + getSelectedId());
				//List<ExamTypes> examtypesList= adminManager.getAll(ExamTypes.class,"custId="+getUserCustId());
				
				String  fileName= null;
				if(getPlTitle().equalsIgnoreCase("ReligionWiseMarks")){
					religionsList = adminManager.getAll(CommonType.class," id in"+getAnyTitle());
					if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
						fileName = "Religion Wise Marks Details In Hostel";
					}else{
						fileName = "Religion Wise Marks Details In School";
					}
				}
				if(getPlTitle().equalsIgnoreCase("classAndCommunityWise")){
					castSettingsList = adminManager.getAll(CastSettings.class," id in"+getAnyTitle());
					if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
						fileName = "Community  Wise Marks Details In Hostel";
					}else{
						fileName = "Community  Wise Marks Details In School";
					}
				}
				List<ViewClassExamDetails> examScheduleDetails=null;
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					if(getPlTitle().equalsIgnoreCase("ReligionWiseMarks")){
						fileName = "Religion Wise Marks Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					}else{
						fileName = "Community Wise Marks Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					}
					String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
					FontFactory.register(fontPath);
					// creating pDF page event to set header and Footer to document
					PdfPTable mainTable = null;
					PdfPTable defaultersSubHeaderReport  = null;
					PdfPTable subTypesReport  = null;
					PdfPTable defaultersHeaderReport=null;
					int tableWidth =0;
					double total = 0;
					Object[] studentMarks = null;
					List<Object[]> studentsList=null;
					Collections.sort(studyClassList);
				for (StudyClass class1 : studyClassList) {					
					if (!ObjectFunctions.isNullOrEmpty(class1)) {						
						studyClassExamTypes=class1.getExamTypes();
						if(!ObjectFunctions.isNullOrEmpty(studyClassExamTypes)){						
							List<ExamTypes> examTypesList = new ArrayList(studyClassExamTypes);
							Collections.sort(examTypesList);
						for (ExamTypes examTypes : examTypesList) {  
							mainTable = new PdfPTable(1);
							mainTable.setWidthPercentage(100);
							mainTable.setSplitLate(false);
							defaultersHeaderReport = new PdfPTable(100);
							if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
								hostelOrganizationDetailsForPdf(fontPath,defaultersHeaderReport,100);
								if(getPlTitle().equalsIgnoreCase("ReligionWiseMarks")){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("RELIGION WISE MARKS DETAILS IN HOSTEL",100, fontPath));
								}else{
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("COMMUNITY WISE MARKS DETAILS IN HOSTEL",100, fontPath));
								}
							}else{
								organizationDetailsForPdf(fontPath,defaultersHeaderReport,100 );
								if(getPlTitle().equalsIgnoreCase("ReligionWiseMarks")){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("RELIGION WISE MARKS DETAILS IN SCHOOL",100, fontPath));
								}else{
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("COMMUNITY WISE MARKS DETAILS IN SCHOOL",100, fontPath));
								}
							}
							mainTable.addCell(defaultersHeaderReport);
								if (!ObjectFunctions.isNullOrEmpty(examTypes)) {
									examScheduleDetails = adminManager.getAll(ViewClassExamDetails.class, "classSectionId="+ class1.getId() + " and custId="+ getUserCustId() + " and eid="+ examTypes.getId()+" and schedule='"+Constants.YES_STRING+"' ");
									if (ObjectFunctions.isNotNullOrEmpty(examScheduleDetails)) {
										tableWidth = examScheduleDetails.size() + 3;
										defaultersSubHeaderReport = new PdfPTable(tableWidth);
										defaultersSubHeaderReport.setWidthPercentage(100);
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("CLASS : "+ class1.getClassAndSection(), 30,fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("EXAM TYPE : "+ examTypes.getExamType(), 30,fontPath));
										if(!ObjectFunctions.isNullOrEmpty(class1.getMediumId())){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : "+ class1.getMediumId().getName(),40,fontPath));
											}else{
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : ",40,fontPath));
											}
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder("STUDENT NAME","#000", fontPath));
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder("ADMISSION NO","#000", fontPath));
										subTypesReport = new PdfPTable(tableWidth);
										Collections.sort(examScheduleDetails,new ExamSchedulesComparator());
											for (ViewClassExamDetails schedule : examScheduleDetails) {
												if (!ObjectFunctions.isNullOrEmpty(schedule)) {
													defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeadersNoBorder(schedule.getName().toUpperCase()+" ("+schedule.getSubTypeName()+")","#000",fontPath));
												}
											}
											defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithinTableSubHeaders("TOTAL",1, fontPath));
											mainTable.addCell(defaultersSubHeaderReport);
											if(getPlTitle().equalsIgnoreCase("ReligionWiseMarks")){
											for (CommonType commonType : religionsList) {
												if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
													studentsList=adminManager.getAll("select studId,fullName,admissionNumber,castId from vw_studentClassDetails where classSectionId="+class1.getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and status='Y'"+" and religionId="+commonType.getId()+" and bedId!=0");
												}else{
													studentsList=adminManager.getAll("select studId,fullName,admissionNumber,castId,accountId from vw_studentClassDetails where classSectionId="+class1.getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and status='Y'"+" and religionId="+commonType.getId());
												}
												if(!ObjectFunctions.isNullOrEmpty( commonType.getSkillTypeName())){
													subTypesReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperWthBorder("RELIGION NAME : "+ commonType.getSkillTypeName(),100,fontPath));
												}	
												if(ObjectFunctions.isNotNullOrEmpty(studentsList)){
													log.debug(commonType.getSkillTypeName());
													for(Object[] student: studentsList){
														 total = 0;
														subTypesReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student[1].toString(),"#000",fontPath));
														subTypesReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student[2].toString(),"#000",fontPath));
														for (ViewClassExamDetails scheduleObj : examScheduleDetails) {
														 studentMarks = adminManager.get("select obtainedMarks,maxMarks from vw_studentExamMarks where academicYearId="+ getUserAcademicYearId()+ " and examTypeId="+ examTypes.getId()+" and scheduleId="+scheduleObj.getScheduleId()+"  and custId="+getUserCustId()+" and studId="+student[0].toString());
														if (!ObjectFunctions.isNullOrEmpty(studentMarks)) {
																	subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(studentMarks[0].toString()),"#000",fontPath));
																	total+= Double.valueOf(studentMarks[0].toString());
														}else{
																subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter("","#000",fontPath));
															}
														}
														subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(total),"#000",fontPath));
													}
												}else{
													subTypesReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("No students found for this "+commonType.getSkillTypeName()+".",examScheduleDetails.size()+3,fontPath));
												}
											 }
												studentsList = null;
											}
											if(getPlTitle().equalsIgnoreCase("classAndCommunityWise")){
												for (CastSettings castSettings : castSettingsList) {													
													if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
														studentsList=adminManager.getAll("select studId,fullName,admissionNumber,castId from vw_studentClassDetails where classSectionId="+class1.getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and status='Y'"+" and castId="+castSettings.getId()+" and bedId!=0");
													}else{
														studentsList=adminManager.getAll("select studId,fullName,admissionNumber,castId,accountId from vw_studentClassDetails where classSectionId="+class1.getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and status='Y'"+" and castId="+castSettings.getId());															
													}
													if(!ObjectFunctions.isNullOrEmpty(castSettings.getCastName())){
														subTypesReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperWthBorder("Community Name : "+ castSettings.getCastName(),100,fontPath));
													}	
													if(ObjectFunctions.isNotNullOrEmpty(studentsList)){
														log.debug(castSettings.getCastName());
														for(Object[] student: studentsList){
															 total = 0;
															subTypesReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student[1].toString(),"#000",fontPath));
															subTypesReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student[2].toString(),"#000",fontPath));
															for (ViewClassExamDetails scheduledObj : examScheduleDetails) {
																studentMarks = adminManager.get("select obtainedMarks,maxMarks from vw_studentExamMarks where academicYearId="+ getUserAcademicYearId()+ " and examTypeId="+ examTypes.getId()+" and scheduleId="+scheduledObj.getScheduleId()+" and custId="+getUserCustId()+" and studId="+student[0].toString());
																if (!ObjectFunctions.isNullOrEmpty(studentMarks)) {
																			subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(studentMarks[0].toString()),"#000",fontPath));
																			total+= Double.valueOf(studentMarks[0].toString());
																}
																else{
																	subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter("","#000",fontPath));
																}
															}
															subTypesReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(total),"#000",fontPath));
														}
													}else{
														subTypesReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("No students found for this "+castSettings.getCastName()+".",examScheduleDetails.size()+3,fontPath));
													}
												 }
												studentsList = null;
											}
											mainTable.addCell(subTypesReport);
									
								}else{
									defaultersSubHeaderReport = new PdfPTable(100);
									defaultersSubHeaderReport.setWidthPercentage(100);
									defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("CLASS : "+ class1.getClassAndSection(), 30,fontPath));
									defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("EXAM TYPE : "+ examTypes.getExamType(), 30,fontPath));
									if(!ObjectFunctions.isNullOrEmpty(class1.getMediumId())){
										defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : "+ class1.getMediumId().getName(),40,fontPath));
										}else{
											defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("MEDIUM : ",40,fontPath));	
										}
									defaultersSubHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("No exam schedules created for this exam type.",100,fontPath));
									mainTable.addCell(defaultersSubHeaderReport);
								}
							pDFGenerator.getDocument().add(mainTable);
							pDFGenerator.getDocument().newPage();
							mainTable = null;
							defaultersHeaderReport = null;
						}
					}
					}
					}
				}
			pDFGenerator.getDocument().close();
			pDFGenerator = null;
			phfmj = null;
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}		

	@Actions({
		@Action(value = "ajaxDownloadStudentDetails", results = { @Result(location = "../admin/reports/ajaxDownloadStudentDetails.jsp", name = "success") }) })
		public String ajaxDownloadStudentDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadStudentDetails' method");
		}
		try
		{
			if(getUserAcademicYearId() > 0){
				getSession().removeAttribute("GetAllStudyClasses");
				checkStudyClassHavingStudentsOrNot();
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxGetStudyClassList", results = { @Result(location = "common/ajaxViewStudyClassList.jsp", name = "success") })
	})
	public String ajaxGetStudyClassList() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStudyClassList' method");
		}
		try {
			if(getUserAcademicYearId() > 0){
				checkStudyClassHavingStudentsOrNot();	
				}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDownloadStudent", results = {}) })
    public void ajaxDownloadStudent() throws URTUniversalException {
	if (log.isDebugEnabled()) {
	    log.debug("Entering 'ajaxDownloadStudent' method");
	}
	try {
        if (getUserAcademicYearId() != 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
            String[] words = { "Own", "Private", "School Tranport" };
            Arrays.asList(words);
            String fileName = "Student_Details_" + DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
            getResponse().setContentType("application/vnd.ms-excel");
            getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_') + ".xls");
            PrepareStudentExcel prepareStudentExcel = new PrepareStudentExcel();
            List<Object[]> studentDetails=null;
            List<StudyClass> studyClasses = adminManager.getAll(StudyClass.class, "id in " + getSelectedId());
            List<ViewClassSectionDetails> classSections = adminManager.getAll(ViewClassSectionDetails.class,
            " academicYearId = " + getUserAcademicYearId() + " and custId = " + getUserCustId()
                + " order by sortingOrder asc");
            List<State> states = (List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST);
            List<MotherTongue> motherTongues = (List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST);
              List<SchoolCategory> schoolCategory = studentManager.getAll(SchoolCategory.class," custId = " + getUserCustId());
            List<CastSettings> communityList = studentManager.getAllByCustId("CastSettings", getUserCustId(),0);

			List<SubCastSettings> castNameList = adminManager.getAll(SubCastSettings.class,"custId = "+getUserCustId());
			List<HouseType> houseTypeList =  studentManager.getAll(HouseType.class);
            prepareStudentExcel.createClassSectionSheet("ClassSections", classSections,states,motherTongues,getUserAcademicYearId(),getUserCustId(),schoolCategory,communityList,castNameList,houseTypeList);
            StringBuffer sheetTitleDesc = new StringBuffer();
        	sheetTitleDesc.append("School Name : ");
        	if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("organization"))){
        		sheetTitleDesc.append((String)getSession().getAttribute("organization"));
        	}
        	sheetTitleDesc.append(", Academic Year : ");
        	if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYearName"))){
        		sheetTitleDesc.append((String)getSession().getAttribute("academicYearName"));
        		
        	}
            if (ObjectFunctions.isNotNullOrEmpty(studyClasses)) {
                for (StudyClass studyClass : studyClasses) {
                    studentDetails = adminManager.getAll(PrepareStudentExcel.query + " where classSectionId="
                    + studyClass.getId() + " and description is null order by firstName,lastName");
                    if (!ObjectFunctions.isNullOrEmpty(studentDetails)) {
                        prepareStudentExcel.createStudentSheet(studyClass.getClassAndSection(), studentDetails,sheetTitleDesc.toString(),getCustomerByCustId().getCommittedFeeStatus());
                    }
                }
            }else {
            	prepareStudentExcel.createStudentSheet("Student", studentDetails,sheetTitleDesc.toString(),getCustomerByCustId().getCommittedFeeStatus());
			}
            prepareStudentExcel.finalPrep("ClassSections",studentDetails);
            prepareStudentExcel.getWb().write(getResponse().getOutputStream());
        }
    } catch (Exception ex) {
	    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
    }
	    
	 @Actions({
		@Action(value = "viewExamSchedulesForParents", results = {  @Result(location = "jasper/marks/examSchedulesWithClassesAndExamTypes.jasper", type="jasper", name = "success",params = {"dataSource","getObjectList()","format", "PDF"}),
					                                                             @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" }) }) })
		public String viewExamSchedulesForParents()
		{
			if (log.isDebugEnabled()) {
				log.debug("Entering 'viewExamSchedulesForParents' method");
			}
			try
			{
				Student student = null;
				if(StringFunctions.isNotNullOrEmpty(getExamType()) && StringFunctions.isNotNullOrEmpty(getParamValue("selectedId").trim())){
					Customer customer = getCustomerByCustId();
					if(!ObjectFunctions.isNullOrEmpty(customer)){
						setCustomerName(customer.getOrganization());
						setTempString(customer.getOrganizationFullAddress());
					}
			        student =(Student)adminManager.get(Student.class, Long.valueOf(getParamValue("selectedId").trim()));
			        setAnyTitle(student.getAccount().getPerson().getFullPersonName());
			        setObjectList(staffManager.getAll(ViewClassExamDetails.class,"classSectionId ="+student.getClassSectionId()+" and eid in "+getExamType()));
					if ("PDF".equalsIgnoreCase(getAnyId()) && !ObjectFunctions.isNullOrEmpty(getObjectList()) ) {
						getResponse().setHeader("Content-Disposition","attachment; filename=ExamSchedulesForMultipleClasses.pdf");
					}else{
						setAlertSendType("There is no examSchedules for this class.");
						return "errorMessage";
					}
				}
			}catch(Exception ex)
			{
				log.error("Entering into 'catch block':"+ex.getMessage());
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions( { @Action(value = "ajaxDoDownloadTimeTableReport", results = { @Result(location = "../admin/reports/ajaxGenerateTimeTableReport.jsp", name = "success") }),
		 @Action(value = "ajaxDoDownloadStudentAttendanceTemplate", results = { @Result(location = "../admin/reports/ajaxDownloadStudentAttendance.jsp", name = "success") })})
		public String ajaxDoDownloadTimeTableReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoDownloadTimeTableReport' method");
			}
			try {
                if(getUserAcademicYearId() > 0){
                	checkStudyClassHavingStudentsOrNot();
			}
			}catch (Exception ex) {
				// TODO: handle exception
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxGenerateTimeTableByClasses", results = {}) })
		public String ajaxGenerateTimeTableByClasses() {
			try {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxGenerateTimeTableByClasses' method");
				}
				if (StringFunctions.isNotNullOrEmpty(getSelectedId())) {
					String fileName = null;
					if(StringFunctions.isNullOrEmpty(getTempString()))
						fileName = "Class Wise Timetable"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					else
						fileName = getTempString()+" ClassWiseTimetable"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					pDFGenerator.getDocument().open();
					Customer customer = getCustomerByCustId();
					String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
					FontFactory.register(fontPath);
					PdfPTable defaultersHeaderReport = null;
					int width = 0;
					int periodName=1;
					int workingDaysCount = 0; 
					List<Object[]> periodNames = null;
					List<Object[]> weekDays = null;
					List<Object[]> timeTableList = null;
					boolean isPeriodAvailable = true;
					boolean isAfternoonBreak=false;
					int widths[];
					List<Object[]> classSections=adminManager.getAll("select classSectionId,classAndSection,custId from vw_classSectionDetails where classSectionId in"+getSelectedId());
					if(ObjectFunctions.isNotNullOrEmpty(classSections)){
					  if (!ObjectFunctions.isNullOrEmpty(customer)) {
						  width = adminManager.getCountForGroupByClause("timeTable", "classSectionId in"+getSelectedId()+" group by periodName,periodType");
						}
					  PdfPCell cellTopBorder = new PdfPCell();
					  cellTopBorder.setBorder(0);
					  cellTopBorder.setBorderWidthTop(1);
					  PdfPCell cellBottomBorder = new PdfPCell();
					  cellBottomBorder.setBorder(0);
					  cellBottomBorder.setBorderWidthBottom(1);
					  defaultersHeaderReport = new PdfPTable(width+1);
					  defaultersHeaderReport.setWidthPercentage(100);
					  if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width+1,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					  }
					  if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width+1,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					  }
					  PdfPCell cell = new PdfPCell(new Paragraph ("",FontFactory.getFont("droidsans", 10, Font.BOLD,Color.BLACK)));
					  cell.setBorder(Rectangle.BOTTOM);
					  cell.setColspan(width+1);
					  defaultersHeaderReport.addCell(cell);
					  pDFGenerator.getDocument().add(defaultersHeaderReport);
					  for(Object[] classSection: classSections){
							periodNames = adminManager.getAll("select periodName,periodType from timeTable where classSectionId="+classSection[0].toString()+" group by periodName,periodType order by periodType DESC,periodName");
							weekDays = adminManager.getAll("select dayId,dayName from vw_classWisePeriodsCountDetails where classSectionId="+classSection[0].toString());
							if(ObjectFunctions.isNotNullOrEmpty(periodNames)){
								timeTableList = adminManager.getAll("select periodType, max(periodName) from timeTable where classSectionId="+classSection[0].toString()+" group by periodType order by periodType DESC");
								if(ObjectFunctions.isNotNullOrEmpty(timeTableList) && timeTableList.size() > 1){
									width = periodNames.size()+2;
									isAfternoonBreak = true;
								}else{
									width = periodNames.size()+1;
									isAfternoonBreak = false;
								}
								periodName = 1;
								defaultersHeaderReport = new PdfPTable(width);
								defaultersHeaderReport.setWidthPercentage(100);
								defaultersHeaderReport.setKeepTogether(true);
								if(isAfternoonBreak){
									if(!ObjectFunctions.isNullOrEmpty(timeTableList.get(0))){
										widths = new int[width];
										for(int i =0; i < width;i++){
											if(i == Integer.valueOf(timeTableList.get(0)[1].toString())+1)
												widths[i] = 2;
											else
												widths[i] = 10;
										}
										defaultersHeaderReport.setWidths(widths);
									}
								}
								timeTableList = null;
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(classSection[1].toString()+" Timetable",width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("",1, fontPath));
								for(Object[] period : periodNames){
									if("1".equalsIgnoreCase(period[0].toString()) && "A".equalsIgnoreCase(period[1].toString()) && isAfternoonBreak){
										defaultersHeaderReport.addCell(cellTopBorder);
									}
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor((periodName++)+"",1, fontPath));
								}
								workingDaysCount = weekDays.size();
								for(Object[] weekDay:weekDays){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(weekDay[1].toString(),1, fontPath));
									timeTableList=adminManager.getAll("select dayName,periodName,periodType,subjectName,CONVERT(group_concat(staffFullName SEPARATOR ' & '),CHAR) as staffNames from vw_timeTableDetails where dayId="+weekDay[0].toString()+" and classSectionId="+classSection[0].toString()+" group by periodName,periodType,subjectId order by periodType DESC,periodName");
									if(ObjectFunctions.isNotNullOrEmpty(timeTableList)){
											for(Object[] period : periodNames){
												if("1".equalsIgnoreCase(period[0].toString()) && "A".equalsIgnoreCase(period[1].toString()) && isAfternoonBreak){
													if(workingDaysCount == 1)
														defaultersHeaderReport.addCell(cellBottomBorder);
													else
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",0,fontPath,0,"#FFFFFF",0,0));
												}
												isPeriodAvailable = false;
												for(Object[] timeTable : timeTableList){
													if(timeTable[1].toString().equalsIgnoreCase(period[0].toString()) && timeTable[2].toString().equalsIgnoreCase(period[1].toString())){
														if(ObjectFunctions.isNullOrEmpty(timeTable[3]))
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("-","#000",fontPath));
														else{
															if(!ObjectFunctions.isNullOrEmpty(timeTable[4]) && StringFunctions.isNotNullOrEmpty(timeTable[4].toString()))
																defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(timeTable[3].toString()+"\n ("+timeTable[4].toString()+")","#000",fontPath));
															else
																defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(timeTable[3].toString(),"#000",fontPath));
														}
														isPeriodAvailable = true;
														break;
													}
												}
												if(!isPeriodAvailable){
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("","#000", fontPath));
												}
											}
									}
									workingDaysCount--;
									timeTableList = null;
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("",width, fontPath));
								pDFGenerator.getDocument().add(defaultersHeaderReport);
								defaultersHeaderReport=null;
							}
							periodNames = null;
							weekDays = null;
						}
					}
						periodNames = null;
						weekDays = null;
						timeTableList = null;
						pDFGenerator.getDocument().close();
						pDFGenerator = null;
						defaultersHeaderReport = null;
						pDFGenerator = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
	 @Actions( { @Action(value = "ajaxDownloadStudentTimeTableReport", results = {}) })
		public String ajaxDownloadStudentTimeTableReport() {
			try {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxDownloadStudentTimeTableReport' method");
				}
				Object[] stud = adminManager.get("select id,classSectionId from student where accountId="+getUser().getId()+" and academicYearId="+getUserAcademicYearId());
				if(!ObjectFunctions.isNullOrEmpty(stud)){
					setSelectedId("("+stud[1].toString()+")");
					ajaxGenerateTimeTableByClasses();
				}
			}catch (Exception ex) {
				// TODO: handle exception
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
	 }
	 @Actions( { @Action(value = "ajaxDoDownloadStudentsTimeTableReport", results = { @Result(location = "../admin/reports/ajaxGenerateTimeTableReportForStudents.jsp", name = "success") })})
		public String ajaxDoDownloadStudentsTimeTableReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoDownloadTimeTableReport' method");
			}
			try {
				List<Object[]> studs = adminManager.getAll("select firstName,lastName,classSectionId from vw_studentDetails where parentId="+getUser().getId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null");
				if(ObjectFunctions.isNotNullOrEmpty(studs)){
					for(Object[] stud: studs){
						if(ObjectFunctions.isNullOrEmpty(stud[0]) && ObjectFunctions.isNullOrEmpty(stud[1]))
							getViewStudentPersonAccountDetailsList().add(new ViewStudentPersonAccountDetails("","",Long.valueOf(stud[2].toString())));
						else if(ObjectFunctions.isNullOrEmpty(stud[0]))
							getViewStudentPersonAccountDetailsList().add(new ViewStudentPersonAccountDetails("",stud[1].toString(),Long.valueOf(stud[2].toString())));
						else if(ObjectFunctions.isNullOrEmpty(stud[1]))
							getViewStudentPersonAccountDetailsList().add(new ViewStudentPersonAccountDetails(stud[0].toString(),"",Long.valueOf(stud[2].toString())));
						else
							getViewStudentPersonAccountDetailsList().add(new ViewStudentPersonAccountDetails(stud[0].toString(),stud[1].toString(),Long.valueOf(stud[2].toString())));
						stud = null;
					}
					studs = null;
				}
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxImportStaffsAttendance", results = { @Result(location = "../common/staffAttendance/staffAttendanceFormByWeeklyOrMonthly.jsp", name = "success") ,
			 @Result(location = "../common/staffAttendance/staffAttendanceFormByWeeklyOrMonthly.jsp", name = "dummyInit") }) })
		public String ajaxImportStaffsAttendance() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxImportStaffsAttendance' method");
			}
			try {
				boolean excelFileType = false;
				excelFileType = validateExcelFileType(getUploadContentType());
				if(excelFileType){
					log.debug("No file to upload....");
					super.addActionError("File type not matched.");
					return "dummyInit";
				}
				
				if (getUserAcademicYearId() > 0) { 
					academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getUserAcademicYearId());
					WorkbookSettings ws = new WorkbookSettings();
					ws.setLocale(new Locale("en", "EN"));
					Workbook workbook = Workbook.getWorkbook(getUpload(), ws);
					Sheet sheet = null;
					int rowSize;
					int columnSize;
					Cell cell;
					String accountId;
					String month;
					String totalOfPresentDays;
					StaffMonthlyAttendance attendance = null;
					StringBuffer monthFailureMsg=new StringBuffer();
					monthFailureMsg.append("(");
					//Map<String, Integer> monthwiseWrkgDays = adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null, null,true,"");
					Map<String, String> monthwiseWrkgDays = new HashMap<String, String>();
					//if (!ObjectFunctions.isNullOrEmpty(monthwiseWrkgDays)&& !ObjectFunctions.isNullOrEmpty(academicYearWorkingDays)) {
						StringBuffer failureMsg=new StringBuffer();
						//failureMsg.append("(");
						for (int sheetNum = 0; sheetNum < workbook.getNumberOfSheets(); sheetNum++) {
							sheet = workbook.getSheet(sheetNum);
							rowSize = sheet.getRows();
							columnSize = sheet.getColumns();
							
							for (int j = 3; j < columnSize; j++) {
								if(!ObjectFunctions.isNullOrEmpty(sheet.getCell(j, 6).getContents()) && !ObjectFunctions.isNullOrEmpty(sheet.getCell(j, 5).getContents()))
								{
									//int monthActualDays = DateFunctions.geActualMonthDaysByMonthName(sheet.getCell(j, 6).getContents());
									int monthActualDays =geActualMonthDaysByMonthName(sheet.getCell(j, 6).getContents());
				                    if(monthActualDays > 0)
				                    {
				                    	//int monthActualDays = DateFunctions.getActualMonthDaysByMonthId(monthNumber);
					                    int givenMonthDays = 0;
					                    if(!StringFunctions.isNullOrEmpty(sheet.getCell(j, 5).getContents()))
					                	   givenMonthDays = Integer.parseInt(sheet.getCell(j, 5).getContents());
					                   
					                	if(monthActualDays >= givenMonthDays)
					                		monthwiseWrkgDays.put(sheet.getCell(j, 6).getContents(), sheet.getCell(j, 5).getContents());
					                	else
					                	{
					                		monthFailureMsg.append(sheet.getCell(j, 6).getContents());
					                		monthFailureMsg.append(",");
					                	}
				                    }
								}
							}
							monthFailureMsg.deleteCharAt(monthFailureMsg.length() - 1);
							monthFailureMsg.append(")");
							
							for (int i = 8; i < rowSize; i++) {
								cell = sheet.getCell(3, i);
								accountId = cell.getContents();
								if (StringFunctions.isNotNullOrEmpty(accountId)) {
									for (int j = 4; j < columnSize; j++) {
										cell = sheet.getCell(j, 6);
										month = cell.getContents();
										cell = sheet.getCell(j, i);
										totalOfPresentDays = cell.getContents();
										if(StringFunctions.isNotNullOrEmpty(monthwiseWrkgDays.get(month)) && StringFunctions.isNotNullOrEmpty(sheet.getCell(j, i).getContents()) && Double.valueOf(sheet.getCell(j, i).getContents()) <= Double.valueOf(monthwiseWrkgDays.get(month)))
										{
										//if (StringFunctions.isNotNullOrEmpty(month) && StringFunctions.isNotNullOrEmpty(totalOfPresentDays)) {
											log.debug("select * from StaffMonthlyAttendance where accountId="+Long.valueOf(accountId)+" and academicYearId<="+getUserAcademicYearId()+" and monthName='"+month+"'");
											attendance =(StaffMonthlyAttendance)adminManager.get(StaffMonthlyAttendance.class, "accountId="+Long.valueOf(accountId)+" and academicYearId<="+getUserAcademicYearId()+" and monthName='"+month+"'");
											if(ObjectFunctions.isNullOrEmpty(attendance)){
												attendance = new StaffMonthlyAttendance();
												attendance.setAccountId(Long.valueOf(accountId));
												attendance.setCreatedById(getUser().getId());
												attendance.setCreatedDate(new Date());
											}
											attendance.setNoOfPresentDays(totalOfPresentDays);
											attendance.setTotalWorkingDays(monthwiseWrkgDays.get(month).toString());
											attendance.setLastAccessDate(new Date());
											attendance.setLastUpdatedDate(new Date());
											attendance.setLastUpdatedById(getUser().getId());
											attendance.setMonthName(month);
											//attendance.setMonth(DateFunctions.getMonthNumberByMonthName(month));
											attendance.setMonth(getMonthNumberByMonthName(month));
											attendance.setAcademicYearId(getUserAcademicYearId());
											adminManager.save(attendance);
										}
										else {
											//attendance.setNoOfPresentDays(monthwiseWrkgDays.get(month).toString());
											cell = sheet.getCell(2, i);
											failureMsg.append(cell.getContents());
											failureMsg.append(",");
										}
									}
								}
							}
						}
						if(failureMsg.length()>0){
							failureMsg.deleteCharAt(failureMsg.length() - 1);
							setAnyTitle(StringFunctions.removeDuplicateWords(failureMsg.toString(), ","));
							if(getAnyTitle().length() > 1){
								super.addActionError("The following ("+getAnyTitle()+") staff(s) data not loaded,Because of present days more than working days (or) not entered working days.");
							}
						}
						if(monthFailureMsg.length() > 1){
							super.addActionError("The following months "+monthFailureMsg.toString()+" data not loaded,Because of present month days more than actual month days.");
						}
						super.addActionMessage("Staff attendance added Successfully");
					//}
				}
				setStaffRoleName("staffAtt");
				setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null, null,true,"", getClassId())); //here getClassId used to academicyear have class wise holiday(CH).
				
			} catch (Exception ex) {
				// TODO: handle exception
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	//Modified By Balu on 07/05/2013
	 @Actions( { @Action(value = "ajaxDownloadStudentsAttendanceTemplate", results = {}) })
		public void ajaxDownloadStudentsAttendanceTemplate()throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadStudentsAttendanceTemplate' method");
			}
			try {
				if (getUserAcademicYearId() > 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
					String fileName = null;
					if(StringFunctions.isNullOrEmpty(getTempString()))
						fileName = "studentsAttendance_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					else
						fileName = "studentsAttendance_"+getTempString().trim();
					ExcelView excelView = new ExcelView();
					List<StudyClass> studyClassList = null;
					List<Object[]> studentsList = null;
					int rollNumber;
					int row;
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					
					//For School Address
					WritableCellFormat cellFormat8= getCellFormat8();
					//For School name
					WritableCellFormat cellFormat10= getCellFormat10();
			    	
					Customer customer = getCustomerByCustId();
					studyClassList = adminManager.getAll(StudyClass.class,"id in"+getSelectedId());
					Object[] attendance =  null;
					if(ObjectFunctions.isNotNullOrEmpty(studyClassList)){
						for(StudyClass studyClass: studyClassList){
							excelView.setWorkSheetName(studyClass.getClassAndSection()+" class");
					    	excelView.createWorkSheet(0);
					    	excelView.setDefaultFormat(excelView.getArial10format());
							if (!ObjectFunctions.isNullOrEmpty(customer)) {
					        	if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
							        excelView.getWs().mergeCells(0, 1, 6,2);
							    	excelView.getWs().addCell(new Label(0,1, customer.getOrganization(), cellFormat10));
					        	}
					        	if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
							    	excelView.getWs().mergeCells(0, 3, 6,3);
							    	excelView.getWs().addCell(new Label(0,3, customer.getCustomerFormattedAddress(), cellFormat8));
					        	}
					        }
							excelView.getWs().mergeCells(0, 4, 6, 4);
							excelView.getWs().addCell(new Label(0,4, "Note :- You shouldn't change green colour fields."));
							excelView.getWs().addCell(new Label(0,5, "Total Working Days",excelView.getUsermore10BoldformatGreenBgClr()));
							attendance = adminManager.get("select max(totalWorkingDays),classSectionId from vw_StudentMonthlyAttendance where classSectionId="+studyClass.getId()+" and totalWorkingDays is not null");
							if(!ObjectFunctions.isNullOrEmpty(attendance) && !ObjectFunctions.isNullOrEmpty(attendance[0]))
								excelView.getWs().addCell(new Label(1,5, attendance[0].toString()));
							else 
								excelView.getWs().addCell(new Label(1,5, " "));
							excelView.getWs().addCell(new Label(0,6, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
							excelView.getWs().addCell(new Label(1,6, "Roll Number", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(2,6, "Admission Number", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(3,6, "Student Name", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().addCell(new Label(5,6, "Present Days Count", excelView.getUsermore10BoldformatGreenBgClr()));
				    		excelView.getWs().setRowView(6,500);
				    		excelView.getWs().setColumnView(0,20);
				    		excelView.getWs().setColumnView(1,15);
				    		excelView.getWs().setColumnView(2,15);
				    		excelView.getWs().setColumnView(3,20);
				    		excelView.getWs().setColumnView(5,20);
				    		CellView cv=new CellView();
					        cv.setHidden(true);
					        excelView.getWs().setColumnView(4, cv);
					        cv=null;
					        row=7;
					        if(getUserCustId() == 2)
					        	studentsList=adminManager.getAll("select rollNumber,admissionNumber,fullName,studId,accountId,classSectionId,academicYearId from vw_studentClassDetails where classSectionId="+studyClass.getId()+" and academicYearId="+studyClass.getAcademicYearId()+" and custId="+getUserCustId()+" and status='Y' order by gender desc,firstName");
					        else
					        	studentsList=adminManager.getAll("select rollNumber,admissionNumber,fullName,studId,accountId,classSectionId,academicYearId from vw_studentClassDetails where classSectionId="+studyClass.getId()+" and academicYearId="+studyClass.getAcademicYearId()+" and custId="+getUserCustId()+" and status='Y'  order by IF(registerNumber is null,firstName,registerNumber)");
							if(ObjectFunctions.isNotNullOrEmpty(studentsList)){
								rollNumber=1;
								for(Object[] student: studentsList){
									excelView.getWs().addCell(new Label(0,row, ""+rollNumber++, excelView.getUsermore10BoldformatGreenBgClr()));
									excelView.getWs().addCell(new Label(1,row, student[0].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(2,row, student[1].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(3,row, student[2].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(4,row, student[3].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
						    		attendance = adminManager.get("select noOfPresentDays,totalWorkingDays from vw_StudentMonthlyAttendance where studentId="+student[3].toString()+" and classSectionId="+student[4].toString()+" and noOfPresentDays is not null");
						    		if(!ObjectFunctions.isNullOrEmpty(attendance) && !ObjectFunctions.isNullOrEmpty(attendance[0])){
						    			excelView.getWs().addCell(new Label(5,row, attendance[0].toString()));
						    		}
						    		student=null;
						    		row++;
						    		student = null;
								}
								studentsList=null;
							}else{
								 excelView.getWs().mergeCells(0, row, 6,row);
								 excelView.getWs().addCell(new Label(3,row, "No students found for this class.", excelView.getUsermore10BoldformatGreenBgClr()));
							}
							studyClass = null;
						}
						studyClassList = null;
						excelView.getWb().write();
						excelView.getWb().close();
					}
					attendance = null;
					excelView = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		}
	//Modified By Balu on 07/05/2013
	 @Actions( { @Action(value = "ajaxMonthwiseStafftAttendanceTemplate", results = {}) })
		public void ajaxMonthwiseStafftAttendanceTemplate()throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxMonthwiseStafftAttendanceTemplate' method");
			}
			try {
				getParamValue("selectedMonthNames");
				if (getUserAcademicYearId() > 0) {
					String fileName = "staffsMonthwiseAttendance_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					ExcelView excelView = new ExcelView();
					List<Object[]> viewStaffPersonAccountDetailsList=null;
					AcademicYear academicYear=null;
					Object[] totalPresentAtt = null;
					Object[] totalWrkgDays = null;
					int staffCount=1;
					List<String> monthNames = new ArrayList<String>();
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					//For School Address
					WritableCellFormat cellFormat8= getCellFormat8();
					//For School name
					WritableCellFormat cellFormat10= getCellFormat10();
					
					Customer customer = getCustomerByCustId();
					academicYear=(AcademicYear)adminManager.get(AcademicYear.class,getUserAcademicYearId());
					if(!ObjectFunctions.isNullOrEmpty(academicYear)){
						if(!ObjectFunctions.isNullOrEmpty(academicYear.getStartDate()) && !ObjectFunctions.isNullOrEmpty(academicYear.getEndDate())){
							//monthWiseWorkingDays=adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null, null,true,"");
							if(StringFunctions.isNullOrEmpty(getParamValue("selectedMonthNames"))){
								DateFormat df = new SimpleDateFormat("MMM");
						        GregorianCalendar gcFrom = new GregorianCalendar();
						        gcFrom.setTime(academicYear.getStartDate());
						        GregorianCalendar gcTo = new GregorianCalendar();
						        gcTo.setTime(academicYear.getEndDate());
						        while (gcFrom.before(gcTo)) {
						        	monthNames.add(df.format(gcFrom.getTime()));
						        	gcFrom.add(Calendar.MONTH, 1);
						        }	
							}else {
								String[] names=getParamValue("selectedMonthNames").split(",");
								if(!ObjectFunctions.isNullOrEmpty(names)){
										for (String token : names) {
											monthNames.add(token);
									}
								}
							}
						  //  if(ObjectFunctions.isNotNullOrEmpty(monthNames) && !ObjectFunctions.isNullOrEmpty(monthWiseWorkingDays)){
							if(ObjectFunctions.isNotNullOrEmpty(monthNames)){
						    	excelView.setWorkSheetName("Staff Attendance");
							    	excelView.createWorkSheet(0);
							    	excelView.setDefaultFormat(excelView.getArial10format());
							    	excelView.getWs().setColumnView(1, 15);
									if (!ObjectFunctions.isNullOrEmpty(customer)) {
							        	if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
									        excelView.getWs().mergeCells(0, 0, monthNames.size()+2,1);
									    	excelView.getWs().addCell(new Label(0,0, customer.getOrganization(), cellFormat10));
							        	}
							        	if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
									    	excelView.getWs().mergeCells(0, 2, monthNames.size()+2,2);
									    	excelView.getWs().addCell(new Label(0,2, customer.getCustomerFormattedAddress(), cellFormat8));
							        	}
							        }
									excelView.getWs().mergeCells(0, 3, monthNames.size()+2, 3);
									excelView.getWs().addCell(new Label(0,3, "Note :- You shouldn't change green colour fields."));
									int monthCol=4;
									excelView.getWs().addCell(new Label(0,4, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
									excelView.getWs().addCell(new Label(1,4, "Designation", excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(2,4, "Staff Name", excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(3,4, "StaffId", excelView.getUsermore10BoldformatGreenBgClr()));
						    		
						    		excelView.getWs().setRowView(4,600);
						    		excelView.getWs().mergeCells(0, 5, 2,5);
						    		excelView.getWs().addCell(new Label(0,5," Total Working Days :" , excelView.getUsermore10BoldformatGreenBgClr()));
						    		for(String month : monthNames){
						    			excelView.getWs().setColumnView(monthCol,20);
						    			excelView.getWs().addCell(new Label(monthCol,4, month, excelView.getUsermore10BoldformatGreenBgClr()));
						    			
						    			totalWrkgDays = adminManager.get("select monthName,max(totalWorkingDays) from staffMonthlyAttendance where academicYearId="+getUserAcademicYearId()+" and monthName='"+month+"'");
						    			if(ObjectFunctions.isNullOrEmpty(totalWrkgDays))
						    			{
						    				//excelView.getWs().addCell(new Label(monthCol,5, monthWiseWorkingDays.get(month)+"", excelView.getDefaultFormat()));
						    				excelView.getWs().addCell(new Label(monthCol,5, "", excelView.getDefaultFormat()));
						    			}else{
						    				if(!ObjectFunctions.isNullOrEmpty(totalWrkgDays[1]))
							    			{
						    					//excelView.getWs().addCell(new Label(monthCol,5, ""+monthWiseWorkingDays.get(month), excelView.getDefaultFormat()));
							    				excelView.getWs().addCell(new Label(monthCol,5, ""+totalWrkgDays[1], excelView.getDefaultFormat()));
							    			}
						    				else
						    					excelView.getWs().addCell(new Label(monthCol,5, "", excelView.getDefaultFormat()));
						    			}
						    			
						    			excelView.getWs().addCell(new Label(monthCol,6, month, excelView.getDefaultFormat()));
						    			excelView.getWs().addCell(new Label(monthCol,7, "Present Days Count", excelView.getUsermore10BoldformatGreenBgClr()));
						    			monthCol++;
						    		}
						    		
						    		CellView cv = new CellView();
									cv.setHidden(true);
									excelView.getWs().setRowView(6, cv);
									excelView.getWs().setColumnView(3, cv);
									cv = null;
									viewStaffPersonAccountDetailsList =staffManager.getAll("select accountId,roleName,staffName,noOfPresentDays,roleDescription,academicYearId from vw_staffMonthlyAttendance where custId="+getUserCustId()+" and status='Y' and academicYearId<="+getUserAcademicYearId()+" group by accountId order by roleDescription, staffName" );
									if(ObjectFunctions.isNotNullOrEmpty(viewStaffPersonAccountDetailsList)){
										excelView.getWs().setColumnView(1,10);
										excelView.getWs().setColumnView(2,25);
										int row=8;
										for(Object[] staff: viewStaffPersonAccountDetailsList){
											excelView.getWs().setColumnView(1, 20);
											excelView.getWs().addCell(new Label(0,row, String.valueOf(staffCount), excelView.getUsermore10BoldformatGreenBgClr()));
								    		excelView.getWs().addCell(new Label(1,row, staff[4].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
								    		excelView.getWs().addCell(new Label(2,row, staff[2].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
								    		excelView.getWs().addCell(new Label(3,row, staff[0].toString(), excelView.getUsermore10BoldformatGreenBgClr()));
								    		monthCol=4;
											if(!ObjectFunctions.isNullOrEmpty(monthNames)){
												for(String month : monthNames)
												{
									    			totalPresentAtt = adminManager.get("select monthName,noOfPresentDays from staffMonthlyAttendance  where academicYearId='"+getUserAcademicYearId()+"' and monthName='"+month+"' and accountId="+staff[0].toString());
									    			if(!ObjectFunctions.isNullOrEmpty(totalPresentAtt) && !ObjectFunctions.isNullOrEmpty(totalPresentAtt[1])){
									    				excelView.getWs().addCell(new Label(monthCol,row, totalPresentAtt[1].toString(), excelView.getDefaultFormat()));
									    			}
									    			monthCol++;
									    			totalPresentAtt = null;
												}
											} 
								    		row++;
								    		staffCount++;
								    		staff=null;
										}
										showSchoolUrlInExcelSheetFooter(row-1, excelView, monthCol-1);
									}else{
										excelView.getWs().addCell(new Label(0,4, "No staffs .", excelView.getUsermore10BoldformatGreenBgClr()));
									}
								excelView.getWb().write();
								excelView.getWb().close();
						    }
						}
						academicYear=null;
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		}

	@Actions( { @Action(value = "ajaxDownLoadAllStaffDetails", results = {}) })
		public void ajaxDownLoadAllStaffDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownLoadAllStaffDetails' method");
			}
			try {
				List statesList=null;
				List motherTongue=null;
				if (getUserAcademicYearId() != 0) {
						String fileName = "RoleWiseStaffDetails "+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
						log.debug("Filename: "+fileName);
						ExcelView excelView = new ExcelView();
						WritableCellFormat cellFormat = null;
						getResponse().setContentType(excelView.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".xls");
						excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
						WritableFont font = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
						Customer customer = getCustomerByCustId();
						WritableFont font1 = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
						font1.setColour(Colour.WHITE);
						cellFormat = ExcelView.getUserFormattedCell(font1,Colour.GREEN, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);
						cellFormat = ExcelView.getUserFormattedCell(font,Colour.AQUA, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);

						// For School Name
						excelView.setWorkSheetName("RoleWiseStaffDetails");
						excelView.createWorkSheet(0);

						excelView.getWs().setColumnView(0, 20);
						excelView.getWs().setColumnView(1, 20);
						excelView.getWs().setColumnView(2, 20);
						excelView.getWs().setColumnView(3, 20);
						excelView.getWs().setColumnView(4, 20);
						excelView.getWs().setColumnView(5, 20);
						excelView.getWs().setColumnView(6, 20);
						excelView.getWs().setColumnView(7, 20);
						excelView.getWs().setColumnView(8, 20);
						excelView.getWs().setColumnView(9, 20);
						excelView.getWs().setColumnView(10, 20);
						excelView.getWs().setColumnView(11, 20);
						excelView.getWs().setColumnView(12, 20);
						excelView.getWs().setColumnView(13, 20);
						excelView.getWs().setColumnView(14, 20);
						excelView.getWs().setColumnView(15, 20);
						excelView.getWs().setColumnView(16, 20);
						excelView.getWs().setColumnView(17, 20);
						excelView.getWs().setColumnView(18, 20);
						excelView.getWs().setColumnView(19, 20);
						excelView.getWs().setColumnView(20, 20);
						excelView.getWs().setColumnView(21, 20);
						excelView.getWs().setColumnView(22, 20);
						excelView.getWs().setColumnView(23, 20);
						excelView.getWs().setColumnView(24, 20);
						excelView.getWs().setColumnView(25, 20);
						excelView.getWs().setColumnView(26, 20);
						excelView.getWs().setColumnView(27, 20);
						excelView.getWs().setColumnView(28, 20);
						excelView.getWs().setColumnView(29, 20);
						excelView.getWs().setColumnView(30, 20);
						excelView.getWs().setColumnView(31, 20);
						excelView.getWs().setColumnView(32, 20);
						excelView.getWs().setColumnView(33, 20);
						excelView.getWs().setColumnView(34, 20);
						excelView.getWs().setColumnView(35, 20);
						CellView cv = new CellView();
						cv.setHidden(true);
						excelView.getWs().setColumnView(35, cv);
						cv = null;
						excelView.setDefaultFormat(excelView.getArial10format());
						schoolAddresDetailsOnlyForExcel(excelView, 35);
						excelView.getWs().mergeCells(0, 7, 35, 7);
						excelView.getWs().addCell(new Label(0, 0, getCustomerByCustId().getCustomerShortName(),cellFormat));
						excelView.getWs().addCell(new Label(0, 7, "ROLE WISE STAFF DETAILS",cellFormat));
						excelView.getWs().addCell(new Label(0, 8, "Role", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(1, 8, "First Name", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(2, 8, "Last Name", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(3, 8, "Initial", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(4, 8, "Date of Birth ", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(5, 8, "Gender (M/F)", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(6, 8, "Marital Status (M/UN)", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(7, 8, "Experience", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(8, 8, "Date of Joining", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(9, 8, "Qualification", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(10, 8, "Salary", excelView.getUsermore10BoldformatGreenBgClr()));

						excelView.getWs().addCell(new Label(11, 8, "Email ID", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(12, 8, "Mobile Number", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(13, 8, "Adddress Line 1", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(14, 8, "Adddress Line 2", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(15, 8, "City", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(16, 8, "State", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(17, 8, "Pin code", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(18, 8, "Blood Group", excelView.getUsermore10BoldformatGreenBgClr()));

						excelView.getWs().addCell(new Label(19, 8, "PAN Number", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(20, 8, "GPF No", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(21, 8, "Office Phone No", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(22, 8, "Res .phone No", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(23, 8, "Designation", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(24, 8, "Religion", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(25, 8, "MOTHERTOUNGE", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(26, 8, "Nationality", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(27, 8, "Community", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(28, 8, "Cast Name", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(29, 8, "Bank Name", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(30, 8, "Bank A/c Number", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(31, 8, "Bank Branch Name", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(32, 8, "Family Doctor", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(33, 8, "Preferred Hospital", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(34, 8, "BioMetric Id", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(35, 8, "Staff Id", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(36, 8, "Staff Number", excelView.getUsermore10BoldformatGreenBgClr()));
						excelView.getWs().addCell(new Label(36, 8, "Ifsc Code", excelView.getUsermore10BoldformatRedClr()));
						int columnStart = 10;
								List<Object[]> staffDetails = null;
								if(customer.isHostelModuleStatus() && customer.isTransportModuleStatus())
								{
									staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherTounge,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId,staffNumber,ifscCode from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='Y' order by roleName");
									
								}
								else if(customer.isHostelModuleStatus())
								{
									staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherTounge,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId,staffNumber,ifscCode from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='Y' and roleName!='ROLE_TRANSPORTFINANCE' and roleName!='ROLE_TRANSPORT' and roleName!='ROLE_CONDUCTOR' and roleName!='ROLE_DRIVER' and roleName!='ROLE_HELPER' order by roleName");
								}
								else if(customer.isTransportModuleStatus())
								{
									staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherTounge,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId,staffNumber from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='Y' and roleName!='ROLE_HOSTEL' and roleName!='ROLE_HOSTELFINANCE' order by roleName");	
								}
								else
								{
									staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherTounge,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId,staffNumber from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='Y' and roleName!='ROLE_TRANSPORTFINANCE' and roleName!='ROLE_TRANSPORT' and roleName!='ROLE_CONDUCTOR' and roleName!='ROLE_DRIVER' and roleName!='ROLE_HELPER' and roleName!='ROLE_HOSTEL' and roleName!='ROLE_HOSTELFINANCE' order by roleName");
								}
								
								if (!ObjectFunctions.isNullOrEmpty(staffDetails)) {
								   List bloodGroup = new ArrayList();
										bloodGroup.add("a+");
										bloodGroup.add("a-");
										bloodGroup.add("a1+");
										bloodGroup.add("a1-");
										bloodGroup.add("a1b+");
										bloodGroup.add("a1b-");
										bloodGroup.add("a2+");
										bloodGroup.add("a2-");
										bloodGroup.add("a2b+");
										bloodGroup.add("a2b-");
										bloodGroup.add("b+");
										bloodGroup.add("b-");
										bloodGroup.add("ab+");
										bloodGroup.add("o+");
										bloodGroup.add("o-");
									for (Object[] object : staffDetails) {
										int cellStart = 0;
										if (!ObjectFunctions.isNullOrEmpty(object)) {
											for (int l = 0; l < object.length; l++) {
												if (!ObjectFunctions.isNullOrEmpty(object[l])) {
													if (l == 0) {
														excelView.getWs().addCell(new Label(0,columnStart,object[l].toString()));
													} else {
												    	if (l == 4) {
												    		Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, object[l].toString());
												    		setTodayDate(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate));
												    		excelView.getWs().addCell(new Label(cellStart,columnStart,getTodayDate()));
												    	}
												    	else if(l == 8){
												    		Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, object[l].toString());
												    		setTodayDate(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate));
												    		excelView.getWs().addCell(new Label(cellStart,columnStart,getTodayDate()));
												    	}
												    	else if(l == 10){
												    		excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString().replaceAll("(?<=^\\d+)\\.0*$", "")));
												    	}
												    	else if(l == 16){
												    		Blank sheetxls = new Blank(cellStart,columnStart);
															WritableCellFeatures wcf = new WritableCellFeatures();
																statesList= adminManager.getAll("select stateName from State");
																if(!ObjectFunctions.isNullOrEmpty(statesList)){
																	 wcf.setDataValidationList(statesList);
																	    sheetxls.setCellFeatures(wcf);
																	    excelView.getWs().addCell(sheetxls);
																}
																 sheetxls=null;
																 wcf=null;
																 excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString(),excelView.getWrapCellFormat()));	
												    	}
												    	else if(l == 18){
												    		Blank sheetxls = new Blank(cellStart,columnStart);
															WritableCellFeatures wcf = new WritableCellFeatures();
																if(!ObjectFunctions.isNullOrEmpty(bloodGroup)){
																	 wcf.setDataValidationList(bloodGroup);
																	    sheetxls.setCellFeatures(wcf);
																	    excelView.getWs().addCell(sheetxls);
																}
																 sheetxls=null;
																 wcf=null;
																 excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString(),excelView.getWrapCellFormat()));	
												    	}
												    	else if (l == 24) {
												    		if(!StringFunctions.isNullOrEmpty(object[l].toString())){
															    CommonType studentType = (CommonType) adminManager.get(CommonType.class," id="+Long.valueOf(object[l].toString()));
															    if (!ObjectFunctions.isNullOrEmpty(studentType)) {
																excelView.getWs().addCell(new Label(cellStart,columnStart,studentType.getSkillTypeName()));
															    }
												    		}
														}
												    	else if(l == 25){
																Blank sheetxls = new Blank(cellStart,columnStart);
																WritableCellFeatures wcf = new WritableCellFeatures();
																motherTongue= adminManager.getAll("select name from motherTongue");
																	if(!ObjectFunctions.isNullOrEmpty(motherTongue)){
																		 wcf.setDataValidationList(motherTongue);
																		    sheetxls.setCellFeatures(wcf);
																		    excelView.getWs().addCell(sheetxls);
																	}
																	 sheetxls=null;
																	 wcf=null;
																	 excelView.getWs().addCell(new Label(cellStart, columnStart,""));
																	 excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString(),excelView.getWrapCellFormat()));	
															}
													    else if (l == 27) {
													    	if(!StringFunctions.isNullOrEmpty(object[l].toString())){
															    CastSettings studentCast = (CastSettings) adminManager.get(CastSettings.class," id="+Long.valueOf(object[l].toString()));
															    if (!ObjectFunctions.isNullOrEmpty(studentCast)) {
																excelView.getWs().addCell(new Label(cellStart,columnStart,studentCast.getCastName()));
														    }
													    }
														} 
														 else if (l == 28) {
															 if(!StringFunctions.isNullOrEmpty(object[l].toString())){
															    SubCastSettings studentSubCast = (SubCastSettings) adminManager.get(SubCastSettings.class," id="+ Long.valueOf(object[l].toString()));
															    if (!ObjectFunctions.isNullOrEmpty(studentSubCast)) {
																excelView.getWs().addCell(new Label(cellStart,columnStart,studentSubCast.getSubCastName()));
															    }
															 }
															}else {
														    excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString()));
															}
													}
												}
												 else {
													 if(l == 16){
												    		Blank sheetxls = new Blank(cellStart,columnStart);
															WritableCellFeatures wcf = new WritableCellFeatures();
																statesList= adminManager.getAll("select stateName from State");
																if(!ObjectFunctions.isNullOrEmpty(statesList)){
																	 wcf.setDataValidationList(statesList);
																	    sheetxls.setCellFeatures(wcf);
																	    excelView.getWs().addCell(sheetxls);
																}
																 sheetxls=null;
																 wcf=null;
														excelView.getWs().addCell(new Label(cellStart, columnStart,""));
													 }
													 if(l == 25){
															Blank sheetxls = new Blank(cellStart,columnStart);
															WritableCellFeatures wcf = new WritableCellFeatures();
															motherTongue= adminManager.getAll("select name from motherTongue");
																if(!ObjectFunctions.isNullOrEmpty(motherTongue)){
																	 wcf.setDataValidationList(motherTongue);
																	    sheetxls.setCellFeatures(wcf);
																	    excelView.getWs().addCell(sheetxls);
																}
																 sheetxls=null;
																 wcf=null;
																 excelView.getWs().addCell(new Label(cellStart, columnStart,""));
														}
													 
													// log.debug(l);
													 if(l == 18){
												    		Blank sheetxls = new Blank(cellStart,columnStart);
															WritableCellFeatures wcf = new WritableCellFeatures();
																if(!ObjectFunctions.isNullOrEmpty(bloodGroup)){
																	 wcf.setDataValidationList(bloodGroup);
																	    sheetxls.setCellFeatures(wcf);
																	    excelView.getWs().addCell(sheetxls);
																}
																 sheetxls=null;
																 wcf=null;
														excelView.getWs().addCell(new Label(cellStart, columnStart,""));
													 }
													}
												cellStart++;
											}
											columnStart++;
											cellStart = 0;
										}
									} 
						}
						excelView.getWb().write();
						excelView.getWb().close();
					}  
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		}
	@Actions( { @Action(value = "ajaxDownLoadStaffDetails", results = {}) })
	public void ajaxDownLoadStaffDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownLoadStaffDetails' method");
		}
		try {
			int rollNumber = 1;
			if (getUserAcademicYearId() != 0) {
				if (StringFunctions.isNotNullOrEmpty(getSelectedId())) {
					String fileName = "RoleWiseStaffDetails "+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
					ExcelView excelView = new ExcelView();
					WritableCellFormat cellFormat = null;
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					WritableFont font = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
					WritableFont font1 = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
					font1.setColour(Colour.WHITE);
					cellFormat = ExcelView.getUserFormattedCell(font1,Colour.GREEN, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);
					cellFormat = ExcelView.getUserFormattedCell(font,Colour.AQUA, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);

					// For School Name
					excelView.setWorkSheetName("RoleWiseStaffDetails");
					excelView.createWorkSheet(0);

					excelView.getWs().setColumnView(0, 20);
					excelView.getWs().setColumnView(1, 20);
					excelView.getWs().setColumnView(2, 20);
					excelView.getWs().setColumnView(3, 20);
					excelView.getWs().setColumnView(4, 20);
					excelView.getWs().setColumnView(5, 20);
					excelView.getWs().setColumnView(6, 20);
					excelView.getWs().setColumnView(7, 20);
					excelView.getWs().setColumnView(8, 20);
					excelView.getWs().setColumnView(9, 20);
					excelView.getWs().setColumnView(10, 20);
					excelView.getWs().setColumnView(11, 20);
					excelView.getWs().setColumnView(12, 20);
					excelView.getWs().setColumnView(13, 20);
					excelView.getWs().setColumnView(14, 20);
					excelView.getWs().setColumnView(15, 20);
					excelView.getWs().setColumnView(16, 20);
					excelView.getWs().setColumnView(17, 20);
					excelView.getWs().setColumnView(18, 20);
					excelView.getWs().setColumnView(19, 20);
					excelView.getWs().setColumnView(20, 20);
					excelView.getWs().setColumnView(21, 25);
					excelView.getWs().setColumnView(22, 20);
					excelView.getWs().setColumnView(23, 20);
					excelView.getWs().setColumnView(24, 20);
					excelView.getWs().setColumnView(25, 20);
					excelView.getWs().setColumnView(26, 20);
					excelView.getWs().setColumnView(27, 20);
					excelView.getWs().setColumnView(28, 20);
					excelView.getWs().setColumnView(29, 20);
					excelView.getWs().setColumnView(30, 20);

					excelView.setDefaultFormat(excelView.getArial10format());
					schoolAddresDetailsOnlyForExcel(excelView, 28);
			    	excelView.getWs().removeRow(0);
					excelView.getWs().mergeCells(0, 6, 28, 6);
					excelView.getWs().addCell(new Label(0, 6, "ROLE WISE STAFF DETAILS",cellFormat));
					excelView.getWs().addCell(new Label(0, 7, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(1, 7, "Staff Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(2, 7, "qualification1", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(3, 7, "Gender", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(4, 7, "D.O.B", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(5, 7, "D.O.J", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(6, 7, "Mobile Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(7, 7, "Phone Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(8, 7, "office Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(9, 7, "StaffType", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(10, 7, "Annual Income", excelView.getUsermore10BoldformatGreenBgClr()));

					excelView.getWs().addCell(new Label(11, 7, "Community", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(12, 7, "Caste", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(13, 7, "Blood Group", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(14, 7, "Designation", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(15, 7, "Experience", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(16, 7, "GPF Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(17, 7, "PAN Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(18, 7, "Email", excelView.getUsermore10BoldformatGreenBgClr()));

					excelView.getWs().addCell(new Label(19, 7, "Salary", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(20, 7, "Bank Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(21, 7, "Bank Account Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(22, 7, "Bank Branch Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(23, 7, "Nationality", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(24, 7, "Religion", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(25, 7, "addressLine1", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(26, 7, "State", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(27, 7, "City", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(28, 7, "Postal Code", excelView.getUsermore10BoldformatGreenBgClr()));
					int columnStart = 8;

					setTempList(adminManager.getAll(Role.class, "id in"+ getSelectedId()));
					Collections.sort(getTempList());
					if (!ObjectFunctions.isNullOrEmpty(getTempList())) {
						for (Object obj : getTempList()) {
							Role roleId = (Role) obj;
							excelView.getWs().mergeCells(0, columnStart, 28,columnStart);
							excelView.getWs().addCell(new Label(0, columnStart, " Role Name: "+ roleId.getDescription(),cellFormat));
							List<Object[]> staffDetails = adminManager.getAll("select firstName,qualification1,gender,dateOfBirth,dateofJoining,mobileNumber,phoneNumber,officeNumber,staffType,annualIncome,castId,subCastId,bloodGroup,designation,experience,gpfNumber,panNumber,email,salary,bankName,bankAccountNumber,bankBranchName,nationality,religionId,addressLine1,state,city,postalCode from vw_staffDetails where status='Y' and custId="+ getUserCustId()+ " and roleId="+ roleId.getId()+ " and academicYearId<="+ getUserAcademicYearId());
							columnStart += 1;
							if (!ObjectFunctions.isNullOrEmpty(staffDetails)) {
								for (Object[] object : staffDetails) {
									int cellStart = 1;
									if (!ObjectFunctions.isNullOrEmpty(object)) {
										for (int l = 0; l < object.length; l++) {
											if (!ObjectFunctions.isNullOrEmpty(object[l])) {
												if (l == 0) {
													excelView.getWs().addCell(new Label(0,columnStart,String.valueOf(rollNumber++)));
													excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString()));
												} else {
											    	if (l == 3) {
											    		Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, object[l].toString());
											    		setTodayDate(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate));
											    		excelView.getWs().addCell(new Label(cellStart,columnStart,getTodayDate()));
											    	}
											    	else if(l == 4){
											    		Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, object[l].toString());
											    		setTodayDate(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate));
											    		excelView.getWs().addCell(new Label(cellStart,columnStart,getTodayDate()));
											    	}
												    else if (l == 10) {
													    CastSettings studentCast = (CastSettings) adminManager.get(CastSettings.class," id="+ object[l].toString());
													    if (!ObjectFunctions.isNullOrEmpty(studentCast)) {
														excelView.getWs().addCell(new Label(cellStart,columnStart,studentCast.getCastName()));
													    }
													} 
													 else if (l == 11) {
														    SubCastSettings studentSubCast = (SubCastSettings) adminManager.get(SubCastSettings.class," id="+ object[l].toString());
														    if (!ObjectFunctions.isNullOrEmpty(studentSubCast)) {
															excelView.getWs().addCell(new Label(cellStart,columnStart,studentSubCast.getSubCastName()));
														    }
														}
													else if (l == 23) {
													    CommonType studentType = (CommonType) adminManager.get(CommonType.class," id="+ object[l].toString());
													    if (!ObjectFunctions.isNullOrEmpty(studentType)) {
														excelView.getWs().addCell(new Label(cellStart,columnStart,studentType.getSkillTypeName()));
													    }
													} else {
													    excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString()));
													}
												}
											}
											cellStart++;
										}
										columnStart++;
									}
								}
							}
						}
						showSchoolUrlInExcelSheetFooter(columnStart-1,excelView,28);
					}
					excelView.getWb().write();
					excelView.getWb().close();
				} else {
					super.addActionError("Please select classes.");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
/********************************************************************
 * Date              Name               Description
 * ============      =======		    ==================
 * Jan 16, 2013      Seshu		    	Generate vehicle wise students assigned report.
/********************************************************************/
	@Action(value = "ajaxVehicleWiseStudentDetails", results = {})
	public String ajaxVehicleWiseStudentDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxVehicleWiseStudentDetails' method");
			}
			if (getUserAcademicYearId()!=0) {
				AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class,"id="+getUserAcademicYearId());
				String fileName = null;
				fileName = "VehicleWiseDetails"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				PDFGenerator pDFGenerator = new PDFGenerator();
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
				pDFGenerator.getPdfWriter().setPageEvent(phfmj);
				pDFGenerator.getDocument().open();
				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				// creating pDF page event to set header and Footer to document
				PdfPTable mainTable = new PdfPTable(1);
				PdfPTable boardingPointsTable=null;
				PdfPTable studentListTable=null;
				mainTable.setWidthPercentage(100);
				mainTable.setSplitLate(false);
				mainTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				int width =5;
				PdfPTable defaultersHeaderReport = null;
				PdfPTable headerReport = new PdfPTable(100);
				headerReport.setWidthPercentage(100);
				Customer customer = getCustomerByCustId();
				PdfPTable mainHeaderReport = new PdfPTable(2);
				mainHeaderReport.setWidthPercentage(100);
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
						mainHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 2,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 2.0f));
					}
					if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
						mainHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 2,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 2.0f));
					}
				}
				mainHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAlign("_____________________________________________________________________________________________________",100, fontPath));
				mainHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Vehicle Wise Details",7,fontPath,"#000000", 15, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
				mainTable.addCell(mainHeaderReport);
				String vehicleIds[] = getAnyTitle().replace("(", "").replace(")", "").split(",");
				if(!ObjectFunctions.isNullOrEmpty(vehicleIds)){
					List<Object[]> routeWithVehicles = null;
					List<Object[]>  vehicles = null;
					List<Object[]> vehiclesList = null;
					List<RouteBoardingPoints>  boardingPointsList = null;
					List<ViewStudentsTransportDetails>  studentsList = null;
					Object[] pickupBoardingPointName=null;
					Object[] dropBoardingPointName=null;
					for (String vehicleNameId : vehicleIds) {
						if (StringFunctions.isNotNullOrEmpty(vehicleNameId)) {
							mainTable.addCell(headerReport);
							routeWithVehicles = adminManager.getAll("Select routeId,vehicleAcademicId from RouteWithVehicles where vehicleAcademicId="+vehicleNameId);
							if(ObjectFunctions.isNotNullOrEmpty(routeWithVehicles))
							{
								int j = 0;
								for(Object[] route : routeWithVehicles)
								{
									vehiclesList = new ArrayList<Object[]>();
									boolean withStudent = true;
									boolean withoutStudent = true;
								//	vehiclesList = adminManager.getAll( "select routeName,name,vehicleNumber,driverName,noOfSeats,filledPickup,filledDrop,availablePickup,availableDrop from vw_vehicleWithDriverDetails where custId="+ getUserCustId()+ " and academicYearId="+ academicYear.getId()+ " and id="+ vehicleNameId+" and routeId="+route[0].toString()+" and (filledPickup >0 or filledDrop >0)");
									vehicles = adminManager.getVehiclesWithDriverDetails(getUserCustId(),true) ;
									for(Object[] vehicle : vehicles){
										long routeId = Long.valueOf(route[0].toString());
										long routeWithNameId = Long.valueOf(vehicle[22].toString());
										long vehicleId = Long.valueOf(vehicleNameId.trim());
										long vehicleWithNameId = Long.valueOf(vehicle[0].toString());
										if(!ObjectFunctions.isNullOrEmpty(vehicle) && (Long.valueOf(vehicle[4].toString()) > 0 || Long.valueOf(vehicle[5].toString()) > 0) && (routeId == routeWithNameId) && (vehicleWithNameId == vehicleId)){
											vehiclesList.add(vehicle);
										}
										vehicle = null;
									}
									if(ObjectFunctions.isNotNullOrEmpty(vehiclesList))
									{
										for (Object[] vehicle : vehiclesList) 
										{	
											defaultersHeaderReport = new PdfPTable(width);
										    defaultersHeaderReport.setWidthPercentage(100);
										    if(withStudent){
										    	if(j == 0){
										    		defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Vehicle Name:"+vehicle[35].toString(),7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
										    		defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("",7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 2.0f));
										    	}
										    	defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Number",  1,fontPath));
										    	defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Driver Name",  1,fontPath));
										    	defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Capacity",  1,fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Filled Seats",  1,fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Available Seats",  1,fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[24]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[24].toString(), "#000", fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[36]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[36].toString(), "#000", fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[3]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(vehicle[3].toString(),1, fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[4]) && !ObjectFunctions.isNullOrEmpty(vehicle[5]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[4].toString()+" | Drop - "+vehicle[5].toString()+")", "#000", fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[6]) && !ObjectFunctions.isNullOrEmpty(vehicle[7]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[6].toString()+" | Drop - "+vehicle[7].toString()+")", "#000", fontPath));
												withStudent = false;
												j++;
										    }
										    defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Route Name:"+vehicle[38].toString(),7,fontPath,"#000000", 11, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));

										    studentsList = adminManager.getAll(ViewStudentsTransportDetails.class, "custId="+ getUserCustId()+ " and academicYearId="+ academicYear.getId()+ " and routeId="+  route[0].toString()+" and (pickupVehicleId="+vehicleNameId+" or dropVehicleId="+vehicleNameId+") order by classSortingOrder,section,fullName");
										    if(!ObjectFunctions.isNullOrEmpty(studentsList)){ 
										    	studentListTable = new PdfPTable(5);
										    	studentListTable.getDefaultCell().setBorder(Rectangle.BOX);
												studentListTable.setWidthPercentage(100);
												studentListTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Student Details",7,fontPath,"#000000", 11, "#FCFDFE",Element.ALIGN_CENTER, -4.0f));
												studentListTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",7,fontPath, 10, "#005CB9",Element.ALIGN_LEFT, 3.0f));
												studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Student Name ", 1,fontPath));
												studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Class And Section",1,fontPath));
												studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Mobile Number ",1,fontPath));
												studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Pickup Point ",1,fontPath));
												studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Drop Point ",1,fontPath));
												for (ViewStudentsTransportDetails studentDetails : studentsList) {
													pickupBoardingPointName=adminManager.get("select rb.boardingPointName,rb.id from studentTransportDetails st join routeBoardingPoints rb on(rb.id = st.pickupBoardingPointId) where st.pickupBoardingPointId="+studentDetails.getPickupBoardingPointId()+" and rb.routeId="+route[0].toString()+" and st.pickupVehicleId="+vehicleNameId+" and st.studentId="+studentDetails.getStudId());
											    	dropBoardingPointName=adminManager.get("select rb.boardingPointName,rb.id from studentTransportDetails st join routeBoardingPoints rb on(rb.id = st.dropBoardingPointId) where st.dropBoardingPointId="+studentDetails.getDropBoardingPointId()+" and rb.routeId="+route[0].toString()+" and st.dropVehicleId="+vehicleNameId+" and st.studentId="+studentDetails.getStudId());
													studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(studentDetails.getFullName(), "#000", fontPath));
													studentListTable.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(studentDetails.getClassAndSection(),1, fontPath));
													studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(studentDetails.getMobileNumber(), "#000", fontPath));
													if(!ObjectFunctions.isNullOrEmpty(pickupBoardingPointName))
														studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(pickupBoardingPointName[0].toString(), "#000", fontPath));
													else
														studentListTable.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("-",1, fontPath));
													if(!ObjectFunctions.isNullOrEmpty(dropBoardingPointName))
														studentListTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(dropBoardingPointName[0].toString(), "#000", fontPath));
													else
														studentListTable.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("-",1, fontPath));
													studentDetails=null;
												}
												studentListTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("",7,fontPath,"#000000", 11, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
										    }
										    vehicle = null;
										    mainTable.addCell(defaultersHeaderReport);
											mainTable.addCell(studentListTable);
											vehiclesList = null;
											defaultersHeaderReport = null;
											studentListTable=null;
										}
									}
								//	vehiclesList = adminManager.getAll( "select routeName,name,vehicleNumber,driverName,noOfSeats,filledPickup,filledDrop,availablePickup,availableDrop from vw_vehicleWithDriverDetails where custId="+ getUserCustId()+ " and academicYearId="+ academicYear.getId()+ " and id="+ vehicleNameId+" and routeId="+route[0].toString()+" and filledPickup = 0 and filledDrop = 0");
									vehicles = adminManager.getVehiclesWithDriverDetails(getUserCustId(),true) ;
									vehiclesList = new ArrayList<Object[]>();
									for(Object[] vehicle : vehicles){
										long routeId = Long.valueOf(route[0].toString());
										long routeWithNameId = Long.valueOf(vehicle[22].toString());
										long vehicleId = Long.valueOf(vehicleNameId.trim());
										long vehicleWithNameId = Long.valueOf(vehicle[0].toString());
										if(!ObjectFunctions.isNullOrEmpty(vehicle) && (Long.valueOf(vehicle[4].toString()) == 0 && Long.valueOf(vehicle[5].toString()) == 0) && (routeId == routeWithNameId) && (vehicleWithNameId == vehicleId)){
											vehiclesList.add(vehicle);
										}
										vehicle = null;
									}
									if(ObjectFunctions.isNotNullOrEmpty(vehiclesList))
									{ 
										for (Object[] vehicle : vehiclesList) 
										{	
											defaultersHeaderReport = new PdfPTable(width);
											defaultersHeaderReport.setWidthPercentage(100);
										    if(withoutStudent){
										    	if(j == 0)
										    		defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Vehicle Name:"+vehicle[35].toString(),7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
										    	defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Number",  1,fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Driver Name",  1,fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Capacity",  1,fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Filled Seats",  1,fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Available Seats",  1,fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[24]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[24].toString(), "#000", fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[36]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[36].toString(), "#000", fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[3]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(vehicle[3].toString(),1, fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[4]) && !ObjectFunctions.isNullOrEmpty(vehicle[5]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[4].toString()+" | Drop - "+vehicle[5].toString()+")", "#000", fontPath));
												if(!ObjectFunctions.isNullOrEmpty(vehicle[6]) && !ObjectFunctions.isNullOrEmpty(vehicle[7]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[6].toString()+" | Drop - "+vehicle[7].toString()+")", "#000", fontPath));
												withoutStudent = false;
												j++;
										    }
										    defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Route Name:"+vehicle[38].toString(),7,fontPath,"#000000", 11, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
										    defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("Students are not assigned to this vehicle.",7,fontPath, 13, "#005CB9",Element.ALIGN_CENTER, 3.0f));
										}
									}
									mainTable.addCell(defaultersHeaderReport);
								}
							}
						}
					}
					vehiclesList = null;
					boardingPointsList = null;
					studentsList = null;
					pDFGenerator.getDocument().add(mainTable);
					pDFGenerator.getDocument().close();
					pDFGenerator = null;
					mainTable = null;
					boardingPointsTable=null;
					defaultersHeaderReport = null;
					routeWithVehicles = null;
					pickupBoardingPointName = null;
					dropBoardingPointName = null;
				}
				phfmj=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * Jan 20, 2014    	 Seshu		        For generating routewise students details report.
/********************************************************************/	
	@Action(value = "ajaxRouteWiseDetails", results = {})
	public String ajaxRouteWiseDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRouteWiseDetails' method");
			}
			if (getUserAcademicYearId()!=0) {
				AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class,"id="+getUserAcademicYearId());
				String fileName = "RouteWiseDetails"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				PDFGenerator pDFGenerator = new PDFGenerator();
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
				pDFGenerator.getPdfWriter().setPageEvent(phfmj);
				pDFGenerator.getDocument().open();
				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				// creating pDF page event to set header and Footer to document
				PdfPTable mainTable = new PdfPTable(1);
				mainTable.setWidthPercentage(100);
				mainTable.setSplitLate(false);
				mainTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				PdfPTable defaultersHeaderReport = null;
				PdfPTable defaultersHeaderReport1 = null;
				PdfPTable defaultersHeaderReport3=null;
				PdfPTable defaultersHeaderReport4=null;
				PdfPTable boardingPointsTable=null;
				PdfPTable headerReport = new PdfPTable(100);
				headerReport.setWidthPercentage(100);
				Customer customer = getCustomerByCustId();
				PdfPTable mainHeaderReport = new PdfPTable(2);
				mainHeaderReport.setWidthPercentage(100);
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
						mainHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 2,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 2.0f));
					}
					if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
						mainHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 2,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 2.0f));
					}
				}
				mainHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAlign("______________________________________________________________________________________________________",100, fontPath));
				mainTable.addCell(mainHeaderReport);
				String routeIds[] = getAnyTitle().replace("(", "").replace(")", "").split(",");
				if(!ObjectFunctions.isNullOrEmpty(routeIds)){
					int width =6;
					List<Object[]>  vehicles = null;
					Object[] pickupBoardingPointName=null;
					Object[] dropBoardingPointName=null;
					List<Object[]> vehiclesList = null;
					Route routeName=null;
					List<RouteBoardingPoints>  boardingPointsList = null;
					for (String routeNameId : routeIds) {
						if (StringFunctions.isNotNullOrEmpty(routeNameId)) {
							vehiclesList = new ArrayList<Object[]>();
							int i=0;
							mainTable.addCell(headerReport);
							defaultersHeaderReport1 = new PdfPTable(width);
							defaultersHeaderReport1.setWidthPercentage(100);
						//	vehiclesList = adminManager.getAll( "select name,vehicleNumber,driverName,noOfSeats,filledPickup,filledDrop,availablePickup,availableDrop,id from vw_vehicleWithDriverDetails where custId="+ getUserCustId()+ " and academicYearId="+ academicYear.getId()+ " and  routeId="+routeNameId+" and (filledPickup >0 or filledDrop >0)");
							vehicles = adminManager.getVehiclesWithDriverDetails(getUserCustId(),true) ;
							for(Object[] vehicle : vehicles){
								long routeId = Long.valueOf(vehicle[22].toString());
								long routeWithNameId = Long.valueOf(routeNameId.trim());
								if(!ObjectFunctions.isNullOrEmpty(vehicle) && (Long.valueOf(vehicle[4].toString()) > 0 || Long.valueOf(vehicle[5].toString()) > 0) && (routeWithNameId == routeId)){
									vehiclesList.add(vehicle);
								}
								vehicle = null;
							}
							routeName=(Route) adminManager.get(Route.class,"id="+routeNameId);
							defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Route Name:"+routeName.getRouteName(),7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
							boardingPointsList =adminManager.getAll(RouteBoardingPoints.class, "custId="+ getUserCustId()+ " and routeId="+ routeNameId);
								if(!ObjectFunctions.isNullOrEmpty(boardingPointsList)){
									defaultersHeaderReport3=new PdfPTable(width);
									defaultersHeaderReport3.getDefaultCell().setBorder(Rectangle.BOX);
									defaultersHeaderReport3.setWidthPercentage(100);
									defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Boarding Point Name ",3,fontPath));
									defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellWithLeftAlignCenterJasperNoColorWithBold("Pickup Time ", 2,fontPath));
									defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellWithLeftAlignCenterJasperNoColorWithBold("Drop Time ", 2,fontPath));
									for(RouteBoardingPoints objBoardingPoints:boardingPointsList){
										defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(objBoardingPoints.getBoardingPointName(), 3, fontPath));
										defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(objBoardingPoints.getBoardingPointStatTime(),2, fontPath));
										defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(objBoardingPoints.getBoardingPointEndTime(), 2, fontPath));
										objBoardingPoints=null;
									}
									defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",7,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 2.0f));
								} 
								boardingPointsList = null;
								mainTable.addCell(defaultersHeaderReport1);
								if(ObjectFunctions.isNotNullOrEmpty(vehiclesList))
								{
									for (Object[] vehicle : vehiclesList) 
									{	
											defaultersHeaderReport = new PdfPTable(width);
										    defaultersHeaderReport.setWidthPercentage(100);
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Name",  1,fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Number",  1,fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Driver Name",  1,fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Capacity",  1,fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Filled Seats",  1,fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Available Seats",  1,fontPath));
											
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[35].toString(), "#000", fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[24].toString(), "#000", fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[36].toString(), "#000", fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(vehicle[3].toString(),1, fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[4].toString()+" | Drop - "+vehicle[5].toString()+")", "#000", fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[6].toString()+" | Drop - "+vehicle[7].toString()+")", "#000", fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",7,fontPath, 10, "#005CB9",Element.ALIGN_LEFT, 4.0f));
										    
									    	 List<ViewStudentsTransportDetails>  schoolTransportStudentsList =adminManager.getAll(ViewStudentsTransportDetails.class, "custId="+ getUserCustId()+ " and academicYearId="+ academicYear.getId()+" and routeId ="+ routeNameId +" and (pickupVehicleId="+ vehicle[0].toString()+" or dropVehicleId="+ vehicle[0].toString()+") and studDiscontinueDesc is null order by classSortingOrder,section,fullName");
									    	 boardingPointsTable = new PdfPTable(5);
											 boardingPointsTable.getDefaultCell().setBorder(Rectangle.BOX);
											 boardingPointsTable.setWidthPercentage(100);
											 if(!ObjectFunctions.isNullOrEmpty(schoolTransportStudentsList)){ 
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Student Details",7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 2.0f));
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("",7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 2.0f));
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Student Name",1,fontPath));
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Class & Section",1,fontPath));
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Contact Number",1,fontPath));
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Pickup Point",1,fontPath));
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Drop Point",1,fontPath));
												 for(ViewStudentsTransportDetails studentDetails:schoolTransportStudentsList){
													 pickupBoardingPointName=adminManager.get("select rb.boardingPointName,rb.id from studentTransportDetails st join routeBoardingPoints rb on(rb.id = st.pickupBoardingPointId) where st.pickupBoardingPointId="+studentDetails.getPickupBoardingPointId()+" and rb.routeId="+routeNameId+" and st.pickupVehicleId="+vehicle[0].toString()+" and st.studentId="+studentDetails.getStudId());
													 dropBoardingPointName=adminManager.get("select rb.boardingPointName,rb.id from studentTransportDetails st join routeBoardingPoints rb on(rb.id = st.dropBoardingPointId) where st.dropBoardingPointId="+studentDetails.getDropBoardingPointId()+" and rb.routeId="+routeNameId+" and st.dropVehicleId="+vehicle[0].toString()+" and st.studentId="+studentDetails.getStudId());
													 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(studentDetails.getFullName(), "#000", fontPath));
													 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(studentDetails.getClassAndSection(),1, fontPath));
													 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(studentDetails.getMobileNumber(), "#000", fontPath));
													 if(!ObjectFunctions.isNullOrEmpty(pickupBoardingPointName))
														 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(pickupBoardingPointName[0].toString(), "#000", fontPath));
													 else
														 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("-",1, fontPath));
													 if(!ObjectFunctions.isNullOrEmpty(dropBoardingPointName))
														 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(dropBoardingPointName[0].toString(), "#000", fontPath));
													 else
														 boardingPointsTable.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("-",1, fontPath));
												 }
												 boardingPointsTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("",7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
												 defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",4,fontPath, 10, "#005CB9",Element.ALIGN_LEFT, 4.0f));
											 }
											 schoolTransportStudentsList =null;
										vehicle=null;
										mainTable.addCell(defaultersHeaderReport);
										if(i == 0)
											mainTable.addCell(defaultersHeaderReport3);
										mainTable.addCell(boardingPointsTable);
										i++;
									}
									routeName = null;
									vehiclesList = null;
									defaultersHeaderReport1 = null;
									pickupBoardingPointName = null;
									dropBoardingPointName = null;
								}
							//	vehiclesList = adminManager.getAll( "select name,vehicleNumber,driverName,noOfSeats,filledPickup,filledDrop,availablePickup,availableDrop,id from vw_vehicleWithDriverDetails where custId="+ getUserCustId()+ " and academicYearId="+academicYear.getId()+ " and  routeId="+routeNameId+" and filledPickup =0 and filledDrop =0");
								vehiclesList = new ArrayList<Object[]>();
								vehicles = adminManager.getVehiclesWithDriverDetails(getUserCustId(),true) ;
								for(Object[] vehicle : vehicles){
									long routeId=Long.valueOf(vehicle[22].toString());
									long routeWithNameId = Long.valueOf(routeNameId.trim());
									if(!ObjectFunctions.isNullOrEmpty(vehicle) && Long.valueOf(vehicle[4].toString()) == 0 && Long.valueOf(vehicle[5].toString()) == 0 && (routeWithNameId ==  routeId)){
										vehiclesList.add(vehicle);
									}
									vehicle = null;
								}
								if(ObjectFunctions.isNotNullOrEmpty(vehiclesList))
								{ 
									defaultersHeaderReport1 = new PdfPTable(6);
									defaultersHeaderReport1.setWidthPercentage(100);
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Name", 1,fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Number",1,fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Driver Name", 1,fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Capacity",1,fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Filled Seats",1,fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Available Seats",1,fontPath));
									for (Object[] vehicle : vehiclesList) 
									{
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[35].toString(), "#000", fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[24].toString(), "#000", fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[36].toString(), "#000", fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(vehicle[3].toString(),1, fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[4].toString()+" | Drop - "+vehicle[5].toString()+")", "#000", fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[6].toString()+" | Drop - "+vehicle[7].toString()+")", "#000", fontPath));
									}
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",7,fontPath, 10, "#005CB9",Element.ALIGN_LEFT, 4.0f));
									if(i != 0)
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("Students are not assigned to this route.",7,fontPath, 13, "#005CB9",Element.ALIGN_CENTER, 3.0f));
									mainTable.addCell(defaultersHeaderReport1); 
									if( i == 0){
										defaultersHeaderReport3.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("Students are not assigned to this route.",7,fontPath, 13, "#005CB9",Element.ALIGN_CENTER, 3.0f));
										mainTable.addCell(defaultersHeaderReport3);  
									}
								}
						}
						vehiclesList=null;
						routeNameId=null;
						defaultersHeaderReport3 = null;
					}
				/*	int withoutStudent =6;
					boolean withoutRoute = false;
					for (String routeNameId : routeIds) {
						if (StringFunctions.isNotNullOrEmpty(routeNameId)) {
							PdfPTable defaultersHeaderReport2 = new PdfPTable(7);
							defaultersHeaderReport2.setWidthPercentage(100);
							vehiclesList = adminManager.getAll( "select name,vehicleNumber,driverName,noOfSeats,filledPickup,filledDrop,availablePickup,availableDrop,id from vw_vehicleWithDriverDetails where custId="+ getUserCustId()+ " and academicYearId="+academicYear.getId()+ " and  routeId="+routeNameId+" and filledPickup =0 and filledDrop =0");
							routeName=(Route) adminManager.get(Route.class,"id="+routeNameId);
							defaultersHeaderReport2.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Route Name:"+routeName.getRouteName(),7,fontPath,"#000000", 13, "#FCFDFE",Element.ALIGN_CENTER, 4.0f));
							if(ObjectFunctions.isNotNullOrEmpty(vehiclesList))
							{ 
								defaultersHeaderReport1 = new PdfPTable(withoutStudent);
								defaultersHeaderReport1.setWidthPercentage(100);
								withoutRoute = true;
								 defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Name", 1,fontPath));
								 defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Number",1,fontPath));
								 defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Driver Name", 1,fontPath));
								 defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Vehicle Capacity",1,fontPath));
								 defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Filled Seats",1,fontPath));
								 defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Available Seats",1,fontPath));
								 for (Object[] vehicle : vehiclesList) 
								 {
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[0].toString(), "#000", fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[1].toString(), "#000", fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(vehicle[2].toString(), "#000", fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(vehicle[3].toString(),1, fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[4].toString()+" | Drop - "+vehicle[5].toString()+")", "#000", fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("(Pick up - "+vehicle[6].toString()+" | Drop - "+vehicle[7].toString()+")", "#000", fontPath));
								}
								  defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",7,fontPath, 10, "#005CB9",Element.ALIGN_LEFT, 4.0f));
								  boardingPointsList =adminManager.getAll(RouteBoardingPoints.class, "custId="+ getUserCustId()+ " and routeId="+ routeNameId);
									if(!ObjectFunctions.isNullOrEmpty(boardingPointsList)){
										defaultersHeaderReport1.getDefaultCell().setBorder(Rectangle.BOX);
										defaultersHeaderReport1.setWidthPercentage(100);
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontJasperNoColor("Boarding Point Name ",3,fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignCenterJasperNoColorWithBold("Departure Time ", 2,fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignCenterJasperNoColorWithBold("Arrivel Time ", 2,fontPath));
										for(RouteBoardingPoints objBoardingPoints:boardingPointsList){
											defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(objBoardingPoints.getBoardingPointName(), 3, fontPath));
											defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(objBoardingPoints.getBoardingPointStatTime(),2, fontPath));
											defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor(objBoardingPoints.getBoardingPointEndTime(), 2, fontPath));
											objBoardingPoints=null;
										}
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",7,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 2.0f));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("Students are not assigned to this route.",7,fontPath, 13, "#005CB9",Element.ALIGN_CENTER, 3.0f));

									} 
									if(withoutRoute){
										mainTable.addCell(defaultersHeaderReport2);
										mainTable.addCell(defaultersHeaderReport1);
									}
									boardingPointsList = null;
									defaultersHeaderReport2 = null;
							}
						}
						vehiclesList = null;
					}*/
					pDFGenerator.getDocument().add(mainTable);
					pDFGenerator.getDocument().close();
					pDFGenerator = null;
					mainTable = null;
					defaultersHeaderReport = null;
					defaultersHeaderReport1 = null;
					boardingPointsTable = null;
				}
				phfmj=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}

	@Actions( { @Action(value = "ajaxDoGenerateStaffTimeTable", results = { @Result(location = "../admin/reports/ajaxGenerateStaffTimeTableReport.jsp", name = "success") })
		})
		public String ajaxDoGenerateStaffTimeTable() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoGenerateStaffTimeTable' method");
			}
			try {
				ajaxGetClassesHandleteachers();
			}catch (Exception ex) {
				// TODO: handle exception
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null; 
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	@Actions( { @Action(value = "ajaxGenerateTimeTableForTeachers", results = {}) })
	public String ajaxGenerateTimeTableForTeachers() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGenerateTimeTableForTeachers' method");
			}
			if (StringFunctions.isNotNullOrEmpty(getSelectedId())) {
				String fileName = null;
					fileName = "StaffTimetable"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				PDFGenerator pDFGenerator = new PDFGenerator();
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				pDFGenerator.getDocument().open();
				Customer customer = getCustomerByCustId();
				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				PdfPTable defaultersHeaderReport = null;
				List<Object[]> periodNames = null;
				List<Object[]> weekDays = null;
				boolean isPeriodAvailable = true;
				boolean isAfternoonBreak=false;
				int periodName=1;
				List<Object[]> timeTableList = null;
				PdfPCell cellTopBorder = new PdfPCell();
				cellTopBorder.setBorder(0);
				cellTopBorder.setBorderWidthTop(1);
				PdfPCell cellBottomBorder = new PdfPCell();
				cellBottomBorder.setBorder(0);
				cellBottomBorder.setBorderWidthBottom(1);
				int width = 0;
				int widths[];
				int workingDaysCount = 0; 
				List<Object[]> staffDetails= adminManager.getAll("select staffId,CONCAT(IF(firstName IS NULL,'',firstName), IF(lastName IS NULL || lastName  <=> '','',CONCAT(', ',lastName))) as staffFullName from vw_staffDetails where staffId in"+getSelectedId()+" and academicYearStatus='Y' order by firstName,lastName");
				if(ObjectFunctions.isNotNullOrEmpty(staffDetails) && !ObjectFunctions.isNullOrEmpty(customer)){
					defaultersHeaderReport = new PdfPTable(width+1);
					defaultersHeaderReport.setWidthPercentage(100);
					if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width+1,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					}
					if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width+1,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					}
					PdfPCell cell = new PdfPCell(new Paragraph ("",FontFactory.getFont("droidsans", 10, Font.BOLD,Color.BLACK)));
					cell.setBorder(Rectangle.BOTTOM);
					cell.setColspan(width+1);
					defaultersHeaderReport.addCell(cell);
					pDFGenerator.getDocument().add(defaultersHeaderReport);
					defaultersHeaderReport = null;
					for(Object[] staff:staffDetails){
						periodNames = adminManager.getAll("select periodName,periodType from timeTable where classSectionId in(select studyClassId from vw_staffSubjectsDetails where academicYearId="+getUserAcademicYearId()+" and staffId="+staff[0].toString()+" group by studyClassId) group by periodName,periodType order by periodType DESC,periodName");
						weekDays = adminManager.getAll("select dayId,dayName from vw_classWisePeriodsCountDetails where classSectionId in(select studyClassId from vw_staffSubjectsDetails where academicYearId="+getUserAcademicYearId()+" and staffId="+staff[0].toString()+" group by studyClassId) group by dayId");
						if(ObjectFunctions.isNotNullOrEmpty(periodNames) && ObjectFunctions.isNotNullOrEmpty(weekDays)){
							timeTableList = adminManager.getAll("select periodType, max(periodName) from timeTable where classSectionId in(select studyClassId from vw_staffSubjectsDetails where academicYearId="+getUserAcademicYearId()+" and staffId="+staff[0].toString()+" group by studyClassId) group by periodType order by periodType DESC");
							if(ObjectFunctions.isNotNullOrEmpty(timeTableList) && timeTableList.size() > 1){
								width = periodNames.size()+2;
								isAfternoonBreak = true;
							}else{
								width = periodNames.size()+1;
								isAfternoonBreak = false;
							}
							periodName = 1;
							defaultersHeaderReport = new PdfPTable(width);
							defaultersHeaderReport.setWidthPercentage(100);
							defaultersHeaderReport.setKeepTogether(true);
							if(isAfternoonBreak){
								if(!ObjectFunctions.isNullOrEmpty(timeTableList.get(0))){
									widths = new int[width];
									for(int i =0; i < width;i++){
										if(i == Integer.valueOf(timeTableList.get(0)[1].toString())+1)
											widths[i] = 2;
										else
											widths[i] = 10;
									}
									defaultersHeaderReport.setWidths(widths);
								}
							}
							timeTableList = null;
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(staff[1].toString()+" Timetable",width, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("",1, fontPath));
							for(Object[] period : periodNames){
								if("1".equalsIgnoreCase(period[0].toString()) && "A".equalsIgnoreCase(period[1].toString()) && isAfternoonBreak){
									defaultersHeaderReport.addCell(cellTopBorder);
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor((periodName++)+"",1, fontPath));
							}
							workingDaysCount = weekDays.size();
							for(Object[] weekDay:weekDays){
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(weekDay[1].toString(),1, fontPath));
								timeTableList=adminManager.getAll("select dayName,periodName,periodType,group_concat(CONVERT((concat(classAndSection,' : ',subjectName)),CHAR)) from vw_timeTableDetails where dayId="+weekDay[0].toString()+" and teacherId="+staff[0].toString()+" group by periodName,periodType,classSectionId,subjectId order by periodType DESC,periodName");
								for(Object[] period : periodNames){
									if("1".equalsIgnoreCase(period[0].toString()) && "A".equalsIgnoreCase(period[1].toString()) && isAfternoonBreak){
										if(workingDaysCount == 1)
											defaultersHeaderReport.addCell(cellBottomBorder);
										else
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper("",0,fontPath,0,"#FFFFFF",0,0));
									}
									if(ObjectFunctions.isNotNullOrEmpty(timeTableList)){
										isPeriodAvailable = false;
										for(Object[] timeTable : timeTableList){
											if(timeTable[1].toString().equalsIgnoreCase(period[0].toString()) && timeTable[2].toString().equalsIgnoreCase(period[1].toString())){
												if(ObjectFunctions.isNullOrEmpty(timeTable[3]))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("-","#000",fontPath));
												else{
													if(StringFunctions.isNotNullOrEmpty(timeTable[3].toString()))
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(timeTable[3].toString(),"#000",fontPath));
													else
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("","#000",fontPath));
												}
												isPeriodAvailable = true;
												break;
											}
										}
										if(!isPeriodAvailable){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("","#000", fontPath));
										}
									}else{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("","#000", fontPath));
									}
								}
								workingDaysCount--;
								timeTableList = null;
							}
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("",width, fontPath));
							pDFGenerator.getDocument().add(defaultersHeaderReport);
							defaultersHeaderReport=null;
						}
					}
				}
				periodNames = null;
				weekDays = null;
				timeTableList = null;
				pDFGenerator.getDocument().close();
				pDFGenerator = null;
				defaultersHeaderReport = null;
				pDFGenerator = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	} 
	/*
	* Removed the for loop and use modularity is done by venkatesh - 03-05-2013
	*/
	@Actions( { @Action(value = "ajaxDailyAttendanceReports", results = {@Result(location = "jasper/admission/dailyStudentsAttendanceReports.jasper", type = "jasper", name = "success", params = {"dataSource", "tempList", "format", "PDF" }),
            @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" }),
            @Result(location = "jasper/marks/examSchedulesWithClassesAndExamTypes.jasper", type="jasper", name = "studentExamSchedules",params = {"dataSource","getObjectList()","format", "PDF"})}) })
            
	public String ajaxDailyAttendanceReports() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'studentClassWiseMonthlyAttendance' method");
			}
			if(StringFunctions.isNotNullOrEmpty(getPlTitle())){
				if (getPlTitle().equalsIgnoreCase("Exam Schedules")) {
					viewExamSchedulesForParents();
					if(!ObjectFunctions.isNullOrEmpty(getObjectList())){
						return "studentExamSchedules";
					}else {
						setAlertSendType("There is no examSchedules for this class.");
						return "errorMessage";
					}
				}else if (getPlTitle().equalsIgnoreCase("Class Wise Marks")) {
					if(!ObjectFunctions.isNullOrEmpty(getAnyId())){
						/*if(getAnyId().equalsIgnoreCase("PDF")){
							ajaxClassWiseMArksDetails();
						}*/
						if(getAnyId().equalsIgnoreCase("Excel")){
							genereateTermWiseMarksReport();
						}
					}
					
				}
				else if(getPlTitle().equalsIgnoreCase("Daily Assignment") || getPlTitle().equalsIgnoreCase("Daily Attendance"))
				{
					String frmDate = getParamValue("selectedDate");
					String presentVal = getParamValue("presentVal");
					String absentVal = getParamValue("absentVal");
					if (getUserAcademicYearId()!=0) {
						StringBuffer fileName = new StringBuffer();
						PDFGenerator pDFGenerator = new PDFGenerator();
						getResponse().setContentType(pDFGenerator.getMimeType());
							if("P".equalsIgnoreCase(presentVal) && "A".equalsIgnoreCase(absentVal) ){
								fileName.append("Class Wise " + getPlTitle()).append(" ").append(frmDate);
							}else if("A".equalsIgnoreCase(absentVal)){
								fileName.append("Class Wise " + getPlTitle()).append("(Absent)").append(" ").append(frmDate);
							}else if("P".equalsIgnoreCase(presentVal)){
								fileName.append("Class Wise " + getPlTitle()).append("(Present)").append(" ").append(frmDate);
						}else
						fileName.append("Class Wise " + getPlTitle()).append(" ").append(frmDate);
						getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.toString().replace(' ', '_') + ".pdf");
						pDFGenerator.createDocumentJasper();
						pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
						PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
						pDFGenerator.getPdfWriter().setPageEvent(phfmj);
						pDFGenerator.getDocument().open();
						Customer customer = getCustomerByCustId();
						//fileName = "Class Wise Daily Attendance"+ fromDate;
						String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
						FontFactory.register(fontPath);
						pDFGenerator.getDocument().open();
						// creating pDF page event to set header and Footer to document
						PdfPTable mainTable = new PdfPTable(1);
						mainTable.setWidthPercentage(100);
						mainTable.setSplitLate(false);
						mainTable.getDefaultCell().setBorder(Rectangle.BOX);
						int width = 0;
						if(getPlTitle().equalsIgnoreCase("Daily Assignment"))
						{
							width=4;
						}
						else if(getPlTitle().equalsIgnoreCase("Daily Attendance"))
						{
							width=7;
						}
						PdfPTable defaultersHeaderReport = new PdfPTable(width);
						defaultersHeaderReport.setWidthPercentage(100);
						PdfPTable defaultersHeaderReports = null;
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}
							if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}
						}
						if(getPlTitle().equalsIgnoreCase("Daily Assignment"))
						{
							List<VWStudentClassAssignment> studentList=new ArrayList<VWStudentClassAssignment>();
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("CLASS WISE DAILY ASSIGNMENT WHO HAVE NOT DONE THE ASSIGNMENT",width, fontPath));
//							Date todayDate=new Date();
							if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber())){
								List<StudyClass> studyClassList=adminManager.getAll(StudyClass.class," id in"+getSelectedId());
								for(StudyClass studyClass:studyClassList){
									List<VWStudentClassAssignment> studentClassList =staffManager.getAll(VWStudentClassAssignment.class, "classSectionId= "+studyClass.getId()+" and custId="+getUserCustId()+"   and academicYearId="+getUserAcademicYearId()+ " and status='Y' and assignmentDate='"+ frmDate);
									Collections.sort(studentClassList,new StudentRollNumberComparator());
									studentList.addAll(studentClassList);
								}
							}
							else
								studentList =staffManager.getAll(VWStudentClassAssignment.class, "classSectionId in "+getSelectedId()+" and custId="+getUserCustId()+"   and academicYearId="+getUserAcademicYearId()+ " and status='Y' and assignmentDate='"+ frmDate +"' order by classSectionId,rollNumber");
							if(ObjectFunctions.isNotNullOrEmpty(studentList)){
								long checkId=0;
								//Collections.sort(studentList);
								for (VWStudentClassAssignment student : studentList) {  
									if(checkId != student.getClassSectionId()){
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(student.getClassAndSection(), width, fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Roll Number",1, fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Student Name",1, fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("MobileNumber",1, fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Subject Name",1, fontPath));
									}
									checkId=student.getClassSectionId();
									//ViewStudentPersonAccountDetails student = (ViewStudentPersonAccountDetails) studentObj;
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(student.getRollNumber()), "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(student.getStudentname(), "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(student.getMobileNumber(), "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(student.getSubjectName(), "#000",fontPath));
								}
							}
						}
						else if(getPlTitle().equalsIgnoreCase("Daily Attendance"))
						{
							AcademicYear academicYear=getCurrentAcademicYear();
							String captureAttendnaceBy = academicYear.getCaptureAttendanceBy();
							List<ViewStudentPersonAccountDetails> studentList = new ArrayList<ViewStudentPersonAccountDetails>();
							List<ViewStudentPersonAccountDetails> studentClassList = null;
							
							if(!"P".equalsIgnoreCase(customer.getStandardType())){
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("CLASS WISE DAILY ATTENDANCE - "+frmDate,width, fontPath));
							if(!"T".equalsIgnoreCase(captureAttendnaceBy) || getUser().isSchoolHostel()){
								float[] widths ={10,15,30,15,10,10};
								defaultersHeaderReports = new PdfPTable(widths);
							}else{
									float[] widtha = {9,15,30,10,9,15,15};
									defaultersHeaderReports = new PdfPTable(widtha);
							}
							defaultersHeaderReports.setWidthPercentage(100);
							
							if(getUser().isSchoolHostel())
							{ 
								if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNull(customer.getAlphaNumericRollNumber())){
									List<StudyClass> studyClassList=adminManager.getAll(StudyClass.class," id in"+getSelectedId());
									for(StudyClass studyClass:studyClassList){
										studentClassList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId= "+studyClass.getId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null");
										Collections.sort(studentClassList,new StudentRollNumberComparator());
										studentList.addAll(studentClassList);
									}
								}else
									studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId in "+getSelectedId()+" and custId="+getUserCustId()+" and status='Y' and hostelMode='H' and academicYearId="+getUserAcademicYearId()+" order by classSectionId,rollnumber asc");
								
								if(!ObjectFunctions.isNullOrEmpty(studentList))
								{
									long checkId=0;
									int count=0;
									for (ViewStudentPersonAccountDetails student : studentList) 
									{  
										HostelStudentDailyAttendance attendance = (HostelStudentDailyAttendance) studentManager.get(HostelStudentDailyAttendance.class,"studentId = "+student.getStudentId()+" and attendanceDate = '" + frmDate+ "'");
										if(checkId != student.getClassSectionId()){
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(student.getClassAndSection(), width, fontPath));
											if("A".equalsIgnoreCase(absentVal) || "P".equalsIgnoreCase(presentVal)){
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Roll Number",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Admission No",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Student Name",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Mobile Number",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Leave Applied",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Status",1, fontPath));
											}
										}
										checkId=student.getClassSectionId();
										if(!ObjectFunctions.isNullOrEmpty(attendance) && "A".equalsIgnoreCase(absentVal))
										{
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
											if(StringFunctions.isNullOrEmpty(String.valueOf(attendance.getLeaveRequest())))
											{
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("No", "#000",fontPath));
											}
											else
											{
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Yes", "#EE2424",fontPath));
											}
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
											count++;
										}
										if(ObjectFunctions.isNullOrEmpty(attendance) && "P".equalsIgnoreCase(presentVal))
										{
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("No", "#000",fontPath));
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Present", "#000",fontPath));
											count++;
								 	   }
										attendance = null;
								 }
								 if(count==0){
									String info=null;
									if("P".equalsIgnoreCase(presentVal)){
										info="present";	
									}else{
										info="absent";
									}
									defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("Currently there is no "+info+" students for this class.",width, fontPath));
								}
								}
							}else{
								if(!"undefined".equalsIgnoreCase(getSelectedId())){
									if(getUser().isParent() || getUser().isSchoolStudent()){
										if(getUser().isSchoolStudent()){
											studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "accountId ="+getUser().getId()+" and custId="+getUserCustId()+" and status='Y' and academicYearId="+getUserAcademicYearId()+" order by classSectionId,rollnumber asc");
										}
										else
										 //studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "studentId ="+getSelectedId()+" and custId="+getUserCustId()+" and status='Y' and academicYearId="+getUserAcademicYearId()+" order by classSectionId,rollnumber asc");
											studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "accountId ="+getUser().getSelectedStudentId()+" and custId="+getUserCustId()+" and status='Y' and academicYearId="+getUserAcademicYearId()+" order by classSectionId,rollnumber asc");
										frmDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN, frmDate);
									}else{
										if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNull(customer.getAlphaNumericRollNumber())){
											List<StudyClass> studyClassList=adminManager.getAll(StudyClass.class," id in"+getSelectedId());
											for(StudyClass studyClass:studyClassList){
												studentClassList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId ="+studyClass.getId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null");
												Collections.sort(studentClassList,new StudentRollNumberComparator());
												studentList.addAll(studentClassList);
											}
										}else
											studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId in "+getSelectedId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null order by classSectionId,rollnumber asc");
									}
									
									if(ObjectFunctions.isNotNullOrEmpty(studentList))
									{
										long checkId=0;
										int count=0;
										long classId = 0;
									    boolean isAttendanceSubmitted = false;
										for (ViewStudentPersonAccountDetails student : studentList) 
										{  
											log.debug(student.getPersonFullName());
											if(classId != student.getClassSectionId()){
												List<Object[]>	 attendanceRecordList = adminManager.getAll("select classSectionId,staffAccountId  FROM staffDailyAttendanceSubmitTrack "
														+ " where custId ="+ getUserCustId()+ " and academicYearId = "+getUserAcademicYearId()+
														" and classSectionId = "+student.getClassSectionId()+" and attendanceDate = '"
																+ frmDate+" 00:00:00"+"' ");
												classId = student.getClassSectionId();
												if(!ObjectFunctions.isNullOrEmpty(attendanceRecordList) && !ObjectFunctions.isNullOrEmpty((attendanceRecordList.get(0))[0])){
													isAttendanceSubmitted = true;
												}else{
													isAttendanceSubmitted = false;
												}
												
											}
											StudentDailyAttendance attendance = studentManager.getStudentDailyAttendance(student.getStudentId(),frmDate,getUserCustId(),student.getAcademicYearId());
											if(checkId != student.getClassSectionId()){
												if(isAttendanceSubmitted){
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(student.getClassAndSection(), width, fontPath));
												if("A".equalsIgnoreCase(absentVal) || "P".equalsIgnoreCase(presentVal)){
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Roll Number",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Admission No",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Student Name",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Mobile Number",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Leave Applied",1, fontPath));
													if("T".equalsIgnoreCase(captureAttendnaceBy)){
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Morning Session",1, fontPath));
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Afternoon Session",1, fontPath));
													}else{
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Status",1, fontPath));
													}

												}
												}else{
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(student.getClassAndSection(), width, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenterWithColspanAndBorder("Attedance was not submitted for this class.","#000", fontPath,width));
													
												}
											}
											checkId=student.getClassSectionId();
											if(isAttendanceSubmitted && !ObjectFunctions.isNullOrEmpty(attendance) && "A".equalsIgnoreCase(absentVal))
											{
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
												if(StringFunctions.isNullOrEmpty(String.valueOf(attendance.getLeaveRequest())))
												{
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("No", "#000",fontPath));
												}
												else
												{
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Yes", "#EE2424",fontPath));
												}
												if("T".equalsIgnoreCase(captureAttendnaceBy)){
													if(!ObjectFunctions.isNullOrEmpty(attendance)){
														if(attendance.isPresent())
															defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
														else
															defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
														if(attendance.isAfternoonSession())
															defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
														else
															defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
													}
												}else{
													if(!attendance.isPresent() && !attendance.isAfternoonSession()){
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
													}else{
														if(!attendance.isPresent())
															defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Morning)", "#EE2424",fontPath));
														if(!attendance.isAfternoonSession())
															defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Afternoon)", "#EE2424",fontPath));
													}
												}
												count++;
											}
											if(isAttendanceSubmitted && ObjectFunctions.isNullOrEmpty(attendance) && "P".equalsIgnoreCase(presentVal))
											{
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("No", "#000",fontPath));
												if("T".equalsIgnoreCase(captureAttendnaceBy)){
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
												}else
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Present", "#000",fontPath));
												count++;
									 	   }
											if(isAttendanceSubmitted && ObjectFunctions.isNullOrEmpty(presentVal) && ObjectFunctions.isNullOrEmpty(absentVal)){
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Roll Number",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Admission No",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Student Name",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Mobile Number",1, fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Leave Applied",1, fontPath));
												if("T".equalsIgnoreCase(captureAttendnaceBy)){
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Morning Session",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Afternoon Session",1, fontPath));
												}else{
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Status",1, fontPath));

												}
												if(isAttendanceSubmitted && !ObjectFunctions.isNullOrEmpty(attendance)){
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
													if(StringFunctions.isNullOrEmpty(String.valueOf(attendance.getLeaveRequest())))
													{
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("No", "#000",fontPath));
													}
													else
													{
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Yes", "#EE2424",fontPath));
													}
													if("T".equalsIgnoreCase(captureAttendnaceBy)){
														if(!ObjectFunctions.isNullOrEmpty(attendance)){
															if(attendance.isPresent())
																defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
															else
																defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
															if(attendance.isAfternoonSession())
																defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
															else
																defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
														}
													}else{
														if(!attendance.isPresent() && !attendance.isAfternoonSession()){
															defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
														}else{
															if(!attendance.isPresent())
																defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Morning)", "#EE2424",fontPath));
															if(!attendance.isAfternoonSession())
																defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Afternoon)", "#EE2424",fontPath));
														} 
														
														//defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
													}
													count++;
												}					
												if(isAttendanceSubmitted && ObjectFunctions.isNullOrEmpty(attendance)){
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("No", "#000",fontPath));
													if("T".equalsIgnoreCase(captureAttendnaceBy)){
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
													}else{
														defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));

													}
													count++;
												}
											}
											attendance=null;
									 }
									if(isAttendanceSubmitted && count==0){
										String info=null;
										if("P".equalsIgnoreCase(presentVal)){
											info="present";	
										}else{
											info="absent";
										}
										defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("Currently there is no "+info+" students for this class.",width, fontPath));
									}
								}
							}
						}
							}else{

								// For Preschool
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Name Of The Headmaster:", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(customer.getCustomerFullPersonName(), width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Email Id:", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(customer.getCustEmail(),width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Mobile Number:", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(customer.getMobileNumber(), width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Attendance Date:", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(frmDate, width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("CLASS WISE DAILY ATTENDANCE",width, fontPath));


								float[] widths ={15,20,35,20,10};
								defaultersHeaderReports = new PdfPTable(widths);
								defaultersHeaderReports.setWidthPercentage(100);

								if(!"undefined".equalsIgnoreCase(getSelectedId())){
									if(getUser().isParent() || getUser().isSchoolStudent()){
										if(getUser().isSchoolStudent()){
											studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "accountId ="+getUser().getId()+" and custId="+getUserCustId()+" and status='Y' and academicYearId="+getUserAcademicYearId()+" order by classSectionId,rollnumber asc");
										}
										else{
											studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "accountId ="+getUser().getSelectedStudentId()+" and custId="+getUserCustId()+" and status='Y' and academicYearId="+getUserAcademicYearId()+" order by classSectionId,rollnumber asc");
										}
									}else{
										if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNull(customer.getAlphaNumericRollNumber())){
											List<StudyClass> studyClassList=adminManager.getAll(StudyClass.class," id in"+getSelectedId());
											for(StudyClass studyClass:studyClassList){
												studentClassList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId ="+studyClass.getId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null order by classSectionId,rollnumber asc");
												Collections.sort(studentClassList,new StudentRollNumberComparator());
												studentList.addAll(studentClassList);
											}
										}else
											studentList = staffManager.getAll(ViewStudentPersonAccountDetails.class, "classSectionId in "+getSelectedId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null order by classSectionId,rollnumber asc");
									}
									if(ObjectFunctions.isNotNullOrEmpty(studentList))
									{
										long checkId=0;
										int count=0;
										for (ViewStudentPersonAccountDetails student : studentList) 
										{  
											log.debug(student.getPersonFullName());
											StudentDailyAttendanceTimeTrack attendanceTime =
													(StudentDailyAttendanceTimeTrack) studentManager.get(StudentDailyAttendanceTimeTrack.class,"studentId = "+student.getStudentId()+
															" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and attendanceDate = '" +frmDate+"'");

											if(checkId != student.getClassSectionId()){
												if(count==0 && checkId > 0){
													String info=null;
													if("P".equalsIgnoreCase(presentVal)){
														info="present";	
													}else{
														info="absent";
													}
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("Currently there is no "+info+" students for this class.",width, fontPath));
												}
												count = 0;
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(student.getClassAndSection(), width, fontPath));
												if("A".equalsIgnoreCase(absentVal) || "P".equalsIgnoreCase(presentVal)){
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Roll Number",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Admission No",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Student Name",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass("Mobile Number",1, fontPath));
													defaultersHeaderReports.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Status",1, fontPath));

												}
											}
											checkId=student.getClassSectionId();
											if(ObjectFunctions.isNullOrEmpty(attendanceTime) && "A".equalsIgnoreCase(absentVal))
											{
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
												count++;
											}
											if(!ObjectFunctions.isNullOrEmpty(attendanceTime) && "P".equalsIgnoreCase(presentVal))
											{
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(String.valueOf(student.getRollNumber()), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getAdmissionNumber(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getPersonFullName(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(student.getMobileNumber(), "#000",fontPath));
												defaultersHeaderReports.addCell(PDFGenerator.getPdfCellAlignCenter("Present", "#000",fontPath));
												count++;
											}
											attendanceTime=null;
										}
										if(count==0 && checkId > 0){
											String info=null;
											if("P".equalsIgnoreCase(presentVal)){
												info="present";	
											}else{
												info="absent";
											}
											defaultersHeaderReports.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("Currently there is no "+info+" students for this class.",width, fontPath));
										}
									}
								}

							}
					}
					mainTable.addCell(defaultersHeaderReport);
					mainTable.addCell(defaultersHeaderReports);
					pDFGenerator.getDocument().add(mainTable);
					pDFGenerator.getDocument().close();
					pDFGenerator = null;
					mainTable = null;
					defaultersHeaderReport = null;
					defaultersHeaderReports = null;
					pDFGenerator = null;
					phfmj = null;
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "ajaxGetSchoolHoliday", results = { @Result(location = "../admin/reports/ajaxGetAttendanceByDate.jsp", name = "success") }) })
	public String ajaxGetSchoolHoliday() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetSchoolHoliday' method");
		}
		try {
			 String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
			    if(!ObjectFunctions.isNullOrEmpty(fromDate))
			    {
			    	setAcademicYear((AcademicYear) adminManager.get(AcademicYear.class,"id="+getUserAcademicYearId())); 
			    	//here set the academicyear because of using in ajaxGetStaffStudyClasses for check the haolidayStatus(CH ) in academicyear settings 
			    	if(!ObjectFunctions.isNullOrEmpty(getAcademicYear())) {
				    	if("SH".equalsIgnoreCase(academicYear.getHolidayStatus())){
				    		//SchoolHolidays holiday = adminManager.getSchoolHolidayByDate(getUserCustId(),fromDate);
				    		SchoolHolidays holiday = adminManager.getHolidayByCustIdAndAcademicYearId(getUserCustId(),getAcademicYear().getId(),fromDate,0,null,null,"holidayDateEqual");
					 		if(!ObjectFunctions.isNullOrEmpty(holiday))
					 		{
					 			setAttendanceDate(fromDate);
					 			setAnyTitle("No");
					 			super.addActionError(fromDate+ " (day) is holiday.");
					 			return "success";
					 		}
				    	}
			 		   setAnyTitle("Yes");
                       setSelectedDate(fromDate);
			 			setAcdmcYearRange(getUser().getUserRoleDescription());
			 			if(!getUser().isOnlySchoolAdmin() && getUser().isParent() || getUser().isSchoolStudent()){
			 				if(getUser().getId()!=0){
			 					if(getUser().isParent()){
			 						//String clause = " parentId="+getUser().getId()+" and academicYearId="+getAcademicYear().getId()+" and description is null";
			 						String clause = " accountId="+getUser().getSelectedStudentId()+" and academicYearId="+getAcademicYear().getId()+" and description is null";
			 						setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, clause));
			 						setExamTypeList(adminManager.getAll(ExamTypes.class, "custId =" + getUserCustId() +" and academicYearId = "+ getAcademicYear().getId()));
			 						return "children";
			 					}else{
			 						Student student = studentManager.getStudentByAccountId(getUser().getId(),getAcademicYear().getId(),getUserCustId());
			 						if(!ObjectFunctions.isNullOrEmpty(student)){
			 							StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, " id="+student.getClassSectionId());	
			 							if(!ObjectFunctions.isNullOrEmpty(studyClass))
			 							{
				 							getStudyClassList().add(studyClass);
			 							}
			 							studyClass=null;
			 						}
			 						student=null;
			 					}
			 					String sql = "custId =" + getUserCustId() +" and academicYearId = "+ getAcademicYear().getId();
			 					setExamTypeList(adminManager.getAll(ExamTypes.class, sql));
			 				}
			 			}else{
			 				if (!StringFunctions.isNullOrEmpty(getPlTitle())) {
			 					if(getUser().isOnlySchoolTeacher() || getUser().isOnlySchoolHod()){
			 						ajaxGetStaffStudyClasses();
			 						if("CH".equalsIgnoreCase(academicYear.getHolidayStatus())){
			 							List<StudyClass> studyClassList = getStudyClassList();
			 							setStudyClassList(null);
			 							if (ObjectFunctions.isNotNullOrEmpty(studyClassList)){
			 								checkStudyClassHaveHolidyOrNot(getUserCustId(), academicYear.getId(), studyClassList, fromDate);
			 								studyClassList=null;
			 							}
			 						}
			 					}else{
			 						if("SH".equalsIgnoreCase(academicYear.getHolidayStatus())){
			 							checkStudyClassHavingStudentsOrNot();	
			 						}else{
			 							List<StudyClass> studyClassList = adminManager.GetAllStudyClasses(getUserCustId(),getAcademicYear().getId(),null);
			 							if (ObjectFunctions.isNotNullOrEmpty(studyClassList)) 
			 							{
			 								checkStudyClassHaveHolidyOrNot(getUserCustId(), academicYear.getId(), studyClassList, fromDate);
			 							}
			 						}
			 					}
			 					if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)") || getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)")) {
			 						setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getAcademicYear().getId(),null, null,true,"",""));
			 					}
			 					if (getPlTitle().equalsIgnoreCase("Class Wise Marks") || getPlTitle().equalsIgnoreCase("Community Wise Marks")) {
			 						String sql = "custId =" + getUserCustId() +" and academicYearId = "+getAcademicYear().getId();
			 						setExamTypeList(adminManager.getAll(ExamTypes.class, sql));
			 					}
			 					if (getPlTitle().equalsIgnoreCase("Community Wise Marks")) {
			 						setCastSettingList(adminManager.getAll(CastSettings.class, " custId="+getUserCustId()));
			 					}
			 				}
			 			}
			      }
			    }
			    return "success";
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * Jan 20, 2014    	 Seshu		        For generating Transport fee collection reports.
/********************************************************************/	
	@Action(value = "ajaxCommonFeeCollectionAndDues", results = { @Result(location = "jasper/fee/studentInvoiceToDayOrOverAllFeeReceipt.jasper", type = "jasper", name = "success", params = {"dataSource", "studentsFeeTypeList", "format", "PDF" }),
																			  @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" }),
																			  @Result(location = "jasper/fee/classWiseFeeDefaulters.jasper", type = "jasper", name = "classWiseDefaultersList", params = {"dataSource", "studentsFeeTypeList", "format", "PDF" }),
																			  @Result(location = "jasper/fee/studentFeePaidAndUnpaidReport.jasper", type = "jasper", name = "paidAndUnPaidFeeDetailsList", params = {"dataSource", "studentsFeeTypeList", "format", "PDF" }),
																			  @Result(location = "../schoolfee/ajaxFeeClassList.jsp", name = "sendSMSSeccess"  )  }) 
	public String ajaxCommonFeeCollectionAndDues() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCommonFeeCollectionAndDues' method");
		}
		try {
			String pdf = getParamValue("pdfId");
			double totalAmountDue  =0;
			double totalDiscountAmt=0;
			setTempString(null);
			setBalance(null);
			setTotalAmount(0);
			setFooter(null);
			log.info("student status :"+getWishTitle());
			String feeGenerateType = getQueryString();
			if (getUserAcademicYearId() != 0) {
				//setCustomer((Customer) adminManager.get(Customer.class,getUserCustId()));
				setCustomer(getCustomerByCustId());
				setAcademicYear(getCurrentAcademicYear());
				String today = "";
				//if (getTempId() > 0) {
					if(getAnyId().equalsIgnoreCase("SMS")){
						long studentId=0;
						StringBuffer mesgContent =null;
						String defaultMsg=null;
						double dueAmount=0;
						ViewStudentFeePaymentDetails studentFeePaymentDetails =null;
						SMSServiceProviders smsprovider = (SMSServiceProviders) adminManager.get(SMSServiceProviders.class, "activeUrl='Y'");
						List<ViewStudentFeePaymentDetails> studentsFeeTypeList= (List<ViewStudentFeePaymentDetails>)getSession().getAttribute("studentsFeeTypeList");
						Collections.sort(studentsFeeTypeList);
						if(!ObjectFunctions.isNullOrEmpty(studentsFeeTypeList)){
							Map<String, StringBuffer> studTermWiseMesgDetails = new HashMap<String, StringBuffer>();
							for(ViewStudentFeePaymentDetails feePaymentDetails : studentsFeeTypeList){
								//if(!StringFunctions.isNullOrEmpty(feePaymentDetails.getPhoneNumber()) && !"+91-0000000000".equalsIgnoreCase(feePaymentDetails.getPhoneNumber())){
									if(feePaymentDetails.getId()!=studentId){
										if(!ObjectFunctions.isNullOrEmpty(mesgContent)){
											defaultMsg="Dear Parent, Your child's school fees of Rs."+dueAmount+" is due for the following term(s) "+mesgContent;
											if(!StringFunctions.isNullOrEmpty(defaultMsg)&& !ObjectFunctions.isNullOrEmpty(mesgContent)){
												if(!StringFunctions.isNullOrEmpty(studentFeePaymentDetails.getPhoneNumber()) && !"+91-0000000000".equalsIgnoreCase(studentFeePaymentDetails.getPhoneNumber())){
													log.debug("defaultMsg : "+studentFeePaymentDetails.getPhoneNumber()+" :: "+defaultMsg);
													boolean smsStatus= communicationManager.sendFeeReminderForParent(getCustomerByCustId(),smsprovider,studentFeePaymentDetails,getCurrentAcademicYear(),defaultMsg,getUser().getId());
												}
											}
											dueAmount=0;
											dueAmount= (dueAmount+feePaymentDetails.getPaymentAmount());
											mesgContent = new StringBuffer(feePaymentDetails.getTermName()).append(":").append(feePaymentDetails.getPaymentAmount()+", ");
											defaultMsg=null;
										}else{
											dueAmount= (dueAmount+feePaymentDetails.getPaymentAmount());
											mesgContent=new StringBuffer(feePaymentDetails.getTermName()).append(":").append(feePaymentDetails.getPaymentAmount());
										}
									}else{
										dueAmount= (dueAmount+feePaymentDetails.getPaymentAmount());
										mesgContent.append(feePaymentDetails.getTermName()).append(":").append(feePaymentDetails.getPaymentAmount());
									}
								//}
									if(studentId==feePaymentDetails.getId())
										mesgContent.append(",");
								studentId=feePaymentDetails.getId();
								studentFeePaymentDetails=feePaymentDetails;
							}
							if(!StringFunctions.isNullOrEmpty(studentFeePaymentDetails.getPhoneNumber()) && !"+91-0000000000".equalsIgnoreCase(studentFeePaymentDetails.getPhoneNumber())){
								defaultMsg="Dear Parent, Your child's school fees of Rs."+dueAmount+" is due for the following term(s) "+mesgContent;
								if(!StringFunctions.isNullOrEmpty(defaultMsg)&& !ObjectFunctions.isNullOrEmpty(mesgContent)){
									log.debug("defaultMsg : "+studentFeePaymentDetails.getPhoneNumber()+" :: "+defaultMsg);
									boolean smsStatus= communicationManager.sendFeeReminderForParent(getCustomerByCustId(),smsprovider,studentFeePaymentDetails,getCurrentAcademicYear(),defaultMsg,getUser().getId());
								}
								dueAmount=0;
								dueAmount= (dueAmount+studentFeePaymentDetails.getPaymentAmount());
								mesgContent = new StringBuffer(studentFeePaymentDetails.getTermName()).append(":").append(studentFeePaymentDetails.getPaymentAmount()+", ");
								defaultMsg=null;
							}
							
						}
						setSchoolFeeList(studentsFeeTypeList);
						getSession().removeAttribute("studentsFeeTypeList");
						super.addActionMessage("SMS sent successfully.");
						viewDefaultersFeeTermsAndClass();
						return "sendSMSSeccess";
					}else if(getAnyId().equalsIgnoreCase("Excel")){
						if ("Class Wise Defaulters".equalsIgnoreCase(feeGenerateType) || "Total Defaulters".equalsIgnoreCase(feeGenerateType) || "PaidAndUnPaidDetails".equalsIgnoreCase(feeGenerateType)){
							generateExcelForStudentFeeDefaulters(feeGenerateType);
						}else{
							generateExcelForStudentFee(feeGenerateType);
						}
					}else{
						Date newDate = new Date();
						SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
						SimpleDateFormat newDateFormat = new SimpleDateFormat("dd-MMM-yyyy");
						String currentdate = newDateFormat.format(newDate);
						String dateFormat = null;
						String filename = null;
						setTodayDate(null);
						String daysBetwwenenfromDate = null;
						String daysBetwwenendDate = null;
						List<Object[]> studentIds = null;
						List<BigInteger> defaultStudentIds = null;
						String transportmode = null;
						String hostelmode = null;
						if ("Transport Fee".equalsIgnoreCase(getTitle())) {
							transportmode = Constants.TRANSPORT_STATUS;
						}
						if ("Hostel Fee".equalsIgnoreCase(getTitle())) {
							hostelmode = Constants.HOSTEL_STATUS;
						}
						if ("Term Wise".equalsIgnoreCase(feeGenerateType) && !ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds())) {//&& (getTempId() > 0)
							dateFormat = "Received Fees report By Terms wise";
							setTodayDate(dateFormat);
							filename = "studentInvoiceTurmsWiseFeeReceipt";
							setAlertSendType("Currently there are no student fee collection in term wise.");
							for (String termId : getChkBoxSelectedIds()) {
								SchoolTerms schoolTerms = (SchoolTerms) adminManager.get(SchoolTerms.class, Long.valueOf(termId));
								studentIds = adminManager.getAllStudentInvoiceFeeDetailsByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(), schoolTerms.getId(), today,daysBetwwenenfromDate,daysBetwwenendDate, transportmode,0,getSelectedId());// we remove the tempId() means feeSettingId because we are bringing all terms in fee collection instead of setting wise terms 
								if (!ObjectFunctions.isNullOrEmpty(studentIds)) {
									doPreparestudentFeeList(studentIds, schoolTerms.getId(), today);
									totalAmountDue += getTotalAmount();
									totalDiscountAmt+=Double.valueOf(getTempString());
								}
							}
						}else if ("PaidAndUnPaidDetails".equalsIgnoreCase(feeGenerateType) && !ObjectFunctions.isNullOrEmpty(getChkBoxClassSelectedIds()) && !ObjectFunctions.isNullOrEmpty(getAnyTitle())) {//&& (getTempId() > 0)
							filename = "studentPaidAndUnpaidFeeDetails";
							 setAlertSendType("Currently there are no student paid and un-paid fee in term wise.");
							 genaratePaidAndUnPaidFeeDetails();
							 totalAmountDue =  Double.valueOf(getTotalAmount());
							 totalDiscountAmt = Double.valueOf(getFooter());
					   }				
						else {
							List<SchoolTerms> schoolTermsList =null;
							if(!ObjectFunctions.isNullOrEmpty(getEmpId())){
								schoolTermsList = adminManager.getAll(SchoolTerms.class, " custId="+ getUserCustId()+ " and id in "+getEmpId()+" and academicYearId = "+ getUserAcademicYearId());//+ " and feeSettingId="+ getTempId()
							}else{
								schoolTermsList = adminManager.getAll(SchoolTerms.class, " custId="+ getUserCustId()+ " and academicYearId = "+ getUserAcademicYearId());//+ " and feeSettingId="+ getTempId()
							}
							if (!ObjectFunctions.isNullOrEmpty(schoolTermsList)) {
								for (SchoolTerms schoolTerm : schoolTermsList) {
									int feeDueDays = DateFunctions.daysBetween(new Date(),schoolTerm.getDueDate());
									 //Over All
									if ("Over All".equalsIgnoreCase(feeGenerateType)) {//&& getTempId() > 0
										dateFormat = "Received Fees report academic wise ";
										filename = "studentInvoiceOverAllFeeReceipt";
										setTodayDate(dateFormat);
										setAlertSendType("Currently there are no student fee collection in over all.");
										studentIds = adminManager.getAllStudentInvoiceFeeDetailsByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),schoolTerm.getId(), today,daysBetwwenenfromDate,daysBetwwenendDate,transportmode,0,null);// i am passing tempId 0 because we are bringing all terms instead of fee setting wise
									} 
									//To Day 
									else if ("Today".equalsIgnoreCase(feeGenerateType)) {//&& getTempId() > 0
										dateFormat = "Received Fees report on "+ currentdate;
										setTodayDate(dateFormat);
										filename = "studentInvoiceToDayFeeReceipt";
										today = lastUpdatedStr.format(newDate);
										setAlertSendType("There are no student collection today.");
										studentIds = adminManager.getAllStudentInvoiceFeeDetailsByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),schoolTerm.getId(), today,daysBetwwenenfromDate,daysBetwwenendDate,transportmode,0,null);//getTempId()
									}
									//Days Between
									else if ("Days Between".equalsIgnoreCase(feeGenerateType)) {//&& getTempId() > 0
										String fromDate1 = DateFormatter.formatDate(DateFormatter.ddMMMyyyy_PATTERN1,getParamValue("startDate"));
										String toDate1 = DateFormatter.formatDate(DateFormatter.ddMMMyyyy_PATTERN1,getParamValue("endDate"));
										dateFormat = "Received Fees report between "+ fromDate1 + " to " + toDate1;
										setTodayDate(dateFormat);
										setAlertSendType("There are no students fee collection from "+fromDate1+" to "+toDate1+".");
										filename = "studentInvoiceDaysBetweenFeeReceipt"; 
										daysBetwwenenfromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
										daysBetwwenendDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
										studentIds = adminManager.getAllStudentInvoiceFeeDetailsByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),schoolTerm.getId(), today,daysBetwwenenfromDate,daysBetwwenendDate,transportmode,0,null);//getTempId()
										
									} //Class Wise Defaulters
									else if ("Class Wise Defaulters".equalsIgnoreCase(feeGenerateType)) {//&& getTempId() > 0
										if(feeDueDays < 0){
											filename = "studentInvoiceDefaultersFeeReceipt";
											setTodayDate("School Student Defaulters");
											setAlertSendType("Currently there are no student fee defaulters.");
											String query = getClassWiseFeeDefaultersByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),getSelectedId(),schoolTerm.getId(),transportmode,hostelmode);
											defaultStudentIds = adminManager.getAll(query);
											log.debug("TermName:"+schoolTerm.getTermName()+"    StudentsList : "+defaultStudentIds.size());
											if (!ObjectFunctions.isNullOrEmpty(defaultStudentIds)&& "Class Wise Defaulters".equalsIgnoreCase(feeGenerateType)) {
												doGetclassWiseDefaultstudentsFeeList(schoolTerm, today,getAcademicYear());
												totalAmountDue += getTotalAmount();
											}
										
										}else {
											setAlertSendType("Currently there are no fee defaulters.");
										}
									} 
									//Total Defaulters 
									else if ("Total Defaulters".equalsIgnoreCase(feeGenerateType)) {//&& getTempId() > 0
										if(feeDueDays < 0){
											log.debug("feeDueDays :"+feeDueDays);
											filename = "studentInvoiceDefaultersFeeReceipt";
											setTodayDate("Student Defaulters");
											setAlertSendType("Currently there are fee defaulters.");
											defaultStudentIds = adminManager.getAllStudentFeeDefaultersByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),schoolTerm.getId(), today,transportmode);// ,Constants.NO_STRING
											if (!ObjectFunctions.isNullOrEmpty(defaultStudentIds)&& "Total Defaulters".equalsIgnoreCase(feeGenerateType)) {
												doGetclassWiseDefaultstudentsFeeList(schoolTerm,today,getAcademicYear());
												totalAmountDue += getTotalAmount();
											}
										}else {
											setAlertSendType("Currently there are no fee defaulters.");
										}
									}
									if (!ObjectFunctions.isNullOrEmpty(studentIds)) {
										doPreparestudentFeeList(studentIds,schoolTerm.getId(), today);
										totalAmountDue += getTotalAmount();
										totalDiscountAmt+=Double.valueOf(getTempString());
									}
								}
							}
						}

						if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
							setCustomerName(getCustomer().getOrganization().toUpperCase());
							setAnyId(getCustomer().getOrganizationFullAddress());
						}
						setTotalAmount(totalAmountDue);
						setFooter(String.valueOf(totalDiscountAmt));
						if ("pdf".equalsIgnoreCase(pdf)) {
							getResponse().setHeader("Content-Disposition","attachment; filename="+ filename+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
						}
						if (ObjectFunctions.isNullOrEmpty(getStudentsFeeTypeList())) {
							getAlertSendType();
							return "errorMessage";
						}
						if("Class Wise Defaulters".equalsIgnoreCase(feeGenerateType) || "Total Defaulters".equalsIgnoreCase(feeGenerateType)){
							return "classWiseDefaultersList";
						}else if ("PaidAndUnPaidDetails".equalsIgnoreCase(feeGenerateType)) {
							return "paidAndUnPaidFeeDetailsList";
						}
					}
					//}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxDoSelectedStudentDetailsReport", results = {@Result(location = "../admin/reports/ajaxDoSelectedStudentDetails.jsp", name = "success") })})
	public String ajaxDoSelectedStudentDetailsReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoSelectedStudentDetailsReport' method");
		}
		try {
			ajaxDownloadStudentDetails();			 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDownloadSelectedStudentDetails", results = {}) })
	public void ajaxDownloadSelectedStudentDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadSelectedStudentDetails' method");
		}
		try {
			if (getUserAcademicYearId() > 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
				String fileName = "StudentReport_" + DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
				getResponse().setHeader("Content-Disposition",
						"attachment; filename=" + fileName.replace(' ', '_') + ".xls");
				setStudyClassList(adminManager.getAll(StudyClass.class, "id in " + getSelectedId()));
				ExcelReport studentRpt = new ExcelReport();
				getResponse().setContentType(studentRpt.getMimeType());
				StringBuffer sheetTitleDesc = new StringBuffer();
				sheetTitleDesc.append("School Name : ");
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("organization"))) {
					sheetTitleDesc.append((String) getSession().getAttribute("organization"));
				}
				sheetTitleDesc.append(", Academic Year : ");
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYearName"))) {
					sheetTitleDesc.append((String) getSession().getAttribute("academicYearName"));

				}
				if (ObjectFunctions.isNotNullOrEmpty(getStudyClassList())) {
					StringBuffer strbuff;
					boolean isLangSubSelected = false;
					boolean isCoreSubSelected = false;
					String selectColumns = getAnyId();
					Long custId =getUserCustId();
					Object[] subjects = null;
					if (selectColumns.contains("coreSubjects")){
						selectColumns = selectColumns.replace(",coreSubjects", "");
						selectColumns = selectColumns.replace("coreSubjects", "");
						isCoreSubSelected  = true;
					}
					if (selectColumns.contains("languageSubject")){
						selectColumns = selectColumns.replace(",languageSubject", "");
						selectColumns = selectColumns.replace("languageSubject", "");
						isLangSubSelected = true;
					}
					Object[] subjectDetails = null;
					for (StudyClass studyClass : getStudyClassList()) {
						subjects = null;
						strbuff = new StringBuffer();
						strbuff.append("select ");
						strbuff.append(selectColumns);
						strbuff.append(" from vw_studentDetails ");
						strbuff.append(" where classSectionId=");
						strbuff.append(studyClass.getId());
						if(!ObjectFunctions.isNullOrEmpty(getFilterName())){
							if(getFilterName().contains("RTE"))
								strbuff.append(" and rteStatus in ("+"'Y','Yes')");
						}
						strbuff.append(" and description is null order by firstName,lastName");
						
						studentRpt.assignTitles(getPlSubjectName().replace("(", "").replace(", 0)", ""));
						List studentDetails = adminManager.getAll(strbuff.toString());
						strbuff=null;
						List<String> items = Arrays.asList(getAnyId().split(","));
						subjectDetails  = null ;
						// getting class section core subjects and language subjects.
						if(isLangSubSelected || isCoreSubSelected){
							    subjects = adminManager.get("select IFNULL( GROUP_CONCAT( distinct(IF (ss.language ='N' , ss.name,null))),'')  as coreSubjects ,"
										+ "	IFNULL( GROUP_CONCAT( distinct(IF (ss.language ='Y' , ss.name,null))),'') as languageSubject "
										+ " FROM	studyClass c "
										+ " LEFT JOIN ClassSubject cls ON (cls.studyClassId = c.id)	"
										+ "	LEFT JOIN studySubject ss on (ss.id=cls.subjectId)	"
										+ "	WHERE ss.custId = "
										+ custId
										+ " AND  c.id = "
										+ studyClass.getId()
										+ "");
							
							if(isLangSubSelected &&isCoreSubSelected){
								subjectDetails = new Object[2];
								subjectDetails = subjects;
							}	else if(isLangSubSelected ){
								subjectDetails = new Object[1];
								subjectDetails[0] = subjects[1];
							}else if(isCoreSubSelected){
								subjectDetails = new Object[1];
								subjectDetails[0] = subjects[0];
							}
							studentRpt.createSheetWithSubjects(studyClass.getClassAndSection(), studentDetails,items.size()-1,sheetTitleDesc.toString(),isLangSubSelected,isCoreSubSelected, subjectDetails);
						}else{
							studentRpt.createSheet(studyClass.getClassAndSection(), studentDetails,items.size()-1,sheetTitleDesc.toString());
					}
						studentDetails=null;
					}
				}
				studentRpt.getWb().write(getResponse().getOutputStream());
		        studentRpt=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	 
	/**  @Description 23rd Apr cvs: Modularization  report for staff selected fields*/
	@Actions( { @Action(value = "ajaxDownloadSelectedStaffDetails", results = {}) })
	public void ajaxDownloadSelectedStaffDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadSelectedStaffDetails' method");
		}
		try {
			if (getUserAcademicYearId() > 0) {
				String fileName = "StaffReport_" + DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
				getResponse().setHeader("Content-Disposition", "attachment; filename=" + fileName.replace(' ', '_') + ".xls");
				ExcelReport staffRpt = new ExcelReport();
				getResponse().setContentType(staffRpt.getMimeType());
				staffRpt.assignTitles(getAnyId());
				 StringBuffer strbuff = new StringBuffer();
					strbuff.append("select ");
					strbuff.append(getAnyId());
					strbuff.append(" from vw_staffDetails ");
					strbuff.append(" where academicYearId<=");
					strbuff.append(getUserAcademicYearId());
					strbuff.append(" and custId=");
					strbuff.append(getUserCustId());
					strbuff.append(" and roleId in ");
					strbuff.append(getSelectedId());
					strbuff.append("  and status='Y' order by roleName");
					List staffDetails = adminManager.getAll(strbuff.toString());
					strbuff=null;
					List<String> items = Arrays.asList(getAnyId().split(","));
					staffRpt.createSheet("StaffDetails", staffDetails,items.size()-1,null);
					staffDetails=null;
					staffRpt.getWb().write(getResponse().getOutputStream());
					staffRpt=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	/**      * @Description 8th Apr cvs: Modularization add new method for report */
	@Actions( { @Action(value = "ajaxDoDownloadAdmittedStudents", results = {}) })
	public void ajaxDoDownloadAdmittedStudents() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoDownloadAdmittedStudents' method");
		}
		try {
			if (getAcademicYearId() > 0) {
				String fileName = "NewAdmittedStudentsReport_" + DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
				getResponse().setHeader("Content-Disposition", "attachment; filename=" + fileName.replace(' ', '_') + ".xls");
				ExcelReport stuRpt = new ExcelReport();
				getResponse().setContentType(stuRpt.getMimeType());
				StringBuffer columnsbuffer = new StringBuffer();
				columnsbuffer.append("admissionNumber,firstName,lastName,middleName,dateOfBirth,dateOfJoining,gender,bloodGroup,");
				columnsbuffer.append("className,section,fatherName,fatherOccupation,motherName,motherOccupation,parentEmail,phoneNumber,");
				columnsbuffer.append("mobileNumber,streetName,city,stateName,postalCode,transportMode,familyDoctor,prefferedHospital,religion,castName,subCastName,");
				columnsbuffer.append("annualIncome,motherToung,nationality,teeth,oralHygiene,height,visionL,visionR,weight,identification1,identification2,rationCardNumber,");
				columnsbuffer.append("communityNumber,studentId,sslcNumber,tmrNumber,classJoined,registerNumber,relievingDate,scholarShipInfo,placeOfBirth,lastSchool");
				stuRpt.assignTitles(columnsbuffer.toString());
				StringBuffer strbuff = new StringBuffer();
				List<String> items = Arrays.asList(columnsbuffer.toString().split(","));
				strbuff.append("select ");
				strbuff.append(columnsbuffer.toString());
				strbuff.append(" from vw_studentDetails ");
				strbuff.append(" where academicYearId=");
				strbuff.append(getAcademicYearId());
				strbuff.append(" and custId=");
				strbuff.append(getUserCustId());
				if(!ObjectFunctions.isNullOrEmpty(getClassId())){
					strbuff.append(" and classNameClassId=");
					strbuff.append(getClassId());
				}
				strbuff.append(" and joinedThroughAdmissions='"+Constants.YES_STRING+"' ");
				strbuff.append(" and description is null order by className,firstName,lastName");
				List studentDetails = adminManager.getAll(strbuff.toString());
				strbuff=null;
				columnsbuffer=null;
				stuRpt.createSheet("NewAdmittedStudentsReport", studentDetails,items.size()-1,null);
				studentDetails=null;
				stuRpt.getWb().write(getResponse().getOutputStream());
				stuRpt=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	/********************************************************************
	 * version		Date              	Name               Description
	 * ========     ===========     	============       ==================
	 * 1.0			April 15, 2013		cvs			   		Modularization  below method get the roles
	 * 2.0			Oct 31,2013			Seshu				Commentted setPlTitle() method. Becuase plTitle already has value so we need not reassign same value
	/********************************************************************/	
	@Actions({
		@Action(value = "ajaxDoViewStaffRoles", results = { @Result(location = "../admin/reports/ajaxDownloadStaffDetails.jsp", name = "staffDetails") , @Result(location = "../admin/reports/ajaxDoViewStaffDetailsByRoleWise.jsp", name = "success") })} )
		public String ajaxDoViewStaffRoles() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoViewStaffRoles' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getPlTitle())) {
				if(getPlTitle().equalsIgnoreCase("Staff Details")){
						if(getUserCustId() > 0){
			        	
						StringBuffer queryBuff=new StringBuffer();
						queryBuff.append("select count(*) from staff where custId=");
						queryBuff.append(getUserCustId());	
						queryBuff.append(" and academicYearId<='"+getUserAcademicYearId()+"' ");
						queryBuff.append(" and status='"+Constants.YES_STRING+"' ");
						List resultList=staffManager.getAll(queryBuff.toString());
						 
						if(!ObjectFunctions.isNullOrEmpty(resultList)){
							//setObjectList(staffManager.getAll(Staff.class,"custId="+getUserCustId()+" and academicYearId <="+getUserAcademicYearId()+" and status='"+Constants.YES_STRING+"'"));
							if(!ObjectFunctions.isNullOrEmpty(resultList.get(0))){
								BigInteger var= ((BigInteger)resultList.get(0));
								if(var.longValue()>0){
									setObjectList(resultList);
								}
							}
						}
					}
					//setPlTitle("Staff Details");
					return "staffDetails";
				}
			}
			else {
				prepareStaffRolesMap(null);
				setObjectList(staffManager.getAll(ViewAllUsers.class, "custId="+getUserCustId()+" and roleName!='ROLE_STUDENT' and roleName!='ROLE_PARENT' and roleName!='ROLE_ADMIN' and roleName!='ROLE_ADMINOFFICER' group by roleName"));
			}
		}
		catch(Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	} 
	/**Changed by seshu on 1st May 2013. For generating exam schedules time table.*/
	@Actions({
		@Action(value = "printExamSchedules", results = {  @Result(location = "jasper/marks/examSchedules.jasper", type="jasper", name = "success",params = {"dataSource","getExamScheduleList()","format", "PDF"}) })
	})
	public String printExamSchedules()
    {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'printExamSchedules' method");
    }
    try{
		if(getCustId() <= 0)
 		   setCustId(getUserCustId());
    	if(StringFunctions.isNotNullOrEmpty(getExamType()) && StringFunctions.isNotNullOrEmpty(getClassId()) &&  getCustId() > 0){
    		//If parent has two sons and both of them are studying in different schools, we need to get school details by passing customer Id.
    		// We shouldn't use getCustomerByCustId() methos here.
    		Customer customer=(Customer)adminManager.get(Customer.class, getCustId());
    		if(!ObjectFunctions.isNullOrEmpty(customer)){
    			setCustomerName(customer.getOrganization());
    			setTempString(customer.getOrganizationFullAddress());
    		}
    		customer=null;
    		StringBuffer query = new StringBuffer("classSectionId=").append(getClassId()).append(" and eid=").append(getExamType()).append(" and custId=").append(getCustId()).append("  order by examDate asc");
    		setExamScheduleList(adminManager.getAll(ViewClassExamDetails.class, query.toString()));
    		String classNamexamType=StringFunctions.getReplaceAll(getSection()+"_"+getAnyTitle()," ","_");
            getResponse().setHeader("Content-Disposition","attachment; filename="+classNamexamType+"_ExamSchedules.pdf");
             query = null;
		}
       }
       catch(Exception ex)
       {
            log.error("Entering into 'catch block':"+ex.getMessage());
            ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
       }
       return SUCCESS;
    }
	
	
	//New Methods Implemented By Balu on 07/05/2013
	public void genaratecastsettings(PdfPTable defaultersHeaderReport,List<CastSettings> castSettingList, String[] genders,String fontPath) {
		try {
			for (int k = 0; k < genders.length; k++) {
				for (CastSettings castSettings : castSettingList) {
					if (k == 0)
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperWithBorder(castSettings.getCastName(), "#000",fontPath));
					else {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassWithColor(castSettings.getCastName(), "#000",fontPath));
					}
				}
				if (k == 0)
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperWithBorder("Total","#000", fontPath));
				else {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClassWithColor("Total","#000", fontPath));
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	//New Methods Implemented By Balu on 07/05/2013
	public void genarateGenders(PdfPTable defaultersHeaderReport,String fontPath, int size) {
		try {
			String[] genders = { "Male", "Female" };
			for (int k = 0; k < genders.length; k++) {
				if (k == 0)
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(genders[k], size + 1, fontPath));
				else {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJaspersForFemale(genders[k], size + 1, fontPath));
				}
			}
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("","#000", fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("", "#000", fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("", "#000", fontPath));
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	//New Methods Implemented By Balu on 07/05/2013
	public WritableCellFormat getCellFormat10(){
		WritableFont boldfont10 = null;
		WritableCellFormat cellFormat10 = null;
		try {
			
			boldfont10 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			cellFormat10 = new WritableCellFormat(boldfont10);
			boldfont10.setColour(Colour.WHITE);
			cellFormat10 = ExcelView.getUserFormattedCell(boldfont10, Colour.GREEN, false,false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.NONE, BorderLineStyle.NONE);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return cellFormat10;
	}
	//New Methods Implemented By Balu on 07/05/2013
	public WritableCellFormat getCellFormat8() {
		WritableFont boldfont8 = null;
		WritableCellFormat cellFormat8 = null;
		try {
			boldfont8 = new WritableFont(WritableFont.ARIAL, 8,WritableFont.BOLD, true);
			cellFormat8 = new WritableCellFormat(boldfont8);
			boldfont8.setColour(Colour.WHITE);
			cellFormat8 = ExcelView.getUserFormattedCell(boldfont8, Colour.GREEN, false,false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.NONE, BorderLineStyle.NONE);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return cellFormat8;
	}
	//New Methods Implemented By Balu on 07/05/2013
	public WritableCellFormat getCellFormatWht10() {
		WritableFont font10 = null;
		WritableCellFormat cellFormatWht10 = null;
		try {
			 font10 = new WritableFont(WritableFont.ARIAL, 10 ,WritableFont.BOLD);
	        font10.setColour(Colour.BLACK);
	        cellFormatWht10 = new WritableCellFormat(font10);
			cellFormatWht10=ExcelView.getUserFormattedCell(font10, Colour.WHITE, true, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return cellFormatWht10;
	}
		public WritableCellFormat getCellFormatWhtX(int x) {
			WritableFont font10 = null;
			WritableCellFormat cellFormatWht10 = null;
			try {
				 font10 = new WritableFont(WritableFont.ARIAL, x ,WritableFont.BOLD);
		        font10.setColour(Colour.BLACK);
		        cellFormatWht10 = new WritableCellFormat(font10);
				cellFormatWht10=ExcelView.getUserFormattedCell(font10, Colour.WHITE, true, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return cellFormatWht10;
		}
		public WritableCellFormat getCellFormatWhtXNoBold(int x) {
			WritableFont font10 = null;
			WritableCellFormat cellFormatWht10 = null;
			try {
				 font10 = new WritableFont(WritableFont.ARIAL, x);
		        font10.setColour(Colour.BLACK);
		        cellFormatWht10 = new WritableCellFormat(font10);
				cellFormatWht10=ExcelView.getUserFormattedCell(font10, Colour.WHITE, true, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return cellFormatWht10;
		}
	//New Methods Implemented By Balu on 07/05/2013
	public WritableCellFormat getMaleCell() {
		WritableFont maleFont = null;
		WritableCellFormat  maleCell = null;
		try {
			maleFont = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD);
			maleFont.setColour(Colour.BLACK);
    		maleCell= new WritableCellFormat(maleFont);
    		maleCell=ExcelView.getUserFormattedCell(maleFont, Colour.GRAY_25, true, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return maleCell;
	}
	//New Methods Implemented By Balu on 07/05/2013
	public WritableCellFormat getFemaleCell() {
		WritableFont femaleFont = null;
		WritableCellFormat  femaleCell = null;
		try {
			femaleFont = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD);
			femaleFont.setColour(Colour.BLACK);
    		femaleCell= new WritableCellFormat(femaleFont);
    		femaleCell=ExcelView.getUserFormattedCell(femaleFont, Colour.ICE_BLUE, true, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return femaleCell;
	}
	//New Methods Implemented By Balu on 07/05/2013
	public WritableCellFormat getCellFormat() {
		WritableFont font1 = null;
		WritableCellFormat cellFormat =null;
		try {
			font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			font1.setColour(Colour.WHITE);
			cellFormat=ExcelView.getUserFormattedCell(font1, Colour.GREEN, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return cellFormat;
	}
	@Actions( {@Action(value = "ajaxViewTeachNonTeachStaffAttendDetails", results = {@Result(location = "../admin/reports/ajaxViewTeachinAndNonTeachingRoles.jsp", name = "success") })})
	public String ajaxViewTeachNonTeachStaffAttendDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewTeachNonTeachStaffAttendDetails' method");
		}
	try {
		  ajaxTeacNonTeacStaffAttendDetails();
		} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	@Actions( {@Action(value = "ajaxTeachNonTeachStaffAttendDetails", results = {@Result(location = "../admin/reports/ajaxGetTeachinAndNonTeachingRoles.jsp", name = "success") })})
	public String ajaxTeacNonTeacStaffAttendDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxTeacNonTeacStaffAttendDetails' method");
		}
	try {
		getPlTitle();
		prepareTeachingRolesMap();
		getTeachingRoleMap().remove(getTeachingRoleMap().firstKey());
		prepareNonTeachingRolesMap(null);
		getNonTeachingRoleMap().remove(getNonTeachingRoleMap().firstKey());
		setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null, null,true,"",getClassId()));  //here getClassId used to academicyear have class wise holiday(CH).
		
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxTeachNonTeachStaffAttendReport", results = {}) })
	public String ajaxTeachNonTeachStaffAttendReport() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxTeachNonTeachStaffAttendReport' method");
			}
			if (getUserAcademicYearId() != 0) {
				AcademicYear academicYear=(AcademicYear) adminManager.get(AcademicYear.class,"id="+getUserAcademicYearId());
				Customer customer = getCustomerByCustId();
				String captureAttendanceForStaff = null;
				if("T".equalsIgnoreCase(academicYear.getCaptureAttendanceForStaff()))
					captureAttendanceForStaff = academicYear.getCaptureAttendanceForStaff();
				String[] montNames = getParamValue("monthNameIds").split(",");
				if("Excel".equalsIgnoreCase(getAnyId())) {
					ajaxStaffMonthlyAttendanceSheet(academicYear,customer,montNames);
				} else{
				Object[] totalWorkingDays = null;
				String fileName = "Staff&NonStaffAttendanceReport";
				PDFGenerator pDFGenerator = new PDFGenerator();
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
				pDFGenerator.getPdfWriter().setPageEvent(phfmj);
				pDFGenerator.getDocument().open();
				fileName = "Staff_Attendance_Report_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				pDFGenerator.getDocument().open();
				// creating pDF page event to set header and Footer to document
				PdfPTable mainTable = new PdfPTable(1);
				mainTable.setWidthPercentage(100);
				mainTable.setSplitLate(false);
				mainTable.getDefaultCell().setBorder(Rectangle.BOX);
				int width =0;
				if ("StaffAttendanceMonthly(Monthly)".equalsIgnoreCase(getPlTitle())) {
				 width = montNames.length;
				}else{
					if("Y".equalsIgnoreCase(academicYear.getUseBiometricForStaff()))
					{
						width = 8;
					}
					else
					{
						if("T".equalsIgnoreCase(captureAttendanceForStaff))
							width = 5;	
						else
							width = 4;		
					}
							
				}
				PdfPTable defaultersHeaderReport = new PdfPTable(width);
				defaultersHeaderReport.setWidthPercentage(100);
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					}
					if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					}
				}
				List staffList = null;
				if(!ObjectFunctions.isNullOrEmpty(getSelectedId())){
					String roleNames[] = getSelectedId().replace(",0)", "").replace("(","").split(",");
					if (getPlTitle().trim().equalsIgnoreCase("StaffAttendanceMonthly(Monthly)")) {
						staffList = staffManager.getAll(ViewStaffPersonAccountDetails.class, "roleName in "+ getSelectedId().replace(",0", "")+" and custId=" + getUserCustId()+ " and status='Y' and academicYearId<="+ academicYear.getId() +"' order by roleName group by rolename");
						if (!ObjectFunctions.isNullOrEmpty(staffList)) {
							if (!ObjectFunctions.isNullOrEmpty(montNames)) {
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("STAFF MONTHLY ATTENDANCE", width,fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Staff Name / Month Name", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Present Days/Working Days (%)",width, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("", 1, fontPath));
								if ("Y".equalsIgnoreCase(academicYear.getUseBiometricForStaff())) {
									ajaxBiometricStaffMonhlyAttendance(staffList,defaultersHeaderReport,montNames,fontPath);
								}else if("M".equalsIgnoreCase(academicYear.getManageStaffAttendanceBy())) 
								{
									for (String monthName : montNames) {
										if (!"0)".equalsIgnoreCase(monthName)) {
											totalWorkingDays = adminManager.get("select max(totalWorkingDays),accountId,rolename from vw_staffMonthlyAttendance where monthName="+ monthName.replace("(", "").replace(")", "")+ " and custId="+ getUserCustId()+ " and academicYearId="+  academicYear.getId()+ " group by accountId");
											if (!ObjectFunctions.isNullOrEmpty(totalWorkingDays)&& !ObjectFunctions.isNullOrEmpty(totalWorkingDays[0]))
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName.replace("('", "").replace("'", "").replace(")", "")+ "( W.Days = "+ totalWorkingDays[0].toString()+ " )", 1,fontPath));
											else
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName.replace("('", "").replace("'", "").replace(")", ""), 1,fontPath));
											totalWorkingDays = null;
										}
									}
									ajaxStaffMonhlyAttendance(staffList,defaultersHeaderReport,montNames,fontPath);
									
								}
								else if("D".equalsIgnoreCase(academicYear.getManageStaffAttendanceBy()))
								{
								 	 ajaxStaffMonhlyAttendanceForDaily(roleNames,defaultersHeaderReport,montNames,fontPath);
								}
							}
							
						}
						staffList = null;
					}
				else if (getPlTitle().trim().equalsIgnoreCase("StaffDailyAttendance(Daily)")) {
						String date=DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getStartDate());
						String presentVal = getParamValue("presentVal");
						String absentVal = getParamValue("absentVal");
						
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Attendance Date:",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(date, width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("STAFF WISE DAILY ATTENDANCE",width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Staff Name",1,fontPath));
						if("T".equalsIgnoreCase(captureAttendanceForStaff)){
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Morning Session",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Afternoon Session",1, fontPath));

						}else
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Status", 1,fontPath));

						if ("Y".equalsIgnoreCase(academicYear.getUseBiometricForStaff()))
						{
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("In Time", 1,fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Out Time", 1,fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Total Hours", 1,fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Early/Late Hours", 1,fontPath));
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Leave Request", 1,fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Leave Type", 1,fontPath));
						
						ajaxStaffDailyAttendance(roleNames,defaultersHeaderReport,date,fontPath,width,academicYear,captureAttendanceForStaff,presentVal,absentVal);
					}
				}
				mainTable.addCell(defaultersHeaderReport);
				pDFGenerator.getDocument().add(mainTable);
				pDFGenerator.getDocument().close();
				pDFGenerator = null;
				mainTable = null;
				defaultersHeaderReport = null;
				pDFGenerator = null;
				phfmj = null;
			}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	public String ajaxStaffMonthlyAttendanceSheet(AcademicYear academicYear,Customer customer,String[] monthNames){
		if (log.isDebugEnabled()) {
			log.debug("Entering AdminManager 'ajaxStaffMonthlyAttendanceSheet' method");
		}
		try {
			int monthId;
			int presentCount = 0;
			int absentCount = 0;
			double attPresentCount = 0.0;
			//int studentCount = 0;
			List<BigInteger> staffAbsentCount=null;
			Object[] totalWorkingDays = null;
			HashMap<Integer,Integer> toalWorkingMonthDays = new HashMap<Integer,Integer>();
			String captureAttendanceForStaff = null;
			if("T".equalsIgnoreCase(academicYear.getCaptureAttendanceForStaff()))
				captureAttendanceForStaff= academicYear.getCaptureAttendanceForStaff();
			if (StringFunctions.isNotNullOrEmpty(getSelectedId())) {
					String fileName = "Staff_MOnthly_Attendance_Report"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
					ExcelView excelView = new ExcelView();
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					//For School Address
					WritableCellFormat cellFormat8= getCellFormat8();
					//For School name
					WritableCellFormat cellFormat10= getCellFormat10();
					WritableCellFormat cellFormat =getCellFormat();
	    			excelView.setWorkSheetName("Staff_MOnthly_Attendance_Report");
	    			excelView.createWorkSheet(0);
	    			excelView.setDefaultFormat(excelView.getArial10format());
	    			if (!ObjectFunctions.isNullOrEmpty(customer)) {
			        	if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
					        excelView.getWs().mergeCells(0, 0, 6,1);
					    	excelView.getWs().addCell(new Label(0,0, customer.getOrganization(), cellFormat10));
			        	}
			        	if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
					    	excelView.getWs().mergeCells(0, 2, 6,2);
					    	excelView.getWs().addCell(new Label(0,2, customer.getCustomerFormattedAddress(), cellFormat8));
			        	}
			        }
			    	excelView.getWs().setColumnView(0,30);
			    	excelView.getWs().setColumnView(1,30);
			        excelView.getWs().mergeCells(0, 3, 6, 3);
					excelView.getWs().addCell(new Label(0,3, ""));
					excelView.getWs().mergeCells(0, 4, 6,4);
					excelView.getWs().addCell(new Label(0,4, "Staff_MOnthly_Attendance_Report", cellFormat));
	    		 	excelView.getWs().addCell(new Label(0,5, "Staff Role", excelView.getWrapCellFormat()));
		    		excelView.getWs().addCell(new Label(1,5, "Staff Name", excelView.getWrapCellFormat()));
					int cellStart = 2;
					int totWorkingDays=0;
					int totalWorkingDays1=0;
					int dayTotalWorkingDays=0;
					int monthTotalDays = 0;
					int classWiseTotalDays = 0;
					int daywiseTotalDays = 0;
		        	String[] types = { "Present", "Leave Type"};
					String[] leaveTypes = { "Casual", "Sick","Pay","Total"};
					int cellCount = 2;
					int cellNum = 2;
					int newRow = 6;
		    		for (String monthName : monthNames) {	
		    			if (!"0)".equalsIgnoreCase(monthName)) {
		    				excelView.getWs().mergeCells(cellStart, 5, cellStart+4,5);
		    				excelView.getWs().setColumnView(cellStart,10);
		    				monthId = getMonthNumberFromMonthName(monthName.replace("(","").replace("'", ""));
			    			if(academicYear.getManageStaffAttendanceBy().equalsIgnoreCase("M") && !"0)".equalsIgnoreCase(monthName)) {
			    				totalWorkingDays = adminManager.get("select max(totalWorkingDays),accountId,rolename from vw_staffmonthlyattendanceDetails where monthName="+ monthName.replace("(", "").replace(")", "")+ " and custId="+ getUserCustId()+ " and academicYearId<="+  academicYear.getId()+ " group by accountId");
								if(!ObjectFunctions.isNullOrEmpty(totalWorkingDays) && !ObjectFunctions.isNullOrEmpty(totalWorkingDays[0])) {
									totWorkingDays=totWorkingDays+Integer.valueOf(totalWorkingDays[0].toString());
									toalWorkingMonthDays.put(monthId, Integer.valueOf(totalWorkingDays[0].toString()));
									excelView.getWs().addCell(new Label(cellStart,5,monthName.replace("(","").replace("'", "")+"( Working Days = " + totalWorkingDays[0].toString() + " )", excelView.getWrapCellFormat()));
								} else {
									excelView.getWs().addCell(new Label(cellStart,5,monthName.replace("(","").replace("'", ""), excelView.getWrapCellFormat()));
									toalWorkingMonthDays.put(monthId, 0);
								}
								totalWorkingDays= null;
							}else  {
								excelView.getWs().addCell(new Label(cellStart,5,"", excelView.getWrapCellFormat()));
									if("CH".equalsIgnoreCase(academicYear.getHolidayStatus())){
										List<Object[]>  days = adminManager.getAll("select holidayDate from schoolHolidays where custId="+customer.getId()+" and academicYearId="+academicYear.getId()+" and monthId="+monthId+" group by holidayDate");
										if(!ObjectFunctions.isNullOrEmpty(days)){
											totalWorkingDays1=totalWorkingDays1+days.size();
											days=null;
										}
										monthTotalDays = getActualMonthDaysByMonthId(monthId);
									if (totalWorkingDays1>0) {
										totalWorkingDays1= monthTotalDays - totalWorkingDays1;
									}
									else{
										totalWorkingDays1= monthTotalDays;
									}
									dayTotalWorkingDays=dayTotalWorkingDays+totalWorkingDays1;
									classWiseTotalDays=classWiseTotalDays+dayTotalWorkingDays;
									}else{
										totalWorkingDays1= getWorkingDaysByMonth(monthId,academicYear, getClassId());
										daywiseTotalDays=daywiseTotalDays+totalWorkingDays1;
									}
								if (totalWorkingDays1 > 0 || dayTotalWorkingDays>0){
									if("CH".equalsIgnoreCase(academicYear.getHolidayStatus())){
										excelView.getWs().addCell(new Label(cellStart,5,monthName.replace("(","").replace("'", "")+"( Working Days = " + dayTotalWorkingDays + " )", excelView.getWrapCellFormat()));
									}else{
										excelView.getWs().addCell(new Label(cellStart,5,monthName.replace("(","").replace("'", "")+"( Working Days = " + totalWorkingDays1 + " )", excelView.getWrapCellFormat()));
									}
								}else
									excelView.getWs().addCell(new Label(cellStart,5,monthName.replace("(","").replace("'", ""), excelView.getWrapCellFormat()));
							}
			    			dayTotalWorkingDays=0;
			    			totalWorkingDays1=0;
			    			
				    		excelView.getWs().mergeCells(0, 6,1,6);
							excelView.getWs().mergeCells(cellNum,newRow,cellNum, newRow+1);
							excelView.getWs().addCell(new Label(cellNum,newRow, "Present Count ", excelView.getWrapCellFormat()));
				    		excelView.getWs().addCell(new Label(cellNum+1,newRow, "Leave Type ", excelView.getWrapCellFormat()));
				    		excelView.getWs().mergeCells(cellNum+1, newRow,cellNum+4, newRow);
				    		
				    		cellCount++;
				    		for(int j = 0; j < leaveTypes.length; j++) {
								excelView.getWs().addCell(new Label(cellCount, 7, leaveTypes[j],excelView.getWrapCellFormat()));
								cellCount++;
							} 
			    			cellStart= cellStart+5;
			    			cellNum=cellNum+5;
		    			}
					}
		    		excelView.getWs().setColumnView(cellStart,30);
		    		excelView.getWs().setColumnView(cellStart+1,30);
		    		if (totWorkingDays > 0 || classWiseTotalDays>0 || daywiseTotalDays>0){
			    		if(academicYear.getManageStaffAttendanceBy().equalsIgnoreCase("M")){
			    				excelView.getWs().addCell(new Label(cellStart,5, "Total Working Days ("+totWorkingDays+")", excelView.getWrapCellFormat()));
			    		}else{
			    			if("CH".equalsIgnoreCase(academicYear.getHolidayStatus()))
			    				excelView.getWs().addCell(new Label(cellStart,5, "Total Working Days ("+classWiseTotalDays+")", excelView.getWrapCellFormat()));
			    			else 
			    				excelView.getWs().addCell(new Label(cellStart,5, "Total Working Days ("+daywiseTotalDays+")", excelView.getWrapCellFormat()));
			    		}
		    		}else
		    			excelView.getWs().addCell(new Label(cellStart,5, "Total Working Days", excelView.getWrapCellFormat()));
		    		excelView.getWs().addCell(new Label(cellStart+1,5, " Attendance %", excelView.getWrapCellFormat()));
		    		cellStart=0;
		    		//studentCount = adminManager.getCount("vw_studentDetails", "classSectionId="+classId+" and academicYearId="+getUserAcademicYearId() +" and status='Y'");
		    		List<ViewStaffPersonAccountDetails> staffList = staffManager.getAll(ViewStaffPersonAccountDetails.class, "roleName in "+ getSelectedId().replace(",0", "")+" and custId=" + getUserCustId()+ " and status='Y' and academicYearId<="+ academicYear.getId() +"' order by roleName group by rolename");
		    		int row = 8;
		    		int  morningAtten= 0;
		    		int  afternoonAtten= 0;
					double attAbsentCount =0.0;
					for(ViewStaffPersonAccountDetails staff:staffList){
						int col = 2;
						excelView.getWs().addCell(new Label(0,row, String.valueOf(staff.getRoleName()), excelView.getDefaultFormat()));
						excelView.getWs().addCell(new Label(1,row, staff.getPersonFullName(), excelView.getDefaultFormat()));
						double presentPercentage =0;
						int totalPresentDays=0;
						int totMonthDays=0;
						double attTotalPresentDays = 0.0;
						for (String monthName : monthNames) { 
							if (!ObjectFunctions.isNullOrEmpty(monthName)) {
								if (!"0)".equalsIgnoreCase(monthName)) {
									monthId = getMonthNumberFromMonthName(monthName.replace("(","").replace("'", ""));
									if (monthId > 0){
										if(academicYear.getManageStaffAttendanceBy().equalsIgnoreCase("D")) {
											if (!ObjectFunctions.isNullOrEmpty(monthName.replace("('", "").replace("'", ""))) { 
												 monthId = getMonthNumberFromMonthName(monthName.replace("('", "").replace("'", ""));
												 if("CH".equalsIgnoreCase(academicYear.getHolidayStatus())){
													 List<Object[]>  days = adminManager.getAll("select holidayDate from schoolHolidays where custId="+customer.getId()+" and academicYearId="+academicYear.getId()+" and monthId="+monthId+" group by holidayDate");
														if(!ObjectFunctions.isNullOrEmpty(days)){
															totalWorkingDays1=totalWorkingDays1+days.size();
															days=null;
														}
														monthTotalDays = getActualMonthDaysByMonthId(monthId);
														if (totalWorkingDays1>0) {
															totalWorkingDays1= monthTotalDays - totalWorkingDays1;
														}
														else{
															totalWorkingDays1= monthTotalDays;
														}
													}else{
														totalWorkingDays1= getWorkingDaysByMonth(monthId,academicYear, getClassId());
													}
													absentCount = adminManager.getCount("vw_StaffDailyAttendanceDetails", "accountId="+staff.getAccountId()+" and month='" + monthId+ "'  and present='"+ "N'");
														log.debug(staff.getAccountId());
														afternoonAtten = adminManager.getCount("vw_StaffDailyAttendanceDetails", "accountId="+staff.getAccountId()+" and month='" + monthId+ "' and afternoonSession='"+ "N'");
														attAbsentCount = (double)(absentCount+afternoonAtten)/2;
														attPresentCount = (double)totalWorkingDays1 - attAbsentCount;
														attTotalPresentDays =attTotalPresentDays+(attPresentCount);
														totMonthDays=totMonthDays + totalWorkingDays1;

													attAbsentCount = 0.0;
													totalWorkingDays1=0;
													absentCount=0;
											}
										} else {
											monthTotalDays = toalWorkingMonthDays.get(monthId);
											totMonthDays=totMonthDays+monthTotalDays;
											Object[] days = adminManager.get("select totalWorkingDays,noOfPresentDays from vw_staffmonthlyattendanceDetails where custId="+customer.getId()+" and academicYearId<="+academicYear.getId()+" and accountId="+staff.getAccountId()+" and month="+monthId);
											if(!ObjectFunctions.isNullOrEmpty(days)){
												attPresentCount=attPresentCount+Double.valueOf(days[1].toString());
												attTotalPresentDays=(double)attTotalPresentDays+attPresentCount;
											}
										}
									if(presentCount>0 || attPresentCount>0.0){
										if(attPresentCount>0.0){
											String number = String.valueOf(attPresentCount).substring(String.valueOf(attPresentCount).indexOf(".")).substring(1);
											if(Long.valueOf(number.toString()) == 0){
												excelView.getWs().addCell(new Label(col,row,String.valueOf((int)attPresentCount), excelView.getDefaultFormat()));
											}else
												excelView.getWs().addCell(new Label(col,row,String.valueOf(attPresentCount), excelView.getDefaultFormat()));
										}else
											excelView.getWs().addCell(new Label(col,row,String.valueOf(presentCount), excelView.getDefaultFormat()));
									}else{
										excelView.getWs().addCell(new Label(col,row,"-", excelView.getDefaultFormat()));
									}
									List<Leave> leavesList=studentManager.getAll(Leave.class,  "accountId="+staff.getAccountId()+" and MONTH(startDate)="+ monthId+ " and MONTH(endDate)="+monthId+" and academicYearId="+academicYear.getId()+" and leaveStatus='"+Constants.ACTIVE_STATUS+"' ");
									if(ObjectFunctions.isNotNullOrEmpty(leavesList)){
										double totalCount=0;
										double clCount=0;
										double slCount=0;
										double plCount=0;
										for(Leave acceptedSettings: leavesList){
											if(!ObjectFunctions.isNullOrEmpty(acceptedSettings)){
												if("Cl".equalsIgnoreCase(acceptedSettings.getLeaveType())){
													clCount=clCount+acceptedSettings.getLeavesCount();
													totalCount=totalCount+acceptedSettings.getLeavesCount();
												}else if("SL".equalsIgnoreCase(acceptedSettings.getLeaveType())){
													slCount=slCount+acceptedSettings.getLeavesCount();
													totalCount=totalCount+acceptedSettings.getLeavesCount();
												}else if("EL".equalsIgnoreCase(acceptedSettings.getLeaveType())){
													plCount=plCount+acceptedSettings.getLeavesCount();
													totalCount=totalCount+acceptedSettings.getLeavesCount();
												} 
											}
										}
										if(clCount>0)
											excelView.getWs().addCell(new Label(col+1, row, String.valueOf(clCount),excelView.getWrapCellFormat()));
										else
											excelView.getWs().addCell(new Label(col+1, row, "-",excelView.getWrapCellFormat()));
										if(slCount>0)
											excelView.getWs().addCell(new Label(col+2, row, String.valueOf(slCount),excelView.getWrapCellFormat()));
										else
											excelView.getWs().addCell(new Label(col+2, row, "-",excelView.getWrapCellFormat()));
										if(plCount>0)
											excelView.getWs().addCell(new Label(col+3, row, String.valueOf(plCount),excelView.getWrapCellFormat()));
										else
											excelView.getWs().addCell(new Label(col+3, row, "-",excelView.getWrapCellFormat()));
										if(totalCount>0)
											excelView.getWs().addCell(new Label(col+4, row, String.valueOf(totalCount),excelView.getWrapCellFormat()));
										else
											excelView.getWs().addCell(new Label(col+4, row, "-",excelView.getWrapCellFormat()));
										totalCount=0;
										clCount=0;
										slCount=0;
										plCount=0;
									}else{
										 excelView.getWs().addCell(new Label(col+1, row, "-",excelView.getWrapCellFormat()));
										 excelView.getWs().addCell(new Label(col+2, row, "-",excelView.getWrapCellFormat()));
										 excelView.getWs().addCell(new Label(col+3, row, "-",excelView.getWrapCellFormat()));
										 excelView.getWs().addCell(new Label(col+4, row, "-",excelView.getWrapCellFormat()));
									}
									presentCount=0;
									attPresentCount = 0.0;
								 }
								 col= col+5;
								}
							}
							staffAbsentCount=null;
							monthName=null;
						}
						if(totalPresentDays>0 || attTotalPresentDays>0.0){
							if(attTotalPresentDays>0.0)
								excelView.getWs().addCell(new Label(col,row,String.valueOf(attTotalPresentDays), excelView.getDefaultFormat()));
							else
								excelView.getWs().addCell(new Label(col,row,String.valueOf(totalPresentDays), excelView.getDefaultFormat()));
						}else
							excelView.getWs().addCell(new Label(col,row,"-", excelView.getDefaultFormat()));
						if((totalPresentDays>0 && totMonthDays>0) || (attTotalPresentDays>0.0 && totMonthDays>0)){
							if(attTotalPresentDays>0.0)
								presentPercentage = roundTwoDecimals((attTotalPresentDays / (double) totMonthDays) * 100);
							else
								presentPercentage = roundTwoDecimals(((double) totalPresentDays / (double) totMonthDays) * 100);

							excelView.getWs().addCell(new Label(col+1,row,String.valueOf(presentPercentage), excelView.getDefaultFormat()));
						}else{
							excelView.getWs().addCell(new Label(col+1,row,"-", excelView.getDefaultFormat()));
						}
						totalPresentDays=0;
						totMonthDays=0;
						dayTotalWorkingDays=0;
						attTotalPresentDays = 0.0;
			    		row ++;
			    		
					}staffList=null;
					row=0;
					excelView.getWb().write();
					excelView.getWb().close();
			} 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "ajaxDownVehicleMaintenance", results = {}) })
	public void ajaxDownVehicleMaintenance() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownVehicleMaintenance' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				AcademicYear academicYear=(AcademicYear) adminManager.get(AcademicYear.class,"id="+getUserAcademicYearId());
					String fileName = "RoleWiseStaffDetails "+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
					log.debug("Filename: "+fileName);
					ExcelView excelView = new ExcelView();
					WritableCellFormat cellFormat = null;
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					WritableFont font = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
					Customer customer = getCustomerByCustId();
					WritableFont font1 = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
					font1.setColour(Colour.WHITE);
					cellFormat = ExcelView.getUserFormattedCell(font1,Colour.GREEN, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);
					cellFormat = ExcelView.getUserFormattedCell(font,Colour.AQUA, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);

					// For School Name
					excelView.setWorkSheetName("RoleWiseStaffDetails");
					excelView.createWorkSheet(0);

					excelView.getWs().setColumnView(0, 20);
					excelView.getWs().setColumnView(1, 20);
					excelView.getWs().setColumnView(2, 20);
					excelView.getWs().setColumnView(3, 20);
					excelView.getWs().setColumnView(4, 20);
					excelView.getWs().setColumnView(5, 20);
					excelView.getWs().setColumnView(6, 20);
					excelView.getWs().setColumnView(7, 20);
					excelView.getWs().setColumnView(8, 20);
					excelView.getWs().setColumnView(9, 20);
					excelView.getWs().setColumnView(10, 20);
					excelView.getWs().setColumnView(11, 20);
					excelView.getWs().setColumnView(12, 20);
					excelView.getWs().setColumnView(13, 20);
					excelView.getWs().setColumnView(14, 20);
					excelView.getWs().setColumnView(15, 20);
					excelView.getWs().setColumnView(16, 20);
					excelView.getWs().setColumnView(17, 20);
					excelView.getWs().setColumnView(18, 20);
					excelView.getWs().setColumnView(19, 20);
					excelView.getWs().setColumnView(20, 20);
					excelView.getWs().setColumnView(21, 20);
					excelView.getWs().setColumnView(22, 20);
					excelView.getWs().setColumnView(23, 20);
					excelView.getWs().setColumnView(24, 20);
					excelView.getWs().setColumnView(25, 20);
					excelView.getWs().setColumnView(26, 20);
					excelView.getWs().setColumnView(27, 20);
					excelView.getWs().setColumnView(28, 20);
					excelView.getWs().setColumnView(29, 20);
					excelView.getWs().setColumnView(30, 20);
					excelView.getWs().setColumnView(31, 20);
					excelView.getWs().setColumnView(32, 20);
					excelView.getWs().setColumnView(33, 20);
					excelView.getWs().setColumnView(34, 20);
					excelView.getWs().setColumnView(35, 20);
					CellView cv = new CellView();
					cv.setHidden(true);
					excelView.getWs().setColumnView(35, cv);
					cv = null;
					excelView.setDefaultFormat(excelView.getArial10format());
					schoolAddresDetailsOnlyForExcel(excelView, 35);
					excelView.getWs().mergeCells(0, 1, 17, 1);
					excelView.getWs().addCell(new Label(0, 0, getCustomerByCustId().getCustomerShortName(),cellFormat));
					excelView.getWs().addCell(new Label(0, 1, "Location"+getCustomer().getAddress().getAddressLine1(),cellFormat));
					excelView.getWs().addCell(new Label(0, 7, "ROLE WISE STAFF DETAILS",cellFormat));
					excelView.getWs().addCell(new Label(0, 8, "Role", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(1, 8, "First Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(2, 8, "Last Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(3, 8, "Initial", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(4, 8, "Date of Birth ", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(5, 8, "Gender", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(6, 8, "Marital status", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(7, 8, "Experience", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(8, 8, "Date of Joining", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(9, 8, "Qualification", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(10, 8, "Salary", excelView.getUsermore10BoldformatGreenBgClr()));

					excelView.getWs().addCell(new Label(11, 8, "Email ID", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(12, 8, "Mobile Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(13, 8, "Adddress Line 1", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(14, 8, "Adddress Line 2", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(15, 8, "City", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(16, 8, "State", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(17, 8, "Pin code", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(18, 8, "Blood Group", excelView.getUsermore10BoldformatGreenBgClr()));

					excelView.getWs().addCell(new Label(19, 8, "PAN Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(20, 8, "GPF No", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(21, 8, "Office Phone No", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(22, 8, "Res .phone No", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(23, 8, "Designation", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(24, 8, "Religion", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(25, 8, "MOTHERTOUNG", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(26, 8, "Nationality", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(27, 8, "Community", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(28, 8, "Cast Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(29, 8, "Bank Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(30, 8, "Bank A/c Number", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(31, 8, "Bank Branch Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(32, 8, "Family Doctor", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(33, 8, "Preferred Hospital", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(34, 8, "BioMetric Id", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(35, 8, "Staff Id", excelView.getUsermore10BoldformatGreenBgClr()));
					int columnStart = 10;
							List<Object[]> staffDetails = null;
							if(customer.isHostelModuleStatus() && customer.isTransportModuleStatus())
							{
								staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherToungId,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='"+ academicYear.getStatus() +"' order by roleName");
								
							}
							else if(customer.isHostelModuleStatus())
							{
								staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherToungId,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='"+ academicYear.getStatus() +"' and roleName!='ROLE_TRANSPORTFINANCE' and roleName!='ROLE_TRANSPORT' and roleName!='ROLE_CONDUCTOR' and roleName!='ROLE_DRIVER' and roleName!='ROLE_HELPER' order by roleName");
							}
							else if(customer.isTransportModuleStatus())
							{
								staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherToungId,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='"+ academicYear.getStatus() +"' and roleName!='ROLE_HOSTEL' and roleName!='ROLE_HOSTELFINANCE' order by roleName");	
							}
							else
							{
								staffDetails = adminManager.getAll("select roleName,firstName,lastName,middleName,dateOfBirth,gender,maritalStatus,experience,dateofJoining,qualification1,salary,email,mobileNumber,addressLine1,addressLine2,city,stateName,postalCode,bloodGroup,panNumber,gpfNumber,officeNumber,phoneNumber,designation,religionId,motherToungId,nationality,castId,subCastId,bankName,bankAccountNumber,bankBranchName,familyDoctor,prefferedHospital,bioMetricId,staffId from vw_staffDetails where custId="+ getUserCustId()+ " and status='Y' and academicYearStatus='Y' and accountExpired='N' and academicYearStatus='"+ academicYear.getStatus() +"' and roleName!='ROLE_TRANSPORTFINANCE' and roleName!='ROLE_TRANSPORT' and roleName!='ROLE_CONDUCTOR' and roleName!='ROLE_DRIVER' and roleName!='ROLE_HELPER' and roleName!='ROLE_HOSTEL' and roleName!='ROLE_HOSTELFINANCE' order by roleName");
							}
							
							if (!ObjectFunctions.isNullOrEmpty(staffDetails)) {
								for (Object[] object : staffDetails) {
									int cellStart = 0;
									if (!ObjectFunctions.isNullOrEmpty(object)) {
										for (int l = 0; l < object.length; l++) {
											if (!ObjectFunctions.isNullOrEmpty(object[l])) {
												if (l == 0) {
													excelView.getWs().addCell(new Label(0,columnStart,object[l].toString()));
												} else {
											    	if (l == 4) {
											    		Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, object[l].toString());
											    		setTodayDate(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate));
											    		excelView.getWs().addCell(new Label(cellStart,columnStart,getTodayDate()));
											    	}
											    	else if(l == 8){
											    		Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, object[l].toString());
											    		setTodayDate(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate));
											    		excelView.getWs().addCell(new Label(cellStart,columnStart,getTodayDate()));
											    	}
											    	else if(l == 10){
											    		excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString().replaceAll("(?<=^\\d+)\\.0*$", "")));
											    	}
											    	else if(l == 16){
											    		Blank sheetxls = new Blank(cellStart,columnStart);
														WritableCellFeatures wcf = new WritableCellFeatures();
															statesList= adminManager.getAll("select stateName from State");
															if(!ObjectFunctions.isNullOrEmpty(statesList)){
																 wcf.setDataValidationList(statesList);
																    sheetxls.setCellFeatures(wcf);
																    excelView.getWs().addCell(sheetxls);
															}
															 sheetxls=null;
															 wcf=null;
															 excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString(),excelView.getWrapCellFormat()));	
											    	}
											    	else if (l == 25 || l == 24) {
											    		if(!StringFunctions.isNullOrEmpty(object[l].toString())){
														    CommonType studentType = (CommonType) adminManager.get(CommonType.class," id="+Long.valueOf(object[l].toString()));
														    if (!ObjectFunctions.isNullOrEmpty(studentType)) {
															excelView.getWs().addCell(new Label(cellStart,columnStart,studentType.getSkillTypeName()));
														    }
											    		}
													} 
												    else if (l == 27) {
												    	if(!StringFunctions.isNullOrEmpty(object[l].toString())){
														    CastSettings studentCast = (CastSettings) adminManager.get(CastSettings.class," id="+Long.valueOf(object[l].toString()));
														    if (!ObjectFunctions.isNullOrEmpty(studentCast)) {
															excelView.getWs().addCell(new Label(cellStart,columnStart,studentCast.getCastName()));
													    }
												    }
													} 
													 else if (l == 28) {
														 if(!StringFunctions.isNullOrEmpty(object[l].toString())){
														    SubCastSettings studentSubCast = (SubCastSettings) adminManager.get(SubCastSettings.class," id="+ Long.valueOf(object[l].toString()));
														    if (!ObjectFunctions.isNullOrEmpty(studentSubCast)) {
															excelView.getWs().addCell(new Label(cellStart,columnStart,studentSubCast.getSubCastName()));
														    }
														 }
														}else {
													    excelView.getWs().addCell(new Label(cellStart,columnStart,object[l].toString()));
														}
												}
											}
											 else {
												 if(l == 16){
											    		Blank sheetxls = new Blank(cellStart,columnStart);
														WritableCellFeatures wcf = new WritableCellFeatures();
															statesList= adminManager.getAll("select stateName from State");
															if(!ObjectFunctions.isNullOrEmpty(statesList)){
																 wcf.setDataValidationList(statesList);
																    sheetxls.setCellFeatures(wcf);
																    excelView.getWs().addCell(sheetxls);
															}
															 sheetxls=null;
															 wcf=null;
													excelView.getWs().addCell(new Label(cellStart, columnStart,""));
												 }
												}
											cellStart++;
										}
										columnStart++;
										cellStart = 0;
									}
								} 
					}
					excelView.getWb().write();
					excelView.getWb().close();
				}  
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	/********************************************************************
	 * version		Date              	Name               Description
	 * ========     ===========     	============       ==================
	 * 1.0			Jan 06, 2014		Seshu			   Display month names. If current day does not exceeds academic planner end date we are displaying upto current month names.
	 * 														If current day exceeds acadmeic planner end date display all months of a academic planner. 
	/********************************************************************/	
	@Action(value = "ajaxDoViewMaintenanceMonths", results = { @Result(location = "../admin/reports/ajaxDoViewMaintenanceMonths.jsp", name = "success") })
     public String ajaxDoViewMaintenanceMonths() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoViewMaintenanceMonths' method");
		}
		try {			 
			setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null, null,true,"", getClassId())); //here getClassId used to academicyear have class wise holiday(CH).
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
  * Date              Name               Description
  * ========          ============       ==================
  * Dec 30, 2013	  Seshu				 Code Refactor.
 /********************************************************************/
	 @Action(value = "ajaxGetTransportMaintenance", results = {@Result(location = "../admin/reports/ajaxDoViewMaintenanceMonths.jsp", name = "success") })
		public String ajaxGetTransportMaintenance() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetTransportMaintenance' method");
			}
			try{
				if(StringFunctions.isNotNullOrEmpty(getAnyTitle())){
					String[] montNames= getAnyTitle().split(",");
					Customer customer = getCustomerByCustId();
					if(!ObjectFunctions.isNullOrEmpty(customer) && StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName())){
						IXDocReport report = null;
						InputStream  templateFile= null;
						StringBuffer studentDOCXFilePath = null;
						ZipOutputStream zipOutStream = new ZipOutputStream(getResponse().getOutputStream());
						getResponse().setContentType("application/zip");
						getResponse().addHeader("Content-Disposition", "attachment; filename=Transport_Maintenance.zip");
						StringBuffer vehicleMaintananceFilePath = new StringBuffer("userFiles/VehicleMaintenance/");
						StringBuffer generatedVehiclesFilePath = new StringBuffer(vehicleMaintananceFilePath).append(customer.getCustomerShortName()).append("/").append("temp/");
						File outFile = new File(getSession().getServletContext().getRealPath(generatedVehiclesFilePath.toString())); 
						FileUtils.deleteDirectory(outFile);// Removes existing files
						outFile.mkdirs(); // If directories are not available it creates directories
						File file = new File(getSession().getServletContext().getRealPath(vehicleMaintananceFilePath.append("VehicleMaintenance.docx").toString()));
						if(file.exists()){
							templateFile= new FileInputStream(file);
							report = XDocReportRegistry.getRegistry().loadReport( templateFile, TemplateEngineKind.Velocity );
							//List<TransportMaintenance> transportMaintananceVehicles= adminManager.getAll(TransportMaintenance.class," (academicYearId="+getUserAcademicYearId()+" and vehicleAcademicDetailId !=0 ) group by vehicleAcademicDetailId");
							List<Object[]> transportMaintananceVehiclesObj = adminManager.getAll("select DISTINCT vehicleAcademicDetailId,id from transportMaintenance where (academicYearId="+ getUserAcademicYearId()+" and vehicleAcademicDetailId !=0)");
							if(ObjectFunctions.isNotNullOrEmpty(transportMaintananceVehiclesObj)){
								int currentMonthId=0;
								String monthDate=null;
								int prevMonthId=0;
								IContext context = null;
								OutputStream out = null;
								ViewVehicleMaintenanceByMonth vehicleMaintananceDetail = null;
								ViewVehicleMaintenanceByMonth vwVehicleMaintenaceByPrevMonth = null;
								for(Object[] maintananceVehicleObj : transportMaintananceVehiclesObj)
								{
									 if(!ObjectFunctions.isNullOrEmpty(maintananceVehicleObj))
									 {
										 if(!ObjectFunctions.isNullOrEmpty(maintananceVehicleObj[1]))
										 {
											 for(String monthName : montNames){
													currentMonthId = getMonthNumberFromMonthName(monthName); 
													 if(currentMonthId == 2)
														 monthDate="01 - " + monthName +" to 27 -" + monthName; 
													 else if(currentMonthId== 1 || currentMonthId== 3 || currentMonthId== 5 || currentMonthId== 7 || currentMonthId== 8 || currentMonthId== 10 || currentMonthId== 12)
														 monthDate="01 - " + monthName +" to 31 -" + monthName;
													 else
														 monthDate="01 - " + monthName +" to 30 -" + monthName;
													 if(currentMonthId ==1)
														 prevMonthId=12;
													 else
														 prevMonthId=currentMonthId-1;
													 vehicleMaintananceDetail = (ViewVehicleMaintenanceByMonth)adminManager.get(ViewVehicleMaintenanceByMonth.class, "custId="+customer.getId()+" and academicYearId="+getUserAcademicYearId()+" and vehicleAcademicDetailId='"+maintananceVehicleObj[0].toString()+"' and monthId="+currentMonthId);
													 if(!ObjectFunctions.isNullOrEmpty(vehicleMaintananceDetail)){
														 vehicleMaintananceDetail.setCustomerName(customer.getOrganization());
														 vehicleMaintananceDetail.setMonthDate(monthDate);
														 vwVehicleMaintenaceByPrevMonth  = (ViewVehicleMaintenanceByMonth)adminManager.get(ViewVehicleMaintenanceByMonth.class, "custId="+customer.getId()+" and academicYearId="+getUserAcademicYearId()+" and vehicleAcademicDetailId='"+maintananceVehicleObj[0].toString()+"' and monthId="+prevMonthId);
														 if(!ObjectFunctions.isNullOrEmpty(vwVehicleMaintenaceByPrevMonth)){
															 if(ObjectFunctions.isNullOrEmpty(vehicleMaintananceDetail))
																 vehicleMaintananceDetail = new  ViewVehicleMaintenanceByMonth();
															 vehicleMaintananceDetail.setPrevClosingReading(vwVehicleMaintenaceByPrevMonth.getClosingReading());
															 vehicleMaintananceDetail.setPrevOpeningReading(vwVehicleMaintenaceByPrevMonth.getOpeningReading());
															 vehicleMaintananceDetail.setPrevTotalKms(vwVehicleMaintenaceByPrevMonth.getTotalKms());
															 vehicleMaintananceDetail.setPrevOilBalance(vwVehicleMaintenaceByPrevMonth.getOilBalance());
															 vehicleMaintananceDetail.setPrevOilConsumed(vwVehicleMaintenaceByPrevMonth.getOilConsumed());
															 vehicleMaintananceDetail.setPrevOilPurchased(vwVehicleMaintenaceByPrevMonth.getOilPurchased());
															 vehicleMaintananceDetail.setPrevPerLtrKms(vwVehicleMaintenaceByPrevMonth.getPerLtrKms());
															 vehicleMaintananceDetail.setPrevMonthName(vwVehicleMaintenaceByPrevMonth.getMonthName());
														 }
													 }
													 if(!ObjectFunctions.isNullOrEmpty(vehicleMaintananceDetail)){
														 try{
															studentDOCXFilePath = new StringBuffer(generatedVehiclesFilePath).append(vehicleMaintananceDetail.getName()).append(vehicleMaintananceDetail.getMonthName()).append(".doc");
															context = report.createContext();
														   	context.put( "transport", vehicleMaintananceDetail);
														   	out = new FileOutputStream(new File(getSession().getServletContext().getRealPath(studentDOCXFilePath.toString())));
											                report.process(context, out);
										            	}catch (Exception ex) {
										            		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
										            		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
														}finally{
															out.close();
														}
													 }
													vehicleMaintananceDetail = null;
														monthName = null;
												}  
										 }
										 
									 }
									
						            	studentDOCXFilePath = null;
						            	maintananceVehicleObj=null;
									}
								}else{
									studentDOCXFilePath = new StringBuffer(generatedVehiclesFilePath).append("readMe.doc");
									adminManager.writeToFile("Transport maintenance details not found. Please add details and generate report.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
								}
							transportMaintananceVehiclesObj = null;
							}else{
								studentDOCXFilePath = new StringBuffer(generatedVehiclesFilePath).append("readMe.doc");
								adminManager.writeToFile("Template not found. Please contact Eazy School support team.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
							}
							//For generating zip file
							File directory = new File(getSession().getServletContext().getRealPath(generatedVehiclesFilePath.toString()));
							StringFunctions.zipFiles(directory,zipOutStream);
							zipOutStream = null;
							generatedVehiclesFilePath = null;
					 		report = null;
					 		outFile = null;
					 		montNames = null;
						}
				}
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
		@Actions( {
			@Action(value = "ajaxDateWiseFeeCollection", results = {@Result(location = "../admin/reports/ajaxViewSatffDailyAttendance.jsp", name = "success") }),
			@Action(value = "ajaxDoUserWiseFeeCollection", results = {@Result(location = "../schoolfee/reports/ajaxUserWiseFeeCollection.jsp", name = "success") }),
			@Action(value = "ajaxStaffDailyAttendDetails", results = {@Result(location = "../admin/reports/ajaxViewSatffDailyAttendance.jsp", name = "success") }) })
		public String ajaxStaffDailyAttendDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxStaffDailyAttendDetails' method");
			}
		try {
			getPlTitle().trim();
			setAttendanceDate(DateFormatter.formatDate(DateFormatter.MM_DD_YYYY_PATTERN1,new Date()));
			checkStudyClassHavingStudentsOrNot();
			
			if("UsereWiseFeeCollection".equalsIgnoreCase(getPlTitle()))
			{
				setObjectList(adminManager.getViewStaffDetailsByRoleName(Constants.SCHOOL_FINANCE, getUserCustId(),Constants.YES_STRING));
				
			}
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			/*@Ganesh : This below method wheather user have any pending amount from previous academic year.*/
			checkPreviousAcademicYearPensingStudentFee();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
		}
		
	
	public void ajaxStaffMonhlyAttendance(List<ViewStaffPersonAccountDetails> staffList,PdfPTable defaultersHeaderReport,String[] montNames,String fontPath) throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStaffMonhlyAttendance' method");
		}
		try {
		 	int width = montNames.length;
			List<Object[]> satffrolewiseattendance = null;
			for (ViewStaffPersonAccountDetails staff : staffList) {
				if (getPlTitle().equalsIgnoreCase("StaffAttendanceMonthly(Monthly)")) {
					StringBuffer buffer = new StringBuffer();
					buffer.append(" select staffName,");
					int size = montNames.length;
					int count = 2;
					for (String monthName : montNames) {
						if (!"0)".equalsIgnoreCase(monthName)) {
							//buffer.append(" max(case monthName when "+ monthName.replace("(","")+ " then concat(Convert(Round((noofpresentdays * 100 / totalworkingdays)),CHAR),'/',Convert(Round(((totalworkingdays - noofpresentdays) * 100 / totalworkingdays)),CHAR)) else NULL end) as "+ monthName.replace("'","").replace("(",""));
							buffer.append(" max(case monthName when "+ monthName.replace("(","")+ " then concat(Convert(Round(noofpresentdays),CHAR),'/',Convert(Round(totalworkingdays),CHAR),' (',Convert(Round((noofpresentdays * 100 / totalworkingdays)),CHAR),')') else NULL end) as "+ monthName.replace("'","").replace("(",""));
							if (size > count)
								buffer.append(",");
							count++;
						}
					}
					
					log.debug(buffer.toString());
					buffer.append(" from vw_staffMonthlyAttendance where rolename='"+ staff.getRoleName());
					buffer.append("' and academicYearId="+ getUserAcademicYearId()+ " group by accountId");
					log.debug(buffer.toString());
					if (!ObjectFunctions.isNullOrEmpty(buffer.toString())) {
						satffrolewiseattendance = adminManager.getAll(buffer.toString());
						if (!ObjectFunctions.isNullOrEmpty(satffrolewiseattendance)) {
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(staff.getRoleDescription(),width, fontPath));
							for (Object[] obj : satffrolewiseattendance) {
								if (!ObjectFunctions.isNullOrEmpty(obj)) {
									for (int i = 0; i <= obj.length-1; i++) {
										if (!ObjectFunctions.isNullOrEmpty(obj[i])) {
											if(i==0){
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellWithLeftAlignJasperClass(obj[i].toString(),1,fontPath));
											}else{
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(obj[i].toString(),1,fontPath));
											}
											log.debug(obj[i].toString());
										} else {
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("0",1,fontPath));
										}
									}
								}
							}
						}
					}
				}
			} 
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public void ajaxStaffMonhlyAttendanceForDaily(String roleNames[],PdfPTable defaultersHeaderReport,String[] montNames,String fontPath) throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStaffMonhlyAttendanceForDaily' method");
		}
		try {
			int width = montNames.length;
			    List staffDetails= null;
				int totalWorkingDays = 0;
				long presentCount = 0;
				long absentCount = 0;
				long  total = 0;
				int monthId=0; 
				  	if (!ObjectFunctions.isNullOrEmpty(roleNames)) {
				  		AcademicYear year=(AcademicYear) adminManager.get(AcademicYear.class,getUserAcademicYearId());
				  		for (String monthName : montNames) {
							if(!"0)".equals(monthName)){
								if (!ObjectFunctions.isNullOrEmpty(monthName.replace("('", "").replace("'", ""))) { 
									monthId = getMonthNumberFromMonthName(monthName.replace("('", "").replace("'", ""));
								 	totalWorkingDays= getWorkingDaysByMonth(monthId,year, getClassId());
									if (!ObjectFunctions.isNullOrEmpty(totalWorkingDays) && totalWorkingDays > 0)
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName.replace("('", "").replace("'", "").replace(")", "")+ "( W.Days = "+ totalWorkingDays+ " )", 1,fontPath));
									else
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName.replace("('", "").replace("'", "").replace(")", ""), 1,fontPath));
									totalWorkingDays = 0;
									}
						} 
							monthName=null;
					}
			  		for (String roleName : roleNames) {
					//for(ViewStaffPersonAccountDetails staff:staffList){
						staffDetails = staffManager.getAll(ViewStaffPersonAccountDetails.class, "roleName="+ roleName +" and custId=" + getUserCustId()+ " and status='Y' and academicYearId <=" + year.getId());
						if (!ObjectFunctions.isNullOrEmpty(staffDetails)) {
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(roleName.replaceFirst(".{6}", "").replace("'", ""),width, fontPath));
							 for(Object staffObje:staffDetails){
								ViewStaffPersonAccountDetails staffObj = (ViewStaffPersonAccountDetails) staffObje;
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffObj.getFullName(), "#000",fontPath));
								for (String monthName : montNames) {
								if(!"0)".equals(monthName)){
									if (!ObjectFunctions.isNullOrEmpty(monthName.replace("('", "").replace("'", ""))) { 
										 monthId = getMonthNumberFromMonthName(monthName.replace("('", "").replace("'", ""));
									 	 totalWorkingDays= getWorkingDaysByMonth(monthId,year,getClassId()); //here getClassId() used to academicyear have class wise holiday(CH).
											absentCount = adminManager.getCount("vw_StaffDailyAttendance", "accountId="+staffObj.getAccountId()+" and month='" + monthId+ "'  and present='"+ "N'");
											presentCount = totalWorkingDays - absentCount;
											total =presentCount + absentCount;
											if(presentCount>0){
											double presentPercentage = roundTwoDecimals(((double) presentCount / (double) total) * 100);
											double absentPercentage = roundTwoDecimals(((double) absentCount / (double) total) * 100);
										//	String strPercentage = Double.toString(presentPercentage/absentPercentage);
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(presentPercentage+" / "+absentPercentage, "#000",fontPath));
											}else{
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
											}
										}
								} 
							monthName=null;
							totalWorkingDays=0;
							}
							staffObj=null;
						 }
						}
						//staff=null;
					//}
						roleName=null;
			  		} 
			  		
			  		year=null;
			  	}
			montNames=null; 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public void ajaxStaffDailyAttendance(String roleNames[],PdfPTable defaultersHeaderReport,String date,String fontPath,int width,AcademicYear year,String captureAttendanceForStaff,
			String presentVal,String absentVal) throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStaffDailyAttendance' method");
		}
		try {
			List<ViewStaffPersonAccountDetails> staffDetails = null;
			StaffDailyAttendance attendance = null;
			boolean isNoStaffFound = true;
			String info ="";
			if(!ObjectFunctions.isNullOrEmpty(roleNames))
			{
				prepareStaffRolesMap(null);
				for (String roleName : roleNames) {
					staffDetails = null;
					isNoStaffFound = true;
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(getStaffRoles().get(roleName.replaceAll("'", "")),width, fontPath));
					staffDetails = staffManager.getAll(ViewStaffPersonAccountDetails.class, "roleName="+ roleName +" and custId=" + getUserCustId()+ " and status='Y' and academicYearId<=" + year.getId()+" order by  fullName");
					if(!ObjectFunctions.isNullOrEmpty(staffDetails))
					{
						for(ViewStaffPersonAccountDetails staffObj : staffDetails){

							attendance = (StaffDailyAttendance) staffManager.get(StaffDailyAttendance.class,"accountId="+staffObj.getAccountId()+" and attendanceDate='"+ date +"'");
							if ("Y".equalsIgnoreCase(year.getUseBiometricForStaff()))
							{
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffObj.getFirstName(), "#000",fontPath));
								if(!ObjectFunctions.isNullOrEmpty(attendance))
								{
									if(!attendance.isPresent())
									{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										if(StringFunctions.isNullOrEmpty(String.valueOf(attendance.getLeaveRequest())))
										{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										}
										else
										{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(attendance.getLeaveRequest()), "#529B38",fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(attendance.getLeaveType(), "#529B38",fontPath));
										}
									}
									else
									{
										String staffLateTime="";
										if(StringFunctions.isNotNullOrEmpty(staffObj.getStartTime())){
											staffLateTime=checkStaffShiftTime(staffObj.getStartTime(),attendance.getInTime());
										}
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Present", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(attendance.getInTime(), "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(attendance.getOutTime(), "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(attendance.getWorkingHours(), "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffLateTime, "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									}

								}
								else
								{
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
								} 
							}
							else
							{
								if(!ObjectFunctions.isNullOrEmpty(presentVal) && "P".equalsIgnoreCase(presentVal) && !ObjectFunctions.isNullOrEmpty(absentVal) &&  "A".equalsIgnoreCase(absentVal)){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffObj.getFirstName(), "#000",fontPath));	
									isNoStaffFound = false;
									if(!ObjectFunctions.isNullOrEmpty(attendance)){
										if("T".equalsIgnoreCase(captureAttendanceForStaff)){
											if(!ObjectFunctions.isNullOrEmpty(attendance)){
												if(attendance.isPresent())
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
												else
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
												if(attendance.isAfternoonSession())
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
												else
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
											}
										}else{
											if(!attendance.isPresent() && !attendance.isAfternoonSession()){
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
											}else{
												if(!attendance.isPresent())
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Morning)", "#EE2424",fontPath));
												if(!attendance.isAfternoonSession())
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Afternoon)", "#EE2424",fontPath));
											} 
										}
									}else{
										if("T".equalsIgnoreCase(captureAttendanceForStaff)){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
										}else{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#EE2424",fontPath));
										}
									}
									if(ObjectFunctions.isNullOrEmpty(attendance)){

										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									}else{
										if(StringFunctions.isNullOrEmpty(String.valueOf(attendance.getLeaveRequest())))
										{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										}
										else
										{
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(attendance.getLeaveRequest()), "#529B38",fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(attendance.getLeaveType(), "#529B38",fontPath));

										}
									}	
								}else if(!ObjectFunctions.isNullOrEmpty(presentVal) &&  "P".equalsIgnoreCase(presentVal)&& ObjectFunctions.isNullOrEmpty(attendance)){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffObj.getFirstName(), "#000",fontPath));		
									isNoStaffFound = false;
									if("T".equalsIgnoreCase(captureAttendanceForStaff)){
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
									}else{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#EE2424",fontPath));
									}
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
								} else  if( !ObjectFunctions.isNullOrEmpty(absentVal) &&  "A".equalsIgnoreCase(absentVal) && !ObjectFunctions.isNullOrEmpty(attendance)){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(staffObj.getFirstName(), "#000",fontPath));		
									isNoStaffFound = false;
									if("T".equalsIgnoreCase(captureAttendanceForStaff)){
										if(attendance.isPresent())
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
										else
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
										if(attendance.isAfternoonSession())
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("present", "#000",fontPath));
										else
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
									}else{
										if(!attendance.isPresent() && !attendance.isAfternoonSession()){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent", "#EE2424",fontPath));
										}else{
											if(!attendance.isPresent())
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Morning)", "#EE2424",fontPath));
											if(!attendance.isAfternoonSession())
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Absent(Half day-Afternoon)", "#EE2424",fontPath));
										} 
									}
									if(StringFunctions.isNullOrEmpty(String.valueOf(attendance.getLeaveRequest())))
									{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("---", "#000",fontPath));
									}
									else
									{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(attendance.getLeaveRequest()), "#529B38",fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(attendance.getLeaveType(), "#529B38",fontPath));
									}
								}
								attendance=null;
							}	
						}
					}
					if(isNoStaffFound){
						if("P".equalsIgnoreCase(presentVal)){
							info="present";	
						}else{
							info="absent";
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenterWithColspanAndBorder("Currently there is no "+info+" staff for this role.","#005CB9", fontPath,width));
					}
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("",width, fontPath));
						
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public void ajaxBiometricStaffMonhlyAttendance(List staffList,PdfPTable defaultersHeaderReport,String[] montNames,String fontPath) throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxBiometricStaffMonhlyAttendance' method");
		}
		try {
			int monthId;

			StringBuffer bufferQuery = new StringBuffer();
			AcademicYear year=getCurrentAcademicYear();
			bufferQuery.append(" select staffName,roleId,roleName,");
			int size = montNames.length;
			int count = 2;
			for (String monthName : montNames) { 
				int monthTotalDays = 0;
				String[] Names = monthName.split(" ");
				if(!"0)".equals(monthName)){
				if (!ObjectFunctions.isNullOrEmpty(Names[0].replace("('", "").replace("'", ""))) 
				{
					monthId = getMonthNumberFromMonthName(Names[0].replace("('", "").replace("'", ""));
				 	monthTotalDays=getWorkingDaysByMonth(monthId,year,getClassId()); //here getClassId() used to academicyear have class wise holiday(CH).
					 defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(monthName.replace("('", "").replace("'", "").replace(")", "")+ "( W.Days = "+ monthTotalDays+ " )", 1,fontPath));
					 bufferQuery.append("concat(Convert(Round(((sum(present='Y' and month="+monthId+") * 100) / "+monthTotalDays+")),char),'/',Convert(Round(((("+monthTotalDays+" - sum(present='Y' and month="+monthId+")) * 100) / "+monthTotalDays+")),char))");
					 if (size > count)
						 bufferQuery.append(",");
						count++;
				}
			}
			}
			bufferQuery.append(" from vw_StaffDailyAttendance where custId ="+getUserCustId());
			bufferQuery.append(" and roleId in(");
			for (Object obje : staffList) {
				ViewStaffPersonAccountDetails staff = (ViewStaffPersonAccountDetails) obje;
				bufferQuery.append(staff.getRoleId());
				bufferQuery.append(',');
			}	
			bufferQuery.append("0) ");
			bufferQuery.append(" and academicYearId="+ getUserAcademicYearId()+ " group by accountId order by roleId");
			log.debug(bufferQuery.toString());
			int width = 7;
			long roleId = 0;
			List<Object[]> satffrolewiseattendance = null;
				if (!ObjectFunctions.isNullOrEmpty(bufferQuery.toString())) {
					satffrolewiseattendance = adminManager.getAll(bufferQuery.toString());
					if (!ObjectFunctions.isNullOrEmpty(satffrolewiseattendance)) {
						for (Object[] obj : satffrolewiseattendance) {
							if (!ObjectFunctions.isNullOrEmpty(obj)) {
								for (int i = 0; i <= obj.length-1; i++) {
										if(roleId!=Long.valueOf(obj[1].toString())){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(obj[2].toString(),width, fontPath));	
										}
										if(i!=1 && i!=2){
										if (!ObjectFunctions.isNullOrEmpty(obj[i])) {
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(obj[i].toString(),1,fontPath));
											log.debug(obj[i].toString());
										} else {
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("0",1,fontPath));
										}
										roleId = Long.valueOf(obj[1].toString());
										}
								}
							}

						}
					}
				}
			year = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions( {@Action(value = "ajaxStudentGenderAndComunituCountReport", results = {@Result(location = "../admin/reports/ajaxDoViewClasses.jsp", name = "success") })})
	public String ajaxStudentGenderAndComunituCountReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentGenderAndComunituCountReport' method");
		}
		try {
			checkClassHavingStudentsOrNot(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxClassWiseGenderAndComunity", results = {}) })
	public void ajaxClassWiseGenderAndComunity() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxClassWiseGenderAndComunity' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				if("CategoryAndCommunityGenderWiseSummary".equalsIgnoreCase(getPlTitle())){
					ajaxStudentClassWiseGenderAndComunity();
				}else if ("ClsssAndCommunityWiseSummary".equalsIgnoreCase(getPlTitle())) {
					log.debug(getPlTitle());
					ajaxClassAndCommunityWiseSummary();
				}
			}
		} catch (Exception ex) 
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}

	public void ajaxStudentClassWiseGenderAndComunity() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentClassWiseGenderAndComunity' method");
		}
		try {
			// TODO what if no academic year
			if (getUserAcademicYearId() != 0) {
				String fileName = null;

				fileName = "school_category_community_template_"+ getUserAcademicYearId();
				setUsername("");
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				StringBuffer queryString = new StringBuffer();
				queryString.append("select ");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				List<SchoolCategory> categoryList = adminManager.getAllByCustId("SchoolCategory", getUserCustId(),0);
				List<Object[]> castList = adminManager.getAll("select castName,castId from vw_studentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and status='"+ Constants.YES_STRING+ "' and description is null group by castName");
				if (getUser().getId() != 0) {
					List<ClassName> classNameList = adminManager.getAll(ClassName.class, " id in" + getSelectedId());
					if (!ObjectFunctions.isNullOrEmpty(categoryList) && !ObjectFunctions.isNullOrEmpty(classNameList)) {
						excelView.setWorkSheetName("Community Information");
						excelView.createWorkSheet(0);
						excelView.setDefaultFormat(excelView.getArial10format());
						int size = (categoryList.size() + castList.size()) * 2 + 4;
						// For School Name
						WritableCellFormat cellFormat10 = getCellFormat10();
						// For School Address
						WritableCellFormat cellFormat8 = getCellFormat8();
						// For data with white color
						WritableCellFormat cellFormatWht10 = getCellFormatWht10();

						hostelOrganizationDetailsForExcel(excelView,cellFormat10, cellFormat8, size);
						excelView.getWs().removeRow(0);
						excelView.getWs().setColumnView(0, 20);
						excelView.getWs().setColumnView(1, 10);
						excelView.getWs().setColumnView(2, 10);
						String[] genders = { "Boys", "Girls" };
						excelView.getWs().mergeCells(0, 5, size, 5);

						excelView.getWs().addCell(new Label(0, 5, "SCHOOL CATEGORY AND COMMUNITY WIDE MATRIX",cellFormatWht10));

						excelView.getWs().mergeCells(0, 6, 0, 7);
						excelView.getWs().addCell(new Label(0, 6, "Class", excelView.getWrapCellFormat()));
						excelView.getWs().mergeCells(1, 6, 1, 7);
						excelView.getWs().addCell(new Label(1, 6, "#Sections", excelView.getWrapCellFormat()));
						int cellCount = 2;
						int cellNum = 2;

						for (SchoolCategory category : categoryList) {
							for (int k = 0; k < genders.length; k++) {
								excelView.getWs().addCell(new Label(cellCount, 7, genders[k],excelView.getWrapCellFormat()));
								cellCount++;
							}
							excelView.getWs().mergeCells(cellNum, 6,cellNum + 1, 6);
							excelView.getWs().addCell(new Label(cellNum, 6, category.getCategoryName(), excelView.getWrapCellFormat()));
							queryString.append(" sum(gender='M' and categoryId="+ category.getId()+ "),sum(gender='F' and categoryId="+ category.getId() + "),");
							cellNum += 2;
						}

						excelView.getWs().mergeCells(cellNum, 6, cellNum + 1,6);
						excelView.getWs().addCell(new Label(cellNum, 6, "Total", excelView.getWrapCellFormat()));
						prepareCategoryIds(categoryList);
						queryString.append(" sum(gender='M' and categoryId in "+ getTempString()+ "),sum(gender='F' and categoryId in "+ getTempString() + "),");
						for (int k = 0; k < genders.length; k++) {
							excelView.getWs().addCell(new Label(cellCount, 7, genders[k],excelView.getWrapCellFormat()));
							cellCount++;
						}
						cellNum += 2;
						for (Object[] cast : castList) {
							if (!ObjectFunctions.isNullOrEmpty(cast[0])) {
								for (int k = 0; k < genders.length; k++) {
									excelView.getWs().addCell(new Label(cellCount,7,genders[k],excelView.getWrapCellFormat()));
									cellCount++;
								}
								excelView.getWs().addCell(new Label(cellCount, 7, "Total",excelView.getWrapCellFormat()));
								cellCount++;
								excelView.getWs().mergeCells(cellNum, 6,cellNum + 2, 6);
								excelView.getWs().addCell(new Label(cellNum, 6,"No. of students "+ cast[0].toString(),excelView.getWrapCellFormat()));
								queryString.append(" sum(gender='M' and castId="+ cast[1].toString()+ "),sum(gender='F' and castId="+ cast[1].toString()+ "),sum(castId="+ cast[1].toString() + "),");
								cellNum += 3;
							}
						}
						excelView.getWs().mergeCells(cellNum, 6,cellNum + 2, 6);
						excelView.getWs().addCell(new Label(cellNum, 6, "No of students PH", excelView.getWrapCellFormat()));
						for (int k = 0; k < genders.length; k++) {
							excelView.getWs().addCell(new Label(cellCount,7,genders[k],excelView.getWrapCellFormat()));
							cellCount++;
						}
						excelView.getWs().addCell(new Label(cellCount, 7, "Total",excelView.getWrapCellFormat()));
						cellCount++;
						queryString.append(" sum(gender='M' and phId='"+Constants.YES_STRING+"'),sum(gender='F' and phId='"+Constants.YES_STRING+"'),sum(phId='"+Constants.YES_STRING+"')");
						queryString.append("classSectionId");

						cellNum += cellNum + categoryList.size() + 1;
						int cellstart = 0;
						int cellRowNum = 8;
						int gendersSize = categoryList.size() + 1;
						List<StudyClass> studyClasList = null;
						Object[] genderCastCount = null;
						for (ClassName className : classNameList) {
							studyClasList = adminManager.getAll(StudyClass.class, " classNameClassId="+ className.getId());
							excelView.getWs().mergeCells(0, cellRowNum, 0,cellRowNum + studyClasList.size() - 1);
							excelView.getWs().addCell(new Label(cellstart, cellRowNum, className.getClassName(), excelView.getWrapCellFormat()));
							cellstart++;
							long classId = 0;
							int studyCellStart = cellstart;
							for (StudyClass studyClass : studyClasList) {
								if (studyClass.getClassNameClassId().getId() == classId) {
									cellstart = studyCellStart;
								}
								excelView.getWs().addCell(new Label(cellstart, cellRowNum, String.valueOf(studyClass.getClassAndSection()),excelView.getWrapCellFormat()));
								genderCastCount = adminManager.get(queryString.toString()+ " from vw_studentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and classSectionId="+ studyClass.getId()+ " and status='"+ Constants.YES_STRING+ "' and description is null");
								if (!ObjectFunctions.isNullOrEmpty(genderCastCount)) {
									cellstart++;
									for (int j = 0; j < genderCastCount.length; j++) {
										if (!ObjectFunctions.isNullOrEmpty(genderCastCount[j])) {
											excelView.getWs().addCell(new Label(cellstart,cellRowNum,genderCastCount[j].toString(),excelView.getWrapCellFormat()));
										} else {
											excelView.getWs().addCell(new Label(cellstart,cellRowNum,"0",excelView.getWrapCellFormat()));
										}
										cellstart++;
									}
								}
								cellRowNum++;
								classId = studyClass.getClassNameClassId().getId();
							}
							cellstart++;
							cellstart = 0;
							genderCastCount = null;
						}
						showSchoolUrlInExcelSheetFooter(cellRowNum-1, excelView, cellCount-1);
					}
				}
				excelView.getWb().write();
				excelView.getWb().close();
			}
			ajaxStudentGenderAndComunituCountReport();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}

	public void ajaxClassAndCommunityWiseSummary() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxClassAndCommunityWiseSummary();' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				String fileName = "school_gender_community_template_"+ getUserAcademicYearId();
				setUsername("");
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				StringBuffer queryString = new StringBuffer();
				queryString.append("select ");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				List<Object[]> castList = adminManager.getAll("select ifnull(castName,'Other Caste'),ifNull(castId,0) from vw_studentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and status='"+ Constants.YES_STRING+ "' and description is null group by castId");
				if (getUser().getId() != 0) {
				List<ClassName> classNameList = adminManager.getAll(ClassName.class, " id in" + getSelectedId());//int selectedClassSize = classNameList.size();
					if (!ObjectFunctions.isNullOrEmpty(castList) && !ObjectFunctions.isNullOrEmpty(classNameList)) {
						excelView.setWorkSheetName("STUDENT ENROLMENT POSITION");
						excelView.createWorkSheet(0);
						excelView.setDefaultFormat(excelView.getArial10format());
						int size = (classNameList.size() + castList.size()) * 2 + 4;
						// For School Name
						WritableCellFormat cellFormat10 = getCellFormat10();
						// For School Address
						WritableCellFormat cellFormat8 = getCellFormat8();
						// For data with white color
						WritableCellFormat cellFormatWht10 = getCellFormatWht10();

						hostelOrganizationDetailsForExcel(excelView,cellFormat10, cellFormat8, size);
						excelView.getWs().removeRow(0);
						excelView.getWs().setColumnView(0, 20);
						excelView.getWs().setColumnView(1, 10);
						excelView.getWs().setColumnView(2, 10);
						String[] genders = { "Boys", "Girls" };
						String[] character = { "A", "B" };
						excelView.getWs().mergeCells(0, 5, size, 5);

						
						
						excelView.getWs().addCell(new Label(0, 5, "Gender And Community Class Wise Summary", cellFormatWht10));
						//excelView.getWs().addCell(new Label(0, 5, getCustomerByCustId().getCustomerShortName()+ " STUDENT ENROLMENT POSITION ON-"+ new Date(), cellFormatWht10));

						excelView.getWs().mergeCells(0, 6, 0, 7);
						excelView.getWs().addCell(new Label(0, 6, "Name of Class :",excelView.getWrapCellFormat()));

						int cellCount = 1;
						int cellNum = 1;
						List<StudyClass> studyClasList = null;
						String studentCount = null;
						for (ClassName className : classNameList) {
							studyClasList = adminManager.getAll(StudyClass.class, " classNameClassId="+ className.getId());
							studentCount = adminManager.getClassStudentStrengthByClassId(className.getId(), getUserCustId());
							for (int k = 0; k < character.length; k++) {
								excelView.getWs().addCell(new Label(cellCount, 7, character[k],excelView.getWrapCellFormat()));
								if ("A".equalsIgnoreCase(character[k].toString())) {
									excelView.getWs().addCell(new Label(cellCount, 8, String.valueOf(studyClasList.size()), excelView.getWrapCellFormat()));
								} else {
									excelView.getWs().addCell(new Label(cellCount,8,studentCount,excelView.getWrapCellFormat()));
								}
								cellCount++;
							}
							excelView.getWs().mergeCells(cellNum, 6,cellNum + 1, 6);
							excelView.getWs().addCell(new Label(cellNum, 6, className.getClassName(), excelView.getWrapCellFormat()));
							cellNum += 2;
						}
						Object[] genderCastCount = adminManager.get("select sum(gender='M'),sum(gender='F'),count(*) from vw_studentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and status='"+ Constants.YES_STRING+ "' and classNameClassId in "+ getSelectedId() +" and description is null");
						for (int k = 0; k < genders.length; k++) {
							excelView.getWs().mergeCells(cellNum, 6, cellNum, 7);
							excelView.getWs().addCell(new Label(cellCount, 6, genders[k],excelView.getWrapCellFormat()));
							if ("Boys".equalsIgnoreCase(genders[k].toString())) {
								if (!ObjectFunctions.isNullOrEmpty(genderCastCount[0]))
									excelView.getWs().addCell(new Label(cellCount,8,genderCastCount[0].toString(),excelView.getWrapCellFormat()));
								else {
									excelView.getWs().addCell(new Label(cellCount,8,"0",excelView.getWrapCellFormat()));
								}
							} else {
								if (!ObjectFunctions.isNullOrEmpty(genderCastCount[1]))
									excelView.getWs().addCell(new Label(cellCount,8,genderCastCount[1].toString(),excelView.getWrapCellFormat()));
								else {
									excelView.getWs().addCell(new Label(cellCount,8,"0",excelView.getWrapCellFormat()));
								}
							}
							cellCount++;
							cellNum++;
						}

						excelView.getWs().mergeCells(cellNum, 6, cellNum, 7);
						excelView.getWs().addCell(new Label(cellNum, 6, "Total", excelView.getWrapCellFormat()));
						if (!ObjectFunctions.isNullOrEmpty(genderCastCount[2]))
							excelView.getWs().addCell(new Label(cellCount, 8, genderCastCount[2].toString(), excelView.getWrapCellFormat()));
						else {
							excelView.getWs().addCell(new Label(cellCount, 8, "0", excelView.getWrapCellFormat()));
						}

						cellNum++;
						for (Object[] cast : castList) {
							if (!ObjectFunctions.isNullOrEmpty(cast[0])) {
								excelView.getWs().mergeCells(cellNum, 6,cellNum, 7);
								excelView.getWs().addCell(new Label(cellNum, 6, cast[0].toString(), excelView.getWrapCellFormat()));
								queryString.append(" sum(castId="+ cast[1].toString() + "),");
								cellNum++;
							}
						}
						excelView.getWs().mergeCells(cellNum, 6, cellNum, 7);
						excelView.getWs().addCell(new Label(cellNum, 6, "PH", excelView.getWrapCellFormat()));
						queryString.append(" sum(phId='" + Constants.YES_STRING+ "')");
						genderCastCount = adminManager.get(queryString.toString()+ " from vw_studentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and classNameClassId in "+ getSelectedId() +" and status='"+ Constants.YES_STRING+ "' and description is null");
						cellCount++;
						int cellstart = cellCount;
						int cellRowNum = 8;

						if (!ObjectFunctions.isNullOrEmpty(genderCastCount)) {
							for (int j = 0; j < genderCastCount.length; j++) {
								if (!ObjectFunctions.isNullOrEmpty(genderCastCount[j])) {
									excelView.getWs().addCell(new Label(cellstart,cellRowNum,genderCastCount[j].toString(),excelView.getWrapCellFormat()));
								} else {
									excelView.getWs().addCell(new Label(cellstart,cellRowNum,"0",excelView.getWrapCellFormat()));
								}
								cellstart++; 
							}
						}
						excelView.getWs().mergeCells(0, 9, cellstart - 1, 9);
						excelView.getWs().addCell(new Label(0,9,"Note : A= NUMBER OF SECTIONS , B= NO OF STUDENTS",excelView.getWrapCellFormat()));
						showSchoolUrlInExcelSheetFooter(9, excelView, cellstart - 1);
					}
				}
				excelView.getWb().write();
				excelView.getWb().close();
			}
			ajaxStudentGenderAndComunituCountReport();

		} catch (Exception ex) {
			// TODO: handle exception
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Actions( { @Action(value = "ajaxSearchStudentByAdmissionNumber", results = { @Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }) }) })
	public String ajaxSearchStudentByAdmissionNumber() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSearchStudentByAdmissionNumber' method");
		}
		try {
			List<ViewAllUsers> allUsersList=null;
			String searchword = getParamValue("searchword");
			if (!StringFunctions.isNullOrEmpty(searchword)) {
				
				List<ViewStudentClassDetails> studentsList = null;
				if (getAcademicYearId()>0) {
					studentsList = adminManager.getAll(ViewStudentClassDetails.class,"custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and (admissionNumber like '%"+searchword.trim()+ "%') and joinedThroughAdmissions='Y' and accountId not in ("+ getAnyTitle().substring(0, getAnyTitle().length() - 1)+ ") and description is null ");
				}else{
					studentsList = adminManager.getAll(ViewStudentClassDetails.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and (admissionNumber like '%"+searchword.trim()+ "%') and accountId not in ("+ getAnyTitle().substring(0, getAnyTitle().length() - 1)+ ") and description is null ");
				}
				JSONArray res = new JSONArray();
				JSONObject j;
				if (!ObjectFunctions.isNullOrEmpty(studentsList)) {
						for (ViewStudentClassDetails classDetails : studentsList) {
							j = new JSONObject();
							j.put("accountId", classDetails.getAccountId());
							j.put("stuName", classDetails.getPersonFullName());
							j.put("admissionNumber", classDetails.getAdmissionNumber());
							j.put("rollNumber", classDetails.getRollNumber());
							res.put(j);
						}
				} else {
					j = new JSONObject();
					j.put("accountId", 0);
					j.put("stuName", "No Results Found !!");
					j.put("admissionNumber", "");
					j.put("rollNumber",0);
					res.put(j);
				}
				j = new JSONObject();
				j.put("data", res);
				getResponse().getOutputStream().print(j.toString());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	
	public MotherTongue createOrUpdateMedium(String medium) {
		try {
			MotherTongue motherTongue = null;
			if (!StringFunctions.isNullOrEmpty(medium.toUpperCase().trim())) {
				motherTongue = (MotherTongue) adminManager.get(MotherTongue.class,"name='"+medium.toUpperCase().trim()+"'");
				if (ObjectFunctions.isNullOrEmpty(motherTongue)) {
					motherTongue = new MotherTongue();
					motherTongue.setName(medium.toUpperCase().trim());
					//motherTongue.setVersion(0);
					adminManager.save(motherTongue);
				}
				if (!ObjectFunctions.isNullOrEmpty(motherTongue)) {
					setTempId(motherTongue.getId());
					setAnyTitle(motherTongue.getName());
					return motherTongue;
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "ajaxPrintClassWiseFineFeeDetails", results = {}) })
	public void ajaxDoViewFineFeeClassSheets()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrintClassWiseStudentDetails' method");
		}
		try {	
			if(StringFunctions.isNotNullOrEmpty(getSelectedId())){
				PDFGenerator pDFGenerator=new PDFGenerator();
				AcademicYear academicYear=getCurrentAcademicYear();
				Customer customer = getCustomerByCustId();
				String fileName = "Student Fine Fee Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
				pDFGenerator.getPdfWriter().setPageEvent(phfmj);
				phfmj = null;
				pDFGenerator.getDocument().open();
				// creating pDF page event to set header and Footer to document
				PdfPTable mainTable = new PdfPTable(1);
				mainTable.setWidthPercentage(100);
				mainTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				PdfPTable defaultersHeaderReport = new PdfPTable(7);
				defaultersHeaderReport.setWidthPercentage(100);
				int[] widths = {9,8,30,30,6,6,8};
				defaultersHeaderReport.setWidths(widths);
				List<ViewStudentFineFeeDetails> studentFineFeeDetails =adminManager.getAll(ViewStudentFineFeeDetails.class,"custId="+getUserCustId()+" and academicYearId="+academicYear.getId()+" and  classNameClassId in "+getSelectedId()+" and status='Y' order by classAndSection");
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 7, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 7, fontPath,"#FFFFFF", 10, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Student's Other Fee Payment Details",8, fontPath,"#005CB9", 15, "#FFFFFF",Element.ALIGN_CENTER, 5.0f));
				}
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
				if(!ObjectFunctions.isNullOrEmpty(studentFineFeeDetails)){
					String checkValu="Check";
					Double value = 0.0;
					Object[] invoicePayment = null;
					int laastRec=0;
					for(ViewStudentFineFeeDetails studentFineAmount : studentFineFeeDetails){
						if(!ObjectFunctions.isNullOrEmpty(studentFineAmount)){
							if(!checkValu.equalsIgnoreCase(studentFineAmount.getClassAndSection())){
								if (checkValu != "Check" && checkValu != studentFineAmount.getClassAndSection()) {
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Total Amount :", 6, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_RIGHT, 5.0f));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(String.valueOf(invoicePayment[1]), 1, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 5.0f));
									//rowCount++;
								}
								invoicePayment = adminManager.get("select invoiceNumber,sum(fineFeeAmount) from vw_studentFineFeeDetails where academicYearId="+academicYear.getId()+ " and custId=" + getUserCustId()+" and classAndSection='"+studentFineAmount.getClassAndSection()+"' and status='Y'");
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class & Section : "+studentFineAmount.getClassAndSection(),8, fontPath,"#005CB9", 15, "#FFFFFF",Element.ALIGN_CENTER, 5.0f));
								/*defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class & Section:", 3, fontPath,"#005CB9", 15, "#FFFFFF",Element.ALIGN_RIGHT, 5.0f));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(studentFineAmount.getClassAndSection(), 4, fontPath,"#005CB9", 15, "#FFFFFF",Element.ALIGN_LEFT, 5.0f));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Total Amount :", 4, fontPath,"#005CB9", 15, "#FFFFFF",Element.ALIGN_RIGHT, 5.0f));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(String.valueOf(invoicePayment[1]), 3, fontPath,"#005CB9", 15, "#FFFFFF",Element.ALIGN_LEFT, 5.0f));*/
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Payment Date", 1,fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Admission #",1,fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Student Name", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Narration", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Quantity", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Invoice#", 1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Fee Amount", 1, fontPath));
							}
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(studentFineAmount.getPayDateStr(),1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(studentFineAmount.getAdmissionNumber(),1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(studentFineAmount.getStudentFullName(),1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(studentFineAmount.getDescription(),1, fontPath));
							if(studentFineAmount.getQuantity()>0)
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(String.valueOf(studentFineAmount.getQuantity()),1, fontPath));
							else
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("-",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(String.valueOf(studentFineAmount.getInvoiceNumber()),1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor(String.valueOf(studentFineAmount.getFineFeeAmount()),1, fontPath));
							value += studentFineAmount.getFineFeeAmount();
						}
						laastRec++;
						if (laastRec == studentFineFeeDetails.size()) {
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Total Amount :", 6, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_RIGHT, 5.0f));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(String.valueOf(invoicePayment[1]), 1, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 5.0f));
						}
						checkValu =studentFineAmount.getClassAndSection();
						
						studentFineAmount=null;
						}
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Grand Total :", 6, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_RIGHT, 5.0f));
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(String.valueOf(value), 1, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_LEFT, 5.0f));
					}
				else {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("There is no other fee payment details",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
				}
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
				mainTable.addCell(defaultersHeaderReport);
				pDFGenerator.getDocument().add(mainTable);
				pDFGenerator.getDocument().close();
				pDFGenerator = null;
				mainTable = null;
				defaultersHeaderReport = null;
			}
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	/********************************************************************
	 * Date              Name               Description
	 * ========          ============       ==================
	 * Aug 21, 2013      Seshu		      	For displaying month names of selected academic year.
	/********************************************************************/
		@Actions({
				@Action(value = "ajaxManageClassesMonthAttendaceReport", results = { @Result(location = "../admin/reports/ajaxManageClassesMonthlyAttendance.jsp", name = "success") })
		})
		public String ajaxManageClassesMonthAttendaceReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxManageClassesMonthAttendaceReport' method");
			}
			try {
				Customer customer = getCustomerByCustId();
				Attachment attachment =null;
				String academicYearName = (String)getSession().getAttribute("academicYearName");
				if(!ObjectFunctions.isNullOrEmpty(customer)){
					StringBuffer pathName = new StringBuffer("userFiles/AttendanceReports/").append(customer.getCustomerShortName()).append("/").
					append(academicYearName);
					log.debug("Path Name : "+pathName);
					File directory = new File(getSession().getServletContext().getRealPath(pathName.toString()));
					if(!ObjectFunctions.isNullOrEmpty(directory)){
						File[] files = directory.listFiles();
						if(!ObjectFunctions.isNullOrEmpty(files)){
							StringBuffer filePath = null;
							List fileNamesList = new ArrayList<Attachment>();
							for(File file : files){
								filePath = new StringBuffer(pathName.toString()).append("/").append(file.getName());
								attachment = new Attachment();
								attachment.setFileName(file.getName());
				                attachment.setFilePath(filePath.toString());
				                fileNamesList.add(attachment);
								file = null;
								filePath = null;
							}
							setTempList(fileNamesList);
						}else
							setTempList(null);
						files = null;
					}
				}
				if(getUser().isSchoolTeacher()){
					ajaxGetStaffStudyClasses();
				}else{
					 checkStudyClassHavingStudentsOrNot();
					 Collections.sort(getStudyClassList());
				}
					
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				// TODO: handle exception
			}
			return SUCCESS;
		}

	
/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * Aug 23, 2013      Seshu		        For storing uploaded classes attendance report in server location.
/********************************************************************/   
@Actions({
	@Action(value = "ajaxUploadClassesAttendanceReport", results = { @Result(location = "../admin/reports/ajaxManageClassesMonthlyAttendance.jsp", name = "success") }) })
		public String ajaxUploadClassesAttendanceReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUploadClassesAttendanceReport' method");
		}
		try
		{
			MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) ServletActionContext.getRequest();
			Enumeration<String> fileParaNames = multiWrapper.getFileParameterNames();
			StringBuffer pathName = null;
			Customer customer = getCustomerByCustId();
			String academicYearName = (String)getSession().getAttribute("academicYearName");
			while (fileParaNames.hasMoreElements() && !ObjectFunctions.isNullOrEmpty(customer)) {
				String key = fileParaNames.nextElement();
				File[] fileObject = multiWrapper.getFiles(key);
				String[] localSysfileNames = multiWrapper.getFileNames(key);
				setUploadFileName(StringFunctions.stripSymbols(localSysfileNames[0]));
				pathName = new StringBuffer("userFiles/AttendanceReports/").append(customer.getCustomerShortName()).append("/").
				append(academicYearName).append("/").append(getUploadFileName());
				File destDir = new File(getSession().getServletContext().getRealPath(pathName.toString()));
				if(pathName.toString().contains(".xls") || pathName.toString().contains(".xlsx")){
					FileUtils.copyFile(fileObject[0], destDir);
				}else{
					super.addActionError("File type not matched.");
				}
				key = null;
				fileObject = null;
				localSysfileNames = null;
				destDir = null;
				pathName = null;
			}
			super.addActionMessage("File uploaded successfully.");
			ajaxManageClassesMonthAttendaceReport();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxGenrateDayBookReports", results = {}) })
	public void ajaxGenerateDayBookReports() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("entering 'ajaxGenerateDayBookReports' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				String fromDate = null;
				String endDate = null;
				AcademicYear academicYear = null;
				fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
				endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
				String fileName = "Day Book Details " + fromDate + " To "+ endDate;
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				WritableCellFormat cellFormat8 = getCellFormat8();
				// For School name
				WritableCellFormat cellFormat10 = getCellFormat10();
				WritableCellFormat cellFormat = null;
				WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
				font1.setColour(Colour.BLACK);
				cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				Customer customer = getCustomerByCustId();
				academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getUserAcademicYearId());
				List<Object[]> daybooks = adminManager.getAll("select entrydate,description,type,amount,paymentType,chequeNumber,ddNumber from dayBook where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and entryDate>='"+ fromDate+ " 00:00:00' and entryDate<='"+ endDate + " 00:00:00' order by entrydate");
				if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
					if (!ObjectFunctions.isNullOrEmpty(academicYear.getStartDate())&& !ObjectFunctions.isNullOrEmpty(academicYear.getEndDate())) {
						excelView.setWorkSheetName("Income And Expenses");
						excelView.createWorkSheet(0);
						excelView.setDefaultFormat(excelView.getArial10format());
						excelView.getWs().setColumnView(0, 10);
						excelView.getWs().setColumnView(1, 50);
						excelView.getWs().setColumnView(2, 10);
						excelView.getWs().setColumnView(3, 10);
						excelView.getWs().setColumnView(4, 15);
						excelView.getWs().setColumnView(5, 30);
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
								excelView.getWs().mergeCells(0, 0, 5, 1);
								excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
							}
							if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
								excelView.getWs().mergeCells(0, 2, 5, 2);
								excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
							}
							int row = 4;
							if (daybooks.size() > 0) {
								excelView.getWs().addCell(new Label(0, 3, "Date", cellFormat));
								excelView.getWs().addCell(new Label(1, 3, "Description",cellFormat));
								excelView.getWs().addCell(new Label(2, 3, "Income", cellFormat));
								excelView.getWs().addCell(new Label(3, 3, "Expenses",cellFormat));
								excelView.getWs().addCell(new Label(4, 3, "PaymentType",cellFormat));
								excelView.getWs().addCell(new Label(5, 3, "Cheque/DD No.",cellFormat));
								if (!ObjectFunctions.isNullOrEmpty(daybooks)) {
									int amount = 0;
									int incomeAmount = 0;
									int expensesAmount = 0;
									int count = 1;
									for (Object[] obj : daybooks) {
										int rowCount = 0;
										excelView.getWs().addCell(new Label(rowCount, row, obj[0].toString().replace(" 00:00:00.0",""), excelView.getDefaultFormat()));
										rowCount++;
										excelView.getWs().addCell(new Label(rowCount, row, obj[1].toString(), excelView.getWrapCellFormat()));
										rowCount++;
										excelView.getWs().addCell(new Label(rowCount,row,"",excelView.getDefaultFormat()));
										if (obj[2].toString().equalsIgnoreCase("I")) {
											if (obj[2].toString().equalsIgnoreCase("I")&& Long.valueOf(obj[3].toString()) >= amount) {
												excelView.getWs().addCell(new Label(rowCount,row,obj[3].toString(),ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
											}
											incomeAmount = incomeAmount+ Integer.valueOf(obj[3].toString());
										}
										rowCount++;
										excelView.getWs().addCell(new Label(rowCount,row,"",excelView.getWrapCellFormat()));
										if (obj[2].toString().equalsIgnoreCase("E")) {
											if (obj[2].toString().equalsIgnoreCase("E") && Long.valueOf(obj[3].toString()) >= amount) {
												excelView.getWs().addCell(new Label(rowCount,row,obj[3].toString(),ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
											}
											expensesAmount = expensesAmount+ Integer.valueOf(obj[3].toString());
										}
										rowCount++;
										if(!ObjectFunctions.isNullOrEmpty(obj[4])){
											if("Null".equalsIgnoreCase(obj[4].toString())){
												excelView.getWs().addCell(new Label(rowCount, row, "-", excelView.getWrapCellFormat()));
											}else
												excelView.getWs().addCell(new Label(rowCount, row, obj[4].toString(), excelView.getWrapCellFormat()));
										}
										rowCount++;
										if (!ObjectFunctions.isNullOrEmpty(obj[5]) || !ObjectFunctions.isNullOrEmpty(obj[6])){
											if (!ObjectFunctions.isNullOrEmpty(obj[5])){
												excelView.getWs().addCell(new Label(rowCount,row,obj[5].toString(),ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
											}else 
												excelView.getWs().addCell(new Label(rowCount,row,obj[6].toString(),ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
										}else
											excelView.getWs().addCell(new Label(rowCount,row,"-",ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
										row++;
									}
									excelView.getWs().mergeCells(0, row, count,row);
									excelView.getWs().addCell(new Label(0, row, "Total",cellFormat));
									if (incomeAmount >= 0 && expensesAmount >= 0) {
										excelView.getWs().addCell(new Label(2,row,String.valueOf(incomeAmount),ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
										excelView.getWs().addCell(new Label(3,row,String.valueOf(expensesAmount),ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
									} else {
										excelView.getWs().addCell(new Label(1, row, "", excelView.getDefaultFormat()));
									}
								}
								showSchoolUrlInExcelSheetFooter(row, excelView, 5);
							} else {
								excelView.getWs().mergeCells(0, 4, 5, 4);
								excelView.getWs().addCell(new Label(0,4,"Currently there is no matched data",cellFormat));
							}
						}
						excelView.getWb().write();
						excelView.getWb().close();
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Actions( {
		@Action(value = "ajaxStudentAndStaffLoginCredentialsReport", results = {@Result(location = "../admin/reports/ajaxStudentAndStaffCredentials.jsp", name = "success") })
	})
		public String ajaxStudentAndStaffCredentials() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentAndStaffCredentials' method");
		}
		try {
			checkStudyClassHavingStudentsOrNot();
			 Collections.sort(getStudyClassList());
			 setObjectList(adminManager.getAll(ViewAllUsers.class, " custId="+getUserCustId()+" and roleName not in('ROLE_STUDENT','ROLE_PARENT','ROLE_AYAH','ROLE_DRIVER','ROLE_HELPER','ROLE_SWEEPER','ROLE_PEON','ROLE_TYPIST','ROLE_WATCHMAN','ROLE_ADMIN','ROLE_ADMINOFFICER','ROLE_CONDUCTOR','ROLE_COMPUTEROPERATOR','ROLE_LABASST','ROLE_OTHERS','ROLE_STAFF_NURSE') group by rolename"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
		}
	@Actions( { @Action(value = "ajaxStudentAndStaffLoginIdsReports", results = {}) })
	public void ajaxStudentAndStaffLoginIdsReports()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentAndStaffLoginIdsReports' method");
		}
		try {	
			if (getUserAcademicYearId()!=0) {
				String fileName = null;
				 if(!StringFunctions.isNullOrEmpty(getSelectedId())){
					 fileName = "Student Login Ids";
				}else{
					fileName = "Staff Login Ids";
				}
				PDFGenerator pDFGenerator=new PDFGenerator();
				Customer customer = getCustomerByCustId();
				String fileNames = fileName+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileNames.replace(' ', '_')+ ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
				pDFGenerator.getPdfWriter().setPageEvent(phfmj);
				phfmj = null;
				pDFGenerator.getDocument().open();
				PdfPTable mainTable = new PdfPTable(1);
				mainTable.setWidthPercentage(100);
				mainTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					if(!StringFunctions.isNullOrEmpty(getSelectedId())){
						PdfPTable defaultersHeaderReport = new PdfPTable(4);
						int[] widths = {10,10,30,20};
						defaultersHeaderReport.setWidths(widths);
						List<ViewStudentPersonAccountDetails> studentDetails=new ArrayList<ViewStudentPersonAccountDetails>();
						List<ViewStudentPersonAccountDetails> studentList=null;
							if (!ObjectFunctions.isNullOrEmpty(customer)) {
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 5, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 4.0f));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 5, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 4.0f));
							}
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
							if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber())){
								List<StudyClass> studyClassList=adminManager.getAll(StudyClass.class,"id in"+getSelectedId());
								for(StudyClass studyClass : studyClassList){
									studentList=adminManager.getAll(ViewStudentPersonAccountDetails.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  classSectionId= "+studyClass.getId()+" and status='"+Constants.YES_STRING+"'");
									Collections.sort(studentList,new StudentRollNumberComparator());
									studentDetails.addAll(studentList);
								}
							}else
								studentDetails =adminManager.getAll(ViewStudentPersonAccountDetails.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  classSectionId in "+getSelectedId()+" and status='"+Constants.YES_STRING+"' order by sortingOrder,section,rollNumber asc");
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Student Login Id Details",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 4.0f));
					if(!ObjectFunctions.isNullOrEmpty(studentDetails)){
						String checkValu="Check";
						for(ViewStudentPersonAccountDetails studentsUsernames : studentDetails){
							if(!ObjectFunctions.isNullOrEmpty(studentsUsernames)){
								if(!checkValu.equalsIgnoreCase(studentsUsernames.getClassAndSection())){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class&Section Name:"+ studentsUsernames.getClassAndSection(), 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_CENTER, 4.0f));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Roll Number", 1, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Admission Number", 1,fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Student Name", 1, fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("UserName",1,fontPath));
								}
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(String.valueOf(studentsUsernames.getRollNumber()),1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(String.valueOf(studentsUsernames.getAdmissionNumber()),1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(String.valueOf(studentsUsernames.getFullName()),1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(studentsUsernames.getUsername(),1, fontPath));
							}
							checkValu =studentsUsernames.getClassAndSection();
							studentsUsernames=null;
							}
						}
					mainTable.addCell(defaultersHeaderReport);
					defaultersHeaderReport =null;
				}
				else{
					if(!StringFunctions.isNullOrEmpty(getAnyId())){
						PdfPTable defaultersHeaderReport1 = new PdfPTable(3);
						int[] width = {20,20,20};
						defaultersHeaderReport1.setWidths(width);
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 3, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 4.0f));
							defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 3, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 4.0f));
						
						}
						defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
						defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
						List<ViewStaffPersonAccountDetails> staffdetails =adminManager.getAll(ViewStaffPersonAccountDetails.class,"custId="+getUserCustId()+" and  roleId in "+getAnyId()+" and academicYearId<="+getUserAcademicYearId()+" and status='"+Constants.YES_STRING+"' and roleName !='' order by roleId,fullName");
						defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Staff Login Id Details Role Wise",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 3.0f));
					if(!ObjectFunctions.isNullOrEmpty(staffdetails)){
						Collections.sort(staffdetails,new StaffRoleNameComparator());
							String checkValu="check";
							for(ViewStaffPersonAccountDetails rolename : staffdetails){
								if(!ObjectFunctions.isNullOrEmpty(rolename)){
									if(!checkValu.equalsIgnoreCase(rolename.getRoleName())){
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Role Name:"+ rolename.getRoleDescription(), 3, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_CENTER, 3.0f));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Designation", 1, fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Staff Name", 1, fontPath));
										defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("UserName", 1,fontPath));
									}
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(rolename.getDesignation(),1, fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(String.valueOf(rolename.getFullName()),1, fontPath));
									defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(rolename.getUsername(),1, fontPath));
									checkValu =rolename.getRoleName();
								}
								rolename=null;
								}
							}
						mainTable.addCell(defaultersHeaderReport1);	
						defaultersHeaderReport1 =null;
					}
					
				}				
				pDFGenerator.getDocument().add(mainTable);
				pDFGenerator.getDocument().close();
				pDFGenerator = null;
				mainTable = null;
			}
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Action(value = "ajaxNewAdmittedStudentFeeDetails", results = { @Result(location = "jasper/fee/studentInvoiceToDayOrOverAllFeeReceipt.jasper", type = "jasper", name = "success", params = {"dataSource", "studentsFeeTypeList", "format", "PDF" }),
			  @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" })})
		public String ajaxNewAdmittedStudentFeeDetails()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentAndStaffLoginIdsReports' method");
		}
		try {
			String pdf ="pdf";
			String filename = "studentInvoiceForAdmittedFeeReceipt";
			ViewStudentFeePaymentDetails feePaymentDetails = null;
			double totalPaidAmount = 0;
			double discountAmount = 0;
			List<Object[]> admittedStudentList = null;
			if(getAcademicYearId()>0){
				setCustomer(getCustomerByCustId());
				setTodayDate("Received Fees report for new academic wise");
				List<SchoolTerms> schoolTermsList = adminManager.getAll(SchoolTerms.class, " custId="+ getUserCustId()+ " and academicYearId = "+ getAcademicYearId()+" group by termName");
				if(ObjectFunctions.isNotNullOrEmpty(schoolTermsList)){
					for(SchoolTerms schoolTerms : schoolTermsList){
						if(getTempId() > 0)
							admittedStudentList=adminManager.getAll("select sum(paymentAmount),paymentDate,studentPaymentId,rollNumber,firstName,ifnull(lastName,'') as lastName,paymentType,termName,feeType,ddNumber,chequeNumber,invoiceNumber,feeSettingId,settingName,admissionNumber,id,sum(discountAmount),className,section from vw_studentFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and schoolTermId="+schoolTerms.getId()+" and classId="+getTempId()+" and deleteStatus='"+Constants.NO_STRING+"' and joinedThroughAdmissions='"+Constants.YES_STRING+"' and invoiceNumber !=0 group by invoiceNumber order by classId ASC,fullName");
						else
							admittedStudentList=adminManager.getAll("select sum(paymentAmount),paymentDate,studentPaymentId,rollNumber,firstName,ifnull(lastName,'') as lastName,paymentType,termName,feeType,ddNumber,chequeNumber,invoiceNumber,feeSettingId,settingName,admissionNumber,id,sum(discountAmount),className,section from vw_studentFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and schoolTermId="+schoolTerms.getId()+" and deleteStatus='"+Constants.NO_STRING+"' and joinedThroughAdmissions='"+Constants.YES_STRING+"' and invoiceNumber !=0 group by invoiceNumber order by classId ASC,fullName");
						if (!ObjectFunctions.isNullOrEmpty(admittedStudentList)) {
							for (Object[] obj1 : admittedStudentList) {
								if (!StringFunctions.isNullOrEmpty(obj1[18].toString())) {
									setAnyTitle(obj1[17].toString() + " - " + obj1[18].toString());
								}else{
									setAnyTitle(obj1[17].toString());
								}								
								String payAmount = obj1[0].toString();
								String disAmount = obj1[16].toString();
								if (Double.valueOf(payAmount) != 0) {
									Date paymentDate = (Date) obj1[1];
									feePaymentDetails = new ViewStudentFeePaymentDetails();
									totalPaidAmount += Double.valueOf(payAmount);
									discountAmount +=Double.valueOf(disAmount);
									feePaymentDetails.setPaymentAmount(Double.valueOf(payAmount));
									feePaymentDetails.setDiscountAmount(Double.valueOf(obj1[16].toString()));
									feePaymentDetails.setPaymentDate(paymentDate);
									feePaymentDetails.setStudentPaymentId(Long.parseLong(obj1[11].toString()));
									feePaymentDetails.setRollNumber(obj1[3].toString());
									feePaymentDetails.setFirstName(obj1[4].toString()+ ' '+ obj1[5].toString());
									feePaymentDetails.setClassName(getAnyTitle());
									feePaymentDetails.setTermName(obj1[7].toString());
									feePaymentDetails.setFeeType(obj1[8].toString());
									if (!ObjectFunctions.isNullOrEmpty(obj1[6])) {
										if ("C".equalsIgnoreCase(obj1[6].toString())) {
											feePaymentDetails.setPaymentType("Cash");
										} else if ("D".equalsIgnoreCase(obj1[6].toString())) {
											if (!ObjectFunctions.isNullOrEmpty(obj1[9]))
												feePaymentDetails.setPaymentType("DD"+ "("+ obj1[9].toString()+ ")");

										} else if ("CH".equalsIgnoreCase(obj1[6].toString())) {
											if (!ObjectFunctions.isNullOrEmpty(obj1[10]))
												feePaymentDetails.setPaymentType("Cheque"+ "("+ obj1[10].toString()+ ")");
										}
									}
									feePaymentDetails.setAdmissionNumber(obj1[14].toString());
									feePaymentDetails.setFeeSettingId(Long.valueOf(obj1[12].toString()));
									feePaymentDetails.setSettingName(obj1[13].toString());
									getStudentsFeeTypeList().add(feePaymentDetails);
								}
								payAmount = null;
								feePaymentDetails = null;
							}
							setTotalAmount(totalPaidAmount);
							setFooter(discountAmount+"");
						}
						admittedStudentList = null;
						schoolTermsList = null;
					}
				}
				if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
					setCustomerName(getCustomer().getOrganization().toUpperCase());
					setAnyId(getCustomer().getOrganizationFullAddress());
				}
				if ("pdf".equalsIgnoreCase(pdf)) {
					getResponse().setHeader("Content-Disposition","attachment; filename="+ filename+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
				}
				if (ObjectFunctions.isNullOrEmpty(getStudentsFeeTypeList())) {
					setAlertSendType("Currently there are no admitted student fee collection in over all.");
					return "errorMessage";
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}	  
	@Action(value = "ajaxGenerateStudentsEnrollmentReport", results = { @Result(location = "student/ajaxViewStudentExamSchedules.jsp", name = "success")})
	public void ajaxGenerateStudentsEnrollmentReport(){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentAndStaffLoginIdsReports' method");
		}
		try{

			String fileName = "StudentReport_" + DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
			getResponse().setHeader("Content-Disposition",
					"attachment; filename=" + fileName.replace(' ', '_') + ".xls");
			ExcelReport studentRpt = new ExcelReport();
			getResponse().setContentType(studentRpt.getMimeType());
				StringBuffer strbuff;
					strbuff = new StringBuffer();
					strbuff.append("select ");
					strbuff.append("admissionNumber,firstName,lastName,gender,className,section,castName,subCastName,categoryName");
					studentRpt.assignTitles("Admission Number,First Name,Last Name,Gender,Class Name,Section,Community,Cast,CategoryName");
					strbuff.append(" from vw_studentDetails ");
					strbuff.append(" where academicYearId=");
					strbuff.append(getUserAcademicYearId());
					strbuff.append(" and description is null order by sortingOrder,section,IF(registerNumber IS NULL,fullName,registerNumber)");
					List studentDetails = adminManager.getAll(strbuff.toString());
					strbuff=null;
					studentRpt.createSheet("Config", studentDetails,9,null);
					studentDetails=null;
			studentRpt.getWb().write(getResponse().getOutputStream());
	        studentRpt=null;
			}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Action(value = "ajaxDoGetStudentsExcessAmounts", results = {@Result(location = "../admin/reports/ajaxStudentsExcessAmountClassSections.jsp", name = "success") })
	public String ajaxDoGetStudentsExcessAmounts(){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetStudentsExcessAmounts' method");
		}
		try{
			//setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(), getUserAcademicYearId()));
		checkStudyClassHavingStudentsOrNot();
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Action(value = "ajaxGenrateStudentsExcessAmountReport", results = { @Result(location = "jasper/fee/studentsExcessAmount.jasper", type = "jasper", name = "success", params = {"dataSource", "objectList", "format", "PDF" }),
            @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" })})
		public String ajaxGenrateStudentsExcessAmountReport(){
			try{
			Customer customer = getCustomerByCustId();
			setCustomerName(customer.getOrganization());
			setAnyId(customer.getOrganizationFullAddress());
			getResponse().setHeader("Content-Disposition","attachment; filename=studentsExcessPayments"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-")+ ".pdf");
			long academicYearId=getUserAcademicYearId();
			log.debug("academicYearId----"+academicYearId);
			if(!ObjectFunctions.isNullOrEmpty(getSelectedId()))
				getObjectList().addAll(adminManager.getAllStudentsExcessPayments(getSelectedId(),academicYearId,customer.getId()));
			log.debug("classSectionId:::Excess Amount Report class SectionId ..."+getSelectedId());
			if (ObjectFunctions.isNullOrEmpty(getObjectList())) {
			setAlertSendType("Currently there are no students for excess amount.");
			return "errorMessage";
			}
			}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		return SUCCESS;
		}

	@Action(value = "ajaxDownloadCollectedFeeAmount", results = {})
	public void ajaxGeneratePrtclrsWiseFeeCollection()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadCollectedFeeAmount' method");
		}
		HSSFSheet sheet = null;
		int sumStartRow = 0;
		int totalCellNum = 0;
		Customer customer = null;
		List<Object[]> feeSettingsList = null;
		StringBuilder sumFormula = new StringBuilder();
		long studentId=0;
		int cellStart=0;
		int rowStart=0;
		int rowEnd=0;
		try {
			String fileName = "Date_Wise_Fee_Collection_Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			getResponse().setContentType("application/vnd.ms-excel");
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			org.apache.poi.ss.usermodel.Workbook wb = new HSSFWorkbook();
			sheet = (HSSFSheet) wb.createSheet("Collection Report");
			sheet.autoSizeColumn(100000);
			customer = getCustomerByCustId();
			SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
			SimpleDateFormat fromUser = new SimpleDateFormat("MM/dd/yyyy");
			String fromDate = lastUpdatedStr.format(fromUser.parse(getParamValue("startDate")));
			String endDate = lastUpdatedStr.format(fromUser.parse(getParamValue("endDate")));
			
			if (!ObjectFunctions.isNullOrEmpty(customer)) {

				prepareSchoolFeeSettingList();
				feeSettingsList = adminManager.getAll("select feeType,id from feeType where custId="+ getUserCustId() + " and academicYearId="+ getUserAcademicYearId()+ " and feeSettingId in" + getAnyTitle()+ " order by feeSettingId,id");

				if (ObjectFunctions.isNotNullOrEmpty(feeSettingsList)) {
					int rowNum = 0;
					Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
					Row row = sheet.createRow(rowNum);
					row.setHeightInPoints(45);
					org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);
					sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum,0, (feeSettingsList.size() + 5)));
					cell.setCellValue(customer.getOrganization() + "\n"+ customer.getCustomerFormattedAddress());
					cell.setCellStyle(styles.get("title"));

					HashMap<Long, Integer> feeTypeColumns = new HashMap<Long, Integer>();
					// Header Part
					String[] header = new String[] { "S.No.", "Receipt No.","Student Name", "Class", "Admission No." };
					row = sheet.createRow(++rowNum);
					int cellNum = 0;

					// Students Fee Details
					List<ViewStudentFeePaymentDetails> feePaidDetailsList = null;
					int rwoCount = 1;
					StringBuilder query = new StringBuilder("select paymentDate,date_format(paymentDate,'%d-%m-%Y') as paymentDateStr from studentPayment where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId());
					query.append(" and DATE(paymentDate) Between DATE('"+ fromDate + " 00:00:00') AND DATE('" + endDate+ " 00:00:00')");
					query.append(" group by date_format(paymentDate,'%d-%m-%Y') order by paymentDate desc");
					List<Object[]> paymentDateList = adminManager.getAll(query.toString());
					if(!ObjectFunctions.isNullOrEmpty(paymentDateList)){
						for (Object[] paymentDateObj : paymentDateList) {
							row = sheet.createRow(++rowNum);
							sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum, 0, (feeSettingsList.size() + 5)));
							cell = row.createCell(0);
							cell.setCellValue(paymentDateObj[1].toString());
							cell.setCellStyle(styles.get("header"));
							row = sheet.createRow(++rowNum);
							for (String hea : header) {
								cell = row.createCell(cellNum++);
								cell.setCellValue(hea);
								cell.setCellStyle(styles.get("header"));
								hea=null;
							}
							for (Object[] feeSettingName : feeSettingsList) {
								cell = row.createCell(cellNum);
								cell.setCellValue(feeSettingName[0].toString());
								cell.setCellStyle(styles.get("header"));
								feeTypeColumns.put(Long.valueOf(feeSettingName[1].toString()),cellNum);
								cellNum++;
								feeSettingName=null;
							}
							cell = row.createCell(cellNum++);
							cell.setCellValue("Total");
							cell.setCellStyle(styles.get("header"));
							totalCellNum = cell.getColumnIndex();
							sumStartRow = (rowNum + 2);
							log.debug("start :" + new Date());
							feePaidDetailsList = adminManager.getStudentsFeePaidDetailsBySettingAndClassId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),getTempString(),paymentDateObj[0].toString(), endDate,getAnyTitle());
							feePaidDetailsList.addAll(adminManager.getStudentsFeePaidDetailsBySettingAndClassId("vw_studentTransportFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),getTempString(),paymentDateObj[0].toString(), endDate,getAnyTitle()));
							log.debug("End :" + new Date());
							if (!ObjectFunctions.isNullOrEmpty(feePaidDetailsList)) {
								int sNo = 1;
								String invoiceNumber = null;
								double particularAmt = 0;
								studentId=0;
								for (ViewStudentFeePaymentDetails feeSettingDetail : feePaidDetailsList) {
									if (!ObjectFunctions.isNullOrEmpty(feeSettingDetail.getInvoiceNumberStr()) && !feeSettingDetail.getInvoiceNumberStr().equals(invoiceNumber)) {
										cellNum = 0;
										row = sheet.createRow(++rowNum);
										cell = row.createCell(cellNum++);
										cell.setCellValue(sNo++);
										cell.setCellStyle(styles.get("string"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getInvoiceNumberStr());
										cell.setCellStyle(styles.get("string"));
										
										String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum - 1);
										cell = row.createCell(totalCellNum);
										cell.setCellFormula("SUM(F"+ (row.getRowNum() + 1) + ":"+ columnLetter+ (row.getRowNum() + 1) + ")");
										cell.setCellStyle(styles.get("string"));
									}
									if (feeSettingDetail.getStudentId()!=(studentId)) {
										//sheet.addMergedRegion(new CellRangeAddress(rowStart,(rowNum-2), cellStart, cellStart));
										cell = row.createCell(cellNum++);
										
										cell.setCellValue(feeSettingDetail.getFullName());
										cell.setCellStyle(styles.get("string"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getClassAndSection());
										cell.setCellStyle(styles.get("string"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getAdmissionNumber());
										cell.setCellStyle(styles.get("string"));
										rowStart =rowNum;
										rowEnd =rowNum;
										cellStart=cellNum;
									}
									else
										rowEnd++;
									
									for (Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()) {
										if (enty.getKey() == feeSettingDetail.getFeeTypeId()) {
											cell = row.getCell(enty.getValue());
											if (ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {
												cell = row.createCell(enty.getValue());
												cell.setCellValue(feeSettingDetail.getPaymentAmount());
												cell.setCellStyle(styles.get("string"));
											} else {
												if (cell.getCellType() != org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {
													if (cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING && StringFunctions.isNotNullOrEmpty(cell.getStringCellValue())) {
														particularAmt = Double.valueOf(cell.getStringCellValue());
													} else if (cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC)
														particularAmt = cell.getNumericCellValue();
												}
												cell.setCellValue(Double.valueOf(particularAmt)+ feeSettingDetail.getPaymentAmount());
												cell.setCellStyle(styles.get("string"));
											}
										} else {
											cell = row.getCell(enty.getValue());
											if (ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {
												cell = row.createCell(enty.getValue());
												cell.setCellValue("");
												cell.setCellStyle(styles.get("string"));
											}
										}
										particularAmt = 0;
									}
									invoiceNumber = feeSettingDetail.getInvoiceNumberStr();
									studentId = feeSettingDetail.getStudentId();
								}
								// Displaying Total amount
								//sheet.addMergedRegion(new CellRangeAddress(rowStart,(rowNum-1), cellStart, cellStart));
								row = sheet.createRow(++rowNum);
								sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum, 0, 4));
								cell = row.createCell(0);
								cell.setCellValue("Total");
								cell.setCellStyle(styles.get("header"));
								for (Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()) {
									cell = row.createCell(enty.getValue());
									String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(enty.getValue());
									cell.setCellFormula("SUM(" + columnLetter + ""+ sumStartRow + ":" + columnLetter+ (row.getRowNum()) + ")");
									cell.setCellStyle(styles.get("string"));
								}
								cell = row.createCell(totalCellNum);
								String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
								cell.setCellFormula("SUM(" + columnLetter + ""+ sumStartRow + ":" + columnLetter+ (row.getRowNum()) + ")");
								if (rwoCount == paymentDateList.size())
									sumFormula.append(columnLetter+ (row.getRowNum() + 1));
								else {
									sumFormula.append(columnLetter + (row.getRowNum() + 1)).append(",");
								}
								cell.setCellStyle(styles.get("string"));
								feePaidDetailsList=null;
							}else{
								rowNum=rowNum+1;
								cell = sheet.createRow(rowNum).createCell(0);
								cell.setCellValue("Payments are not receieved for the selected dates");
								sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,totalCellNum));
							}
							rwoCount++;
							row = sheet.createRow(++rowNum);
							cellNum = 0;
							paymentDateObj=null;
						}
						row = sheet.createRow(++rowNum);
						sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum,0, (feeSettingsList.size() + 4)));
						cell = row.createCell(0);
						cell.setCellValue("Grand Total");
						cell.setCellStyle(styles.get("header"));

						cell = row.createCell(totalCellNum);
						String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
						cell.setCellFormula("SUM(" + sumFormula.toString() + ")");
						row = sheet.createRow(++rowNum);
						showSchoolUrlInPOIExcelSheetFooter(wb, null, sheet,rowNum + 1, totalCellNum);
						paymentDateList=null;
					}else{
						cell = row.createCell(0);
						cell.setCellValue("Payments are not receieved for the selected dates");
					}
				}
				Integer[] colwidths = { 7, 12, 10, 25, 10, 10 };
				for (int i = 0; i < colwidths.length; i++) {
					sheet.setColumnWidth(i, colwidths[i] * 256);
				}
			}
			wb.write(getResponse().getOutputStream());
		} catch (Exception ex) {
			ex.printStackTrace();
			RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}finally{
			sheet=null;
			customer=null;
			sumFormula=null;
		}
	}
	// Changed by rama on 5-6-2014, for showing message while defaulters are not available.
	@Actions( { @Action(value = "ajaxPrintViewStudentInvoiceDefaulters", results = { @Result(location = "jasper/fee/studentInvoiceDefaultersFeeReceipt.jasper", type = "jasper", name = "success", params = {"dataSource", "studentsFeeTypeList", "format", "PDF" }),
			 															             @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" })})})
	public String ajaxPrintViewStudentInvoiceDefaulters() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrintViewStudentInvoiceDefaulters' method");
		}
		try {
			List<SchoolTerms> schoolTermsList=null;
			String pdf = getParamValue("pdfId");
			Date newDate = new Date();
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			String today = formatter.format(newDate);
			if (getUserAcademicYearId() != 0) {
				setCustomer((Customer)adminManager.get(Customer.class, getUserCustId()));
				AcademicYear academicYear = getCurrentAcademicYear();
				String transportmode=null;
				StringBuffer buffer = new StringBuffer();
				buffer.append("(");
				if(getUser().isTransportFinance() ||  getUser().isSchoolTransport()){
					transportmode = Constants.TRANSPORT_STATUS;
					buffer.append("3");
				}else if(getUser().isHostelFinance() ||  getUser().isSchoolHostel()){
					buffer.append("4");
				}else{
					buffer.append("1,2");
				}
				buffer.append(")");
				if (!ObjectFunctions.isNullOrEmpty(getUserCustId())) {
					List<BigInteger> studentIds = null;
					schoolTermsList=adminManager.getAll(SchoolTerms.class," custId="+getUserCustId()+" and  academicYearId="+getUserAcademicYearId()+" and dueDate <'"+today+" 00:00:00'  and feeSettingId in "+buffer.toString()+" order by dueDate");
					if (!ObjectFunctions.isNullOrEmpty(schoolTermsList)) {
						Double totalAmount = 0.0;
						for (SchoolTerms schoolTerms : schoolTermsList) {
							 studentIds = adminManager.getAllStudentFeeDefaultersByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),schoolTerms.getId(),"",transportmode);//,Constants.NO_STRING
							if (!ObjectFunctions.isNullOrEmpty(studentIds)) {
						     doGetclassWiseDefaultstudentsFeeList(schoolTerms, today,academicYear);	
						     totalAmount =  getPaymentAmount()+totalAmount;
						     setPaymentAmount(0.0);
							}
						}
						setTotalAmount(totalAmount);
					}
					if(ObjectFunctions.isNullOrEmpty(studentIds)){
						setAlertSendType("Currently there are no payment defaulters.");
						return "errorMessage";
					}
				}
				if(!ObjectFunctions.isNullOrEmpty(getCustomer())){
					setCustomerName(getCustomer().getOrganization());
					setAnyId(getCustomer().getOrganizationFullAddress());
				}
				if ("pdf".equalsIgnoreCase(pdf)) {
					getResponse().setHeader("Content-Disposition","attachment; filename=studentInvoiceDefaultersFeeReceipt" + StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN) , " ", "-") + ".pdf");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	public String getClassWiseFeeDefaultersByCustId(String table,long customerId, long academicYearId, String classId, long termId, String transportmode,String hostelmode) {
		try {
			StringBuffer queryString = new StringBuffer();
			queryString.append("select studentId,invoiceNumber,id from " + table+ " where custId=" + customerId);
			queryString.append(" and classId in ");
			queryString.append(classId);
			queryString.append(" and academicYearId=");
			queryString.append(academicYearId);
			queryString.append(" and schoolTermId=");
			queryString.append(termId);
			queryString.append(" and description is null").append(" and paymentStatus='N' and paymentCommitFeeStatus='N' and deleteStatus='N' ");
			if (StringFunctions.isNotNullOrEmpty(transportmode)) {
				queryString.append(" and transportMode='");
				queryString.append(transportmode + "'");
				queryString.append(" and vehicleAcademicDetailsId !=0");
			}
			if (StringFunctions.isNotNullOrEmpty(hostelmode)) {
				queryString.append(" and hostelmode='");
				queryString.append(hostelmode + "'");
			}
			queryString.append(" group by schoolTermId,studentId");
			//log.debug(queryString.toString());
			return queryString.toString();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Action(value = "ajaxDoGetClassWiseFeeStructure", results = { @Result(location = "../schoolfee/reports/ajaxDoClassWiseFeeStructure.jsp", name = "success") })
	public String ajaxDoGetClassWiseFeeStructure() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetClassWiseFeeStructure' method");
		}
		try {
			setClassList(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
			prepareSchoolFeeSettingList();
			setSchoolTermsList(adminManager.getAll(SchoolTerms.class,"custId=" + getUserCustId()+ " and academicYearId="+ getUserAcademicYearId() +" and feeSettingId in "+getAnyTitle()+" order by feeSettingId"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Action(value = "ajaxGenrateClassWiseFeeStructure", results = {})
	public void ajaxGenrateClassWiseFeeStructure() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenrateClassWiseFeeStructure' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				AcademicYear academicYear = null;
				long schoolTermId = 0;
				long classId = 0;
				long categoryId=0;
				String fileName = "Class_Wise_Fee_Structure";
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				WritableCellFormat cellFormat8 = getCellFormat8();
				// For School name
				WritableCellFormat cellFormat10 = getCellFormat10();
				WritableCellFormat cellFormat = null;
				WritableCellFormat cellFormatValues = null;
				WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
				WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
				font1.setColour(Colour.BLACK);
				font2.setColour(Colour.BLACK);
				cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				cellFormatValues = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				Customer customer = getCustomerByCustId();
				academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getUserAcademicYearId());
				HashMap<Long, SchoolCategory> schoolCategoryMap = new HashMap<Long, SchoolCategory>();
				List<SchoolCategory> categoryList = studentManager.getAll(SchoolCategory.class, "custId=" + getUserCustId());
				if (ObjectFunctions.isNotNullOrEmpty(categoryList)) {
					for (SchoolCategory categoryObj : categoryList) {
						schoolCategoryMap.put(categoryObj.getId(), categoryObj);
					}
				}
				HashMap<Long, ClassName> classNameMap = new HashMap<Long, ClassName>();
				List<ClassName> classList = adminManager.getAll(ClassName.class, "id in " + getAnyId()+ " order by sortingOrder");
				if (ObjectFunctions.isNotNullOrEmpty(classList)) {
					for (ClassName className : classList) {
						classNameMap.put(className.getId(), className);
					}
				}
				if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
					if (!StringFunctions.isNullOrEmpty(getAnyId()) && !StringFunctions.isNullOrEmpty(getTempString())) {
						excelView.setWorkSheetName("Class Wise Fee Structure");
						excelView.createWorkSheet(0);
						excelView.setDefaultFormat(excelView.getArial10format());
						excelView.getWs().setColumnView(0, 20);
						excelView.getWs().setColumnView(1, 20);
						excelView.getWs().setColumnView(2, 15);
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
								excelView.getWs().mergeCells(0, 0, 2, 1);
								excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
							}
							if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
								excelView.getWs().mergeCells(0, 2, 2, 2);
								excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
							}
							int rowCount = 3;
							int mergeStart = 0;
							int mergeEnd = 0;
							int laastRec = 0;
							int catMergeStart = 0;
							int catMergeEnd = 0;
							StringBuffer query =null;
							List<Object[]> classFeeList = adminManager.getAll("select termName,className,sum(feeAmount),classId,categoryId,schoolTermId from vw_classWiseFeeStructure where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and schoolTermId in"+getTempString()+" and classId in "+getAnyId()+" group by schoolTermId,classId,categoryId order by schoolTermId,classId,categoryId");
							
							if(!ObjectFunctions.isNullOrEmpty(classFeeList)){
								for (Object[] obj : classFeeList) {
									if (schoolTermId != Long.valueOf(obj[5].toString())) {
										if (classId != 0 ) { //&& classId != Long.valueOf(obj[3].toString())
											excelView.getWs().mergeCells(0,mergeStart, 0, mergeEnd - 1);
											excelView.getWs().addCell(new Label(0,mergeStart,classNameMap.get(classId).getClassName(),cellFormatValues));
											classId = 0;
											excelView.getWs().mergeCells(1, catMergeStart,1, catMergeEnd-1);
											excelView.getWs().addCell(new Label(1,catMergeStart,schoolCategoryMap.get(categoryId).getCategoryName(),cellFormatValues));
											categoryId=0;
										}
										excelView.getWs().mergeCells(0, rowCount,2, rowCount);
										excelView.getWs().addCell(new Label(0,rowCount,obj[0].toString(),cellFormat));
										rowCount++;
										excelView.getWs().addCell(new Label(0, rowCount,"Class Name", cellFormat));
										excelView.getWs().addCell(new Label(1, rowCount, "Category",cellFormat));
										excelView.getWs().addCell(new Label(2, rowCount,"Total Amount",cellFormat));
										rowCount++;
									}
									if (classId == 0) {
										mergeStart = rowCount;
										mergeEnd = rowCount;
									}
									if (classId != 0 &&  classId != Long.valueOf(obj[3].toString())) {// &&  classId != Long.valueOf(obj[3].toString())
										excelView.getWs().mergeCells(0, mergeStart,0, mergeEnd - 1);
										excelView.getWs().addCell(new Label(0, mergeStart,classNameMap.get(classId).getClassName(),cellFormatValues));
										mergeStart = rowCount;
									}
									if(categoryId == 0){
										catMergeStart = rowCount;
										catMergeEnd = rowCount;
									}
									if(categoryId != 0 && categoryId != Long.valueOf(obj[4].toString())){
										excelView.getWs().mergeCells(1, catMergeStart,1, catMergeEnd-1);
										excelView.getWs().addCell(new Label(1,catMergeStart,schoolCategoryMap.get(categoryId).getCategoryName(),cellFormatValues));
										catMergeStart = rowCount;
									}
									excelView.getWs().addCell(new Label(2, rowCount, obj[2].toString(),cellFormatValues));
									rowCount++;
									mergeEnd++;
									catMergeEnd++;
									schoolTermId = Long.valueOf(obj[5].toString());
									classId = Long.valueOf(obj[3].toString());
									categoryId =Long.valueOf(obj[4].toString());
									laastRec++;
									if (laastRec == classFeeList.size()) {
										excelView.getWs().mergeCells(0, mergeStart,0, mergeEnd - 1);
										excelView.getWs().addCell(new Label(0, mergeStart,classNameMap.get(classId).getClassName(),cellFormatValues));
										excelView.getWs().mergeCells(1, catMergeStart,1, catMergeEnd-1);
										excelView.getWs().addCell(new Label(1,catMergeStart,schoolCategoryMap.get(categoryId).getCategoryName(),cellFormatValues));
										log.debug("this is last record......Wooooooffffff.....");
									}
								}
								showSchoolUrlInExcelSheetFooter(rowCount-1, excelView,2);
							}
						}
						excelView.getWb().write();
						excelView.getWb().close();
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Actions( { @Action(value = "ajaxDownloadStaffSubjectsDetails", results = {}) })
	public void ajaxDownloadStaffSubjectsDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadStaffSubjectsDetails' method");
		}
		try{
		if (getUserAcademicYearId() != 0) {
			HSSFSheet sheet = null;
			Row headerRow = null;
			String fileName = "Staff Subjects Details";
			getResponse().setContentType("application/vnd.ms-excel");
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			PrepareStaffEligibleSubjectsExcel prepareStaffExcel = new PrepareStaffEligibleSubjectsExcel();
			
			List<StudySubject> studySubjectsList = adminManager.GetAllStudySubjects(getUserCustId(),getUserAcademicYearId());
			List<StudyClass> classesList = adminManager.GetAllStudyClasses(getUserCustId(), getUserAcademicYearId(),null);
			List<ViewStaffPersonAccountDetails> staffsList = adminManager.getAll(ViewStaffPersonAccountDetails.class," rolename in('ROLE_TEACHER','ROLE_ADMIN_COORDINATOR','ROLE_PRINCIPAL','ROLE_HOD','ROLE_VICEPRINCIPAL') and custId="+getUserCustId()+" and academicYearId<="+getUserAcademicYearId()+" and status='Y' ");
			log.debug("staffList:"+staffsList.size());
			if(!ObjectFunctions.isNullOrEmpty(classesList) && !ObjectFunctions.isNullOrEmpty(studySubjectsList) && !ObjectFunctions.isNullOrEmpty(staffsList)){
				prepareStaffExcel.createStaffConfigurationsSheet("Configurations",getUserAcademicYearId(),getUserCustId(),studySubjectsList,classesList,staffsList);
				
				StringBuffer sheetTitleDesc = new StringBuffer();
				sheetTitleDesc.append("School Name : ");
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("organization"))) {
					sheetTitleDesc.append((String) getSession().getAttribute("organization"));
				}
				sheetTitleDesc.append(", Academic Year : ");
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYearName"))) {
					sheetTitleDesc.append((String) getSession().getAttribute("academicYearName"));
				}
				String[] sheetNames = {"Class-Subject","Class-Subject-Teacher"};
				long start = System.currentTimeMillis();
				for(int i=0;i<sheetNames.length;i++){
					String sheetName = sheetNames[i];
					prepareStaffExcel.createStaffEligibleSubjectsSheet(sheetName,sheetTitleDesc.toString(),studySubjectsList,staffsList);
				}
				sheetTitleDesc = null;
				 long end = System.currentTimeMillis();
				 log.debug("sheets creation loop execution total time"
						  + " in seconds ==> " + (end - start) / 1000 + " seconds");
				start = 0;
				end = 0;
				sheetNames = null;
					int rowNum =3;
					int col = 1;
					int columns = 0;
					HSSFWorkbook wb = (HSSFWorkbook) prepareStaffExcel.getWb() ;
					for(int j =1;j<3;j++){ //sheet for loop
						sheet = wb.getSheetAt(j);
						headerRow = sheet.createRow(3);
						org.apache.poi.ss.usermodel.Cell cell = headerRow.createCell(1);
						if(sheet.getSheetName().equalsIgnoreCase("Class-Subject")){
							 start = System.currentTimeMillis();
							for (StudyClass obj : classesList) {
								col=1;
								headerRow = sheet.getRow(rowNum);
							    if(ObjectFunctions.isNullOrEmpty(headerRow)){
							    	headerRow = sheet.createRow(rowNum);
							    }
							    cell = headerRow.createCell(columns);
							    if(!ObjectFunctions.isNullOrEmpty(obj.getSection()))
			    			    	cell.setCellValue(obj.getClassName()+" - "+obj.getSection());
			    			    else
			    			    	cell.setCellValue(obj.getClassName());	
							    List<BigInteger> classSubjectsList = adminManager.getAll("select subjectId from ClassSubject where studyClassId="+obj.getId());
							    if(ObjectFunctions.isNullOrEmpty(classSubjectsList))
					    		{
							    	classSubjectsList = new ArrayList<BigInteger>();
					    		}
							   for(StudySubject subject : studySubjectsList){
								    cell = headerRow.createCell(col);
							    	if(!ObjectFunctions.isNullOrEmpty(obj) && !ObjectFunctions.isNullOrEmpty(subject)){
							    		if(classSubjectsList.contains(new BigInteger(String.valueOf(subject.getId()))))
							    		{
							    			 cell.setCellValue("Y");
							    		}
							    		else{
							    			 cell.setCellValue("N");
							    		}
							    	}
							    	col++;
							   }
							    rowNum++;
							}
							  end = System.currentTimeMillis();
							 log.debug("Class-Subject data creation loop execution total time"
									  + " in seconds ==> " + (end - start) / 1000 + " seconds");
						}
						
						
						if(sheet.getSheetName().equalsIgnoreCase("Class-Subject-Teacher")){
							rowNum = 3;
							 start = System.currentTimeMillis();
							for (ViewStaffPersonAccountDetails obj2 : staffsList) {
								columns = 0;
								headerRow = sheet.getRow(rowNum);
							    if(ObjectFunctions.isNullOrEmpty(headerRow)){
							    	headerRow = sheet.createRow(rowNum);
							    }
							    cell = headerRow.createCell(columns);
							    cell.setCellValue(obj2.getFullName());	
							    
							    log.debug("select * from ClassTeacher where teacherId="+obj2.getStaffId()+"  and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by studyClassId");
							    String query = "select * from classTeacher where teacherId="+obj2.getStaffId()+"  and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by studyClassId";
							    List<ClassTeacher> teacherClasslist = adminManager.getClassTeachersListByStaffId(query);
							if(!ObjectFunctions.isNullOrEmpty(teacherClasslist)){
							    for (ClassTeacher obj3 : teacherClasslist) {
									headerRow = sheet.getRow(rowNum);
								    if(ObjectFunctions.isNullOrEmpty(headerRow)){
								    	headerRow = sheet.createRow(rowNum);
								    }
								    if(rowNum >3){
								    	columns = 0;
								 		cell = headerRow.createCell(columns);
									    cell.setCellValue(obj2.getFullName());	
								    }
								 	columns = 1;
								    cell = headerRow.createCell(columns);
								   if(!ObjectFunctions.isNullOrEmpty(obj3.getStudyClassSection()))
    			    					cell.setCellValue(obj3.getStudyClassName()+" - "+obj3.getStudyClassSection());
				    			    else
				    			    	cell.setCellValue(obj3.getStudyClassName());
								    columns =2;
					    			cell = headerRow.createCell(columns);
						    			if(obj3.getIsClassTeacher().equalsIgnoreCase("Yes"))
						    				cell.setCellValue("Y");
						    			else
						    				cell.setCellValue("N");
					    			col=3;
					    			
					    		List<BigInteger> staffElgibleSubjectsList = adminManager.getAll("select studySubjectId from staffElgibleSubjects where staffId="+obj2.getStaffId()+" and academicYearId="+getUserAcademicYearId());//we are getting the all the subjects list and will check it contains the subject id or not
					    		List<BigInteger> classTeacherSubjectsList = adminManager.getAll("select studySubjectId from classTeacher where teacherId="+obj2.getStaffId()+" and studyClassId="+obj3.getStudyClassId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());//we are getting the all the subjects list and will check it contains the subject id or not
					    		
					    		if(ObjectFunctions.isNullOrEmpty(staffElgibleSubjectsList))
					    		{
					    			staffElgibleSubjectsList = new ArrayList<BigInteger>();
					    		}
					    		if(ObjectFunctions.isNullOrEmpty(classTeacherSubjectsList))
					    		{
					    			classTeacherSubjectsList = new ArrayList<BigInteger>();
					    		}
							   for(StudySubject subject2 : studySubjectsList){
								    cell = headerRow.createCell(col);
							    	if(!ObjectFunctions.isNullOrEmpty(obj2) && !ObjectFunctions.isNullOrEmpty(obj3) && !ObjectFunctions.isNullOrEmpty(subject2)){
							    		if(staffElgibleSubjectsList.contains(new BigInteger(String.valueOf(subject2.getId()))) && classTeacherSubjectsList.contains(new BigInteger(String.valueOf(subject2.getId()))))
							    		{
							    			cell.setCellValue("T");
							    		}
							    		else if(staffElgibleSubjectsList.contains(new BigInteger(String.valueOf(subject2.getId()))))
							    		{
							    			cell.setCellValue("Y");
							    		}
							    		else{
							    			 cell.setCellValue("N");
											}
										}
										col++;
									}
									rowNum++;
									}
								}else{
									headerRow = sheet.getRow(rowNum);
								    if(ObjectFunctions.isNullOrEmpty(headerRow)){
								    	headerRow = sheet.createRow(rowNum);
								    }
							    	columns = 0;
							 		cell = headerRow.createCell(columns);
								    cell.setCellValue(obj2.getFullName());	
								    columns = 1;
								    cell = headerRow.createCell(columns);
								    cell.setCellValue(" ");
								    columns =2;
					    			cell = headerRow.createCell(columns);
						    		cell.setCellValue(" ");
					    			col=3;
					    			List<BigInteger> staffElgibleSubjectsList = adminManager.getAll("select studySubjectId from staffElgibleSubjects where staffId="+obj2.getStaffId()+" and academicYearId="+getUserAcademicYearId());
					    			if(ObjectFunctions.isNullOrEmpty(staffElgibleSubjectsList))
						    		{
						    			staffElgibleSubjectsList = new ArrayList<BigInteger>();
						    		}
					    			 for(StudySubject subject2 : studySubjectsList)
					    			 {
									    cell = headerRow.createCell(col);
								    	if(!ObjectFunctions.isNullOrEmpty(obj2) && !ObjectFunctions.isNullOrEmpty(subject2))
								    	{
								    		
								    		if(staffElgibleSubjectsList.contains(new BigInteger(String.valueOf(subject2.getId()))))
								    		{
								    			 cell.setCellValue("Y");
								    		}
								    		else{
								    			 cell.setCellValue("N");
								    		}
								    	}
											col++;
									}
									rowNum++;
								}
							}
							 end = System.currentTimeMillis();
							 log.debug("Class-Subject-Teacher data creation loop execution total time"
									  + " in seconds ==> " + (end - start) / 1000 + " seconds");
						}
					}
					headerRow = null;
					sheet = null;
				prepareStaffExcel.finalPreperation("Configurations",classesList,staffsList);
				prepareStaffExcel.getWb().write(getResponse().getOutputStream());
				classesList = null;
				staffsList = null;
				studySubjectsList = null;
				prepareStaffExcel = null;	
				}
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Actions( { @Action(value = "ajaxUploadStaffSubjectsData", results = { @Result(location = "../admin/reports/ajaxGetStaffEligibleSubjects.jsp", name = "success") ,
			@Result(location = "../admin/reports/ajaxGetStaffEligibleSubjects.jsp", name = "dummyInit") })})
	public String ajaxUploadStaffSubjectsData() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUploadStaffSubjectsData' method");
		}
		try {
			log.debug(" *************** ajaxUploadStaffSubjectsData method Calling Started **************");
			boolean excelFileType = false;
			excelFileType = validateExcelFileType(getUploadContentType());
			if(excelFileType){
				log.debug("No file to upload....");
				return "dummyInit";
			}
			
			HSSFWorkbook workbook = new HSSFWorkbook(new FileInputStream(getUpload()));
			org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheet("Configurations");
						
			if (ObjectFunctions.isNullOrEmpty(sheet)) {
				super.addActionError("File type not matched.");
				log.debug("No file to upload....");
				return "dummyInit";
				
			}
			sheet = null;
			
			
			org.apache.poi.ss.usermodel.Sheet firstSheet1 = workbook.getSheetAt(0);
			Row secondRow = firstSheet1.getRow(2);
			
			if(!ObjectFunctions.isNullOrEmpty(secondRow))
			{
				if(!ObjectFunctions.isNullOrEmpty(secondRow.getCell(0)))
				{
					String fistColumn = secondRow.getCell(0).getStringCellValue();
					String secondColumn = secondRow.getCell(1).getStringCellValue();
					
					if(!"Class & Section".equalsIgnoreCase(fistColumn.toString()))
					{
						super.addActionError("File type not matched.");
						log.debug("No file to upload....");
						return "dummyInit";
					}
					fistColumn = null;
					secondColumn = null;
				}
				else
				{
					super.addActionError("File type not matched.");
					log.debug("No file to upload....");
					return "dummyInit";
				}
			}
			else
			{
				super.addActionError("File type not matched.");
				log.debug("No file to upload....");
				return "dummyInit";
			}
			
			LoadCustomerEnrollAndStaffSubjectsSheet();
			log.debug(" *************** ajaxUploadStaffSubjectsData method Calling completed **************");
			super.addActionMessage("Processed submitted records, please verify the data in the system. If any of the records not imported, please correct the data and reimport. You no need to remove the processed records from the sheet. System would take care of not loading again.");
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally
		{
			ajaxViewStaffEligibleSubjects();
			return SUCCESS;
		}
	}

	
	@Action(value = "ajaxDoFeeCollection", results = { @Result(location = "../schoolfee/reports/ajaxDoFeeCollection.jsp", name = "success") })
	public String ajaxDoFeeCollection() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoFeeCollection' method");
		}
		try {
			checkStudyClassHavingStudentsOrNot();
			prepareSmsReportsMap();
			prepareSchoolFeeSettingList();
			setSchoolTermsList(adminManager.getAll(SchoolTerms.class,"custId=" + getUserCustId()+ " and academicYearId="+ getUserAcademicYearId() +" and feeSettingId in "+getAnyTitle()+" order by feeSettingId"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Action(value = "ajaxDoFeeOutStanding", results = { @Result(location = "../schoolfee/reports/ajaxDoFeeOutStanding.jsp", name = "success") })
	public String ajaxDoFeeOutStanding() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoFeeOutStanding' method");
		}
		try {
			prepareFeeDuesList();
			prepareSchoolFeeSettingList();
			setSchoolTermsList(adminManager.getAll(SchoolTerms.class,"custId=" + getUserCustId()+ " and academicYearId="+ getUserAcademicYearId() +" and feeSettingId in "+getAnyTitle()+" order by feeSettingId"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Action(value = "ajaxDoFeePaidUnPaidDetails", results = { @Result(location = "../schoolfee/reports/ajaxDoFeePaidUnpaidDetails.jsp", name = "success") })
	public String ajaxDoFeePaidUnPaidDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoFeePaidUnPaidDetails' method");
		}
		try {
			prepareFeeDuesList();
			prepareSchoolFeeSettingList();
			setSchoolTermsList(adminManager.getAll(SchoolTerms.class,"custId=" + getUserCustId()+ " and academicYearId="+ getUserAcademicYearId() +" and feeSettingId in "+getAnyTitle()+" order by feeSettingId"));
			checkStudyClassHavingStudentsOrNot();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	public String generateExcelForStudentFee(String feeGenerateType)throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'generateExcelForStudentFee' method");
		}
		try {
				AcademicYear academicYear = null;
				List<ViewStudentFeePaymentDetails> feeCollectionList=null;
				String today = null;
				String daysBetwwenenfromDate = null;
				String daysBetwwenendDate = null;
				long schoolTermId=0;
				Date newDate = new Date();
				academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getUserAcademicYearId());
				SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
				if ("Term Wise".equalsIgnoreCase(feeGenerateType) && !StringFunctions.isNullOrEmpty(getAnyTitle()) && !ObjectFunctions.isNullOrEmpty(getSelectedId())) {
					feeCollectionList=adminManager.getTermWiseFeeCollectionList("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),getAnyTitle(),getSelectedId(),academicYear.getReceiptGenerationType());
					feeCollectionList.addAll(adminManager.getTermWiseFeeCollectionList("vw_studentTransportFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),getAnyTitle(),getSelectedId(),academicYear.getReceiptGenerationType()));
				}else{
					if ("Today".equalsIgnoreCase(feeGenerateType) && !StringFunctions.isNullOrEmpty(getAnyTitle())) {
						today = lastUpdatedStr.format(newDate);
					}else if ("Days Between".equalsIgnoreCase(feeGenerateType)&& getTempId() > 0) {
						SimpleDateFormat fromUser = new SimpleDateFormat("MM/dd/yyyy");
						daysBetwwenenfromDate =lastUpdatedStr.format(fromUser.parse(getParamValue("startDate")));//lastUpdatedStr.format(startDate);// DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
						daysBetwwenendDate = lastUpdatedStr.format(fromUser.parse(getParamValue("endDate")));//lastUpdatedStr.format(endDate);//DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
					}
					feeCollectionList=adminManager.getFeeCollectionList("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),today,daysBetwwenenfromDate,daysBetwwenendDate,academicYear.getReceiptGenerationType());
					feeCollectionList.addAll(adminManager.getFeeCollectionList("vw_studentTransportFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),today,daysBetwwenenfromDate,daysBetwwenendDate,academicYear.getReceiptGenerationType()));
				}
				String fileName = feeGenerateType;
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				WritableCellFormat cellFormat8 = getCellFormat8();
				// For School name
				WritableCellFormat cellFormat10 = getCellFormat10();
				WritableCellFormat cellFormatGray8 = getCellFormatGray10();
				WritableCellFormat cellFormat = null;
				WritableCellFormat cellFormatLeft = null;
				WritableCellFormat cellFormatCenter = null;
				NumberFormat fivedps = new NumberFormat("#.#####"); 
				WritableCellFormat cellFormatRight = new WritableCellFormat(fivedps);
				WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
				WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
				font1.setColour(Colour.BLACK);
				font2.setColour(Colour.BLACK);
				cellFormatCenter = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				cellFormatLeft = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.LEFT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				cellFormatRight = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				Customer customer = getCustomerByCustId();
				
				HashMap<Long, SchoolTerms> schoolTermsMap = new HashMap<Long, SchoolTerms>();
				List<SchoolTerms> termsList = studentManager.getAll(SchoolTerms.class, "custId=" + getUserCustId()+" and academicYearId="+academicYear.getId());
				if (ObjectFunctions.isNotNullOrEmpty(termsList)) {
					for (SchoolTerms schoolTerms : termsList) {
						schoolTermsMap.put(schoolTerms.getId(), schoolTerms);
					}
				}
				if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
						excelView.setWorkSheetName(feeGenerateType+" Collection");
						excelView.createWorkSheet(0);
						excelView.setDefaultFormat(excelView.getArial10format());
						excelView.getWs().setColumnView(0, 15);
						excelView.getWs().setColumnView(1, 15);
						excelView.getWs().setColumnView(2, 15);
						excelView.getWs().setColumnView(3, 35);
						excelView.getWs().setColumnView(4, 15);
						excelView.getWs().setColumnView(5, 15);
						excelView.getWs().setColumnView(6, 15);
						excelView.getWs().setColumnView(7, 18);
						excelView.getWs().setColumnView(8, 20);
						
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							int rowCount = 1;
							rowCount = prepareFeeCollectionCustomerHeader(excelView,  rowCount, cellFormat10, cellFormat8, customer);
							
							rowCount++;
							prepareFeeCollectionHeader(excelView,rowCount,cellFormatGray8);
							rowCount++;
							
							if(!ObjectFunctions.isNullOrEmpty(feeCollectionList)){
								rowCount = feeCollectionDate(excelView,rowCount, cellFormat10, cellFormat8, feeCollectionList, academicYear,schoolTermsMap, cellFormat, cellFormatGray8, cellFormatLeft,cellFormatRight);
							}else{
								excelView.getWs().mergeCells(0, 4, 8, 4);
								if ("Today".equalsIgnoreCase(feeGenerateType) && !StringFunctions.isNullOrEmpty(getAnyTitle())) {
									excelView.getWs().addCell(new Label(0,4,"Currently there are no any fee collections for Today.",cellFormatCenter));
								}else if ("Days Between".equalsIgnoreCase(feeGenerateType)&& getTempId() > 0) {
									excelView.getWs().addCell(new Label(0,4,"Currently there are no any fee collections between selected dates. ",cellFormatCenter));
								}else
									excelView.getWs().addCell(new Label(0,4,"Currently there are no matched data",cellFormatCenter));
							}
						}
						excelView.getWb().write();
						excelView.getWb().close();
				}
		
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	public WritableCellFormat getCellFormatGray10(){
		WritableFont boldfont10 = null;
		WritableCellFormat cellFormat10 = null;
		try {
			
			boldfont10 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			cellFormat10 = new WritableCellFormat(boldfont10);
			boldfont10.setColour(Colour.WHITE);
			cellFormat10 = ExcelView.getUserFormattedCell(boldfont10, Colour.GRAY_50, false,false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.NONE, BorderLineStyle.NONE);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return cellFormat10;
	}
	public WritableCellFormat getCellFormatGray8(){
		WritableFont boldfont8 = null;
		WritableCellFormat cellFormat8 = null;
		try {
			
			boldfont8 = new WritableFont(WritableFont.ARIAL, 8,WritableFont.BOLD, true);
			cellFormat8 = new WritableCellFormat(boldfont8);
			boldfont8.setColour(Colour.WHITE);
			cellFormat8 = ExcelView.getUserFormattedCell(boldfont8, Colour.GRAY_50, false,false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.NONE, BorderLineStyle.NONE);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return cellFormat8;
	}
	public String generateExcelForStudentFeeDefaulters(String feeGenerateType)throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'generateExcelForStudentFee' method");
		}
		try {

				AcademicYear academicYear = null;
				List<ViewStudentFeePaymentDetails> feeCollectionList=null;
			//	String today = null;
				long schoolTermId=0;
				List<SchoolTerms> termsList = null;
				Date newDate = new Date();
				StringBuffer query = null;
				StringBuffer queryString = null;
				SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
				String toDayDate = lastUpdatedStr.format(newDate);
				log.debug("toDayDate  "+toDayDate);
				if ("Class Wise Defaulters".equalsIgnoreCase(feeGenerateType) || "Total Defaulters".equalsIgnoreCase(feeGenerateType)){
					if("Class Wise Defaulters".equalsIgnoreCase(feeGenerateType))
					{
						//adfeeCollectionList=adminManager.getStudentFeeDefaultersList(getUserCustId(),getUserAcademicYearId(),getSelectedId(),getEmpId(),toDayDate);
						feeCollectionList = adminManager.getStudentFeeUnpaidDetails("vw_studentTransportFeeParticularsPayment",getUserCustId(), getUserAcademicYearId(),getEmpId(), getSelectedId());
						feeCollectionList.addAll(adminManager.getStudentFeeUnpaidDetails("vw_studentFeePaymentDetails", getUserCustId(),getUserAcademicYearId(), getEmpId(), getSelectedId()));
						
					}else{
						//feeCollectionList=adminManager.getFeeDefaultersList(getUserCustId(),getUserAcademicYearId(),getSelectedId(),"",toDayDate);
						
						feeCollectionList = adminManager.getStudentFeeUnpaidDetails("vw_studentTransportFeeParticularsPayment",getUserCustId(), getUserAcademicYearId(),getEmpId(), getSelectedId());
						feeCollectionList = adminManager.getStudentFeeUnpaidDetails("vw_studentFeePaymentDetails", getUserCustId(),getUserAcademicYearId(), getSelectedId(), "");
					}
				}else if("PaidAndUnPaidDetails".equalsIgnoreCase(feeGenerateType) && !ObjectFunctions.isNullOrEmpty(getAnyTitle())){
					/*@Ganesh : getWishTitle() we are using for to show student inactive student need to show are not. If we get Y we will show active and inactive student if we get N we will show only active students */
					feeCollectionList=adminManager.getStudentFeePaidAndUnpaidDetails("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),getSelectedId(),getAnyTitle(),getWishTitle());
					feeCollectionList.addAll(adminManager.getStudentFeePaidAndUnpaidDetails("vw_studentTransportFeeParticularsPayment",getUserCustId(),getUserAcademicYearId(),getSelectedId(),getAnyTitle(),getWishTitle()));
				}
				
				String fileName = feeGenerateType;
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				
				WritableCellFormat cellFormat8 = getCellFormat8();
				// For School name
				WritableCellFormat cellFormat10 = getCellFormat10();
				WritableCellFormat cellFormatGray8 = getCellFormatGray10();
				WritableCellFormat cellFormat = null;
				WritableCellFormat cellFormatLeft = null;
				WritableCellFormat cellFormatBoldRight = null;
				NumberFormat fivedps = new NumberFormat("#.#####"); 
				WritableCellFormat cellFormatRight = new WritableCellFormat(fivedps);
				WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
				WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
				font1.setColour(Colour.BLACK);
				font2.setColour(Colour.BLACK);
				cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				cellFormatLeft = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.LEFT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				cellFormatRight = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				
				cellFormatBoldRight = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				
				Customer customer = getCustomerByCustId();
				academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getUserAcademicYearId());
				HashMap<Long, SchoolTerms> schoolTermsMap = new HashMap<Long, SchoolTerms>();
				if ("Class Wise Defaulters".equalsIgnoreCase(feeGenerateType) || "Total Defaulters".equalsIgnoreCase(feeGenerateType)){
					if("Class Wise Defaulters".equalsIgnoreCase(feeGenerateType)){
						termsList =adminManager.getAll(SchoolTerms.class," custId="+getUserCustId()+" and  academicYearId="+getUserAcademicYearId()+" and id in "+getEmpId()+" and dueDate <'"+toDayDate+" 00:00:00' order by dueDate");
					}else{
						termsList =adminManager.getAll(SchoolTerms.class," custId="+getUserCustId()+" and  academicYearId="+getUserAcademicYearId()+" and dueDate <'"+toDayDate+" 00:00:00' order by dueDate");
					}
				}
				else if("PaidAndUnPaidDetails".equalsIgnoreCase(feeGenerateType) && !ObjectFunctions.isNullOrEmpty(getAnyTitle())){
					termsList = studentManager.getAll(SchoolTerms.class, "custId=" + getUserCustId()+" and academicYearId="+academicYear.getId()+" and id in"+getSelectedId());
				}
				if (ObjectFunctions.isNotNullOrEmpty(termsList)) {
					for (SchoolTerms schoolTerms : termsList) {
						schoolTermsMap.put(schoolTerms.getId(), schoolTerms);
					}
				}
				if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
						excelView.setWorkSheetName(feeGenerateType+" Collection");
						excelView.createWorkSheet(0);
						excelView.setDefaultFormat(excelView.getArial10format());
						excelView.getWs().setColumnView(0, 15);
						excelView.getWs().setColumnView(1, 35);
						excelView.getWs().setColumnView(2, 15);
						excelView.getWs().setColumnView(3, 15);
						excelView.getWs().setColumnView(4, 15);
						excelView.getWs().setColumnView(5, 15);
						excelView.getWs().setColumnView(6, 15);
						excelView.getWs().setColumnView(7, 17);
						excelView.getWs().setColumnView(8, 15);
						excelView.getWs().setColumnView(9, 15);
						//excelView.getWs().addCell(numberCell);
						
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
								excelView.getWs().mergeCells(0, 0, 9, 1);
								excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
							}
							if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
								excelView.getWs().mergeCells(0, 2, 9, 2);
								excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
							}
							int rowCount = 3;
							excelView.getWs().addCell(new Label(0, rowCount,"Admission No", cellFormatGray8));
							excelView.getWs().addCell(new Label(1, rowCount, "Student Name",cellFormatGray8));
							excelView.getWs().addCell(new Label(2, rowCount,"Class & Section",cellFormatGray8));
							excelView.getWs().addCell(new Label(3, rowCount,"Parent Phone#",cellFormatGray8));
							excelView.getWs().addCell(new Label(4, rowCount,"Due Date",cellFormatGray8));
							excelView.getWs().addCell(new Label(5, rowCount,"Total Amount",cellFormatGray8));
							excelView.getWs().addCell(new Label(6, rowCount,"Paid Amount",cellFormatGray8));
							excelView.getWs().addCell(new Label(7, rowCount,"Discount Amount",cellFormatGray8));
							excelView.getWs().addCell(new Label(8, rowCount,"Concession Amount",cellFormatGray8));
							excelView.getWs().addCell(new Label(9, rowCount,"Due Amount",cellFormatGray8));
							rowCount++;
							double totalPaidAmount=0;
							double totalDueAmount=0;
							double totalDiscountAmount=0;
							double totalConcessionAmount=0;
							double termTotalPaidAmount=0;
							double termTotalDiscountAmount=0;
							double termTotalConcessionAmount=0;
							double termTotalDueAmount=0;
							double totalTermAmount = 0;
							long laastRec=0;
							double totalPaid = 0;
							//double defaultPaid = 0;
							double totalDiscount = 0;
							double totalConcession  = 0;
							double termTotalAmount = 0;
							double unPaidAmount = 0;
							if(!ObjectFunctions.isNullOrEmpty(feeCollectionList)){
								for (ViewStudentFeePaymentDetails studentFeePaymentDetails : feeCollectionList) 
								{
									if (schoolTermId != studentFeePaymentDetails.getSchoolTermId()) 
									{
										if (schoolTermId != 0 && schoolTermId != studentFeePaymentDetails.getSchoolTermId()) 
										{
											excelView.getWs().mergeCells(0, rowCount, 5, rowCount);
											if(!ObjectFunctions.isNullOrEmpty(schoolTermsMap)){
												if(!ObjectFunctions.isNullOrEmpty(schoolTermsMap.get(schoolTermId))){
													if(!StringFunctions.isNullOrEmpty(schoolTermsMap.get(schoolTermId).getTermName())){
														excelView.getWs().addCell(new Label(0,rowCount,schoolTermsMap.get(schoolTermId).getTermName()+" Total Due Amount",cellFormatBoldRight));
														excelView.getWs().addCell(new jxl.write.Number(6,rowCount,termTotalPaidAmount,cellFormatRight));
														excelView.getWs().addCell(new jxl.write.Number(7,rowCount,termTotalDiscountAmount,cellFormatRight));
														excelView.getWs().addCell(new jxl.write.Number(8,rowCount,termTotalConcessionAmount,cellFormatRight));
														
														excelView.getWs().addCell(new jxl.write.Number(9,rowCount,termTotalDueAmount,cellFormatRight));
														termTotalPaidAmount=0;
														termTotalDueAmount=0;
														termTotalDiscountAmount=0;
														termTotalConcessionAmount=0;
														rowCount++;
													}
												}
											}
										}
										excelView.getWs().mergeCells(0, rowCount,9, rowCount);
										excelView.getWs().addCell(new Label(0,rowCount,studentFeePaymentDetails.getTermName(),cellFormatGray8));
										rowCount++;
									}
									if(Constants.TRANSPORT_FEES.equalsIgnoreCase(studentFeePaymentDetails.getSettingName())){
										if(getCurrentAcademicYear().isTransportFeeByBoardingPoint()){
											studentFeePaymentDetails.getRouteBoardingPointId();
										}
									}
									if(studentFeePaymentDetails.getPaymentAmount()>0)
											//totalPaid = Double.valueOf(viewStudentPaymentDetails[0].toString())+Double.valueOf(viewStudentPaymentDetails[2].toString());
										totalPaid = studentFeePaymentDetails.getPaymentAmount();
									else
										    totalPaid = 0;
									if(studentFeePaymentDetails.getDiscountAmount()>0)
											totalDiscount = studentFeePaymentDetails.getDiscountAmount();
									else
											totalDiscount = 0;
									
									if(studentFeePaymentDetails.getConcessionAmount()>0)
										totalConcession = studentFeePaymentDetails.getConcessionAmount();
									else
										totalConcession = 0;
									query=null;

									termTotalAmount =  studentFeePaymentDetails.getPaidAmount();
									excelView.getWs().addCell(new Label(0, rowCount, studentFeePaymentDetails.getAdmissionNumber(),cellFormatLeft));
									excelView.getWs().addCell(new Label(1, rowCount, studentFeePaymentDetails.getFullName(),cellFormatLeft));
									excelView.getWs().addCell(new Label(2, rowCount, studentFeePaymentDetails.getClassAndSection(),cellFormatLeft));
									excelView.getWs().addCell(new Label(3, rowCount, studentFeePaymentDetails.getMobileNumber(),cellFormatLeft));
									excelView.getWs().addCell(new Label(4, rowCount, studentFeePaymentDetails.getDueDateStr(),cellFormatLeft));
									excelView.getWs().addCell(new jxl.write.Number(5, rowCount,studentFeePaymentDetails.getFeeAmount(),cellFormatRight));
									excelView.getWs().addCell(new jxl.write.Number(6, rowCount, studentFeePaymentDetails.getPaymentAmount(),cellFormatRight));
									excelView.getWs().addCell(new jxl.write.Number(7, rowCount,studentFeePaymentDetails.getDiscountAmount(),cellFormatRight));
									excelView.getWs().addCell(new jxl.write.Number(8, rowCount,studentFeePaymentDetails.getConcessionAmount(),cellFormatRight));
									unPaidAmount=studentFeePaymentDetails.getFeeAmount() - (studentFeePaymentDetails.getPaymentAmount()+ studentFeePaymentDetails.getDiscountAmount()+studentFeePaymentDetails.getConcessionAmount());
									
									excelView.getWs().addCell(new jxl.write.Number(9, rowCount, studentFeePaymentDetails.getPaidAmount(),cellFormatRight));
									rowCount++;
									totalPaidAmount+=studentFeePaymentDetails.getPaymentAmount();
									totalDueAmount+=studentFeePaymentDetails.getPaidAmount();
									totalDiscountAmount+=studentFeePaymentDetails.getDiscountAmount();
									totalConcessionAmount+=studentFeePaymentDetails.getConcessionAmount();
									
									
									termTotalPaidAmount+=studentFeePaymentDetails.getPaymentAmount();
									termTotalDiscountAmount+=studentFeePaymentDetails.getDiscountAmount();
									termTotalConcessionAmount+=studentFeePaymentDetails.getConcessionAmount();
									termTotalDueAmount+=studentFeePaymentDetails.getPaidAmount();
									totalTermAmount+= studentFeePaymentDetails.getFeeAmount();
									
									schoolTermId=studentFeePaymentDetails.getSchoolTermId();
									laastRec++;
									if (laastRec == feeCollectionList.size()) {
										excelView.getWs().mergeCells(0, rowCount, 5, rowCount);
										//excelView.getWs().mergeCells(6, rowCount, 7, rowCount);
										excelView.getWs().addCell(new Label(0,rowCount,schoolTermsMap.get(schoolTermId).getTermName()+" Total Due Amount",cellFormatRight));
										excelView.getWs().addCell(new jxl.write.Number(6,rowCount,termTotalPaidAmount,cellFormatRight));
										excelView.getWs().addCell(new jxl.write.Number(7,rowCount,termTotalDiscountAmount,cellFormatRight));
										excelView.getWs().addCell(new jxl.write.Number(8,rowCount,termTotalConcessionAmount,cellFormatRight));
										excelView.getWs().addCell(new jxl.write.Number(9,rowCount,termTotalDueAmount,cellFormatRight));
										rowCount++;
										termTotalPaidAmount=0;
										termTotalDueAmount=0;
										termTotalDiscountAmount=0;
										termTotalConcessionAmount=0;
										log.debug("this is last record......Wooooooffffff.....");
									}
								}
								rowCount++;
								if("Y".equalsIgnoreCase(getWishTitle())){
									rowCount=prepareStudentFeeRefundDetails(excelView,rowCount,cellFormatGray8,cellFormatLeft,cellFormatRight,cellFormatBoldRight,getUserCustId(),getUserAcademicYearId(), getAnyTitle());
								}
								
								excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
								excelView.getWs().addCell(new Label(0, rowCount, "Total Amount",cellFormatBoldRight));
								excelView.getWs().addCell(new jxl.write.Number(7, rowCount, totalTermAmount,cellFormatRight));
								rowCount++;
								excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
								excelView.getWs().addCell(new Label(0, rowCount, "Total Paid Amount",cellFormatBoldRight));
								excelView.getWs().addCell(new jxl.write.Number(7, rowCount, totalPaidAmount,cellFormatRight));
								rowCount++;
								excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
								excelView.getWs().addCell(new Label(0, rowCount, "Total Discount Amount",cellFormatBoldRight));
								excelView.getWs().addCell(new jxl.write.Number(7, rowCount, totalDiscountAmount,cellFormatRight));
								
								rowCount++;
								excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
								excelView.getWs().addCell(new Label(0, rowCount, "Total Concession Amount",cellFormatBoldRight));
								excelView.getWs().addCell(new jxl.write.Number(7, rowCount, totalConcessionAmount,cellFormatRight));
								
								rowCount++;
								excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
								excelView.getWs().addCell(new Label(0, rowCount, "Total Due Amount",cellFormatBoldRight));
								excelView.getWs().addCell(new jxl.write.Number(7, rowCount, totalDueAmount,cellFormatRight));
								showSchoolUrlInExcelSheetFooter(rowCount, excelView,8);
							}
						}
						excelView.getWb().write();
						excelView.getWb().close();
				}
		
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Action(value = "ajaxDoFeeAuditingDetails", results = { @Result(location = "../schoolfee/reports/ajaxDoFeeAuditingDetails.jsp", name = "success") })
	public String ajaxDoFeeAuditingDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoFeePaidUnPaidDetails' method");
		}
		try {
			//prepareSchoolFeeSettingList();
			checkStudyClassHavingStudentsOrNot();
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			// This will do for maharshi chennai only. So they need only term fee and transport fee. That's ahy we did not add non term fee and hostel fee.
			setSchoolTermsList(adminManager.getAll(SchoolTerms.class,"custId=" + getUserCustId()+ " and academicYearId="+ getUserAcademicYearId() +" and feeSettingId in (2,3) order by feeSettingId"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Action(value = "ajaxDownloadAuditingDetailsForFee", results = {})
	public void ajaxDownloadAuditingDetailsForFee() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadAuditingDetailsForFee' method");
		}
		try {
				String fileName = "Fee_"+getTempString()+"_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				getResponse().setContentType("application/vnd.ms-excel");
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				org.apache.poi.ss.usermodel.Workbook wb = new HSSFWorkbook();
				HSSFSheet sheet = (HSSFSheet) wb.createSheet("Collection Report");
				Customer customer  = getCustomerByCustId();
				String fromDate =null;
				String endDate =null;
				String sizeOfFeeType =null;
				if("todayReport".equalsIgnoreCase(getQueryString()) || "onlyTransport".equalsIgnoreCase(getQueryString())){
					fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,new Date());
					endDate = fromDate;
				}else{
					fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
					endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
				}
				if("advancedCollectionReport".equalsIgnoreCase(getTempString()) || "outStandingCollectionReport".equalsIgnoreCase(getTempString())){
						ajaxGenerateOutStandingAndAdvanceFeeReceipt(getTempString(),endDate, sheet ,wb,customer,getTempId(),getQueryString());
					}else{
					if(!ObjectFunctions.isNullOrEmpty(customer)){
						int rowNum = 0;
						int totalCellNum =0;
						Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
						Row row = sheet.createRow(rowNum);
						row.setHeightInPoints(72);
						org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);
						prepareSchoolFeeSettingList();
						StringBuffer feeSettingIds = new StringBuffer("(");
						if(ObjectFunctions.isNotNullOrEmpty(getObjectList())){
							for (Object objec : getObjectList()) {
								SchoolFeeSetting feetypename = (SchoolFeeSetting) objec;
								log.debug(feetypename.getStatus());
								feeSettingIds.append(feetypename.getId() + ",");
							}
						}
						feeSettingIds.append("0)");
						List<Object[]> feeSettingsList = null;
						feeSettingsList = adminManager.getAll("select feeType,id from feeType where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and feeSettingId in"+ feeSettingIds.toString()+ " order by feeSettingId,id");
						if(ObjectFunctions.isNotNullOrEmpty(feeSettingsList)){
							HashMap<Long, Integer> feeTypeColumns = new HashMap<Long, Integer>();
							// Header Part
							String[] header = new String[]{"S.No.","Date","Receipt No.","Student Name","Class","Admission No.","Term Name","Consession Fee"};
							sizeOfFeeType = org.apache.poi.ss.util.CellReference.convertNumToColString(feeSettingsList.size()+14);
							sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$"+sizeOfFeeType+"$1"));
							//sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$Z$1"));
							cell.setCellValue(customer.getOrganization()+"\n"+customer.getCustomerFormattedAddress()+"\n"+"Daily Collection Report");
							cell.setCellStyle(styles.get("title"));
							row = sheet.createRow(++rowNum);
							int cellNum = 0;
							for(String hea: header){
								cell = row.createCell(cellNum++);
								cell.setCellValue(hea);
								cell.setCellStyle(styles.get("header"));
							}
							
							cell = row.createCell(cellNum++);
							cell.setCellValue("Registration Fee");
							cell.setCellStyle(styles.get("header"));
							
							cell = row.createCell(cellNum++);
							cell.setCellValue("Prospective Fee");
							cell.setCellStyle(styles.get("header"));
							
							
							for (Object[] feeSettingName : feeSettingsList) {
								cell = row.createCell(cellNum);
								cell.setCellValue(feeSettingName[0].toString());
								cell.setCellStyle(styles.get("header"));
								feeTypeColumns.put(Long.valueOf(feeSettingName[1].toString()),cellNum);
								cellNum++;
							}
							cell = row.createCell(cellNum++);
							cell.setCellValue("Others");
							cell.setCellStyle(styles.get("header"));
							cell = row.createCell(cellNum++);
							cell.setCellValue("Cash Amount");
							cell.setCellStyle(styles.get("header"));
							cell = row.createCell(cellNum++);
							cell.setCellValue("Cheque/DD Amount");
							cell.setCellStyle(styles.get("header"));
							cell = row.createCell(cellNum++);
							cell.setCellValue("Cheque/DD Number");
							cell.setCellStyle(styles.get("header"));
							cell = row.createCell(cellNum++);
							cell.setCellValue("Total");
							cell.setCellStyle(styles.get("header"));
							totalCellNum = cell.getColumnIndex(); 
							// Students Fee Details
							List<ViewStudentFeePaymentDetails> feePaidDetailsList = null;
							int sNo = 1;
							feePaidDetailsList=adminManager.getStudentsFeePaidDetailsBySchoolTermId("vw_studentFeePaymentDetails",getUserCustId(), getUserAcademicYearId(), getSelectedId(), fromDate, endDate, feeSettingIds.toString());
							feePaidDetailsList.addAll(adminManager.getStudentsFeePaidDetailsBySchoolTermId("vw_studentTransportFeePaymentDetails",getUserCustId(), getUserAcademicYearId(), getSelectedId(), fromDate, endDate, feeSettingIds.toString()));
							if(!ObjectFunctions.isNullOrEmpty(feePaidDetailsList)){
								sNo = 1;
								long studentId = 0;
								double particularAmt = 0;
								double particularAmount = 0;
								double particularAmtPer = 0;
								StringBuffer termNames =null;
								for (ViewStudentFeePaymentDetails feeSettingDetail : feePaidDetailsList) {
									if(feeSettingDetail.getStudentId()!= studentId){
										termNames =new StringBuffer();
										cellNum = 0;
										row = sheet.createRow(++rowNum);
										cell = row.createCell(cellNum++);
										cell.setCellValue(sNo++);
										cell.setCellStyle(styles.get("string"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getPaymentDate());
										cell.setCellStyle(styles.get("date"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getInvoiceNumberStr());
										cell.setCellStyle(styles.get("string"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getFullName());
										cell.setCellStyle(styles.get("string"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getClassAndSection());
										cell.setCellStyle(styles.get("string"));
										cell = row.createCell(cellNum++);
										cell.setCellValue(feeSettingDetail.getAdmissionNumber());
										cell.setCellStyle(styles.get("string"));
										String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum-4);
										cell = row.createCell(totalCellNum);
										cell.setCellFormula("SUM(H"+(row.getRowNum()+1)+":"+columnLetter+(row.getRowNum()+1)+")");
										cell.setCellStyle(styles.get("string"));
										String columnLetterStatus = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
										cell.setCellStyle(styles.get("string"));
										if("C".equalsIgnoreCase(feeSettingDetail.getPaymentType())){
											cell = row.createCell(totalCellNum-3);
											cell.setCellFormula(columnLetterStatus+(row.getRowNum()+1));
											cell.setCellStyle(styles.get("string"));
										}else{
											cell = row.createCell(totalCellNum-3);
											cell.setCellValue("");
											cell.setCellStyle(styles.get("string"));
										}
										if("CH".equalsIgnoreCase(feeSettingDetail.getPaymentType())){
											cell = row.createCell(totalCellNum-2);
											cell.setCellFormula(columnLetterStatus+(row.getRowNum()+1));
											cell.setCellStyle(styles.get("string"));
										}else{
											cell = row.createCell(totalCellNum-2);
											cell.setCellValue("");
											cell.setCellStyle(styles.get("string"));
										}
										if(StringFunctions.isNotNullOrEmpty(feeSettingDetail.getChequeNumber())){
											cell = row.createCell(totalCellNum-1);
											cell.setCellValue(feeSettingDetail.getChequeNumber());
											cell.setCellStyle(styles.get("string"));
										}else{
											cell = row.createCell(totalCellNum-1);
											cell.setCellValue("");
											cell.setCellStyle(styles.get("string"));
										}
									}
									for(Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()){
										if(enty.getKey() == feeSettingDetail.getFeeTypeId()){
											if(!termNames.toString().contains(feeSettingDetail.getTermName())){
												termNames.append(feeSettingDetail.getTermName());
												termNames.append(",");
											}
											cell = row.getCell(enty.getValue());
											if(ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK){
												cell = row.createCell(enty.getValue());
												particularAmount=feeSettingDetail.getPaymentAmount();
												cell.setCellValue(feeSettingDetail.getPaymentAmount());
												cell.setCellStyle(styles.get("string"));
											}else{
												if(cell.getCellType() != org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK ){
													if(cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING && StringFunctions.isNotNullOrEmpty(cell.getStringCellValue())){
														particularAmt = Double.valueOf(cell.getStringCellValue());
													}else if(cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC)
														particularAmt = cell.getNumericCellValue();
												}
												particularAmount=Double.valueOf(particularAmt)+feeSettingDetail.getPaymentAmount();
												cell.setCellValue(Double.valueOf(particularAmt)+feeSettingDetail.getPaymentAmount());
												cell.setCellStyle(styles.get("string"));
											}
											if(feeSettingDetail.getDiscountAmount() > 0 && particularAmtPer == 0){
												particularAmtPer = particularAmount / feeSettingDetail.getFeeAmount() * 100 ;
											}
										}else{
											cell = row.getCell(enty.getValue());
											if(ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK){
												cell = row.createCell(enty.getValue());
												cell.setCellValue("");
												cell.setCellStyle(styles.get("string"));
											}
										}
										particularAmt = 0;
									}
									studentId = feeSettingDetail.getStudentId();
									cell = row.createCell(totalCellNum-4);
									cell.setCellValue(feeSettingDetail.getFineAmount());
									cell.setCellStyle(styles.get("string"));
									cell = row.createCell(6);
									cell.setCellValue(termNames.toString());
									cell.setCellStyle(styles.get("string"));
									cell = row.createCell(7);
									cell.setCellValue(particularAmtPer);
									cell.setCellStyle(styles.get("string"));
								}
							}else{
								row = sheet.createRow(++rowNum);
								row.setHeightInPoints(20);
								sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,feeSettingsList.size()+14));
								cell = row.createCell(0);
								cell.setCellValue("Correnctlly there are no students.");
								cell.setCellStyle(styles.get("title"));
							}
							
							List<OnlineApplicationDetailsView> todayAdmissionStudents=adminManager.getAdminssionApplicationFeeDetails(customer.getId(),getUserAcademicYearId());
							if(!ObjectFunctions.isNullOrEmpty(todayAdmissionStudents)){
								for(OnlineApplicationDetailsView onlineApplicationDetailsView : todayAdmissionStudents){
									row = sheet.createRow(++rowNum);
									cellNum = 0;
									cell = row.createCell(cellNum++);
									cell.setCellValue(sNo++);
									cell.setCellStyle(styles.get("string"));
									cell = row.createCell(cellNum++);
									cell.setCellValue(onlineApplicationDetailsView.getCreatedDate());
									cell.setCellStyle(styles.get("date"));
									cell = row.createCell(cellNum++);
									cell.setCellValue(onlineApplicationDetailsView.getReceiptNumber());
									cell.setCellStyle(styles.get("string"));
									cell = row.createCell(cellNum++);
									cell.setCellValue(onlineApplicationDetailsView.getFirstName()+" "+onlineApplicationDetailsView.getLastName());
									cell.setCellStyle(styles.get("string"));
									cell = row.createCell(cellNum++);
									cell.setCellValue(onlineApplicationDetailsView.getClassName());
									cell.setCellStyle(styles.get("string"));
									cell = row.createCell(cellNum++);
									cell.setCellValue(0);
									cell.setCellStyle(styles.get("string"));
									String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum-4);
									cell = row.createCell(totalCellNum);
									cell.setCellFormula("SUM(H"+(row.getRowNum()+1)+":"+columnLetter+(row.getRowNum()+1)+")");
									cell.setCellStyle(styles.get("string"));
									cell = row.createCell(8);
									cell.setCellValue(onlineApplicationDetailsView.getRegistrationFee());
									cell.setCellStyle(styles.get("string"));

									cell = row.createCell(9);
									cell.setCellValue(onlineApplicationDetailsView.getProspectiveFee());
									cell.setCellStyle(styles.get("string"));

								}
							}
							// Displaying Total amount
							if(!ObjectFunctions.isNullOrEmpty(feePaidDetailsList) || !ObjectFunctions.isNullOrEmpty(todayAdmissionStudents)){
							row = sheet.createRow(++rowNum);
							sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,6));
							cell = row.createCell(0);
							cell.setCellValue("Total");
							cell.setCellStyle(styles.get("header"));
							cell = row.createCell(7);
							String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(7);
							cell.setCellFormula("SUM("+columnName+"3:"+columnName+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
							cell = row.createCell(8);
							columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(8);
							cell.setCellFormula("SUM("+columnName+"3:"+columnName+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
							
							cell = row.createCell(9);
							columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(9);
							cell.setCellFormula("SUM("+columnName+"3:"+columnName+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
							
							for(Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()){
								cell = row.createCell(enty.getValue());
								String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(enty.getValue());
								cell.setCellFormula("SUM("+columnLetter+"3:"+columnLetter+(row.getRowNum())+")");
								cell.setCellStyle(styles.get("string"));
							}
							cell = row.createCell(totalCellNum-4);
							String columnLetter4 = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum-4);
							cell.setCellFormula("SUM("+columnLetter4+"3:"+columnLetter4+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
							cell = row.createCell(totalCellNum-3);
							String columnLetter1 = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum-3);
							cell.setCellFormula("SUM("+columnLetter1+"3:"+columnLetter1+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
							
							cell = row.createCell(totalCellNum-2);
							String columnLetter2 = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum-2);
							cell.setCellFormula("SUM("+columnLetter2+"3:"+columnLetter2+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
							
							cell = row.createCell(totalCellNum-1);
							cell.setCellStyle(styles.get("string"));
							
							cell = row.createCell(totalCellNum);
							String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
							cell.setCellFormula("SUM("+columnLetter+"3:"+columnLetter+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
							}
							showSchoolUrlInPOIExcelSheetFooter(wb, null, sheet, rowNum+1, totalCellNum);
							feePaidDetailsList = null;
							todayAdmissionStudents=null;
						}
						Integer[] colwidths = { 7, 12,10, 25, 10, 10};
						for (int i = 0; i < colwidths.length; i++) {
						    	sheet.setColumnWidth(i, colwidths[i] * 256);
					    }
					}
				}
				wb.write(getResponse().getOutputStream());
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public String ajaxGenerateOutStandingAndAdvanceFeeReceipt(String selectedValue,String endDate,HSSFSheet sheet, org.apache.poi.ss.usermodel.Workbook wb,Customer customer,long termCount,String selectFeeType) {
		try {
			if(!ObjectFunctions.isNullOrEmpty(customer)){
				int rowNum = 0;
				Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
				Row row = sheet.createRow(rowNum);
				row.setHeightInPoints(72);
				org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);
				prepareSchoolFeeSettingList();
				StringBuffer feeSettingIds = new StringBuffer("(");
				if(ObjectFunctions.isNotNullOrEmpty(getObjectList())){
					for (Object objec : getObjectList()) {
						SchoolFeeSetting feetypename = (SchoolFeeSetting) objec;
						if("onlyTransport".equalsIgnoreCase(selectFeeType)){
							if("T".equalsIgnoreCase(feetypename.getStatus())){
							   feeSettingIds.append(feetypename.getId()+ ",");
							   break;
						    }
						}else{
							feeSettingIds.append(feetypename.getId() + ",");	
						}
					}
				}
				feeSettingIds.append("0)");
				if("onlyTransport".equalsIgnoreCase(selectFeeType)){
					sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$E$1"));
				}else{
					sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$G$1"));
				}
				if("advancedCollectionReport".equalsIgnoreCase(selectedValue)){
					cell.setCellValue(customer.getOrganization()+"\n"+customer.getCustomerFormattedAddress()+"\n"+"Advanced Collection Report");
				}else{
					cell.setCellValue(customer.getOrganization()+"\n"+customer.getCustomerFormattedAddress()+"\n"+"Out Standing Collection Report");
				}
				cell.setCellStyle(styles.get("titleHeader"));
				List<Object[]> feeSettingsList = null;
				feeSettingsList = adminManager.getAll("select feeType,id from feeType where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and feeSettingId in"+ feeSettingIds.toString()+" order by feeSettingId,id");
				if(ObjectFunctions.isNotNullOrEmpty(feeSettingsList)){
					HashMap<Long, Integer> feeTypeColumns = new HashMap<Long, Integer>();
					// Header Part
					String[] header = new String[]{"S.No.","Student Name","Class"};
					row = sheet.createRow(++rowNum);
					int cellNum = 0;
					for(String hea: header){
						cell = row.createCell(cellNum++);
						cell.setCellValue(hea);
						cell.setCellStyle(styles.get("header"));
					}
					StringBuffer feeTypeHeader=new StringBuffer();
					if("onlyTransport".equalsIgnoreCase(selectFeeType)){
						feeTypeHeader.append("Transport Fee").append(",");
					}else{
						feeTypeHeader.append("Tuition Fee").append(",").append("Computer Fee").append(",").append("Science Fee").append(",");
					}
					for (Object[] feeSettingName : feeSettingsList) {
						if(feeTypeHeader.toString().contains(feeSettingName[0].toString())){
							cell = row.createCell(cellNum);
							cell.setCellValue(feeSettingName[0].toString());
							cell.setCellStyle(styles.get("header"));
							feeTypeColumns.put(Long.valueOf(feeSettingName[1].toString()),cellNum);
							cellNum++;
						}
					}
					cell = row.createCell(cellNum++);
					cell.setCellValue("Total");
					cell.setCellStyle(styles.get("header"));
					int totalCellNum = cell.getColumnIndex(); 
					String reportDate=null;
					 AcademicYear academicYear=getCurrentAcademicYear();
					if(!ObjectFunctions.isNullOrEmpty(academicYear)){
					  Date startDate=academicYear.getStartDate();
					  Calendar cal = Calendar.getInstance();
					  cal.setTime(startDate);
					  int year = cal.get(Calendar.YEAR);
					  Calendar dateTime = new GregorianCalendar(year, 01, 01);
					  if(termCount==1){
					  dateTime.add(Calendar.MONTH, 6); 	// Get July end date for current year.
					  }
					  else{
					   dateTime.add(Calendar.MONTH, 10); // Get November end date for current year.
					  }
					  dateTime.add(Calendar.DAY_OF_MONTH, -1);
				      Date lastDayOfMonth = dateTime.getTime();
					  log.debug(lastDayOfMonth+"----This last date date of month");
					  reportDate= DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,dateTime.getTime());
					  academicYear=null;
				    }
					
					// Students Fee Details
					List<ViewStudentFeePaymentDetails> feePaidDetailsList = null;
					if(feeSettingIds.toString().contains("3"))
						feePaidDetailsList=adminManager.getStudentsFeePaidDetailsBySchoolTermIdAndEndDateAndStatus("vw_studentTransportFeePaymentDetails",getUserCustId(), getUserAcademicYearId(), getSelectedId(),reportDate, feeSettingIds.toString(),selectedValue);
					else
						feePaidDetailsList=adminManager.getStudentsFeePaidDetailsBySchoolTermIdAndEndDateAndStatus("vw_studentFeePaymentDetails",getUserCustId(), getUserAcademicYearId(), getSelectedId(),reportDate, feeSettingIds.toString(),selectedValue);
						
					if(!ObjectFunctions.isNullOrEmpty(feePaidDetailsList)){
						int sNo = 1;
						long  studentId = 0;
						double particularAmt = 0;
						int monthCount=0;
						int sNoForOutStanding=1;
						for (ViewStudentFeePaymentDetails feeSettingDetail : feePaidDetailsList) {
							if(feeSettingDetail.getStudentId()!= studentId){
								cellNum = 0;
								row = sheet.createRow(++rowNum);
								cell = row.createCell(cellNum++);
								if("advancedCollectionReport".equalsIgnoreCase(selectedValue)){
									cell.setCellValue(sNo++);
									if(termCount==1)
										monthCount=2;
										else
										monthCount=4;
								}else{
									cell.setCellValue(sNoForOutStanding);
									if(termCount==1)
										monthCount=4;
									else if(termCount==2)
									    monthCount=2;
									else
									    monthCount=8;
								}
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(feeSettingDetail.getFullName());
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(feeSettingDetail.getClassAndSection());
								cell.setCellStyle(styles.get("string"));
								String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum-1);
								cell = row.createCell(totalCellNum);
								cell.setCellFormula("SUM(D"+(row.getRowNum()+1)+":"+columnLetter+(row.getRowNum()+1)+")");
								cell.setCellStyle(styles.get("string"));
							}
							double totalAmount=0;
							String checkAdvorOut="";
							String[] splitStr=null;
							for(Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()){
								if(enty.getKey() == feeSettingDetail.getFeeTypeId()){
									cell = row.getCell(enty.getValue());
									if(ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK){
										cell = row.createCell(enty.getValue());
										checkAdvorOut =getTheAuditingAmount(feeSettingDetail.getPaymentAmount(),feeSettingDetail.getFeeAmount(),monthCount,termCount,feeSettingDetail.getPaymentStatus());
										if(!ObjectFunctions.isNullOrEmpty(checkAdvorOut)){
											splitStr =checkAdvorOut.split(",");
											if(selectedValue.equalsIgnoreCase(splitStr[0].toString())){
												cell.setCellValue(Math.round(Double.valueOf(splitStr[1].toString())));
												totalAmount+= Math.round(Double.valueOf(splitStr[1].toString()));
											}
										}
										else{
											cell.setCellValue("");
										}
										cell.setCellStyle(styles.get("string"));
									}else{
										if(cell.getCellType() != org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK ){
											if(cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING && StringFunctions.isNotNullOrEmpty(cell.getStringCellValue())){
												particularAmt = Double.valueOf(cell.getStringCellValue());
											}else if(cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC)
												particularAmt = cell.getNumericCellValue();
										}
										checkAdvorOut =getTheAuditingAmount(feeSettingDetail.getPaymentAmount(),feeSettingDetail.getFeeAmount(),monthCount,termCount,feeSettingDetail.getPaymentStatus());
										if(!ObjectFunctions.isNullOrEmpty(checkAdvorOut)){
										splitStr =checkAdvorOut.split(",");
										if(selectedValue.equalsIgnoreCase(splitStr[0].toString())){
											cell.setCellValue(Math.round(Double.valueOf(splitStr[1].toString())) + particularAmt);
											totalAmount+= Math.round(Double.valueOf(splitStr[1].toString()));
										 }
										}else{
											cell.setCellValue("");
										}
										cell.setCellStyle(styles.get("string"));
									}
								}else{
									cell = row.getCell(enty.getValue());
									if(ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK){
										cell = row.createCell(enty.getValue());
										cell.setCellValue("");
										cell.setCellStyle(styles.get("string"));
									}
								}
								particularAmt = 0;
								splitStr=null;
								checkAdvorOut="";
							}
							String columnLatLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
							FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();
							CellReference cellReference = new CellReference(columnLatLetter+(row.getRowNum()+1)); 
							row = sheet.getRow(cellReference.getRow());
							cell = row.getCell(cellReference.getCol()); 
							CellValue cellValue = evaluator.evaluate(cell);
							if(cellValue.getNumberValue() > 0){
								row.setHeightInPoints(15);
								if(cellValue.getNumberValue() == totalAmount)
									sNoForOutStanding++;
							}else{
								row.setHeightInPoints(0);
							}
							totalAmount=cellValue.getNumberValue();
							studentId=feeSettingDetail.getStudentId();
						}
						
						row = sheet.createRow(++rowNum);
						sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,2));
						cell = row.createCell(0);
						cell.setCellValue("Total");
						cell.setCellStyle(styles.get("header"));
						for(Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()){
							cell = row.createCell(enty.getValue());
							String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(enty.getValue());
							cell.setCellFormula("SUM("+columnLetter+"3:"+columnLetter+(row.getRowNum())+")");
							cell.setCellStyle(styles.get("string"));
						}
						cell = row.createCell(totalCellNum);
						String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
						cell.setCellFormula("SUM("+columnLetter+"3:"+columnLetter+(row.getRowNum())+")");
						cell.setCellStyle(styles.get("string"));
						showSchoolUrlInPOIExcelSheetFooter(wb, null, sheet, rowNum+1, totalCellNum);
					}
					feePaidDetailsList = null;
				}
				Integer[] colwidths = { 7, 30,20, 25, 20, 20};
				 for (int i = 0; i < colwidths.length; i++) {
				    	sheet.setColumnWidth(i, colwidths[i] * 256);
			    }
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	public static int getNumberOfMonths(Date fromDate, Date toDate) {
		int monthCount = 0;
		Calendar cal = Calendar.getInstance();
		cal.setTime(fromDate);
		int c1date = cal.get(Calendar.DATE);
		int c1month = cal.get(Calendar.MONTH);
		int c1year = cal.get(Calendar.YEAR);
		cal.setTime(toDate);
		int c2date = cal.get(Calendar.DATE);
		int c2month = cal.get(Calendar.MONTH);
		int c2year = cal.get(Calendar.YEAR);
		monthCount = ((c2year - c1year) * 12) + (c2month - c1month) + ((c2date >= c1date) ? 1 : 0);
		return monthCount-1;
	}
	public static String getLastMonthEndDate() {
		GregorianCalendar calendar = new GregorianCalendar();
        calendar.add(Calendar.MONTH, 0); // To set previous month
        // To get last day of the previous month
        calendar.add(Calendar.DAY_OF_MONTH, -(calendar.get(Calendar.DAY_OF_MONTH)));
        // Build new GregorianCalendar with new Year, Month and Day
        GregorianCalendar calendar1 = new GregorianCalendar(calendar.get(Calendar.YEAR),
	     calendar.get(Calendar.MONTH),
	     calendar.get(Calendar.DAY_OF_MONTH));
		return DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,calendar1.getTime());
	}
	public static String getTheAuditingAmount(double paymentAmount, double feeAmount ,int monthCount,long termCount,String paymentStatus) {
		double checkPerMonthBalanceAmount=0;
		double auditingMountAmount=0;
		double checkAvailableOrNot=0; 
		if(termCount <=2){
			checkPerMonthBalanceAmount = feeAmount/6.0;
		}else{
			checkPerMonthBalanceAmount = feeAmount/12.0 ;
		}
		if(monthCount == 8 && paymentStatus=="N"){
			auditingMountAmount = checkPerMonthBalanceAmount * 2;
		}else{
			auditingMountAmount = checkPerMonthBalanceAmount * monthCount;
		}
    	 
    	StringBuffer checkValues=null;
    	if(paymentAmount == feeAmount){
    		checkValues=new StringBuffer();
    		if(auditingMountAmount <= paymentAmount){
    			checkAvailableOrNot=paymentAmount - auditingMountAmount;
    			checkValues.append("advancedCollectionReport");
    			checkValues.append(",");
    			checkValues.append(checkAvailableOrNot);
    		}
    	}else{
    		checkValues=new StringBuffer();
    		if(auditingMountAmount <= paymentAmount){
    			checkAvailableOrNot=paymentAmount - auditingMountAmount;
    			checkValues.append("advancedCollectionReport");
    			checkValues.append(",");
    			checkValues.append(checkAvailableOrNot);
    		}else{
    			checkAvailableOrNot= auditingMountAmount - paymentAmount;
    			checkValues.append("outStandingCollectionReport");
    			checkValues.append(",");
    			checkValues.append(checkAvailableOrNot);
    		}
    	}
		return checkValues.toString();
	}
	@Actions( {/* @Action(value = "ajaxStudentPaymentPdfFeeReportPopUp", results = {@Result(location = "../admin/reports/popupViewStudentDetails.jsp", name = "success")}),*/
		@Action(value = "ajaxStudentAdmissionFeeReportPopup", results = {@Result(location = "../admin/reports/popupViewStudentAdmission.jsp", name = "success")})})
	public String ajaxStudentAdmissionFeeReportPopup() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxStudentAdmissionFeeReportPopup' method");
	}
	try {
		setCustomer((Customer)adminManager.get(Customer.class, getUserCustId()));
		//Added By Siva for displaying country currency symbol
        setCountry((Country)adminManager.get(Country.class, getCustomer().getAddress().getCountryId()));
		if (getUserAcademicYearId() != 0 && getTempId1() > 0) {
			setOnlineApplicationDetails((OnlineApplicationDetails)adminManager.get(OnlineApplicationDetails.class,"custId="+ getUserCustId()+" and id="+getTempId1()+" and academicYearId="+getUserAcademicYearId()));
			setEmpId(getEmpId());
			setBedId(getBedId());
			setAnyTitle(getAnyTitle());
		}
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	
	@Action(value = "ajaxFeeReportsByClassPercentWise", results = { @Result(location = "../schoolfee/reports/ajaxFeeReportsByClassPercentWise.jsp", name = "success") })
	public String ajaxFeeReportsByClassPercentWise() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxFeeReportsByClassPercentWise' method");
		}
		try {
			checkStudyClassHavingStudentsOrNot();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Action(value = "ajaxGenrateClassPercentWiseFeeDetails", results = {})
	public void ajaxGenrateClassPercentWiseFeeDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenrateClassPercentWiseFeeDetails' method");
		}
		try {
			List<ViewStudentFeePaymentDetails> feeCollectionList=null;
			long studentId=0;
//			List<SchoolTerms> termsList = null;
			String fileName =null;
			if("feeCollectionReport".equalsIgnoreCase(getAnyTitle())){
				fileName = "Percent wise fee collections details";
			}else{
				fileName = "Percent wise fee defaulters details";
			}
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
			WritableCellFormat cellFormat8 = getCellFormat8();
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormatGray8 = getCellFormatGray10();
			WritableCellFormat cellFormat = null;
			WritableCellFormat cellFormatLeft = null;
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
			font1.setColour(Colour.BLACK);
			font2.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			cellFormatLeft = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.LEFT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			if(getTempId() >=0 && StringFunctions.isNotNullOrEmpty(getSelectedId()) && StringFunctions.isNotNullOrEmpty(getAnyTitle()) ){
				excelView.setWorkSheetName(fileName+" Collection");
				excelView.createWorkSheet(0);
				excelView.setDefaultFormat(excelView.getArial10format());
				excelView.getWs().setColumnView(0, 10);
				excelView.getWs().setColumnView(1, 15);
				excelView.getWs().setColumnView(2, 35);
				excelView.getWs().setColumnView(3, 16);
				excelView.getWs().setColumnView(4, 16);
				excelView.getWs().setColumnView(5, 18);
				excelView.getWs().setColumnView(6, 18);
				excelView.getWs().setColumnView(7, 18);
				excelView.getWs().setColumnView(8, 18);
				excelView.getWs().setColumnView(9, 18);
				excelView.getWs().setColumnView(10, 18);
				excelView.getWs().setColumnView(11, 18);
				Customer customer = getCustomerByCustId();
				int rowCount = 0;
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
						excelView.getWs().mergeCells(0, 0, 11, 1);
						excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
					}
					if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
						excelView.getWs().mergeCells(0, 2, 11, 2);
						excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
					}
					rowCount = 3;
					excelView.getWs().addCell(new Label(0, rowCount,"S No", cellFormatGray8));
					excelView.getWs().addCell(new Label(1, rowCount, "Admission No",cellFormatGray8));
					excelView.getWs().addCell(new Label(2, rowCount,"Student Name",cellFormatGray8));
					excelView.getWs().addCell(new Label(3, rowCount,"Class & Section",cellFormatGray8));
					excelView.getWs().addCell(new Label(4, rowCount,"Mobile Number#",cellFormatGray8));
					excelView.getWs().addCell(new Label(5, rowCount,"Total Fee",cellFormatGray8));
					excelView.getWs().addCell(new Label(6, rowCount,""+getAnyId()+" % Fee",cellFormatGray8));
					excelView.getWs().addCell(new Label(7, rowCount,"Paid Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(8, rowCount,"Balance Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(9, rowCount,"Discount Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(10, rowCount,"Concession Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(11, rowCount,"Total Balance",cellFormatGray8));
					rowCount++;
				}customer=null;
				feeCollectionList=adminManager.getFeeCollecttionWithPercentageDetailsByClassWise("vw_studentFeePaymentDetails",getUserCustId(), getUserAcademicYearId(), getSelectedId(),getAnyId(),getAnyTitle());
				if(ObjectFunctions.isNotNullOrEmpty(feeCollectionList)){
						if(!ObjectFunctions.isNullOrEmpty(feeCollectionList)){
							double feeAmount=0;
							double percentOffeeAmount=0;
							double totalPaidAmount=0;
							double balanceAmount=0;
							double balanceTotalAmount=0;
							double totalDiscountAmount=0;
							double totalConcessionAmount=0;
							int i=1;
							for (ViewStudentFeePaymentDetails studentFeePaymentDetails : feeCollectionList) {
								if (studentId != studentFeePaymentDetails.getStudentId()) {
									excelView.getWs().addCell(new jxl.write.Number(0, rowCount, i ,cellFormatLeft));
									excelView.getWs().addCell(new Label(1, rowCount, studentFeePaymentDetails.getAdmissionNumber(),cellFormatLeft));
									excelView.getWs().addCell(new Label(2, rowCount, studentFeePaymentDetails.getFullName(),cellFormatLeft));
									excelView.getWs().addCell(new Label(3, rowCount, studentFeePaymentDetails.getClassAndSection(),cellFormatLeft));
									excelView.getWs().addCell(new Label(4, rowCount, studentFeePaymentDetails.getMobileNumber(),cellFormatLeft));
									feeAmount+=studentFeePaymentDetails.getFeeAmount();
									excelView.getWs().addCell(new jxl.write.Number(5, rowCount, studentFeePaymentDetails.getFeeAmount(),cellFormat));
									percentOffeeAmount+=studentFeePaymentDetails.getPaidAmount();
									excelView.getWs().addCell(new jxl.write.Number(6, rowCount, studentFeePaymentDetails.getPaidAmount(),cellFormat));
									totalPaidAmount+=studentFeePaymentDetails.getPaymentAmount();
									excelView.getWs().addCell(new jxl.write.Number(7, rowCount, studentFeePaymentDetails.getPaymentAmount(),cellFormat));
									if(studentFeePaymentDetails.getPaymentAmount() > studentFeePaymentDetails.getPaidAmount())
									{
										balanceAmount+=studentFeePaymentDetails.getPaymentAmount() - studentFeePaymentDetails.getPaidAmount();
										excelView.getWs().addCell(new jxl.write.Number(8, rowCount, studentFeePaymentDetails.getPaymentAmount() - studentFeePaymentDetails.getPaidAmount() ,cellFormat));
									}else{
										balanceAmount+=studentFeePaymentDetails.getPaidAmount() - studentFeePaymentDetails.getPaymentAmount();
										excelView.getWs().addCell(new jxl.write.Number(8, rowCount, studentFeePaymentDetails.getPaidAmount() - studentFeePaymentDetails.getPaymentAmount() ,cellFormat));
									}
									totalDiscountAmount+=studentFeePaymentDetails.getDiscountAmount();
									excelView.getWs().addCell(new jxl.write.Number(9, rowCount, studentFeePaymentDetails.getDiscountAmount(),cellFormat));
									
									totalConcessionAmount+=studentFeePaymentDetails.getConcessionAmount();
									excelView.getWs().addCell(new jxl.write.Number(10, rowCount, studentFeePaymentDetails.getConcessionAmount(),cellFormat));
									
									balanceTotalAmount+=studentFeePaymentDetails.getTotalBalanceAmount();
									excelView.getWs().addCell(new jxl.write.Number(11, rowCount, studentFeePaymentDetails.getTotalBalanceAmount(),cellFormat));
									rowCount++;
									studentId=studentFeePaymentDetails.getStudentId();
								i++;
								}
							}
							excelView.getWs().addCell(new jxl.write.Number(5, rowCount, feeAmount,cellFormatGray8));
							excelView.getWs().addCell(new jxl.write.Number(6, rowCount, percentOffeeAmount,cellFormatGray8));
							excelView.getWs().addCell(new jxl.write.Number(7, rowCount, totalPaidAmount,cellFormatGray8));
							excelView.getWs().addCell(new jxl.write.Number(8, rowCount, balanceAmount,cellFormatGray8));
							excelView.getWs().addCell(new jxl.write.Number(9, rowCount, totalDiscountAmount,cellFormatGray8));
							excelView.getWs().addCell(new jxl.write.Number(10, rowCount, totalConcessionAmount,cellFormatGray8));
							excelView.getWs().addCell(new jxl.write.Number(11, rowCount, balanceTotalAmount,cellFormatGray8));
							showSchoolUrlInExcelSheetFooter(rowCount, excelView, 11);
						}
				}else {
					excelView.getWs().mergeCells(0, 4, 10, 4);
					excelView.getWs().addCell(new Label(0,4,"No student's in the selected class paid "+getAnyId()+"% of fee ",cellFormat));
				}
				feeCollectionList=null;
				if("feeCollectionReport".equalsIgnoreCase(getAnyTitle())){
					CellView cellView = new CellView();
				    cellView.setHidden(true);
				    excelView.getWs().setColumnView(8, cellView);
				}
				excelView.getWb().write();
				excelView.getWb().close();
			}
			
	} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	public void genereateTermWiseMarksReport() throws URTUniversalException {
   		if (log.isDebugEnabled()) {
   			log.debug("Entering 'ajaxDownloadExamsMarkSheet' method");
   		}
   		try
   		{
   			StudyClass studyClass = null;
			if (getUserAcademicYearId()!=0) {
 				String fileName ;
 				StringBuffer query = null;
 				fileName = "Term Wise Marks Details In School";
 				getResponse().setContentType("application/vnd.ms-excel");
 				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
 				HSSFSheet sheet = null;
 				List<Object[]> classStudentsList = null;
   				Row row = null;
   				org.apache.poi.ss.usermodel.Cell cell= null;
   				Integer col=null;
   				Object[] marks=null; 
				studyClass = (StudyClass) adminManager.get(StudyClass.class,"id="+getClassId()+"  and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" ");
   				int rowNum = 7;	
   				double obtainedMarks =0;
   				double totalObtainedMarks =0;
				double totalMarks = 0;
				double subTotalMarks = 0;
				double studTotalMarks = 0;
				double subMarks = 0;
				long subjectId = 0;
				long examTypeId = 0;
				int column = 0;
				double sumOfTotal = 0;
				double percentageMarks = 0;
				SchoolGrades gradeObjec = null;
				int calculatedMarks = 0;
				HashMap<String,Integer> examSchedulesCells = null;
   				if(!ObjectFunctions.isNullOrEmpty(studyClass)){
   					HSSFWorkbook wb = new HSSFWorkbook();
   					CellStyle style =  wb.createCellStyle();
   					style.setAlignment(CellStyle.ALIGN_RIGHT);
   					Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
						sheet = (HSSFSheet) wb.createSheet(studyClass.getClassAndSection());
						sheet = (HSSFSheet) wb.createSheet("ScholasticConfig");
		 				sheet = wb.getSheet(studyClass.getClassAndSection());
		   				createExamSchedulesHeader(wb.getSheetAt(0),styles);
		   				createExamSchedulesHeader(wb.getSheetAt(1),styles);
						sheet.setColumnHidden(3, true);
						sheet = wb.getSheetAt(0);
						row = sheet.createRow(1);
						row.setHeightInPoints(25);
						sheet.addMergedRegion(CellRangeAddress.valueOf("$A$2:Z$2"));
						cell = row.createCell(0);
						query = new StringBuffer("Class Name : ").append(studyClass.getClassAndSection());
						cell.setCellValue(query.toString());
						query = null;
						cell.setCellStyle(styles.get("title"));
						if(getUser().isSchoolStudent() || getUser().isParent()){
							if(getUser().isParent()){
								StringBuffer sql = new StringBuffer();
								//sql.append("from Student stud WHERE stud.account.parentId=").append(getUser().getId()).append(" and stud.status='Y'").append(" and  classSectionId=").append(studyClass.getId());
								sql.append("from Student stud WHERE stud.account.id=").append(getUser().getSelectedStudentId()).append(" and stud.status='Y'").append(" and  classSectionId=").append(studyClass.getId());
								List<Student> accntIds = adminManager.getAllHqlQuery(sql.toString());
								if(!ObjectFunctions.isNullOrEmpty(accntIds)){
									for(Student accntId :accntIds ){
										classStudentsList = adminManager.getAll("select studId,fullName,admissionNumber,rollNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ studyClass.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and description is null and studId ="+accntId.getId());
									}
								}
							}else{
							   classStudentsList = adminManager.getAll("select studId,fullName,admissionNumber,rollNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ studyClass.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and description is null and accountId="+getUser().getId());
							}
						}else{
							if (getUser().isSchoolHostel()) {
								classStudentsList = adminManager.getAll("select studId,fullName,admissionNumber,rollNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ studyClass.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and bedId!=0 and description is null");
							}else{
								classStudentsList = adminManager.getAll("select studId,fullName,admissionNumber,rollNumber from vw_studentClassDetails where custId=" + getUserCustId()+ " and classSectionId="+ studyClass.getId()+ " and academicYearId="+ getUserAcademicYearId()+" and description is null order by rollNumber");
								if(!ObjectFunctions.isNullOrEmpty(classStudentsList))
									Collections.sort(classStudentsList,new StudentRollNumberComparator());	
							}
						}
						StringBuffer subBuffer = new StringBuffer();						
						if(StringFunctions.isNotNullOrEmpty(getSubject().toString())){
							subBuffer.append("(");
       						String subAndexamTypeIdAndName[]=getSubject().split(",");
       						for(String subtypeId:subAndexamTypeIdAndName){
       							String subString[]=subtypeId.split("_");	  							        								
       									subBuffer.append(subString[0]+",");
       							}
       							subBuffer.append("0)");
							}
						HashMap<Double, String> marksGradeNameMap = new HashMap<Double, String>();
						List<SchoolGrades>  schoolGradesList = adminManager.getAll(SchoolGrades.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
						if (ObjectFunctions.isNotNullOrEmpty(schoolGradesList)) {
							for (SchoolGrades gradeObj : schoolGradesList) {
								marksGradeNameMap.put(gradeObj.getGradePoints(),gradeObj.getGradeName());
							}
						}
						if(!ObjectFunctions.isNullOrEmpty(classStudentsList)){
							query = new StringBuffer("FROM ExamSchedules schedule WHERE schedule.classSection=").append(studyClass.getId()).append(" and schedule.examType.id in ").append(getExamType()).append(" and schedule.subType.id in ").append(subBuffer).append(" and schedule.academicYear=").append(getUserAcademicYearId()+" and schedule.scheduled='"+Constants.YES_STRING+"' order by schedule.classSectionSubject,schedule.examType,schedule.subType");
							List<ExamSchedules> examScheduleDetails=adminManager.getAllHqlQuery(query.toString());
							List<ExamSchedules> examSubtypesList = adminManager.getAllHqlQuery("FROM ExamSchedules schedule WHERE schedule.classSection="+studyClass.getId()+" and schedule.examType.id in"+getExamType()+"  and schedule.academicYear="+getUserAcademicYearId()+" and schedule.scheduled='"+Constants.YES_STRING+"' group by schedule.subType");
							List<ExamSchedules> examTypesList=adminManager.getAllHqlQuery("FROM ExamSchedules schedule WHERE schedule.classSection="+studyClass.getId()+" and schedule.examType.id in "+getExamType()+" and schedule.academicYear="+getUserAcademicYearId()+" and schedule.scheduled='"+Constants.YES_STRING+"' group by schedule.examType");
							createHeaderForActivities(wb.getSheetAt(1),styles,examTypesList,classStudentsList);
							query = null;	
							if(!ObjectFunctions.isNullOrEmpty(examScheduleDetails)){
	   							sheet.createFreezePane(4, 7);
								examSchedulesCells = createExamScheulesSubjectsHeader(sheet,styles,studyClass,examScheduleDetails,examTypesList,examSubtypesList,getSubject());							
								if(!ObjectFunctions.isNullOrEmpty(examSchedulesCells)){
	   								for(Object[] studentDetails : classStudentsList){
	   									if(!ObjectFunctions.isNullOrEmpty(studentDetails)){
	   										row = sheet.createRow(rowNum);
	   										cell=row.createCell(0);
	   										cell.setCellValue(studentDetails[3].toString());
	   										cell.setCellStyle(styles.get("headerInfo"));
	   										cell=row.createCell(1);
	   										cell.setCellValue(studentDetails[2].toString());
	   										cell.setCellStyle(styles.get("headerInfo"));
	   										cell=row.createCell(2);
	   										cell.setCellValue(studentDetails[1].toString());
	   										cell.setCellStyle(styles.get("headerInfo"));
  											 obtainedMarks =0;
  											 totalMarks = 0;
  											 studTotalMarks = 0;
  											 subMarks = 0;
  											 subjectId = 0;
  											 examTypeId = 0;
  											 column = 0;
  											 subTotalMarks = 0;
  											 for(ExamSchedules examSchedules : examScheduleDetails){
  												marks = adminManager.get(" select maxMarks,obtainedMarks,subTypeName,scheduleId,present,subjectId,examTypeId,subjectName,subtypeId from vw_studentExamMarks where studId="+studentDetails[0].toString()+" and examTypeId="+examSchedules.getExamTypeId()+" and scheduleId="+examSchedules.getId()+"  order by subjectId,examTypeId,subTypeId");
  												if(!ObjectFunctions.isNullOrEmpty(marks)){
  													col = examSchedulesCells.get(marks[2].toString()+"_"+marks[3].toString());
 	  												if(!ObjectFunctions.isNullOrEmpty(col)){
 	  													cell = row.createCell(col);
 	  													column = col;
	  													 totalMarks = Double.valueOf(marks[0].toString());
 	  													if(marks[4].toString().equalsIgnoreCase("Y")){
 	  													    obtainedMarks = Double.valueOf(marks[1].toString());
 	  													    log.debug("obtainedMarks="+obtainedMarks);
 	  	  													if(!ObjectFunctions.isNullOrEmpty(col)){
 	  	 	  													cell = row.createCell(col);
 	  	 	  													column = col;
 	  																if(!ObjectFunctions.isNullOrEmpty(col)){
 	  																	cell = row.createCell(col);
 	  																	cell.setCellValue(obtainedMarks);
 	  																}
 	  															}
 	  	  												   col = examSchedulesCells.get("Weightage_"+marks[3].toString());
 	  	  												   cell = row.createCell(col);
	  	  													column = col;
 	  														if(StringFunctions.isNotNullOrEmpty(getSubject().toString())){
 	  							        						String subAndexamTypeIdAndName[]=getSubject().split(",");
 	  							        						for(String subtypeId:subAndexamTypeIdAndName){
 	  							        							String subString[]=subtypeId.split("_");
 	  							        								/*429_Theory_429_22,430_Assignment_430_0,432_FA1_432_0,433_FA2_433_0*/
 	  							        								String subTypeId= subString[0]; 	  							        								
 	  							        								String subTypeName= subString[1];
 	  							        								long termId= Long.valueOf(subString[2].toString());
 	  							        								long markPeecent=  Long.valueOf(subString[3].toString());
 	  							        								if(marks[2].toString().equalsIgnoreCase(subTypeName) && markPeecent > 0){
 	 	 	 	  														  subMarks = (obtainedMarks/totalMarks)*markPeecent;
 	 	 	 	 	  													
 	  							        								 }
 	 	  	  														   cell.setCellValue((int)Math.round(subMarks));
 	  							        						}
 	  														}
 	  														
 	  													 if(examTypeId == 0 || examTypeId == Long.valueOf(marks[6].toString())){
  															col = examSchedulesCells.get("Grade_"+marks[3].toString());
  															cell = row.createCell(col);
  															column = col;
  															if(!ObjectFunctions.isNullOrEmpty(col)){
  																cell = row.createCell(col);
  																		String subAndexamTypeIdAndName[]=getSubject().split(",");
  																		for(String subtypeId:subAndexamTypeIdAndName){
  																			String subString[]=subtypeId.split("_");
  																				String subTypeId= subString[0]; 	  							        								
  																				String subTypeName= subString[1];
  																				long termId= Long.valueOf(subString[2].toString());
  																				long markPeecent=  Long.valueOf(subString[3].toString());
  																				int roundMarks = (int) Math.round(subMarks);
  																				if(!ObjectFunctions.isNullOrEmpty(marksGradeNameMap)){
  																					if(!ObjectFunctions.isNullOrEmpty(marksGradeNameMap.get(Double.valueOf(roundMarks))))
  																						cell.setCellValue(marksGradeNameMap.get(Double.valueOf(roundMarks)));
  																				}
  																		}
 	  															}
 	 	  												}
													}
  												}
  												
  											}
  											subMarks = 0;
											examTypeId = examSchedules.getExamTypeId();
											subjectId = examSchedules.getStudySubjectId();
  											cell = null;
  											examSchedules=null;
  											subBuffer=null;
  											totalObtainedMarks+=obtainedMarks;
  											obtainedMarks=0;
										}
  											col = examSchedulesCells.get("Total"+"_"+subjectId);
											if(!ObjectFunctions.isNullOrEmpty(col)){
												cell = row.createCell(col);
												log.debug(subjectId+"---totalObtainedMarks"+totalObtainedMarks);
												cell.setCellValue((int)Math.round(totalObtainedMarks));
												totalObtainedMarks=0.0;
											}
	   										studentDetails=null;
	   									}
	   									rowNum++;
	   								}
	   							}
								showSchoolUrlInPOIExcelSheetFooter(null,wb,sheet,rowNum,col);
							}
							else{
			   			    		sheet.createRow(10).createCell(0).setCellValue("No Exam Schedules found for this class.");
							}
							}else{
		   			    		sheet.createRow(10).createCell(0).setCellValue("No students available for this class.");
							}
							wb.getCreationHelper().createFormulaEvaluator().evaluateAll();
			   				wb.write(getResponse().getOutputStream());
			   				sheet = null;
   				}
			}
   		}
   		catch(Exception ex)
   		{
   			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
   			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
   		}
   	}
	 
	public HashMap<String,Integer> createExamScheulesSubjectsHeader(HSSFSheet sheet,Map<String, CellStyle> styles,StudyClass studyClass,List<ExamSchedules> examScheduleDetails,List<ExamSchedules> examTypesList,List<ExamSchedules> examSubtypesList,String weightageStr){
		StringBuffer query = null;
		HashMap<String,Integer> scheduleSubType = null;
		List sechuduleObjects= null;
		Row scheduleIdsRow = null;
		Row scheduleSubjectNameRow = null;
		Row row = null;
		HashMap<String,Integer> examSchedulesCells = null;
		
		HashMap<String,List<ExamSchedules>> subjectMap=new LinkedHashMap<String,List<ExamSchedules>>();
		if(!ObjectFunctions.isNullOrEmpty(examScheduleDetails)){
			scheduleIdsRow = sheet.createRow(3);
			scheduleIdsRow.setZeroHeight(true);
			scheduleSubjectNameRow = sheet.createRow(4);
			Row  scheduleExamTypeRow = sheet.createRow(5);
			scheduleSubjectNameRow.setHeightInPoints(20);
			row = sheet.createRow(6);
			row.setHeightInPoints(30);
			org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);
			cell.setCellValue("Roll Number");
			cell.setCellStyle(styles.get("headerInfo"));
			cell = row.createCell(1);
			cell.setCellValue("Admission Number");
			cell.setCellStyle(styles.get("headerInfo"));
			cell = row.createCell(2);
			cell.setCellValue("Student Name");
			cell.setCellStyle(styles.get("headerInfo"));
			int subColnum = 4;
			int subTypeColnum = 4;
			int examNameColumn = 4;
			List<ExamSchedules> subjectSchedules = null;
			ExamSchedules examSchedule = null;
			int totalSubTypesCount =0;
			examSchedulesCells = new HashMap<String,Integer>();
			long subjectId=0;
			long examTypeId = 0;
			int l=0;
			
			HashMap<Long, Long> subtypeIdMap = new HashMap<Long, Long>();
			/*432_Theory_429_22,433_Assignment_430_0,432_FA1_432_0,433_FA2_433_0*/
			if(StringFunctions.isNotNullOrEmpty(weightageStr)){
					String subAndexamTypeIdAndName[]=weightageStr.split(",");
					for(String subtypeId:subAndexamTypeIdAndName){
						String subString[]=subtypeId.split("_");
						subtypeIdMap.put(Long.valueOf(subString[0]),Long.valueOf(subString[3]));
						}
				}
			for(ExamSchedules examSchedules : examScheduleDetails){
				if(subjectId != examSchedules.getClassSectionSubject().getId()){
					cell = scheduleSubjectNameRow.createCell(subColnum);
					sheet.addMergedRegion(new CellRangeAddress(scheduleSubjectNameRow.getRowNum(),scheduleSubjectNameRow.getRowNum(),subColnum,subColnum+1));
		        	cell.setCellValue(examSchedules.getClassSectionSubject().getName());		        	
		        	cell.setCellStyle(styles.get("headerInfo"));
				} 
				 
				cell = scheduleExamTypeRow.createCell(subColnum);
	        	cell.setCellValue(examSchedules.getExamTypeName());
	        	cell.setCellStyle(styles.get("headerInfo"));
	        	query = new StringBuffer().append(examSchedules.getExamTypeName()).append("_").append(examSchedules.getId());
	        	scheduleIdsRow.createCell(subTypeColnum).setCellValue(query.toString());
        		examSchedulesCells.put(query.toString(), subTypeColnum);
        		query = null;
        		
    			cell = row.createCell(subTypeColnum);
	        	cell.setCellValue(examSchedules.getSubTypeName());
	        	cell.setCellStyle(styles.get("headerInfo"));
	        	query = new StringBuffer().append(examSchedules.getSubTypeName()).append("_").append(examSchedules.getId());
	        	scheduleIdsRow.createCell(subTypeColnum).setCellValue(query.toString());
        		examSchedulesCells.put(query.toString(), subTypeColnum);
        		query = null;
        		
        		subTypeColnum++;
        		subColnum++;
        		 cell = row.createCell(subTypeColnum);
	   			 cell.setCellValue(subtypeIdMap.get(examSchedules.getSubType().getId())+"% Weightage");
	   	         cell.setCellStyle(styles.get("headerInfo"));
	   	         query = new StringBuffer().append("Weightage").append("_").append(examSchedules.getId());
	   	         scheduleIdsRow.createCell(subTypeColnum).setCellValue(query.toString());
        		 examSchedulesCells.put(query.toString(), subTypeColnum);
        		 query = null;
        		 
        		 subTypeColnum++;
        		 subColnum++;
        		 cell = row.createCell(subTypeColnum);
	   			 cell.setCellValue("Grade");
	   	         cell.setCellStyle(styles.get("headerInfo"));
	   	         query = new StringBuffer().append("Grade_").append(examSchedules.getId());
	   	         scheduleIdsRow.createCell(subTypeColnum).setCellValue(query.toString());
        		 examSchedulesCells.put(query.toString(), subTypeColnum);
        		 query = null;
	        	subTypeColnum++;
	        	subColnum++;
				subjectId = examSchedules.getClassSectionSubject().getId();
				examTypeId = examSchedules.getExamTypeId();
			}
			
			 cell = row.createCell(subTypeColnum);
			 cell.setCellValue("Total");
	         cell.setCellStyle(styles.get("headerInfo"));
	         query = new StringBuffer().append("Total").append("_").append(subjectId);
	         scheduleIdsRow.createCell(subTypeColnum).setCellValue(query.toString());
     		 examSchedulesCells.put(query.toString(), subTypeColnum);
     		 query = null;
		}
		scheduleIdsRow = null;
		row = null;
		scheduleSubType = null;
		sechuduleObjects= null;
		subjectMap=null;
		return examSchedulesCells;
  	}
	
	
	public void createExamSchedulesHeader(HSSFSheet sheet,Map<String, CellStyle> styles){
  		Customer customer = getCustomerByCustId();
  		Row row = null;
		org.apache.poi.ss.usermodel.Cell cell = null;
		String custAddress = null;
		StringBuffer query = null;
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
					row=sheet.createRow(0);
					custAddress = customer.getOrganizationFullAddress();
					if (StringFunctions.isNotNullOrEmpty(customer.getOrganization()) || StringFunctions.isNotNullOrEmpty(custAddress)) {
						row.setHeightInPoints(50);
						sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:Z$1"));
						if(StringFunctions.isNotNullOrEmpty(customer.getOrganization()) && StringFunctions.isNotNullOrEmpty(custAddress))
							query = new StringBuffer(customer.getOrganization()).append("\n").append(custAddress);
						else if(StringFunctions.isNotNullOrEmpty(customer.getOrganization()))
							query = new StringBuffer(customer.getOrganization());
						else
							query = new StringBuffer(custAddress);
						cell = row.createCell(0);
						cell.setCellValue(query.toString());
						cell.setCellStyle(styles.get("title"));
					}
					customer = null;
				 if(sheet.getSheetName().equalsIgnoreCase("ScholasticConfig")){
					row=sheet.createRow(1);
					row.setHeightInPoints(50);
					sheet.addMergedRegion(CellRangeAddress.valueOf("$A$2:Z$2"));
					cell = row.createCell(0);
					cell.setCellValue("Scholastic Areas");
					cell.setCellStyle(styles.get("title"));
				}
				
			}
		styles = null;
		row = null;
		cell = null;
		custAddress = null;
		query = null;
  	}
	public void createHeaderForActivities(HSSFSheet sheet,Map<String, CellStyle> styles,List<ExamSchedules> examTypesList,List<Object[]> classStudentsList){
		StringBuffer query = null;
        List<Object[]> studentActivityMarks = null;
		List<Object[]> activityTypes=null;
		HashMap<String,Integer> acativitiesCells = null;
		int startMergeCell=3;
		int endMergeCell = 0;
		int examTypesMergStrCell = 3;
		int examTypesEndMergCell = 0;
		Row activitiesIdsRow = sheet.createRow(3);
		activitiesIdsRow.setZeroHeight(true);
		Row row = sheet.createRow(7);
		int rowNum = 8;
		Row ActivitiesRow = sheet.createRow(4);
		Row subActivitiesRow = sheet.createRow(6);
		Row ExamTypesRow = sheet.createRow(5);
		row.setHeightInPoints(30);
		org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);
		query = new StringBuffer("select activity.id,activity.activityName From studentActivities activity JOIN studentActivityTypes type on(activity.id=type.studentActivityId) JOIN activityTypeClasses activityClass on (activityClass.classId=")
		.append(getClassId()).append(" and activityClass.activityTypeId=type.id) and activity.custId=").append(getUserCustId()).append(" and activity.academicYearId=").append(getUserAcademicYearId())
	    .append(" group by activity.id");
		List<Object[]> studentActivities = adminManager.getAll(query.toString());
		AcademicYear academicYear = (AcademicYear)adminManager.get(AcademicYear.class,getUserAcademicYearId());
		query = null;
		if(!ObjectFunctions.isNullOrEmpty(studentActivities)){
			if(studentActivities.size() <=20){
				cell.setCellValue("Roll Number");
				cell.setCellStyle(styles.get("headerInfo"));
				cell = row.createCell(1);
				cell.setCellValue("Admission Number");
				cell.setCellStyle(styles.get("headerInfo"));
				cell = row.createCell(2);
				cell.setCellValue("Student Name");
				cell.setCellStyle(styles.get("headerInfo"));
				sheet.createFreezePane(3, 8);
				acativitiesCells = new HashMap<String,Integer>();
				for(Object[] activity : studentActivities){
					if(!ObjectFunctions.isNullOrEmpty(activity[0]) && !ObjectFunctions.isNullOrEmpty(activity[1])){
						query = new StringBuffer("select activityType.id,activityType.activityTypeName FROM studentActivityTypes activityType JOIN activityTypeClasses activityTypeClasses on (activityType.id=activityTypeClasses.activityTypeId and activityTypeClasses.classId=")
						.append(getClassId()).append(") and activityType.academicYearId=").append(getUserAcademicYearId()).append(" and activityType.custId=").append(getUserCustId())
						.append(" and activityType.studentActivityId=").append(activity[0].toString());
						 activityTypes = adminManager.getAll(query.toString());
						 query = null;
						 if(!ObjectFunctions.isNullOrEmpty(activity)){
							 if(ObjectFunctions.isNotNullOrEmpty(activityTypes)){
								cell = ActivitiesRow.createCell(startMergeCell);
								 endMergeCell = startMergeCell+((activityTypes.size()*2)*examTypesList.size())-1;
		    		     		 sheet.addMergedRegion(new CellRangeAddress(ActivitiesRow.getRowNum(),ActivitiesRow.getRowNum(),startMergeCell,endMergeCell));
								 cell.setCellValue(activity[1].toString());
					        	 cell.setCellStyle(styles.get("headerInfo"));
		    		     			for(ExamSchedules examType : examTypesList){
		    		     				cell = ExamTypesRow.createCell(examTypesMergStrCell);
		    		     				examTypesEndMergCell = examTypesMergStrCell + activityTypes.size()*2-1;
		    	    		     		sheet.addMergedRegion(new CellRangeAddress(ExamTypesRow.getRowNum(),ExamTypesRow.getRowNum(),examTypesMergStrCell,examTypesEndMergCell));
		    		     				cell.setCellValue(examType.getExamTypeName());
		    		     				cell.setCellStyle(styles.get("headerInfo"));
		    		     					
		    	    		     		for(Object[] activityType: activityTypes){
			    		     				cell = subActivitiesRow.createCell(startMergeCell);
			    	    		     		sheet.addMergedRegion(new CellRangeAddress(subActivitiesRow.getRowNum(),subActivitiesRow.getRowNum(),startMergeCell,startMergeCell+1));
			    		     				cell.setCellValue(activityType[1].toString());
			    		     				cell.setCellStyle(styles.get("headerInfo"));
			    	    		     		cell = row.createCell(startMergeCell);
			    		     				cell.setCellValue("Grade");
			    		     				cell.setCellStyle(styles.get("headerInfo"));
			    		     				query = new StringBuffer(examType.getExamTypeId()+"_"+activityType[0].toString()+"_"+"Grade");
			    		     				acativitiesCells.put(query.toString(), cell.getColumnIndex());
			    		     				activitiesIdsRow.createCell(startMergeCell).setCellValue(query.toString());
			    		     				query = null;
			    		     				cell = row.createCell(startMergeCell+1);
			    		     				cell.setCellValue("Description");
			    		     				cell.setCellStyle(styles.get("headerInfo"));
			    		     				query = new StringBuffer(examType.getExamTypeId()+"_"+activityType[0].toString()+"_"+"Description");
			    		     				acativitiesCells.put(query.toString(), cell.getColumnIndex());
			    		     				activitiesIdsRow.createCell(startMergeCell+1).setCellValue(query.toString());
			    		     				query = null;
			        						startMergeCell += 2;
			    		     			}
		    	    		     		examTypesMergStrCell = startMergeCell;
		    		     			}
		    		     			
		    		     		 }
		        				startMergeCell = examTypesMergStrCell;
						}
					}
				}
				Integer column =null;
				for(Object[] studentDetails : classStudentsList){
						if(!ObjectFunctions.isNullOrEmpty(studentDetails)){
							row = sheet.createRow(rowNum);
							cell=row.createCell(0);
							cell.setCellValue(studentDetails[3].toString());
							cell.setCellStyle(styles.get("headerInfo"));
							cell=row.createCell(1);
							cell.setCellValue(studentDetails[2].toString());
							cell.setCellStyle(styles.get("headerInfo"));
							cell=row.createCell(2);
							cell.setCellValue(studentDetails[1].toString());
							cell.setCellStyle(styles.get("headerInfo"));
			     			for(ExamSchedules examType : examTypesList){
			     				studentActivityMarks = adminManager.getAll("select examTypeId,studentActivityTypeId,grade,description,studentsAssessmentId from  studentAcademicPerformance where studId="+studentDetails[0].toString()+" and examTypeId="+examType.getExamTypeId());
	   							if(!ObjectFunctions.isNullOrEmpty(studentActivityMarks)){
				     				for(Object[] academicPerformance :studentActivityMarks){
				     					if(!ObjectFunctions.isNullOrEmpty(academicPerformance[0]) && !ObjectFunctions.isNullOrEmpty(academicPerformance[1])){
					     					column = acativitiesCells.get(academicPerformance[0].toString()+"_"+academicPerformance[1].toString()+"_"+"Grade");
												if(!ObjectFunctions.isNullOrEmpty(column)){
													cell = row.createCell(column);
													if(!ObjectFunctions.isNullOrEmpty(academicPerformance[2]))
														cell.setCellValue(academicPerformance[2].toString());
													else
														cell.setCellValue("");
												}
						     					column = acativitiesCells.get(academicPerformance[0].toString()+"_"+academicPerformance[1].toString()+"_"+"Description");
						     					if(!ObjectFunctions.isNullOrEmpty(column)){
													cell = row.createCell(column);
													if(!ObjectFunctions.isNullOrEmpty(academicPerformance[3]))
														cell.setCellValue(academicPerformance[3].toString());
													else
														cell.setCellValue("");
												}
				     					}
				     				}
	   							}
			     			}
						}
						rowNum++;
				}
			}
		}else{
	    		sheet.createRow(10).createCell(0).setCellValue("Grades Not uploaded.");
		}
	}
	@Actions( {
		@Action(value = "ajaxStudentMarksUpdateDetails", results = {@Result(location = "../admin/reports/ajaxViewStudentMarksUpdatedDetails.jsp", name = "success") })})
	public String ajaxStudentMarksUpdateDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentMarksUpdateDetails' method");
		}
	try {
		setExamTypeList(adminManager.getAll(ExamTypes.class,"custId="+getUserCustId()));
		setAttendanceDate(DateFormatter.formatDate(DateFormatter.MM_DD_YYYY_PATTERN1,new Date()));
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDownloadStudentMarksUpdatedDetails", results = {}) })
	public String ajaxDownloadStudentMarksUpdatedDetails() {
		try {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadStudentMarksUpdatedDetails' method");
			}
			if (getUserAcademicYearId() != 0) {
				String fileName = "Student Marks Updated Details";
				PDFGenerator pDFGenerator = new PDFGenerator();
				getResponse().setContentType(pDFGenerator.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
				pDFGenerator.createDocumentJasper();
				pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
				PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
				pDFGenerator.getPdfWriter().setPageEvent(phfmj);
				pDFGenerator.getDocument().open();
				Customer customer = getCustomerByCustId();
				fileName = "Student Marks Updated Details_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
				FontFactory.register(fontPath);
				//pDFGenerator.getDocument().open();
				PdfPTable mainTable = new PdfPTable(1);
				mainTable.setWidthPercentage(100);
				mainTable.setSplitLate(false);
				mainTable.getDefaultCell().setBorder(Rectangle.BOX);
				int width = 4;
				PdfPTable defaultersHeaderReport = new PdfPTable(width);
				defaultersHeaderReport.setWidthPercentage(100);
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					}
					if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					}
				}
				ExamTypes examTypes = (ExamTypes) adminManager.get(ExamTypes.class, getTempId());
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(examTypes.getExamType()+" Student Marks Upload Tracking",width, fontPath));
				if(getTempId()>0){
					List<Object[]> updatedStudentmarksList = adminManager.getAll("select studMarkId, DATE(date), fullName, classAndSection, examType, subjectName from vw_marksUpdatedDetails where custId="+getUserCustId()+" and  examTypeId = "+getTempId()+" and accountId is not null group by accountId,DATE(date),classAndSection,subjectName");
					if (ObjectFunctions.isNotNullOrEmpty(updatedStudentmarksList)) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Date", 1,fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Staff Name", 1,fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Class And Section", 1, fontPath));
						//defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Exam Type", 1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Subject Name",1, fontPath));
							for (Object[] obj1 : updatedStudentmarksList) {
								if (!ObjectFunctions.isNullOrEmpty(obj1)){
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(obj1[1].toString(), "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(obj1[2].toString(), "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(obj1[3].toString(), "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeft(obj1[5].toString(),"#000", fontPath));
								}
							}
					}else{
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("No records found for selected exam type.", "#000",fontPath));
					}
				}
				mainTable.addCell(defaultersHeaderReport);
				pDFGenerator.getDocument().add(mainTable);
				pDFGenerator.getDocument().close();
				pDFGenerator = null;
				mainTable = null;
				defaultersHeaderReport = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "ajaxGenrateLibraryFineReports", results = {}) })
	public void ajaxGenrateLibraryFineReports() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("entering 'ajaxGenrateLibraryFineReports' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				int bookfineAmount = 0,totalFineAmount = 0,paidFineAmount = 0;
				String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
				String endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
				String fileName = "Library Fine Details " + fromDate + " To "+ endDate;
				Customer customer = getCustomerByCustId();
				List<ViewIssuedBookAndSettings> issuedBooksList = adminManager.getAll(ViewIssuedBookAndSettings.class, "custId="+ getUserCustId()+ " and submitedDate>='"+ fromDate+ " 00:00:00' and submitedDate<='"+ endDate + " 00:00:00' and status='"+Constants.BOOK_SUBMITED+"' and userStatus='student' order by submitedDate");
				Object[] librarySettings = libraryManager.get("select fineAmountPerDay,id from librarySettings where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
				if("PDF".equalsIgnoreCase(getAnyId())){
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
					FontFactory.register(fontPath);
					//pDFGenerator.getDocument().open();
					PdfPTable mainTable = new PdfPTable(1);
					mainTable.setWidthPercentage(100);
					mainTable.setSplitLate(false);
					mainTable.getDefaultCell().setBorder(Rectangle.BOX);
					int width = 8;
					PdfPTable defaultersHeaderReport = new PdfPTable(width);
					PdfPTable defaultersHeaderReport1 = new PdfPTable(8);
					defaultersHeaderReport.setWidthPercentage(100);
					if(ObjectFunctions.isNotNullOrEmpty(issuedBooksList)){
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) 
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) 
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Student Name",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Class Name",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Book Namer",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Issued Date",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Due Date",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Fine Paid Date",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Total Amount",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Paid Amount",1, fontPath));
						for (ViewIssuedBookAndSettings issuedBooks : issuedBooksList) {  
							User account = (User)adminManager.get(User.class,"id="+Long.valueOf(issuedBooks.getAccountId())+" and custId="+getUserCustId());
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(account.getPerson().getFirstName(), "#000",fontPath));
							Object[] classNameAndSection =  adminManager.get("select classNameAndSection,accountId from vw_studentDetails where classNameClassId="+Long.valueOf(issuedBooks.getClassId())+" and custId="+getUserCustId()+" and accountId="+issuedBooks.getAccountId());
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(classNameAndSection[0].toString(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(issuedBooks.getBookName(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(issuedBooks.getIssuedDateStr().replace(" 00:00:00.0",""), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(issuedBooks.getDueDateStr().replace(" 00:00:00.0",""), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(issuedBooks.getSubmitedDateStr().replace(" 00:00:00.0",""), "#000",fontPath));
							if(issuedBooks.getBetweenDueDays()>=0)
								bookfineAmount = Integer.valueOf(librarySettings[0].toString())*Integer.valueOf(issuedBooks.getBetweenDueDays());
							else
								bookfineAmount = Integer.valueOf(librarySettings[0].toString())*Integer.valueOf(0);
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(bookfineAmount), "#000",fontPath));
							totalFineAmount += bookfineAmount;
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(issuedBooks.getPaidFineAmount()), "#000",fontPath));
							paidFineAmount+= issuedBooks.getPaidFineAmount();
							account = null;
						}
						defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAligns("Total Fine Amount : "+String.valueOf(totalFineAmount),8,fontPath));
						defaultersHeaderReport1.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingsWithRightAligns("Total Fine Paid Amount : "+String.valueOf(paidFineAmount),8,fontPath));
					}else
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("Currently there is no library fine fee dateils.",width, fontPath));
					mainTable.addCell(defaultersHeaderReport);
					mainTable.addCell(defaultersHeaderReport1);
					pDFGenerator.getDocument().add(mainTable);
					pDFGenerator.getDocument().close();
					pDFGenerator = null;
					mainTable = null;
					defaultersHeaderReport = null;
				}else{
					GenerateLibraryFineFeeDetails(issuedBooksList,librarySettings,customer,fileName);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	public String GenerateLibraryFineFeeDetails(List<ViewIssuedBookAndSettings> issuedBooksList,Object[] librarySettings,Customer customer,String fileName){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'GenerateLibraryFineFeeDetails' method");
		}
		try {
			int bookfineAmount = 0,totalFineAmount = 0,paidFineAmount = 0;
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
			WritableCellFormat cellFormat8 = getCellFormat8();
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormat = null;
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			font1.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			excelView.setWorkSheetName("Library Fin Fee");
			excelView.createWorkSheet(0);
			excelView.setDefaultFormat(excelView.getArial10format());
			excelView.getWs().setColumnView(0, 30);
			excelView.getWs().setColumnView(1, 20);
			excelView.getWs().setColumnView(2, 45);
			excelView.getWs().setColumnView(3, 15);
			excelView.getWs().setColumnView(4, 15);
			excelView.getWs().setColumnView(5, 15);
			excelView.getWs().setColumnView(6, 15);
			excelView.getWs().setColumnView(7, 15);
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
					excelView.getWs().mergeCells(0, 0, 7, 1);
					excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
				}
				if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
					excelView.getWs().mergeCells(0, 2, 7, 2);
					excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
				}
				int row = 4;
				if (issuedBooksList.size() > 0 && !ObjectFunctions.isNullOrEmpty(issuedBooksList)) {
					excelView.getWs().addCell(new Label(0, 3, "Student Name", cellFormat));
					excelView.getWs().addCell(new Label(1, 3, "Class Name", cellFormat));
					excelView.getWs().addCell(new Label(2, 3, "Book Name", cellFormat));
					excelView.getWs().addCell(new Label(3, 3, "Issued Date",cellFormat));
					excelView.getWs().addCell(new Label(4, 3, "Due Date", cellFormat));
					excelView.getWs().addCell(new Label(5, 3, "Fine Paid Date",cellFormat));
					excelView.getWs().addCell(new Label(6, 3, "Total Amount",cellFormat));
					excelView.getWs().addCell(new Label(7, 3, "Paid Amount",cellFormat));
					int count = 5;
					for (ViewIssuedBookAndSettings issuedBooks : issuedBooksList) {
						int rowCount = 0;
						User account = (User)adminManager.get(User.class,"id="+Long.valueOf(issuedBooks.getAccountId())+" and custId="+getUserCustId());
						excelView.getWs().addCell(new Label(rowCount, row, account.getPerson().getFirstName(), excelView.getDefaultFormat()));
						rowCount++;
						Object[] classNameAndSection =  adminManager.get("select classNameAndSection,accountId from vw_studentDetails where classNameClassId="+Long.valueOf(issuedBooks.getClassId())+" and custId="+getUserCustId()+" and accountId="+issuedBooks.getAccountId());
						excelView.getWs().addCell(new Label(rowCount, row, classNameAndSection[0].toString(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, issuedBooks.getBookName(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, issuedBooks.getIssuedDateStr().replace(" 00:00:00.0",""), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, issuedBooks.getDueDateStr().replace(" 00:00:00.0",""), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row,issuedBooks.getSubmitedDateStr().replace(" 00:00:00.0",""), excelView.getDefaultFormat()));
						rowCount++;
						if(issuedBooks.getBetweenDueDays()>=0){
							bookfineAmount = Integer.valueOf(librarySettings[0].toString())*Integer.valueOf(issuedBooks.getBetweenDueDays());
						}else
							bookfineAmount = Integer.valueOf(librarySettings[0].toString())*Integer.valueOf(0);
						excelView.getWs().addCell(new Label(rowCount, row, String.valueOf(bookfineAmount), excelView.getDefaultFormat()));
						totalFineAmount = totalFineAmount + Integer.valueOf(bookfineAmount);
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, String.valueOf(issuedBooks.getPaidFineAmount()), excelView.getDefaultFormat()));
						paidFineAmount = paidFineAmount+ Integer.valueOf(issuedBooks.getPaidFineAmount());
						rowCount++;
						row++;
					}
					excelView.getWs().mergeCells(0, row, count,row);
					if(totalFineAmount > 0)
						excelView.getWs().addCell(new Label(0, row, "Total Fine Amount : "+totalFineAmount,ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
					else
						excelView.getWs().addCell(new Label(1, row, "", excelView.getDefaultFormat()));
					row++;
					excelView.getWs().mergeCells(0, row, count,row);
					if(paidFineAmount >= 0)
						excelView.getWs().addCell(new Label(0, row, "Total Fine Paid Amount : "+paidFineAmount,ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
					else
						excelView.getWs().addCell(new Label(1, row, "", excelView.getDefaultFormat()));
					showSchoolUrlInExcelSheetFooter(row, excelView, 7);
				} else {
					excelView.getWs().mergeCells(0, 4, 9, 4);
					excelView.getWs().addCell(new Label(0,4,"Currently there is no matched data",cellFormat));
				}
			}
			excelView.getWb().write();
			excelView.getWb().close();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "ajaxPrintDayBooksReport", results = { @Result(location = "jasper/daybook/dayBookVocher.jasper", type = "jasper", name = "success", params = {"dataSource", "objectList", "format", "PDF" }) }) }) 
		public String ajaxPrintDayBooksReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrintDayBooksReport' method");
		}
		try {
			String pdf = "pdf";
			setObjectList(adminManager.getAll(ViewVoucherDetails.class,"custId="+getUserCustId()+" and voucherId="+getTempId()));
			String amountWords=null;
			if(!StringFunctions.isNullOrEmpty(getTempString())){
				amountWords=getTempString();
			}
			if(!StringFunctions.isNullOrEmpty(getPlTitle())){
				  amountWords=getPlTitle();
			}
			setPlTitle(amountWords);
			setCustomer((Customer) adminManager.get(Customer.class, getUserCustId()));
			if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
				setCustomerName(getCustomer().getOrganization());
				setAnyId(getCustomer().getOrganizationFullAddress());
				setWebSiteUrl(getSession().getServletContext().getRealPath(getCustomer().getCustomerLogoPath()));
				log.debug(getWebSiteUrl());
			}
			if ("pdf".equalsIgnoreCase(pdf)) {
				getResponse().setHeader("Content-Disposition", "attachment; filename=feesReceipt" +StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
		}
	@Actions({ @Action(value = "ajaxDoDeletedInvoiceReport", results = { @Result(location = "../admin/reports/ajaxViewStudentMarksUpdatedDetails.jsp", name = "success") }) })
	public String ajaxDoDeletedInvoiceReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoDeletedInvoiceReport' method");
		}
		try {
			setExamTypeList(adminManager.getAll(ExamTypes.class, "custId="+ getUserCustId()));
			setAttendanceDate(DateFormatter.formatDate(DateFormatter.MM_DD_YYYY_PATTERN1, new Date()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetDeletedInvoiceReport", results = {}) })
	public void deletedInvoiceExcelSheet() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("entering 'ajaxGetDeletedInvoiceReport' method");
		}
		try {
			int bookfineAmount = 0,totalFineAmount = 0,paidFineAmount = 0;
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			String fileName="deleteinvoiceDetails";
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
			WritableCellFormat cellFormat8 = getCellFormat8();
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormat = null;
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			font1.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			excelView.setWorkSheetName("Delete invoice");
			excelView.createWorkSheet(0);
			Customer customer = getCustomerByCustId();
			List<ViewStudentDeletedInvoiceDetails> deleteInvoiceList = adminManager.getAll(ViewStudentDeletedInvoiceDetails.class, "custId="+ getUserCustId()+ " and academicYearId="+getUserAcademicYearId()+" and deleteStatus='"+Constants.YES_STRING+"' ");
			excelView.setDefaultFormat(excelView.getArial10format());
			excelView.getWs().setColumnView(0, 30);
			excelView.getWs().setColumnView(1, 20);
			excelView.getWs().setColumnView(2, 45);
			excelView.getWs().setColumnView(3, 15);
			excelView.getWs().setColumnView(4, 15);
			excelView.getWs().setColumnView(5, 15);
			excelView.getWs().setColumnView(6, 15);
			excelView.getWs().setColumnView(7, 15);
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
					excelView.getWs().mergeCells(0, 0, 7, 1);
					excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
				}
				if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
					excelView.getWs().mergeCells(0, 2, 7, 2);
					excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
				}
				int row = 4;
				if (!ObjectFunctions.isNullOrEmpty(deleteInvoiceList)) {
					excelView.getWs().addCell(new Label(0, 3, "#No", cellFormat));
					excelView.getWs().addCell(new Label(1, 3, "Student Name", cellFormat));
					excelView.getWs().addCell(new Label(2, 3, "Class And Section", cellFormat));
					excelView.getWs().addCell(new Label(3, 3, "Paid Date",cellFormat));
					excelView.getWs().addCell(new Label(4, 3, "Delete Date", cellFormat));
					excelView.getWs().addCell(new Label(5, 3, "Invoice No",cellFormat));
					excelView.getWs().addCell(new Label(6, 3, "Delete Cause",cellFormat));
					excelView.getWs().addCell(new Label(7, 3, "Payment Taken By",cellFormat));
					excelView.getWs().addCell(new Label(7, 3, "Delete By",cellFormat));
					int count = 5;
					int num = 1;
					for (ViewStudentDeletedInvoiceDetails deletedInvoiceDetails : deleteInvoiceList) {
						int rowCount = 0;
						excelView.getWs().addCell(new Label(rowCount, row, String.valueOf(num), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, deletedInvoiceDetails.getStudentFullName(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, deletedInvoiceDetails.getClassAndSection(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, deletedInvoiceDetails.getPaymentDateStr(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, deletedInvoiceDetails.getLastUpdatedDateStr(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row,String.valueOf(deletedInvoiceDetails.getInvoiceNumber()) , excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row,deletedInvoiceDetails.getDeleteDescription(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, deletedInvoiceDetails.getCreatedByFullName(), excelView.getDefaultFormat()));
						totalFineAmount = totalFineAmount + Integer.valueOf(bookfineAmount);
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, deletedInvoiceDetails.getLastUpdatedByFullName(), excelView.getDefaultFormat()));
						rowCount++;
						row++;
						num++;
					}
					excelView.getWs().mergeCells(0, row, count,row);
					if(totalFineAmount > 0)
						excelView.getWs().addCell(new Label(0, row, "Total Fine Amount : "+totalFineAmount,ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
					else
						excelView.getWs().addCell(new Label(1, row, "", excelView.getDefaultFormat()));
					row++;
					excelView.getWs().mergeCells(0, row, count,row);
					if(paidFineAmount >= 0)
						excelView.getWs().addCell(new Label(0, row, "Total Fine Paid Amount : "+paidFineAmount,ExcelView.getUserFormattedCell(font1,Colour.WHITE,false,false,Alignment.RIGHT,VerticalAlignment.getAlignment(0),Border.ALL,BorderLineStyle.THIN)));
					else
						excelView.getWs().addCell(new Label(1, row, "", excelView.getDefaultFormat()));
					showSchoolUrlInExcelSheetFooter(row, excelView, 7);
				} else {
					excelView.getWs().mergeCells(0, 4, 9, 4);
					excelView.getWs().addCell(new Label(0,4,"Currently there is no matched data",cellFormat));
				}
			}
			excelView.getWb().write();
			excelView.getWb().close();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	@Action(value = "ajaxUserWiseFeeCollection", results = {})
	public void ajaxUserWiseFeeCollection() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUserWiseFeeCollection' method");
		}
		try {
				String fileName = "User_Wise_Fee_Collection_Details_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				getResponse().setContentType("application/vnd.ms-excel");
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				org.apache.poi.ss.usermodel.Workbook wb = new HSSFWorkbook();
				HSSFSheet sheet = (HSSFSheet) wb.createSheet("Collection Report");
				Customer customer  = getCustomerByCustId();
				String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
				String endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
				if(!ObjectFunctions.isNullOrEmpty(customer)){
					int rowNum = 0;
					Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
					Row row = sheet.createRow(rowNum);
					row.setHeightInPoints(45);
					org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);
					sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$L$1"));
					cell.setCellValue(customer.getOrganization()+"\n"+customer.getCustomerFormattedAddress());
					cell.setCellStyle(styles.get("title"));
					prepareSchoolFeeSettingList();
					StringBuffer feeSettingIds = new StringBuffer("(");
					if(ObjectFunctions.isNotNullOrEmpty(getObjectList())){
						for (Object objec : getObjectList()) {
							SchoolFeeSetting feetypename = (SchoolFeeSetting) objec;
							log.debug(feetypename.getStatus());
							feeSettingIds.append(feetypename.getId() + ",");
						}
					}
					feeSettingIds.append("0)");
					List<Object[]> feeSettingsList = null;
					//log.debug("select feeType,id from feeType where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and feeSettingId in"+ feeSettingIds.toString()+ " group by feeSettingId,id order by feeSettingId,id");
					feeSettingsList = adminManager.getAll("select feeType,id from feeType where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and feeSettingId in"+ feeSettingIds.toString()+ " order by feeSettingId,id");
					if(ObjectFunctions.isNotNullOrEmpty(feeSettingsList)){
						HashMap<Long, Integer> feeTypeColumns = new HashMap<Long, Integer>();
						// Header Part
						String[] header = new String[]{"S.No.","Date","Receipt No.","Student Name","Class","Admission No."};
						row = sheet.createRow(++rowNum);
						int cellNum = 0;
						for(String hea: header){
							cell = row.createCell(cellNum++);
							cell.setCellValue(hea);
							cell.setCellStyle(styles.get("header"));
						}
						for (Object[] feeSettingName : feeSettingsList) {
							cell = row.createCell(cellNum);
							cell.setCellValue(feeSettingName[0].toString());
							cell.setCellStyle(styles.get("header"));
							feeTypeColumns.put(Long.valueOf(feeSettingName[1].toString()),cellNum);
							cellNum++;
						}
						cell = row.createCell(cellNum++);
						cell.setCellValue("Total");
						cell.setCellStyle(styles.get("header"));
						int totalCellNum = cell.getColumnIndex(); 
						// Students Fee Details
						if(!StringFunctions.isNullOrEmpty(getAnyId()))
						{
							int sNo = 1;
							int sumColumn = 3;
							int sumRow = rowNum;
							
							Map<String,String> sumFormulas = new HashMap<String, String>();
							String financeUserIds[] = getAnyId().split(",");
							for(String financeUserId : financeUserIds)
							{
								if(!StringFunctions.isNullOrEmpty(financeUserId))
								{
									long finUserId = Long.valueOf(financeUserId.trim());
									if(finUserId > 0)
									{
										
										Object[] staffDetailsObj = adminManager.get("select accountId,fullName from vw_staffDetails where accountId = " + finUserId);
										rowNum = rowNum+1;
										 cell = sheet.createRow(rowNum).createCell(0);
										 cell.setCellValue(staffDetailsObj[1].toString());
										 cell.setCellStyle(styles.get("titleHeader"));
							             sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,totalCellNum));
							             
							             staffDetailsObj = null;
										List<ViewStudentFeePaymentDetails> feePaidDetailsList = null;
										feePaidDetailsList=adminManager.getStudentsFeePaidDetailsBySettingAndClassIdAndFinanceUserId("vw_studentFeePaymentDetails",getUserCustId(), getUserAcademicYearId(), getTempString(), fromDate, endDate, feeSettingIds.toString(),finUserId);
										feePaidDetailsList.addAll(adminManager.getStudentsFeePaidDetailsBySettingAndClassIdAndFinanceUserId("vw_studentTransportFeePaymentDetails",getUserCustId(), getUserAcademicYearId(), getTempString(), fromDate, endDate, feeSettingIds.toString(),finUserId));
										if(!ObjectFunctions.isNullOrEmpty(feePaidDetailsList)){
											
											String invoiceNumber = null;
											double particularAmt = 0;
											for (ViewStudentFeePaymentDetails feeSettingDetail : feePaidDetailsList) {
												if(!feeSettingDetail.getInvoiceNumberStr().equals(invoiceNumber)){
													cellNum = 0;
													row = sheet.createRow(++rowNum);
													cell = row.createCell(cellNum++);
													cell.setCellValue(sNo++);
													cell.setCellStyle(styles.get("string"));
													cell = row.createCell(cellNum++);
													cell.setCellValue(feeSettingDetail.getPaymentDate());
													cell.setCellStyle(styles.get("date"));
													cell = row.createCell(cellNum++);
													cell.setCellValue(feeSettingDetail.getInvoiceNumberStr());
													cell.setCellStyle(styles.get("string"));
													cell = row.createCell(cellNum++);
													cell.setCellValue(feeSettingDetail.getFullName());
													cell.setCellStyle(styles.get("string"));
													cell = row.createCell(cellNum++);
													cell.setCellValue(feeSettingDetail.getClassAndSection());
													cell.setCellStyle(styles.get("string"));
													cell = row.createCell(cellNum++);
													cell.setCellValue(feeSettingDetail.getAdmissionNumber());
													cell.setCellStyle(styles.get("string"));
													String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum-1);
													cell = row.createCell(totalCellNum);
													cell.setCellFormula("SUM(G"+(row.getRowNum()+1)+":"+columnLetter+(row.getRowNum()+1)+")");
													cell.setCellStyle(styles.get("string"));
												}
												for(Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()){
													if(enty.getKey() == feeSettingDetail.getFeeTypeId()){
														cell = row.getCell(enty.getValue());
														if(ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK){
															cell = row.createCell(enty.getValue());
															cell.setCellValue(feeSettingDetail.getPaymentAmount());
															cell.setCellStyle(styles.get("string"));
														}else{
															if(cell.getCellType() != org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK ){
																if(cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING && StringFunctions.isNotNullOrEmpty(cell.getStringCellValue())){
																	particularAmt = Double.valueOf(cell.getStringCellValue());
																}else if(cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC)
																	particularAmt = cell.getNumericCellValue();
															}
															cell.setCellValue(Double.valueOf(particularAmt)+feeSettingDetail.getPaymentAmount());
															cell.setCellStyle(styles.get("string"));
														}
													}else{
														cell = row.getCell(enty.getValue());
														if(ObjectFunctions.isNullOrEmpty(cell) || cell.getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK){
															cell = row.createCell(enty.getValue());
															cell.setCellValue("");
															cell.setCellStyle(styles.get("string"));
														}
													}
													particularAmt = 0;
												}
												invoiceNumber = feeSettingDetail.getInvoiceNumberStr();
											}
											// Displaying Total amount
											row = sheet.createRow(++rowNum);
											sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,5));
											cell = row.createCell(0);
											cell.setCellValue("Total");
											cell.setCellStyle(styles.get("header"));
											for(Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()){
												cell = row.createCell(enty.getValue());
												String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(enty.getValue());
												if(!ObjectFunctions.isNullOrEmpty(sumFormulas.get(columnLetter)))
												{
													String forlula = sumFormulas.get(columnLetter) + "+" + "SUM("+columnLetter+sumColumn+":"+columnLetter+(row.getRowNum())+")";
													sumFormulas.remove(columnLetter);
													sumFormulas.put(columnLetter,forlula);
													forlula = null;
												}
												else	
													sumFormulas.put(columnLetter,"SUM("+columnLetter+sumColumn+":"+columnLetter+(row.getRowNum())+")");
												cell.setCellFormula("SUM("+columnLetter+sumColumn+":"+columnLetter+(row.getRowNum())+")");
												cell.setCellStyle(styles.get("string"));
											}
											cell = row.createCell(totalCellNum);
											String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
											
											if(!ObjectFunctions.isNullOrEmpty(sumFormulas.get(columnLetter)))
											{
												String forlula = sumFormulas.get(columnLetter) + "+" + "SUM("+columnLetter+sumColumn+":"+columnLetter+(row.getRowNum())+")";
												sumFormulas.remove(columnLetter);
												sumFormulas.put(columnLetter,forlula);
												forlula = null;
											}
											else	
												sumFormulas.put(columnLetter,"SUM("+columnLetter+sumColumn+":"+columnLetter+(row.getRowNum())+")");
											cell.setCellFormula("SUM("+columnLetter+sumColumn+":"+columnLetter+(row.getRowNum())+")");
											cell.setCellStyle(styles.get("string"));
											
											sumColumn = row.getRowNum() +2;
											sumRow = sumRow +1;
										}else{rowNum = rowNum+1;
										 cell = sheet.createRow(rowNum).createCell(0);
										 cell.setCellValue("No fee collected by this staff.");
							             sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,totalCellNum));
							             sumRow = sumRow +1;
							             }
										feePaidDetailsList = null;
									}
								}
								
							}
							
							
							rowNum = rowNum+1;
							 cell = sheet.createRow(rowNum).createCell(0);
							 cell.setCellValue("");
							 cell.setCellStyle(styles.get("string"));
				             sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,totalCellNum));
				             
							
							row = sheet.createRow(++rowNum);
							sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,0,5));
							cell = row.createCell(0);
							cell.setCellValue("Grand Total");
							cell.setCellStyle(styles.get("header"));
							for(Map.Entry<Long, Integer> enty : feeTypeColumns.entrySet()){
								cell = row.createCell(enty.getValue());
								String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(enty.getValue());
								if(!ObjectFunctions.isNullOrEmpty(sumFormulas.get(columnLetter)))
								{
									cell.setCellFormula(sumFormulas.get(columnLetter));
								}
								cell.setCellStyle(styles.get("string"));
							}
							cell = row.createCell(totalCellNum);
							String columnLetter = org.apache.poi.ss.util.CellReference.convertNumToColString(totalCellNum);
							if(!ObjectFunctions.isNullOrEmpty(sumFormulas.get(columnLetter)))
							{
								cell.setCellFormula(sumFormulas.get(columnLetter));
							}
							cell.setCellStyle(styles.get("string"));
							
							
							showSchoolUrlInPOIExcelSheetFooter(wb,null,sheet,rowNum+1,totalCellNum);
						}
					}
					 Integer[] colwidths = { 7, 12,10, 25, 10, 10};
					 for (int i = 0; i < colwidths.length; i++) {
					    	sheet.setColumnWidth(i, colwidths[i] * 256);
				    }
				}
				wb.write(getResponse().getOutputStream());
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	
	@Actions( {
		@Action(value = "ajaxDoFailurePromoteStudentDetails", results = { @Result(location = "../admin/reports/ajaxFailurePromoteStudentDetails.jsp", name = "success") })
		})
	public String ajaxDoFailurePromoteStudentDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoFailurePromoteStudentDetails' method");
		}
		try {
			setAcademicYearList(adminManager.getAll(AcademicYear.class,"custId="+getUserCustId()+" and id <="+getCurrentAcademicYear().getId()+" order by id DESC"));
				checkStudyClassHavingStudentsOrNot();
				
			setAnyTitle(getPlTitle());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxFailurePromoteStudentDetails", results = {}) })
	public void ajaxFailurePromoteStudentDetails()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxFailurePromoteStudentDetails' method");
		}
		try {	
			if(StringFunctions.isNotNullOrEmpty(getSelectedId())){
				String fileName =  null;
				if("S".equalsIgnoreCase(getAnyTitle()))
					 fileName = "List of Suspend Students Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				else if("B".equalsIgnoreCase(getAnyTitle()))	
					 fileName = "List of Blacklist Students Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				else
					fileName = "List of Failed Students Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				if (getAnyId().equalsIgnoreCase("Excel")){
					ajaxSuspendorBlacklistStudentDetails(fileName);
				}else{
					Customer customer = getCustomerByCustId();
					PDFGenerator pDFGenerator=new PDFGenerator();
					String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
					FontFactory.register(fontPath);
					getResponse().setContentType(pDFGenerator.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					phfmj = null;
					pDFGenerator.getDocument().open();
					// creating pDF page event to set header and Footer to document
					PdfPTable mainTable = new PdfPTable(1);
					mainTable.setWidthPercentage(100);
					mainTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					PdfPTable defaultersHeaderReport = null;
					if("S".equalsIgnoreCase(getAnyTitle()) || "B".equalsIgnoreCase(getAnyTitle()))
						 defaultersHeaderReport = new PdfPTable(7);
					else
						 defaultersHeaderReport = new PdfPTable(4);
					
					defaultersHeaderReport.setWidthPercentage(100);
					if("S".equalsIgnoreCase(getAnyTitle()) || "B".equalsIgnoreCase(getAnyTitle())){
						int[] widths = {10,25,25,100,30,30,20};
						defaultersHeaderReport.setWidths(widths);
					}else{
						int[] widthss = {10,20,20,100};
						defaultersHeaderReport.setWidths(widthss);
					}	
					
					List<Object[]> studentFineFeeDetails = null;
					if (!ObjectFunctions.isNullOrEmpty(customer)) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 8, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 8, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
						if("S".equalsIgnoreCase(getAnyTitle()))
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("List of Suspend Students Details",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
						else if("B".equalsIgnoreCase(getAnyTitle()))
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("List of Blacklist Students Details",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
						else
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("List of Failed Students Details",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
					}
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
					
					if(!StringFunctions.isNullOrEmpty(getSelectedId()))
					{
						String studyClassIds[] = getSelectedId().split(",");
						if(!ObjectFunctions.isNullOrEmpty(studyClassIds))
						{
							for(String studyClassId : studyClassIds)
							{
								if(!StringFunctions.isNullOrEmpty(studyClassId))
								{
									StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, Long.valueOf(studyClassId.trim()));
									if(!ObjectFunctions.isNullOrEmpty(studyClass)){
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class & Section : "+ studyClass.getClassAndSection(), 8, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_CENTER, 4.0f));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
									
										if("S".equalsIgnoreCase(getAnyTitle()) || "B".equalsIgnoreCase(getAnyTitle()))
											 studentFineFeeDetails =adminManager.getAll("select studentId,fullName,admissionNumber,classAndSection,description,blackedOrSuspendFromDate,blackedOrSuspendToDate,suspendDays from vw_suspendAndBlacklistStudents where custId="+getUserCustId()+" and academicYearId="+getTempId()+" and  studyClassId = "+studyClassId.trim()+" and description IS NOT NULL AND TRIM(description) <> '' and status='"+getAnyTitle()+"' order by classAndSection");
										else
											studentFineFeeDetails =adminManager.getAll("select studId,fullName,admissionNumber,classAndSection,failurePromotableResons from vw_studentClassDetails where custId="+getUserCustId()+" and academicYearId="+getTempId()+" and  studyClassId = "+studyClassId.trim()+" and failurePromotableResons IS NOT NULL AND TRIM(failurePromotableResons) <> '' and status='Y' order by classAndSection");
										
										if(!ObjectFunctions.isNullOrEmpty(studentFineFeeDetails)){
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("S.No", 1, fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Admission Number", 1,fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Student Name", 1, fontPath));
											if("S".equalsIgnoreCase(getAnyTitle()) || "B".equalsIgnoreCase(getAnyTitle())){
												if("S".equalsIgnoreCase(getAnyTitle()))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Reason of Suspend ",1,fontPath));
												else if("B".equalsIgnoreCase(getAnyTitle()))
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Reason of Blacklist",1,fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Start Date", 1, fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("End Date", 1, fontPath));
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("No.Of Days", 1, fontPath));
												
											}else
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("Failure Reason(s)",1,fontPath));
											
											int i=1;
											for(Object[] failureStudent : studentFineFeeDetails){
												if(!ObjectFunctions.isNullOrEmpty(failureStudent)){
													
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(String.valueOf(i), "#000",fontPath));
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(failureStudent[2].toString(), "#000",fontPath));
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(failureStudent[1].toString(), "#000",fontPath));
													
													if (!ObjectFunctions.isNullOrEmpty(failureStudent[4])) 
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(String.valueOf(failureStudent[4]), "#000",fontPath));
													else
														defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("--", "#000",fontPath));
													
													if("S".equalsIgnoreCase(getAnyTitle()) || "B".equalsIgnoreCase(getAnyTitle())){
														if (!ObjectFunctions.isNullOrEmpty(failureStudent[5])) 
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(String.valueOf(failureStudent[5]).replace("00:00:00.0", ""), "#000",fontPath));
														else
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("--", "#000",fontPath));
														
														if (!ObjectFunctions.isNullOrEmpty(failureStudent[6])) 
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(String.valueOf(failureStudent[6]).replace("00:00:00.0", ""), "#000",fontPath));
														else
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("--", "#000",fontPath));
														if (!ObjectFunctions.isNullOrEmpty(failureStudent[7])) 
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(String.valueOf(failureStudent[7]), "#000",fontPath));
														else
															defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder("--", "#000",fontPath));
													}
												}
												i++;
												failureStudent=null;
												}
											studentFineFeeDetails = null;
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
											defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
											}
										
										else {
											if("S".equalsIgnoreCase(getAnyTitle()))
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("There are no suspend students in current academic year.",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
											else if("B".equalsIgnoreCase(getAnyTitle()))
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("There are no blacklist students in current academic year.",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
											else
												defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("There are no failed students in current academic year.",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 5.0f));
										}
									}
								}
							}
						}
					}
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
					mainTable.addCell(defaultersHeaderReport);
					pDFGenerator.getDocument().add(mainTable);
					pDFGenerator.getDocument().close();
					pDFGenerator = null;
					mainTable = null;
					defaultersHeaderReport = null;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	public void ajaxSuspendorBlacklistStudentDetails(String fileName)throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSuspendorBlacklistStudentDetails' method");
		}
		try {
			if (getTempId() != 0) {
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				WritableCellFormat cellFormat8 = getCellFormat8();
				// For School name
				WritableCellFormat cellFormat10 = getCellFormat10();
				WritableCellFormat cellFormat = null;
				WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
				font1.setColour(Colour.BLACK);
				cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
				Customer customer = getCustomerByCustId();
				if(!StringFunctions.isNullOrEmpty(getSelectedId())){
					String studyClassIds[] = getSelectedId().split(",");
					if(!ObjectFunctions.isNullOrEmpty(studyClassIds)){
						for(String studyClassId : studyClassIds){
							if(!StringFunctions.isNullOrEmpty(studyClassId)){
								StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, Long.valueOf(studyClassId.trim()));
								if(!ObjectFunctions.isNullOrEmpty(studyClass)){
									excelView.setWorkSheetName(studyClass.getClassAndSection()+" class");
					    			excelView.createWorkSheet(0);
					    			excelView.setDefaultFormat(excelView.getArial10format());
									List<Object[]> studentstatusDetails = adminManager.getAll("select fullName,admissionNumber,classAndSection,description,blackedOrSuspendFromDate,blackedOrSuspendToDate,suspendDays from vw_suspendAndBlacklistStudents where custId="+getUserCustId()+" and academicYearId="+getTempId()+" and  studyClassId = "+studyClassId.trim()+" and description IS NOT NULL AND TRIM(description) <> '' and status='"+getAnyTitle()+"' order by classAndSection");
									
									excelView.getWs().setColumnView(0, 15);
									excelView.getWs().setColumnView(1, 20);
									excelView.getWs().setColumnView(2, 20);
									excelView.getWs().setColumnView(3, 60);
									excelView.getWs().setColumnView(4, 20);
									excelView.getWs().setColumnView(5, 20);
									excelView.getWs().setColumnView(6, 10);
									if (!ObjectFunctions.isNullOrEmpty(customer)) {
										if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
											excelView.getWs().mergeCells(0, 0, 6, 1);
											excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
										}
										if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
											excelView.getWs().mergeCells(0, 2, 6, 2);
											excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
										}
										int row = 4;
										if (studentstatusDetails.size() > 0) {
											excelView.getWs().addCell(new Label(0, 3, "Student Name", cellFormat));
											excelView.getWs().addCell(new Label(1, 3, "Admission Number",cellFormat));
											excelView.getWs().addCell(new Label(2, 3, "Class & Section",cellFormat));
											if("S".equalsIgnoreCase(getAnyTitle()))
												excelView.getWs().addCell(new Label(3, 3, "Reason of Suspension", cellFormat));
											else
												excelView.getWs().addCell(new Label(3, 3, "Reason of Blacklist", cellFormat));

											excelView.getWs().addCell(new Label(4, 3, "Start Date", cellFormat));
											excelView.getWs().addCell(new Label(5, 3, "End Date", cellFormat));
											excelView.getWs().addCell(new Label(6, 3, "No.Of Days", cellFormat));
												
											if (!ObjectFunctions.isNullOrEmpty(studentstatusDetails)) {
												for (Object[] studentDetails : studentstatusDetails) {
													int rowCount = 0;
													excelView.getWs().addCell(new Label(0,row,studentDetails[0].toString()));
													rowCount++;
													excelView.getWs().addCell(new Label(1,row,studentDetails[1].toString()));
													rowCount++;
													excelView.getWs().addCell(new Label(2,row,studentDetails[2].toString()));
													rowCount++;
													excelView.getWs().addCell(new Label(3,row,studentDetails[3].toString()));
													rowCount++;
													excelView.getWs().addCell(new Label(4,row,studentDetails[4].toString().replace("00:00:00.0", "")));
													rowCount++;
													excelView.getWs().addCell(new Label(5,row,studentDetails[5].toString().replace("00:00:00.0", "")));
													rowCount++;
													excelView.getWs().addCell(new Label(6,row,studentDetails[6].toString()));
													rowCount++;
													row++;
												}
												studentstatusDetails = null;
												showSchoolUrlInExcelSheetFooter(row, excelView, 6);
											} 
										}else {
											excelView.getWs().mergeCells(0, 6, 6, 6);
											if("S".equalsIgnoreCase(getAnyTitle()))
												excelView.getWs().addCell(new Label(0,6,"There is no suspend students in this academic year",cellFormat));
											else
												excelView.getWs().addCell(new Label(0,6,"There is no blacklist students in this academic year",cellFormat));
										}
									}
								}
							}
						}
					}
					excelView.getWb().write();
					excelView.getWb().close();
				}	
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	
	@Actions( {
		@Action(value = "ajaxDoMonthlyReportDetails", results = { @Result(location = "../admin/reports/ajaxGetMontlyReports.jsp", name = "success") })
		})
	public String ajaxDoMonthlyReportDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoMonthlyReportDetails' method");
		}
		try {
			//int count = adminManager.getCount("student","accountId in (select id from Account where parentId is null)");
			Object[] date = null;
			AcademicYear academicYear = userManager.getCurrentAcademicYear(Constants.YES_STRING, getUserCustId());
			if ("M".equalsIgnoreCase(academicYear.getManageAttendanceBy())) 
				 date = adminManager.get("select createdDate,id from topStudentMonthlyAttendancePercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" limit 1");
			else if("D".equalsIgnoreCase(academicYear.getManageAttendanceBy()))
			 date = adminManager.get("select createdDate,id from topStudentDailyAttendancePercentageCal where custIds="+getUserCustId()+" and academicYearIds="+getUserAcademicYearId()+" limit 1");
			 if(ObjectFunctions.isNullOrEmpty(date)){
				Object[] curDate = adminManager.get("select createdDate,id from topStudentMarksPercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" limit 1");
				if(!ObjectFunctions.isNullOrEmpty(curDate))
					date = curDate;
				else
					date = adminManager.get("select createdDate,id from topStudentMarksPercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" limit 1");
			 } 
			if(!ObjectFunctions.isNullOrEmpty(date))
				if(!ObjectFunctions.isNullOrEmpty(date[0]))
					setAttendanceDate(date[0].toString());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxGenarateMonthlyReportsDetails", results = {})
		})
	public void ajaxGenarateMonthlyReportsDetails()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenarateMonthlyReportsDetails' method");
		}
		try {
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			String fileName="Auto Monthly Report";
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
			WritableCellFormat cellFormat8 = getCellFormat8();
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormat = null;
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			font1.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			Customer customer = getCustomerByCustId();
			List<Object[]> top5StudentMonthlyAttendanceList = null;
			List<Object[]> staffPerformance = null;
			List<Object[]> topStudentsMarks = null;
			List<Object[]> fifthAttendance = null;
			AcademicYear academicYear = userManager.getCurrentAcademicYear(Constants.YES_STRING, customer.getId());
			if ("M".equalsIgnoreCase(academicYear.getManageAttendanceBy())) {
				fifthAttendance = adminManager.getAll("select topStudentMonthlyAttendancePercentage from topStudentMonthlyAttendancePercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and topStudentMonthlyAttendancePercentage!=0.0 group by studId  order by topStudentMonthlyAttendancePercentage desc limit 5");
				if(!ObjectFunctions.isNullOrEmpty(fifthAttendance)){
					if(fifthAttendance.size()>=5)
						top5StudentMonthlyAttendanceList = adminManager.getAll("select studId,topStudentMonthlyAttendancePercentage from topStudentMonthlyAttendancePercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and topStudentMonthlyAttendancePercentage>="+fifthAttendance.get(4)+" group by studId order by topStudentMonthlyAttendancePercentage desc,studsName asc ");
					else
						top5StudentMonthlyAttendanceList = adminManager.getAll("select studId,topStudentMonthlyAttendancePercentage from topStudentMonthlyAttendancePercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and topStudentMonthlyAttendancePercentage!=0.0 group by studId order by topStudentMonthlyAttendancePercentage desc,studsName asc limit 5 ");
				}
			}else{
				fifthAttendance = adminManager.getAll("select topTotalPercentage from topStudentDailyAttendancePercentageCal where custIds="+getUserCustId()+" and academicYearIds="+getUserAcademicYearId()+" and topTotalPercentage!=0.0 group by studId order by topTotalPercentage desc limit 5");
				if(!ObjectFunctions.isNullOrEmpty(fifthAttendance)){
					if(fifthAttendance.size()>=5)
						top5StudentMonthlyAttendanceList = adminManager.getAll("select studId,topTotalPercentage from topStudentDailyAttendancePercentageCal where custIds="+getUserCustId()+" and academicYearIds="+getUserAcademicYearId()+" and topTotalPercentage>="+fifthAttendance.get(4)+" group by studId order by topTotalPercentage desc,studNames asc");
					else
						top5StudentMonthlyAttendanceList = adminManager.getAll("select studId,topTotalPercentage from topStudentDailyAttendancePercentageCal where custIds="+getUserCustId()+" and academicYearIds="+getUserAcademicYearId()+" and topTotalPercentage!=0.0 group by studId order by topTotalPercentage desc,studNames asc limit 5");
				}
			}
			excelView.setDefaultFormat(excelView.getArial10format());
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				excelView.setWorkSheetName("Top 5 Student Attendance ");
				excelView.createWorkSheet(0);
				excelView.getWs().removeRow(0);
				if (!ObjectFunctions.isNullOrEmpty(top5StudentMonthlyAttendanceList)) {
					if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
						excelView.getWs().mergeCells(0, 0, 3, 1);
						excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
					}
					if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
						excelView.getWs().mergeCells(0, 2, 3, 2);
						excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
					}
					int row = 4;
					excelView.getWs().setColumnView(0, 10);
					excelView.getWs().setColumnView(1, 30);
					excelView.getWs().setColumnView(2, 25);
					excelView.getWs().setColumnView(3, 15);
					excelView.getWs().addCell(new Label(0, 3, "Ad No.", cellFormat));
					excelView.getWs().addCell(new Label(1, 3, "Student Name", cellFormat));
					excelView.getWs().addCell(new Label(2, 3, "Class & Section", cellFormat));
					excelView.getWs().addCell(new Label(3, 3, "Attendance(%)",cellFormat));
					int num = 1;
					for (Object[] obj : top5StudentMonthlyAttendanceList) {
						Student  studentObj = (Student) userManager.get(Student.class,"id="+Long.valueOf(obj[0].toString()));
						int rowCount = 0;
						excelView.getWs().addCell(new Label(rowCount, row, studentObj.getAccount().getAdmissionNumber(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, studentObj.getAccount().getPerson().getPersonFullName(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, studentObj.getClassAndSection(), excelView.getDefaultFormat()));
						rowCount++;
						excelView.getWs().addCell(new Label(rowCount, row, obj[1].toString(), excelView.getDefaultFormat()));
						rowCount++;
						row++;
						num++;
					}
					top5StudentMonthlyAttendanceList = null;
				} else {
					excelView.getWs().mergeCells(0, 4, 9, 4);
					excelView.getWs().addCell(new Label(0,4,"Kindly start using Attendance module to start getting this report.",cellFormat));
				}
				List<Object[]> fifthpercen = adminManager.getAll("select topPercentage from topStudentMarksPercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and topPercentage!=0.0  group by studId order by topPercentage desc limit 5");
					if(!ObjectFunctions.isNullOrEmpty(fifthpercen)){
						if(fifthpercen.size()>=5)
							topStudentsMarks = adminManager.getAll("select studId,topPercentage,admisNos,studNames,classAndSections from topStudentMarksPercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and topPercentage>="+fifthpercen.get(4)+" group by studId order by topPercentage desc,studNames asc ");
						else
							topStudentsMarks = adminManager.getAll("select studId,topPercentage,admisNos,studNames,classAndSections from topStudentMarksPercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and topPercentage!=0.0 group by studId order by topPercentage desc,studNames asc limit 5");
					}
					excelView.setWorkSheetName("Top 5 Student Marks ");
					excelView.createWorkSheet(0);
					excelView.getWs().removeRow(0);
					if (!ObjectFunctions.isNullOrEmpty(topStudentsMarks)) {
						if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
							excelView.getWs().mergeCells(0, 0, 3, 1);
							excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
						}
						if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
							excelView.getWs().mergeCells(0, 2, 3, 2);
							excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
						}
						int row = 4;
						excelView.getWs().setColumnView(0, 10);
						excelView.getWs().setColumnView(1, 30);
						excelView.getWs().setColumnView(2, 25);
						excelView.getWs().setColumnView(3, 15);
						excelView.getWs().addCell(new Label(0, 3, "Ad No.", cellFormat));
						excelView.getWs().addCell(new Label(1, 3, "Student Name", cellFormat));
						excelView.getWs().addCell(new Label(2, 3, "Class & Section", cellFormat));
						excelView.getWs().addCell(new Label(3, 3, "Marks(%)",cellFormat));
						int num = 1;
						for (Object[] obj : topStudentsMarks) {
							int rowCount = 0;
							excelView.getWs().addCell(new Label(rowCount, row, obj[2].toString(), excelView.getDefaultFormat()));
							rowCount++;
							excelView.getWs().addCell(new Label(rowCount, row, obj[3].toString(), excelView.getDefaultFormat()));
							rowCount++;
							excelView.getWs().addCell(new Label(rowCount, row, obj[4].toString(), excelView.getDefaultFormat()));
							rowCount++;
							excelView.getWs().addCell(new Label(rowCount, row, obj[1].toString(), excelView.getDefaultFormat()));
							rowCount++;
							row++;
							num++;
						}
						topStudentsMarks = null;
					} else {
						excelView.getWs().mergeCells(0, 4, 9, 4);
						excelView.getWs().addCell(new Label(0,4,"Kindly start using Examination module to start getting this report.",cellFormat));
					}
					List<Object[]> fifthStaff = adminManager.getAll("select topStaffPercentage from topStaffPeromancePercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by staffId order by topStaffPercentage desc limit 5");
					if(!ObjectFunctions.isNullOrEmpty(fifthStaff)){
						if(fifthStaff.size()>=5)
							staffPerformance = adminManager.getAll("select staffId,topStaffPercentage,staffNames from topStaffPeromancePercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and topStaffPercentage>="+fifthStaff.get(4)+" group by staffId order by topStaffPercentage desc,staffNames asc");
						 else
							 staffPerformance = adminManager.getAll("select staffId,topStaffPercentage,staffNames from topStaffPeromancePercentageCal where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by staffId order by topStaffPercentage desc,staffNames asc limit 5");
					}
					excelView.setWorkSheetName("Top 5 best Teacher ");
					excelView.createWorkSheet(0);
					excelView.getWs().removeRow(0);
					if (!ObjectFunctions.isNullOrEmpty(staffPerformance)) {
						if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
							excelView.getWs().mergeCells(0, 0, 3, 1);
							excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
						}
						if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
							excelView.getWs().mergeCells(0, 2, 3, 2);
							excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
						}
						int row = 4;
						excelView.getWs().setColumnView(0, 30);
						excelView.getWs().setColumnView(1, 15);
						excelView.getWs().addCell(new Label(0, 3, "Teacher Name	", cellFormat));
						excelView.getWs().addCell(new Label(1, 3, "Marks(%)", cellFormat));
						int count = 5;
						int num = 1;
						for (Object[] obj : staffPerformance) {
							int rowCount = 0;
							excelView.getWs().addCell(new Label(rowCount, row, obj[2].toString(), excelView.getDefaultFormat()));
							rowCount++;
							excelView.getWs().addCell(new Label(rowCount, row, obj[1].toString(), excelView.getDefaultFormat()));
							rowCount++;
							row++;
							num++;
						}
						staffPerformance = null;
					}
					else{
						excelView.getWs().mergeCells(0, 4, 9, 4);
						excelView.getWs().addCell(new Label(0,4,"Kindly start using Academic module to start getting this report.",cellFormat));
					}
			}
			excelView.getWb().write();
			excelView.getWb().close();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions( {
		@Action(value = "ajaxOnlineAppointments", results = {@Result(location = "../admin/reports/ajaxViewOnlineAppointments.jsp", name = "success") }) })
	public String ajaxOnlineAppointments() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxOnlineAppointments' method");
		}
	try {
		loadAcademicYearStartDateAndDates(getUserAcademicYearId());
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	
	
	@Action(value = "ajaxDownloadOnlineAppartments", results = {})
	public void ajaxDownloadOnlineAppartments() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadOnlineAppartments' method");
		}
		try {
				String fileName = "Online_Appointment_Details_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				getResponse().setContentType("application/vnd.ms-excel");
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				org.apache.poi.ss.usermodel.Workbook wb = new HSSFWorkbook();
				HSSFSheet sheet = (HSSFSheet) wb.createSheet("Collection Report");
				Customer customer  = getCustomerByCustId();
				String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
				String endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
				if(!ObjectFunctions.isNullOrEmpty(customer)){
					int rowNum = 0;
					Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
					Row row = sheet.createRow(rowNum);
					row.setHeightInPoints(45);
					org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);
					sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$Z$1"));
					cell.setCellValue(customer.getOrganization()+"\n"+customer.getCustomerFormattedAddress());
					cell.setCellStyle(styles.get("title"));
					
					List<Object[]> parentAppointmentsList = null;
					List<Object[]> teacherAppointmentsList = null;
					String rolenameWhere = null;
					if("on".equalsIgnoreCase(getParamValue("parentAppointments")))
					{
						rolenameWhere = "(requestRoleName ='"+Constants.SCHOOL_PARENT+"')";
						//parentAppointmentsList = adminManager.getAll("select appointmentId,requestFullName,receiveFullName,scheduleDate,scheduleTime,subject,description,requestRoleDescription,receivedRoleDesc from vw_parentAppointmentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and scheduleDate>='"+ fromDate+ " 00:00:00'  and  scheduleDate<='"+ endDate+ " 00:00:00' and status='"+Constants.ACTIVE_STATUS+"' order by scheduleDate");
						parentAppointmentsList = adminManager.getAll("select appointmentId,requestFullName,receiveFullName,scheduleDate,scheduleTime,subject,description,requestRoleDescription,receivedRoleDesc from vw_staffAppointmentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and scheduleDate>='"+ fromDate+ " 00:00:00'  and  scheduleDate<='"+ endDate+ " 00:00:00' and status='"+Constants.ACTIVE_STATUS+"' and "+rolenameWhere+" order by scheduleDate");
					}
					if("on".equalsIgnoreCase(getParamValue("teacherAppointments")))
					{
						rolenameWhere = "(requestRoleName ='"+Constants.SCHOOL_HOD+"' OR requestRoleName ='"+Constants.SCHOOL_TEACHER+"' OR requestRoleName ='"+Constants.SCHOOL_FINANCE+"' OR requestRoleName ='"+Constants.SCHOOL_LIBRARIAN+"' OR requestRoleName ='"+Constants.SCHOOL_TRANSPORT+"' OR requestRoleName ='"+Constants.SCHOOL_TRANSPORTFINANCE+"' OR requestRoleName ='"+Constants.SCHOOL_HOSTEL+"' OR requestRoleName ='"+Constants.SCHOOL_HOSTELFINANCE+"' OR requestRoleName ='"+Constants.SCHOOL_VICEPRINCIPAL+"' OR requestRoleName ='"+Constants.SCHOOL_ADMIN+"' OR requestRoleName ='"+Constants.SCHOOL_ADMINOFFICER+"' OR requestRoleName ='"+Constants.SCHOOL_ASST_STAFF+"' OR requestRoleName ='"+Constants.SCHOOL_ROLE_MESS_MANAGER+"')";
						
						teacherAppointmentsList = adminManager.getAll("select appointmentId,requestFullName,receiveFullName,scheduleDate,scheduleTime,subject,description,requestRoleDescription,receivedRoleDesc from vw_staffAppointmentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and scheduleDate>='"+ fromDate+ " 00:00:00'  and  scheduleDate<='"+ endDate+ " 00:00:00' and status='"+Constants.ACTIVE_STATUS+"' and "+rolenameWhere+" order by scheduleDate");
					}
					if(StringFunctions.isNullOrEmpty(getParamValue("parentAppointments")) && StringFunctions.isNullOrEmpty(getParamValue("teacherAppointments")))
					{
						teacherAppointmentsList = adminManager.getAll("select appointmentId,requestFullName,receiveFullName,scheduleDate,scheduleTime,subject,description,requestRoleDescription,receivedRoleDesc from vw_staffAppointmentDetails where custId="+ getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and scheduleDate>='"+ fromDate+ " 00:00:00'  and  scheduleDate<='"+ endDate+ " 00:00:00' and status='"+Constants.ACTIVE_STATUS+"' order by scheduleDate");
					}
					if(ObjectFunctions.isNotNullOrEmpty(parentAppointmentsList) || ObjectFunctions.isNotNullOrEmpty(teacherAppointmentsList)){
						HashMap<Long, Integer> feeTypeColumns = new HashMap<Long, Integer>();
						// Header Part
						String[] header = new String[]{"S.No.","Appointment From","Appointment To.","Date & Time of Appointment","Subject","Description"};
						row = sheet.createRow(++rowNum);
						int cellNum = 0;
						for(String hea: header){
							cell = row.createCell(cellNum++);
							cell.setCellValue(hea);
							cell.setCellStyle(styles.get("header"));
						}
						
						int totalCellNum = cell.getColumnIndex(); 
						int sNo = 1;
						if(!ObjectFunctions.isNullOrEmpty(teacherAppointmentsList)){
							for (Object[] obj : teacherAppointmentsList) {
								cellNum = 0;
								row = sheet.createRow(++rowNum);
								cell = row.createCell(cellNum++);
								cell.setCellValue(sNo++);
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[1].toString() +" (" + obj[7].toString() +")");
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[2].toString() +" (" + obj[8].toString() +")");
								
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								
								Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, obj[3].toString());
								cell.setCellValue(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate) + " (" + obj[4].toString()+")");
								
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[5].toString());
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[6].toString());
							}
						}
						if(!ObjectFunctions.isNullOrEmpty(parentAppointmentsList)){
							for (Object[] obj : parentAppointmentsList) {
								cellNum = 0;
								row = sheet.createRow(++rowNum);
								cell = row.createCell(cellNum++);
								cell.setCellValue(sNo++);
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[1].toString() +" (" + obj[7].toString() +")");
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[2].toString() +" (" + obj[8].toString() +")");
								
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, obj[3].toString());
								cell.setCellValue(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate) + " (" + obj[4].toString()+")");
								
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[5].toString());
								cell.setCellStyle(styles.get("string"));
								cell = row.createCell(cellNum++);
								cell.setCellValue(obj[6].toString());
							}
						}
						showSchoolUrlInPOIExcelSheetFooter(wb,null,sheet,rowNum+1,totalCellNum);
						teacherAppointmentsList = null;
					}
					 Integer[] colwidths = { 7, 20,20, 25, 25, 40};
					 for (int i = 0; i < colwidths.length; i++) {
					    	sheet.setColumnWidth(i, colwidths[i] * 256);
				    }
				}
				wb.write(getResponse().getOutputStream());
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	 @Actions({ @Action(value = "ajaxGetDayBookReports", results = { @Result(location = "../admin/reports/ajaxGetDayBookReports.jsp", name = "success") }),
		        @Action(value = "ajaxGetLibraryFineFeeReports", results = {@Result(location = "../admin/reports/ajaxGetLibraryFineReports.jsp", name = "success") })
	 })
		public String ajaxDoUploadEmailsToMailchimp() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoUploadEmailsToMailchimp' method");
		}
		try {
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
		}
		catch(Exception ex) {
			super.addActionError(ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	 @Actions( { @Action(value = "ajaxDownloadStudentAssignmentReport", results = {}) })
		public String ajaxDownloadStudentAssignmentReport() {
			try {
				String frmDate = getParamValue("selectedDate");
				String presentVal = getParamValue("presentVal");
				String absentVal = getParamValue("absentVal");
				if (getUserAcademicYearId()!=0) {
					StringBuffer fileName = new StringBuffer();
					PDFGenerator pDFGenerator = new PDFGenerator();
					getResponse().setContentType(pDFGenerator.getMimeType());
						if("P".equalsIgnoreCase(presentVal) && "A".equalsIgnoreCase(absentVal) ){
							fileName.append("Class Wise " + getPlTitle()).append(" ").append(frmDate);
						}else if("A".equalsIgnoreCase(absentVal)){
							fileName.append("Class Wise " + getPlTitle()).append("(Absent)").append(" ").append(frmDate);
						}else if("P".equalsIgnoreCase(presentVal)){
							fileName.append("Class Wise " + getPlTitle()).append("(Present)").append(" ").append(frmDate);
					}else
					fileName.append("Assignment Report" + getPlTitle()).append(" ").append(frmDate);
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.toString().replace(' ', '_') + ".pdf");
					pDFGenerator.createDocumentJasper();
					pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
					PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
					pDFGenerator.getPdfWriter().setPageEvent(phfmj);
					pDFGenerator.getDocument().open();
					Customer customer = getCustomerByCustId();
					//fileName = "Class Wise Daily Attendance"+ fromDate;
					String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
					FontFactory.register(fontPath);
					pDFGenerator.getDocument().open();
					// creating pDF page event to set header and Footer to document
					PdfPTable mainTable = new PdfPTable(1);
					mainTable.setWidthPercentage(100);
					mainTable.setSplitLate(false);
					mainTable.getDefaultCell().setBorder(Rectangle.BOX);
					int width = 0;

					width=4;
					
					PdfPTable headerReport = new PdfPTable(width);
					headerReport.setWidthPercentage(100);

					
					PdfPTable defaultersHeaderReports = null;
					if (!ObjectFunctions.isNullOrEmpty(customer)) {
						if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
							headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
						}
						if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
							headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
						}
					}
					
					ViewClassAssignmentDetails viewClassAssignmentDetails = (ViewClassAssignmentDetails) adminManager.get(ViewClassAssignmentDetails.class,"assignmentId="+getViewClassAssignmentDetails().getAssignmentId());
					headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("Assignment Report",width, fontPath));
					
					headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("", width, fontPath));
					headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("", width, fontPath));
					
					headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Class",1, fontPath));
					headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Subject Name",1, fontPath));
					headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Description",1, fontPath));
					headerReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Completion Date",1, fontPath));
					
					headerReport.addCell(PDFGenerator.getPdfCellAlignCenter(viewClassAssignmentDetails.getClassAndSection(), "#000",fontPath));
					headerReport.addCell(PDFGenerator.getPdfCellAlignCenter(viewClassAssignmentDetails.getSubjectName(), "#000",fontPath));
					headerReport.addCell(PDFGenerator.getPdfCellAlignCenter(viewClassAssignmentDetails.getAssignmentDescription(), "#000",fontPath));
					headerReport.addCell(PDFGenerator.getPdfCellAlignCenter(viewClassAssignmentDetails.getAssignmentDateStr(), "#000",fontPath));
					
					viewClassAssignmentDetails = null;
					mainTable.addCell(headerReport);
					
					width=3;
					
					PdfPTable defaultersHeaderReport = new PdfPTable(width);
					defaultersHeaderReport.setWidthPercentage(100);
					
					List<ViewStudentPersonAccountDetails> studentList = adminManager.getAll(ViewStudentPersonAccountDetails.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getViewClassAssignmentDetails().getClassSectionId()+" and status='"+Constants.YES_STRING+"' and description is null");
					if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber()))
						Collections.sort(studentList,new StudentRollNumberComparator());
					
					//List<VWStudentClassAssignment> studentList =staffManager.getAll(VWStudentClassAssignment.class, "classSectionId="+getViewClassAssignmentDetails().getClassSectionId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+ " and status='Y' order by classSectionId,rollNumber group by studentId");
					
					if(ObjectFunctions.isNotNullOrEmpty(studentList)){
						
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("Summary",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("",1, fontPath));
						
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Total Students",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Completed Students",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Not Completed Students",1, fontPath));
						
						List<StudentClassAssignment> studentClassAssignmentList = staffManager.getAll(StudentClassAssignment.class, "assignmentId="+getViewClassAssignmentDetails().getAssignmentId());
						
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(""+studentList.size(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(""+(studentList.size() - studentClassAssignmentList.size()), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(""+studentClassAssignmentList.size(), "#000",fontPath));
						
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("", width, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor("", width, fontPath));
						studentClassAssignmentList = null;
						
						long checkId=0;
						
						ClassAssignment classAssignment = (ClassAssignment) staffManager.get(ClassAssignment.class, "id="+getViewClassAssignmentDetails().getAssignmentId());
						for (ViewStudentPersonAccountDetails student : studentList) {  
							if(checkId != student.getClassSectionId()){
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Roll Number",1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Student Name",1, fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Status",1, fontPath));
							}
							checkId=student.getClassSectionId();
							//ViewStudentPersonAccountDetails student = (ViewStudentPersonAccountDetails) studentObj;
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(String.valueOf(student.getRollNumber()), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(student.getFullName(), "#000",fontPath));
							
							StudentClassAssignment studentClassAssignment = (StudentClassAssignment) staffManager.get(StudentClassAssignment.class, "studentId="+student.getStudentId()+" and assignmentId="+getViewClassAssignmentDetails().getAssignmentId());
							if(Constants.ACTIVE_STATUS.equalsIgnoreCase(classAssignment.getStatus()))
							{
								if (!ObjectFunctions.isNullOrEmpty(studentClassAssignment)) 
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Not Completed", "#EE2424",fontPath));
								else
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Completed", "#000",fontPath));
							}
							else
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter("Not Completed", "#EE2424",fontPath));
							studentClassAssignment = null;
						}
					}
					
				mainTable.addCell(defaultersHeaderReport);
				
				mainTable.addCell(defaultersHeaderReports);
				pDFGenerator.getDocument().add(mainTable);
				pDFGenerator.getDocument().close();
				pDFGenerator = null;
				mainTable = null;
				defaultersHeaderReport = null;
				defaultersHeaderReports = null;
				pDFGenerator = null;
				phfmj = null;
				}
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		} 
	 
	 @Actions( { @Action(value = "ajaxSearchStaffName", results = { @Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }) }) })
		public String ajaxSearchStaffName() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxSearchStaffName' method");
			}
			try {
				String searchword = getParamValue("searchword");
				if (!StringFunctions.isNullOrEmpty(searchword)) {
					List<ViewStaffPersonAccountDetails> staffsList = null;
					staffsList = adminManager.getAll(ViewStaffPersonAccountDetails.class,"custId="+getUserCustId()+" and (fullName like '%"+searchword.trim()+ "%') and accountId not in ("+ getAnyTitle().substring(0, getAnyTitle().length() - 1)+ ")  and description is null ");
					JSONArray res = new JSONArray();
					JSONObject j;
					if (!ObjectFunctions.isNullOrEmpty(staffsList)) {
							for (ViewStaffPersonAccountDetails staffDetails : staffsList) {
								j = new JSONObject();
								j.put("accountId", staffDetails.getAccountId());
								j.put("staffNames", staffDetails.getFullName());
								res.put(j);
							}
					} else {
						j = new JSONObject();
						j.put("accountId", 0);
						j.put("staffNames", "No Results Found !!");
						res.put(j);
					}
					j = new JSONObject();
					j.put("data", res);
					getResponse().getOutputStream().print(j.toString());
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
	 @Actions( { 
	        @Action(value = "ajaxGenerateStudentChallana", results = {@Result(location = "../admin/reports/feeReciept/popupViewGenerateStudentChallana.jsp", name = "success"),
	        														  @Result(location = "../admin/reports/feeReciept/popupViewGenerateStudentChallana_209.jsp", name = "challanUserSelection")}) })

	    public String ajaxGenerateStudentChallana() throws URTUniversalException {
	    if (log.isDebugEnabled()) {
	        log.debug("Entering 'ajaxGenerateStudentChallana' method");
	    }
	    try {
	        AcademicYear academicYear = getCurrentAcademicYear();
	        setAcademicYear(academicYear);
	        if(getAcademicYearId() != getUserAcademicYearId() && getAcademicYearId() > 0){
	            setAcademicYearId(getAcademicYearId());
	        }else{
	        	setAcademicYearId(getUserAcademicYearId());
	        }
	        String paybtn = getParamValue("downloadrecipt");
	        String spId = getParamValue("spId");
	        setAnyTitle(getParamValue("createdDate"));
	        setAnyId(getParamValue("invoiceNumber"));
	        setAlertSendType(getParamValue("invoiceString"));
	        setPlTitle(getPlTitle()); // here get the fine amount in words from page
	        if(!StringFunctions.isNullOrEmpty(spId)){
	        setCustomer(getCustomerByCustId());
	        //Added By Siva for displaying country currency symbol
	        setCountry((Country)adminManager.get(Country.class, getCustomer().getAddress().getCountryId()));
	        setBankAccountDetailsVO(accountManager.getCustomerBankAccountDetailsVo(getUserCustId()));
	        setViewStudentClassDetails((ViewStudentClassDetails)adminManager.get(ViewStudentClassDetails.class,"studId="+spId+" and custId="+getUserCustId()+" and studDiscontinueDesc is null"));
	        if(!ObjectFunctions.isNullOrEmpty(getViewStudentClassDetails())){
	        	StringBuffer query = new StringBuffer("studentId="+getViewStudentClassDetails().getStudId()+" and deleteStatus='C' and paymentCommitFeeStatus='"+Constants.NO_STRING+"' ");
				if (getAcademicYearId() > 0) {
						query.append(" and challanaNumber=" + getAnyId());
						query.append(" order by schoolTermId,feeTypeId");
						setChallanaPayment((ChallanaPayment) adminManager.get(ChallanaPayment.class, "studentId="+ getViewStudentClassDetails().getStudId()+ " and deleteStatus='"+ Constants.NO_STRING+ "' and challanaNumber="+ getAnyId()));
					setStudentPaymentList(adminManager.getAll(ViewStudentFeeChallanaDetails.class,query.toString()));
					if(!ObjectFunctions.isNullOrEmpty(getStudentPaymentList())){
						Object[] obj = adminManager.get("select IFNULL(CONVERT(group_concat(distinct(termName)), CHAR),0) as termName,schoolTermId from vw_studentFeeChallanaDetails where custId="+getUserCustId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and deleteStatus='C' and paymentCommitFeeStatus='"+Constants.NO_STRING+"' and challanaNumber=" + getAnyId());
						if(!ObjectFunctions.isNullOrEmpty(obj)){
							setWishDescription(obj[0].toString());
						}
					}
				}
	            Object[] paidAmount= null;
                //setAnyId(getAnyId());
                //sp.paidAmount,sp.discountAmount,IFNULL(ep.excessAmount,0) as excessAmount,sp.id,sp.discountDesc,sum(uep.excessAmount) as usedExcessAmount,sp.desktopReceiptNumber
               if(!ObjectFunctions.isNullOrEmpty(getChallanaPayment().getStudentPayment()))
	            paidAmount=adminManager.get("select sp.paidAmount,sp.discountAmount,sp.id,sp.discountDesc  from studentPayment sp where sp.custId="+getUserCustId()+" and sp.id="+getChallanaPayment().getStudentPayment().getId()+" and sp.studentId="+getViewStudentClassDetails().getStudId());
	            if(Constants.YES_STRING.equalsIgnoreCase(getCustomerByCustId().getShowBalanceAmountInFeeReceipt())){
	                Object[] totalConfiigureAmount=adminManager.get("select sum(feeAmount),feeId from vw_studentClassFees where custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+" and description is null");
	                if(!ObjectFunctions.isNullOrEmpty(totalConfiigureAmount)){
	                    Object[] totalPaidAmount= adminManager.get("select IFNULL(sum(paymentAmount),0) as paymentAmount,IFNULL(sum(discountAmount),0) as discountAmount,IFNULL(sum(paymentConcessionAmount),0) as paymentConcessionAmount,id from vw_studentFeeChallanaDetails where custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and studentId="+getViewStudentClassDetails().getStudId()+"  and description is null");
	                    setTempString3(String.valueOf(Double.valueOf(totalConfiigureAmount[0].toString())-(Double.valueOf(totalPaidAmount[0].toString())+Double.valueOf(totalPaidAmount[1].toString())+Double.valueOf(totalPaidAmount[2].toString()))));
	                }
	            }
	            
	            if(!ObjectFunctions.isNullOrEmpty(paidAmount)){
	                if(!ObjectFunctions.isNullOrEmpty(getStudentPayment())){
	                    setPaymentAmount(getStudentPayment().getFineAmount());
	                }
	                if (Double.valueOf(paidAmount[1].toString()) != 0)
	                    setThirtyTotalAmount(Double.valueOf(paidAmount[1].toString()));
	                /*if (Double.valueOf(paidAmount[2].toString()) != 0)
	                    setWishTitle(paidAmount[2].toString());*/
	                if(getPaymentAmount() >0)
	                    setTotalAmount(Double.valueOf(paidAmount[0].toString())+getPaymentAmount());
	                else{
	                    setTotalAmount(Double.valueOf(paidAmount[0].toString()));
	                }
	                if(!ObjectFunctions.isNullOrEmpty(paidAmount[3]))
	                	setDescription(paidAmount[3].toString()); //this is stored to discount reason desc
	               
	                paidAmount=null;
	            }
	          }
	        }
	        /* @Ganesh The below code is customer specific because customer asking their own content so we are will check those customers and based on customer we will change challan format */
			Properties urlConfigProp = getResouceBundleURLConfiguraionPropertiesFileDetails();
			String customerId = urlConfigProp.getProperty("s.challan.customerId");
			ArrayList<Long> arrayList = new ArrayList<Long>(Arrays.asList(customerId.split(",")).size());
			for (int i = 0; i < Arrays.asList(customerId.split(",")).size(); i++) {
				arrayList.add(Long.valueOf(customerId.split(",")[i].toString()));
			}
			boolean customerSpecific=arrayList.contains(getUserCustId());
	        if(customerSpecific){
	        	return "challanUserSelection";
	        }
	    } catch (Exception ex) {
	        ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	        JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    }
	    return SUCCESS;
	    }
	 
	 @Actions( { 
	        @Action(value = "ajaxAdmissionEnquiryFeePaidReport", results = {@Result(location = "../admin/reports/ajaxAdmissionEnquiryFeePaidReport.jsp", name = "success") }) })

	    public String ajaxAdmissionEnquiryFeePaidReport() throws URTUniversalException {
	    if (log.isDebugEnabled()) {
	        log.debug("Entering 'ajaxAdmissionEnquiryFeePaidReport' method");
	    }
	    try {
	       /* AcademicYear academicYear = getCurrentAcademicYear();
	        setAcademicYear(academicYear);*/
	    	setPlTitle(getPlTitle()); // here get the fine amount in words from page
	    	setCustomer(getCustomerByCustId());
	    	//Added By Siva for displaying country currency symbol
	        setCountry((Country)adminManager.get(Country.class, getCustomer().getAddress().getCountryId()));
	    	AdmissionInquiry admissionInquiry = (AdmissionInquiry) adminManager.get(AdmissionInquiry.class, getAdmissionInquiry().getId());
	    	if(!ObjectFunctions.isNullOrEmpty(admissionInquiry))
	    	{
	    		setAdmissionInquiry(admissionInquiry);
	    	}
	        
	    } catch (Exception ex) {
	        ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	        JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    }
	    return SUCCESS;
	    }
	 
	 
	 @Actions( {
			@Action(value = "ajaxAdmissionsSummaryDetails", results = { @Result(location = "../admin/reports/ajaxAdmissionsSummaryReports.jsp", name = "success")}),
			@Action(value = "ajaxDoAdmissionsOverallSummaryDetails", results = { @Result(location = "../admin/reports/ajaxAdmissionsOverallSummaryDetails.jsp", name = "success")}) 		
	 }) 
		public String ajaxAdmissionsSummaryDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAdmissionsSummaryDetails' method");
			}
			try {
				setAcademicYearList(getAdmissionAcademicYears());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions( { @Action(value = "ajaxAdmissionsSummaryReports", results = { @Result(location = "jasper/admission/viewAdmissionsSummaryrReports.jasper", type = "jasper", name = "success", params = {"dataSource", "objectList", "format", "PDF" }) })})
public String ajaxAdmissionsSummaryReports() throws URTUniversalException {
	if (log.isDebugEnabled()) {
	log.debug("Entering 'ajaxAdmissionsSummaryReports' method");
	}
		try {
			
			setCustomer(getCustomerByCustId());
			if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
				setCustomerName(getCustomer().getOrganization().toUpperCase());
				setAnyId(getCustomer().getOrganizationFullAddress());
			}
		
			Date newDate = new Date();
			SimpleDateFormat newDateFormat = new SimpleDateFormat("dd-MMM-yyyy");
			String classAndSection=null;
			String currentdate = newDateFormat.format(newDate);
			setTodayDate("View Admitted Enquiries details Report "+ currentdate);
			
			AcademicYear academicYear= (AcademicYear)adminManager.get(AcademicYear.class, "id="+getTempId2());
			if(!ObjectFunctions.isNullOrEmpty(academicYear))
				setAcdmcYearRange("Report of Not admitted Students - "+academicYear.getAcademicYear());
			
			List<AdmissionSettings> admissionInquiryList=adminManager.getAll(AdmissionInquiry.class, "academicYearId="+getTempId2());
			if(!ObjectFunctions.isNullOrEmpty(admissionInquiryList))
				setTempString(String.valueOf(admissionInquiryList.size()));
			else
				setTempString("0");
			
			List<AdmissionSettings> admissionInquiryStudentAddmittedList=adminManager.getAll(AdmissionInquiry.class, "academicYearId="+getTempId2() +" and studentAddmitted='Y'");
			if(!ObjectFunctions.isNullOrEmpty(admissionInquiryStudentAddmittedList))
				setTempString1(String.valueOf(admissionInquiryStudentAddmittedList.size()));
			else
				setTempString1("0");
			
			setTempString3(String.valueOf(admissionInquiryList.size() - admissionInquiryStudentAddmittedList.size()));
			
			 getObjectList().add(admissionInquiryList);
			 
			getResponse().setHeader("Content-Disposition","attachment; filename=Over_all_Admission_Summary_"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
		} 
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		return SUCCESS;
	 }
	 
	 @Actions( {
			@Action(value = "ajaxNotAdmittedStudentsDetails", results = { @Result(location = "../admin/reports/ajaxNotAdmittedStudentsDetailsReports.jsp", name = "success")}),
			@Action(value = "ajaxDoAdmissionDayWiseGenderWiseReport", results = { @Result(location = "../admin/reports/ajaxDoAdmissionDayWiseGenderWiseReport.jsp", name = "success")}) 
	 }) 
		public String ajaxNotAdmittedStudentsDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAdmissionsSummaryDetails' method");
			}
			try {
				setAcademicYearList(getAdmissionAcademicYears());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 
	 @Actions( { @Action(value = "ajaxNotAdmittedStudentsReports", results = { @Result(location = "jasper/admission/viewNotAdmittedStudentsReports.jasper", type = "jasper", name = "success", params = {"dataSource", "objectList", "format", "PDF" }), 
	 
	  @Result(location = "jasper/fee/errorMessageTemplet.jasper", type = "jasper", name = "errorMessage", params = {"dataSource", "alertSendType", "format", "PDF" })
	 })})
public String ajaxNotAdmittedStudentsReports() throws URTUniversalException {
	if (log.isDebugEnabled()) {
	log.debug("Entering 'ajaxAdmissionsSummaryReports' method");
	}
		try {
			
			setCustomer(getCustomerByCustId());
			if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
				setCustomerName(getCustomer().getOrganization().toUpperCase());
				setAnyId(getCustomer().getOrganizationFullAddress());
			}
			Date newDate = new Date();
			SimpleDateFormat newDateFormat = new SimpleDateFormat("dd-MMM-yyyy");
			String classAndSection=null;
			String currentdate = newDateFormat.format(newDate);
			setTodayDate("Report of Not admitted Students Report "+ currentdate);
			
			AcademicYear academicYear= (AcademicYear)adminManager.get(AcademicYear.class, "id="+getTempId2());
			if(!ObjectFunctions.isNullOrEmpty(academicYear))
				setAcdmcYearRange("Report Of Not Admitted Students - "+academicYear.getAcademicYear());
			
			List<AdmissionSettings> admissionInquiryList=adminManager.getAll(AdmissionInquiry.class, "academicYearId="+getTempId2() +" and studentAddmitted='N'");
			if(!ObjectFunctions.isNullOrEmpty(admissionInquiryList))
				 getObjectList().addAll(admissionInquiryList);
			else
			{
				setAlertSendType("Currently their is no list of not admitted students to be displayed.");
				getResponse().setHeader("Content-Disposition","attachment; filename=Not_Admitted_Students_"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
				return "errorMessage";
			}
			getResponse().setHeader("Content-Disposition","attachment; filename=Not_Admitted_Students_"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
		} 
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		return SUCCESS;
	 }
	 
	 @Action(value = "ajaxDoAllTermsFeePaidUnpaidDetails", results = { @Result(location = "../schoolfee/reports/ajaxDoAllTermsFeePaidUnpaidDetails.jsp", name = "success") })
		public String ajaxDoAllTermsFeePaidUnpaidDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAllTermsFeePaidUnpaidDetails' method");
			}
			try {
				prepareFeeDuesList();
				prepareSchoolFeeSettingList();
				setSchoolTermsList(adminManager.getAll(SchoolTerms.class,"custId=" + getUserCustId()+ " and academicYearId="+ getUserAcademicYearId() +" and feeSettingId in "+getAnyTitle()+" order by feeSettingId"));
				checkStudyClassHavingStudentsOrNot();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	@Action(value = "ajaxGenerateAllTermsFeePaidUnpaidDetails", results = {})
	public String ajaxGenerateAllTermsFeePaidUnpaidDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateAllTermsFeePaidUnpaidDetails' method");
		}
		AcademicYear academicYear = null;
		List<ViewStudentFeePaymentDetails> feeCollectionList = null;
		long schoolTermId = 0;
		List<SchoolTerms> termsList = null;
		Date newDate = new Date();
		StringBuffer query = null;
		StringBuffer queryString = null;
		SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
		String toDayDate = lastUpdatedStr.format(newDate);
		HashMap<Long, List<SchoolTerms>> schoolTermsMap = new HashMap<Long, List<SchoolTerms>>();
		HashMap<Long, SchoolFeeSetting> schoolFeeSettingMap = new HashMap<Long, SchoolFeeSetting>();
		try {
			/* @Ganesh : getWishTitle() we are using for to show student inactive student need to show are not. If we get Y we will show active and inactive student if we get N we will show only active students */
			String fileName = "All Terms Fee Paid & Unpaid Details";
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));

			WritableCellFormat cellFormat8 = getCellFormat8();
			// For School name
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormatGray8 = getCellFormatGray10();
			WritableCellFormat cellFormatLightBlue10 = getCellFormatLightBlug10();
			WritableCellFormat cellFormatSkyBlue10 = getCellFormatSkyBlue10();

			WritableCellFormat cellFormat = null;
			WritableCellFormat cellFormatLeft = null;
			WritableCellFormat cellFormatBoldRight = null;

			NumberFormat fivedps = new NumberFormat("#.#####");
			WritableCellFormat cellFormatRight = new WritableCellFormat(fivedps);
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
			font1.setColour(Colour.BLACK);
			font2.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1, Colour.WHITE,false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL, BorderLineStyle.THIN);
			cellFormatLeft = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.LEFT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);
			cellFormatRight = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);
			cellFormatBoldRight = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);

			Customer customer = getCustomerByCustId();
			List<SchoolCategory> schoolCategoryList = studentManager.getAllByCustId("SchoolCategory", getUserCustId(), 0);
			prepareSchoolFeeSettingList();
			List<SchoolFeeSetting> feeSettingList = getObjectList();

			if (!ObjectFunctions.isNullOrEmpty(feeSettingList)) {
				for (SchoolFeeSetting feeSetting : feeSettingList) {
					List<SchoolTerms> schoolTermsList = adminManager.getAll(SchoolTerms.class,"custId=" + getUserCustId()+ " and academicYearId="+ getUserAcademicYearId()+ " and feeSettingId= "+ feeSetting.getId() + " order by id");
					if (!ObjectFunctions.isNullOrEmpty(schoolTermsList)) {
						schoolFeeSettingMap.put(feeSetting.getId(), feeSetting);
						schoolTermsMap.put(feeSetting.getId(), schoolTermsList);
					}
					schoolTermsList = null;
					feeSetting=null;
				}
				feeSettingList=null;
			}
			academicYear = (AcademicYear) adminManager.get(AcademicYear.class,getUserAcademicYearId());

			List<StudyClass> studyClassesList = adminManager.getAll(StudyClass.class, "id in (" + StringUtil.convertListToString(getChkBoxSelectedIds()) + ")");
			if (!ObjectFunctions.isNullOrEmpty(studyClassesList)) {
				for (StudyClass studyClass : studyClassesList) {
					excelView.setWorkSheetName(studyClass.getClassAndSection());
					excelView.createWorkSheet(0);
					excelView.setDefaultFormat(excelView.getArial10format());
					excelView.getWs().setColumnView(0, 15);
					excelView.getWs().setColumnView(1, 35);

					if (!ObjectFunctions.isNullOrEmpty(customer)) {

						int rowCount = 4;
						int columnCount = 2;
						int colNo = 0;
						int i = 1;
						for (Entry<Long, SchoolFeeSetting> entry : schoolFeeSettingMap.entrySet()) {
							SchoolFeeSetting schoolFeeSetting = entry.getValue();
							columnCount = schoolTermsMap.get(entry.getKey()).size() + columnCount;
							columnCount = columnCount + 5;
							excelView.getWs().mergeCells(colNo, rowCount,columnCount - 1, rowCount);

							if (i % 2 == 0)
								excelView.getWs().addCell(new Label(colNo, rowCount,schoolFeeSetting.getSettingName(),cellFormatLightBlue10));
							else
								excelView.getWs().addCell(new Label(colNo, rowCount,schoolFeeSetting.getSettingName(),cellFormatSkyBlue10));

							colNo = columnCount;
							i++;
							entry=null;
							schoolFeeSetting=null;
						}
						rowCount++;
						excelView.getWs().addCell(new Label(0, rowCount, "Admission No",cellFormatGray8));
						excelView.getWs().addCell(new Label(1, rowCount, "Student Name",cellFormatGray8));

						colNo = 2;
						for (Entry<Long, List<SchoolTerms>> entry : schoolTermsMap.entrySet()) {
							List<SchoolTerms> schoolTermsList = entry.getValue();
							for (SchoolTerms schoolTerms : schoolTermsList) {
								excelView.getWs().setColumnView(colNo, 20);
								excelView.getWs().addCell(new Label(colNo, rowCount,schoolTerms.getTermName(),cellFormatGray8));
								colNo++;
								schoolTerms=null;
							}
							schoolTermsList=null;
							excelView.getWs().setColumnView(colNo, 20);
							excelView.getWs().addCell(new Label(colNo++, rowCount,"Total Amount", cellFormatGray8));
							excelView.getWs().setColumnView(colNo, 20);
							excelView.getWs().addCell(new Label(colNo++, rowCount, "Paid Amount",cellFormatGray8));
							excelView.getWs().setColumnView(colNo, 20);
							excelView.getWs().addCell(new Label(colNo++, rowCount,"Discount Amount",cellFormatGray8));
							excelView.getWs().setColumnView(colNo, 20);
							excelView.getWs().addCell(new Label(colNo++, rowCount,"Concession Amount",cellFormatGray8));
							excelView.getWs().setColumnView(colNo, 20);
							excelView.getWs().addCell(new Label(colNo++, rowCount, "Due Amount",cellFormatGray8));
							excelView.getWs().setColumnView(colNo, 20);
							entry=null;
						}
						if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
							excelView.getWs().mergeCells(0, 0, colNo - 1, 1);
							excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
						}
						if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
							excelView.getWs().mergeCells(0, 2, colNo - 1, 2);
							excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
						}

						excelView.getWs().addCell(new Label(0, 3,studyClass.getClassAndSection(),cellFormat8));
						excelView.getWs().mergeCells(0, 3, colNo - 1, 3);

						rowCount++;

						double overallTotalPaidAmount = 0;
						double overallTotalDiscountAmount = 0;
						double overallTotalConcessionAmount = 0;
						double overallTotalDueAmount = 0;
						double overallTermAmount = 0;
						rowCount++;

						if (!ObjectFunctions.isNullOrEmpty(schoolCategoryList)) {
							for (SchoolCategory schoolCategory : schoolCategoryList) {
								excelView.getWs().mergeCells(0, rowCount,colNo - 1, rowCount);
								excelView.getWs().addCell(new Label(0, rowCount, schoolCategory.getCategoryName(),cellFormat10));

								rowCount++;
								List<ViewStudentClassDetails> viewStudentClassDetailsList = adminManager.getAll(ViewStudentClassDetails.class," custId="+ getUserCustId()+ " and classSectionId="+ studyClass.getId()+ " and academicYearId="+ getUserAcademicYearId()+ " and categoryId="+ schoolCategory.getId()+ " and description is null order by fullName");
								if (!ObjectFunctions.isNullOrEmpty(viewStudentClassDetailsList)) {
									for (ViewStudentClassDetails viewStudentClassDetails : viewStudentClassDetailsList) {
										excelView.getWs().addCell(new Label(0,rowCount,viewStudentClassDetails.getAdmissionNumber(),cellFormatLeft));
										excelView.getWs().addCell(new Label(1, rowCount,viewStudentClassDetails.getFullName(),cellFormatLeft));
										int tcol = 2;
										for (Entry<Long, List<SchoolTerms>> entry : schoolTermsMap.entrySet()) {
											double termTotalPaidAmount = 0;
											double termTotalDiscountAmount = 0;
											double termTotalConcessionAmount = 0;
											double termTotalDueAmount = 0;
											double totalTermAmount = 0;
											double termTotalAmount = 0;
											double unPaidAmount = 0;
											ViewStudentFeePaymentDetails studentFeePaymentDetails = null;
											List<SchoolTerms> schoolTermsList = entry.getValue();
											for (SchoolTerms schoolTerms : schoolTermsList) {
												String termsIds = "("+ schoolTerms.getId()+ ")";
												String selectedClassSectionIds = "("+ studyClass.getId()+ ")";
												if (Constants.TRANSPORT_FEES.equalsIgnoreCase(schoolTerms.getFeeSetting().getSettingName()))
													studentFeePaymentDetails = adminManager.getStudentWiseFeePaidAndUnpaidDetails("vw_studentTransportFeePaymentDetails",getUserCustId(),academicYear.getId(),schoolTerms.getId(),viewStudentClassDetails.getClassSectionId(),viewStudentClassDetails.getStudId());
												else
													studentFeePaymentDetails = adminManager.getStudentWiseFeePaidAndUnpaidDetails("vw_studentFeePaymentDetails",getUserCustId(),academicYear.getId(),schoolTerms.getId(),viewStudentClassDetails.getClassSectionId(),viewStudentClassDetails.getStudId());
												if (!ObjectFunctions.isNullOrEmpty(studentFeePaymentDetails)) {
													if (studentFeePaymentDetails.getFeeAmount() > 0) {
														excelView.getWs().addCell(new Label(tcol,rowCount,String.valueOf(studentFeePaymentDetails.getFeeAmount()),cellFormatLeft));
														totalTermAmount = totalTermAmount+ studentFeePaymentDetails.getFeeAmount();
													} else {
														excelView.getWs().addCell(new Label(tcol,rowCount,"0",cellFormatLeft));
														totalTermAmount = totalTermAmount + 0.0;
													}
													tcol++;
													termTotalPaidAmount += studentFeePaymentDetails.getPaymentAmount();
													termTotalDiscountAmount += studentFeePaymentDetails.getDiscountAmount();
													termTotalConcessionAmount += studentFeePaymentDetails.getConcessionAmount();
													termTotalDueAmount += studentFeePaymentDetails.getPaidAmount();
													studentFeePaymentDetails=null;
												} else {
													excelView.getWs().addCell(new Label(tcol,rowCount,"0",cellFormatLeft));
													tcol++;
												}
												schoolTerms=null;
											}
											excelView.getWs().addCell(new jxl.write.Number(tcol++, rowCount,totalTermAmount,cellFormatRight));
											excelView.getWs().addCell(new jxl.write.Number(tcol++,rowCount,termTotalPaidAmount,cellFormatRight));
											excelView.getWs().addCell(new jxl.write.Number(tcol++,rowCount,termTotalDiscountAmount,cellFormatRight));
											excelView.getWs().addCell(new jxl.write.Number(tcol++,rowCount,termTotalConcessionAmount,cellFormatRight));
											excelView.getWs().addCell(new jxl.write.Number(tcol++, rowCount,termTotalDueAmount,cellFormatRight));
											
											overallTotalPaidAmount = overallTotalPaidAmount+ termTotalPaidAmount;
											overallTotalDiscountAmount = overallTotalDiscountAmount+ termTotalDiscountAmount;
											overallTotalConcessionAmount = overallTotalConcessionAmount+ termTotalConcessionAmount;
											overallTotalDueAmount = overallTotalDueAmount+ termTotalDueAmount;
											overallTermAmount = overallTermAmount+ totalTermAmount;

											totalTermAmount = 0;
											termTotalPaidAmount = 0;
											termTotalDueAmount = 0;
											termTotalConcessionAmount = 0;
											termTotalDiscountAmount = 0;
									        schoolTermsList = null;
											entry=null;
										}
										rowCount++;
										viewStudentClassDetails=null;
									}
									viewStudentClassDetailsList=null;
								} else {
									excelView.getWs().addCell(new Label(0,rowCount,"No students found for this category",cellFormatLeft));
									rowCount++;
								}
								schoolCategory=null;
							}

							rowCount = rowCount + 1;
							Cell cell = excelView.getWs().findCell("Total Amount");
							int column = cell.getColumn() - 1;

							excelView.getWs().mergeCells(0, rowCount, column,rowCount);
							excelView.getWs().addCell(new Label(0, rowCount,"Overall Total Term Amount",cellFormatBoldRight));
							excelView.getWs().addCell(new jxl.write.Number(column + 1,rowCount,overallTermAmount,cellFormatRight));

							rowCount++;
							excelView.getWs().mergeCells(0, rowCount, column,rowCount);
							excelView.getWs().addCell(new Label(0, rowCount,"Overall Paid Amount",cellFormatBoldRight));
							excelView.getWs().addCell(new jxl.write.Number(column + 1, rowCount,overallTotalPaidAmount,cellFormatRight));

							rowCount++;
							excelView.getWs().mergeCells(0, rowCount, column,rowCount);
							excelView.getWs().addCell(new Label(0, rowCount,"Overall Discount Amount",cellFormatBoldRight));
							excelView.getWs().addCell(new jxl.write.Number(column + 1, rowCount,overallTotalDiscountAmount,cellFormatRight));

							rowCount++;
							excelView.getWs().mergeCells(0, rowCount, column,rowCount);
							excelView.getWs().addCell(new Label(0, rowCount,"Overall Due Amount",cellFormatBoldRight));
							excelView.getWs().addCell(new jxl.write.Number(column + 1, rowCount,overallTotalDueAmount,cellFormatRight));

							rowCount++;
							excelView.getWs().mergeCells(0, rowCount, column,rowCount);
							excelView.getWs().addCell(new Label(0, rowCount,"Overall Concession Amount",cellFormatBoldRight));
							excelView.getWs().addCell(new jxl.write.Number(column + 1, rowCount,overallTotalConcessionAmount,cellFormatRight));
							
						}
						
					}
					studyClass=null;
				}
				customer=null;
				schoolCategoryList=null;
				excelView.getWb().write();
				excelView.getWb().close();
				studyClassesList=null;
			}

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}finally{
			academicYear = null;
			feeCollectionList = null;
			schoolTermId = 0;
			termsList = null;
			newDate = null;
			query = null;
			queryString = null;
			lastUpdatedStr = null;
			toDayDate = null;
			schoolTermsMap = null;
			schoolFeeSettingMap = null;
		}
		return null;
	}
	 
	 
	 public WritableCellFormat getCellFormatLightBlug10(){
		WritableFont boldfont10 = null;
		WritableCellFormat cellFormat10 = null;
		try {
			
			boldfont10 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			cellFormat10 = new WritableCellFormat(boldfont10);
			boldfont10.setColour(Colour.WHITE);
			cellFormat10 = ExcelView.getUserFormattedCell(boldfont10, Colour.LIGHT_BLUE, false,false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.NONE, BorderLineStyle.NONE);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return cellFormat10;
	}
	 public WritableCellFormat getCellFormatSkyBlue10(){
			WritableFont boldfont10 = null;
			WritableCellFormat cellFormat10 = null;
			try {
				
				boldfont10 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
				cellFormat10 = new WritableCellFormat(boldfont10);
				boldfont10.setColour(Colour.WHITE);
				cellFormat10 = ExcelView.getUserFormattedCell(boldfont10, Colour.SKY_BLUE, false,false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.NONE, BorderLineStyle.NONE);
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return cellFormat10;
		}

	 @Action(value = "ajaxViewPreviosYearDefaultesDefaulters", results = {})
	public String ajaxViewPreviosYearDefaultesDefaulters() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewPreviosYearDefaultesDefaulters' method");
		}
		try {
			log.debug("academic year Id :" + getAcademicYearId());
			AcademicYear academicYear = null;
			List<ViewStudentFeePaymentDetails> feeCollectionList = null;
			Date newDate = new Date();
			StringBuffer query = null;
			StringBuffer queryString = null;
			SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
			String toDayDate = lastUpdatedStr.format(newDate);
			log.debug("toDayDate  " + toDayDate);
			//feeCollectionList = adminManager.getFeeDefaultersList(getUserCustId(), getAcademicYearId(), getSelectedId(), "",toDayDate);
			feeCollectionList = accountManager.getPreviousYearFeeDefaultersList(getUserCustId(), getAcademicYearId(),toDayDate);
			academicYear = (AcademicYear) adminManager.get(AcademicYear.class,getAcademicYearId());
			String fileName = academicYear.getAcademicYear()+"_Student_Pending_Fee_Defaulters";
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));

			WritableCellFormat cellFormat8 = getCellFormat8();
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormatGray8 = getCellFormatGray10();
			WritableCellFormat cellFormat = null;
			WritableCellFormat cellFormatLeft = null;
			WritableCellFormat cellFormatBoldRight = null;
			NumberFormat fivedps = new NumberFormat("#.#####");
			WritableCellFormat cellFormatRight = new WritableCellFormat(fivedps);
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
			font1.setColour(Colour.BLACK);
			font2.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1, Colour.WHITE,false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL, BorderLineStyle.THIN);
			cellFormatLeft = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.LEFT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);
			cellFormatRight = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);

			cellFormatBoldRight = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);

			Customer customer = getCustomerByCustId();
			
			if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
				excelView.setWorkSheetName(fileName);
				excelView.createWorkSheet(0);
				excelView.setDefaultFormat(excelView.getArial10format());
				excelView.getWs().setColumnView(0, 15);
				excelView.getWs().setColumnView(1, 35);
				excelView.getWs().setColumnView(2, 15);
				excelView.getWs().setColumnView(3, 15);
				excelView.getWs().setColumnView(4, 15);
				excelView.getWs().setColumnView(5, 15);
				excelView.getWs().setColumnView(6, 15);
				excelView.getWs().setColumnView(7, 17);
				excelView.getWs().setColumnView(8, 15);
				excelView.getWs().setColumnView(9, 15);

				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
						excelView.getWs().mergeCells(0, 0, 8, 1);
						excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
					}
					if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
						excelView.getWs().mergeCells(0, 2, 8, 2);
						excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
					}
					int rowCount = 3;
					excelView.getWs().addCell(new Label(0, rowCount, "Admission No",cellFormatGray8));
					excelView.getWs().addCell(new Label(1, rowCount, "Student Name",cellFormatGray8));
					excelView.getWs().addCell(new Label(2, rowCount, "Class & Section",cellFormatGray8));
					excelView.getWs().addCell(new Label(3, rowCount, "Parent Phone#",cellFormatGray8));
					//excelView.getWs().addCell(new Label(4, rowCount, "Due Date",cellFormatGray8));
					excelView.getWs().addCell(new Label(4, rowCount, "Total Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(5, rowCount, "Paid Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(6, rowCount, "Discount Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(7, rowCount, "Concession Amount",cellFormatGray8));
					excelView.getWs().addCell(new Label(8, rowCount, "Due Amount",cellFormatGray8));
					rowCount++;
					double totalPaidAmount = 0;
					double totalDueAmount = 0;
					double totalDiscountAmount = 0;
					double totalConcessionAmount = 0;
					double termTotalPaidAmount = 0;
					double termTotalDiscountAmount = 0;
					double termTotalConcessionAmount = 0;
					double termTotalDueAmount = 0;
					double totalTermAmount = 0;
					double totalPaid = 0;
					double defaultPaid = 0;
					double totalDiscount = 0;
					double totalConcession = 0;
					double termTotalAmount = 0;
					double unPaidAmount = 0;
					if (!ObjectFunctions.isNullOrEmpty(feeCollectionList)) {
						for (ViewStudentFeePaymentDetails studentFeePaymentDetails : feeCollectionList) {
							Object feeObject[] = adminManager.get("select sum(feeAmount),schoolTermId from vw_studentClassFees where studentId="+ studentFeePaymentDetails.getStudentId()+ " and  custId="+ getUserCustId()+ " and academicYearId="+ getAcademicYearId());
							if (!ObjectFunctions.isNullOrEmpty(feeObject)) {
								if (!ObjectFunctions.isNullOrEmpty(feeObject[0])) {
									if (Constants.TRANSPORT_FEES.equalsIgnoreCase(studentFeePaymentDetails.getSettingName())) {
										if (getCurrentAcademicYear().isTransportFeeByBoardingPoint()) {
											studentFeePaymentDetails.getRouteBoardingPointId();
										}
									}
									defaultPaid = 0;
									//log.debug("admission number :"+ studentFeePaymentDetails.getAdmissionNumber());
									query = new StringBuffer("select IFNULL(sum(paymentAmount),0) as paymentAmount,IFNULL(sum(discountAmount),0) as discountAmount,IFNULL(sum(concessionAmount),0) as paymentConcessionAmount from vw_studentFeePaymentDetails where admissionNumber='").append(studentFeePaymentDetails.getAdmissionNumber() + "'");
									query.append(" and studentId=").append(studentFeePaymentDetails.getStudentId());
									query.append(" and custId=" + getUserCustId()+ "").append(" and academicYearId="+ getAcademicYearId() + "").append(" and deleteStatus='N'");

									query.append(" and paymentStatus in ('N','P')");

									Object viewStudentPaymentDetails[] = adminManager.get(query.toString());
									if (!ObjectFunctions.isNullOrEmpty(viewStudentPaymentDetails[0]))
										totalPaid = Double.valueOf(viewStudentPaymentDetails[0].toString());
									else
										totalPaid = 0;
									if (!ObjectFunctions.isNullOrEmpty(viewStudentPaymentDetails[1]))
										totalDiscount = Double.valueOf(viewStudentPaymentDetails[1].toString());
									else
										totalDiscount = 0;

									if (!ObjectFunctions.isNullOrEmpty(viewStudentPaymentDetails[2]))
										totalConcession = Double.valueOf(viewStudentPaymentDetails[2].toString());
									else
										totalConcession = 0;
									query = null;
									
									if (defaultPaid == 0 || Double.valueOf(feeObject[0].toString()) <= defaultPaid) {
										termTotalAmount = Double.valueOf(feeObject[0].toString());
									} else
										termTotalAmount = Double.valueOf(feeObject[0].toString()) - (defaultPaid);

									excelView.getWs().addCell(new Label(0,rowCount,studentFeePaymentDetails.getAdmissionNumber(),cellFormatLeft));
									excelView.getWs().addCell(new Label(1, rowCount,studentFeePaymentDetails.getFullName(),cellFormatLeft));
									excelView.getWs().addCell(new Label(2,rowCount,studentFeePaymentDetails.getClassAndSection(),cellFormatLeft));
									excelView.getWs().addCell(new Label(3, rowCount,studentFeePaymentDetails.getMobileNumber(),cellFormatLeft));
									//excelView.getWs().addCell(new Label(4, rowCount,studentFeePaymentDetails.getDueDateStr(),cellFormatLeft));
									excelView.getWs().addCell(new jxl.write.Number(4, rowCount,termTotalAmount,cellFormatRight));
									excelView.getWs().addCell(new jxl.write.Number(5,rowCount,totalPaid,cellFormatRight));
									excelView.getWs().addCell(new jxl.write.Number(6, rowCount,totalDiscount,cellFormatRight));
									excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalConcession,cellFormatRight));
									unPaidAmount = termTotalAmount- (totalPaid + totalDiscount + totalConcession);

									excelView.getWs().addCell(new jxl.write.Number(8, rowCount,unPaidAmount,cellFormatRight));
									rowCount++;
									totalPaidAmount += totalPaid;
									totalDueAmount += unPaidAmount;
									totalDiscountAmount += totalDiscount;
									totalConcessionAmount += totalConcession;

									termTotalPaidAmount += totalPaid;
									termTotalDiscountAmount += totalDiscount;
									termTotalConcessionAmount += totalConcession;
									termTotalDueAmount += unPaidAmount;
									totalTermAmount += termTotalAmount;
								}
							}
						}
						rowCount++;
						excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
						excelView.getWs().addCell(new Label(0, rowCount, "Total Amount",cellFormatBoldRight));
						excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalTermAmount, cellFormatRight));
						rowCount++;
						excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
						excelView.getWs().addCell(new Label(0, rowCount, "Total Paid Amount",cellFormatBoldRight));
						excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalPaidAmount, cellFormatRight));
						rowCount++;
						excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
						excelView.getWs().addCell(new Label(0, rowCount, "Total Discount Amount",cellFormatBoldRight));
						excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalDiscountAmount, cellFormatRight));

						rowCount++;
						excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
						excelView.getWs().addCell(new Label(0, rowCount,"Total Concession Amount",cellFormatBoldRight));
						excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalConcessionAmount,cellFormatRight));

						rowCount++;
						excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
						excelView.getWs().addCell(new Label(0, rowCount, "Total Due Amount",cellFormatBoldRight));
						excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalDueAmount, cellFormatRight));
						showSchoolUrlInExcelSheetFooter(rowCount, excelView, 8);
					}
				}
				excelView.getWb().write();
				excelView.getWb().close();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	 
	 
	 @Actions( {
			@Action(value = "ajaxDoCastDetails", results = { @Result(location = "../admin/reports/ajaxSelectCasteReports.jsp", name = "success") })
			})
	public String ajaxDoCastDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCastDetails' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			if (!StringFunctions.isNullOrEmpty(getTempString())&& getPlTitle().equalsIgnoreCase("ReligionDetails")) {
				setAnyId(getAnyId());
				setTempString(getTempString());
				setTempList(adminManager.getAllCommonTypesByCustIdandType(getUserCustId(), "RELIGION"));
			}
			checkClassHavingStudentsOrNot(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
			setCastSettingList(adminManager.getAll(CastSettings.class," custId=" + getUserCustId()));
			setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(), getUserAcademicYearId(),null));
			setAnyTitle("ClassWiseCommunityDetails");
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	 @Actions( { @Action(value = "ajaxPrintStudentSchoolWideCasteDetails", results = {}) })
		public void ajaxPrintStudentSchoolWideCasteDetails()throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxPrintStudentSchoolWideCasteDetails' method");
			}
			try {
				if (getUserAcademicYearId() != 0) {
					if(StringFunctions.isNotNullOrEmpty(getTempString()) && StringFunctions.isNotNullOrEmpty(getAnyId())){
						String fileName = "StudentSchoolWideComunityDetails_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
						ExcelView excelView = new ExcelView();
						WritableCellFormat cellFormat =null;
						getResponse().setContentType(excelView.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
						excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
						WritableFont font = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
						setClassList(adminManager.getAll(ClassName.class," id in"+getAnyId()));
						
						WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
						font1.setColour(Colour.WHITE);
						cellFormat=ExcelView.getUserFormattedCell(font1, Colour.GREEN, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
						cellFormat=ExcelView.getUserFormattedCell(font, Colour.AQUA, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
				    	
				    		Collections.sort(getClassList());
				    		for(ClassName className:getClassList())
				    		{
				    			excelView.setWorkSheetName(className.getClassName()+" class");
				    			excelView.createWorkSheet(0);
				    			excelView.setDefaultFormat(excelView.getArial10format());
				    			
				    			List<ViewStudentPersonAccountDetails> subCastList =  adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId()+" and classNameClassId="+className.getId()+" and subCastName is not null  and subCastName <>'' group by subCastId");
					    		if(!ObjectFunctions.isNullOrEmpty(subCastList))
					    		{
					    			int rowCount=8;
					    			int studentCount=1;
					    			
					    			schoolAddresDetailsOnlyForExcel(excelView,18);
							    	excelView.getWs().removeRow(0);
					    			
							    	excelView.getWs().setColumnView(0,6);
									excelView.getWs().setColumnView(1,13);
									excelView.getWs().setColumnView(2,6);
									excelView.getWs().setColumnView(3,25);
									excelView.getWs().setColumnView(4,15);
									excelView.getWs().setColumnView(5,8);
									excelView.getWs().setColumnView(6,25);
									excelView.getWs().setColumnView(7,20);
									excelView.getWs().setColumnView(8,20);
									excelView.getWs().setColumnView(9,20);
									excelView.getWs().setColumnView(10,10);
									excelView.getWs().setColumnView(11,10);
									excelView.getWs().setColumnView(12,40);
									excelView.getWs().setColumnView(13,15);
									excelView.getWs().setColumnView(14,15);
									excelView.getWs().setColumnView(15,14);
									excelView.getWs().setColumnView(16,15);
									excelView.getWs().setColumnView(17,10);
									excelView.getWs().mergeCells(0, 6, 18, 6);
									excelView.getWs().addCell(new Label(0,6, className.getClassName().toUpperCase()+" - CLASS WISE CASTE DETAILS", cellFormat));
					    		 	excelView.getWs().addCell(new Label(0,7, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(1,7, "#Admission", excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(2,7, "#Roll", excelView.getUsermore10BoldformatGreenBgClr()));
									excelView.getWs().addCell(new Label(3,7, "Student Name", excelView.getUsermore10BoldformatGreenBgClr()));
									excelView.getWs().addCell(new Label(4,7, "Class & Section", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(5,7, "Gender", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(6,7, "Father Name", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(7,7, "Father Occupation", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(8,7, "Mother Name", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(9,7, "Mother Occupation", excelView.getUsermore10BoldformatGreenBgClr()));		    		    	
							    	excelView.getWs().addCell(new Label(10,7, "D.O.B", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(11,7, "D.O.J", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(12,7, "Address", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(13,7, "State", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(14,7, "City", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(15,7, "Phone Number", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(16,7, "Caste", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(17,7, "Income", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(18,7, "Religion", excelView.getUsermore10BoldformatGreenBgClr()));
					    			if(!ObjectFunctions.isNullOrEmpty(subCastList)){
					    				for(ViewStudentPersonAccountDetails subCastObj : subCastList){
					    					excelView.getWs().mergeCells(0, rowCount, 18, rowCount);
					    					cellFormat=ExcelView.getUserFormattedCell(font, Colour.AQUA, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
					    					excelView.getWs().addCell(new Label(0,rowCount, subCastObj.getSubCastName()+" Caste", cellFormat));
					    					
					    					setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, " custId="+getUserCustId()+" and classNameClassId="+className.getId()+" and subCastId="+subCastObj.getSubCastId()+" and academicYearId="+getUserAcademicYearId()+" and gender in"+getTempString()+" and description is null order by fullName"));
					    					
					    					rowCount+=1;
					    					if(!ObjectFunctions.isNullOrEmpty(getViewStudentPersonAccountDetailsList())){
					    						for(ViewStudentPersonAccountDetails personAccountDetails:getViewStudentPersonAccountDetailsList()){
					    							excelView.getWs().addCell(new Label(0,rowCount, String.valueOf(studentCount), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(1,rowCount, personAccountDetails.getAdmissionNumber(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(2,rowCount, String.valueOf(personAccountDetails.getRollNumber()), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(3,rowCount, personAccountDetails.getPersonFullName(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(4,rowCount, personAccountDetails.getClassAndSection(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(5,rowCount, personAccountDetails.getGender(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(6,rowCount, personAccountDetails.getFatherName(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(7,rowCount, personAccountDetails.getFatherOccupation(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(8,rowCount, personAccountDetails.getMotherName(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(9,rowCount, personAccountDetails.getMotherOccupation(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(10,rowCount, personAccountDetails.getDateOfBirthStr(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(11,rowCount, personAccountDetails.getStudentDateOfJoing(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(12,rowCount, personAccountDetails.getStreetName(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(13,rowCount, personAccountDetails.getStateName(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(14,rowCount, personAccountDetails.getCity(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(15,rowCount, personAccountDetails.getMobileNumber(), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(16,rowCount, String.valueOf(personAccountDetails.getSubCastName()), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(17,rowCount, String.valueOf(personAccountDetails.getAnnualIncome()), excelView.getDefaultFormat()));
					    							excelView.getWs().addCell(new Label(18,rowCount, personAccountDetails.getReligion(), excelView.getDefaultFormat()));
					    							studentCount+=1;
					    							rowCount+=1;
					    						}
					    					}else{
					    						excelView.getWs().mergeCells(0, rowCount, 18, rowCount);
					    						excelView.getWs().addCell(new Label(0,rowCount, "No students found for this Caste.", excelView.getDefaultFormat()));
					    					}
					    					rowCount+=1;
					    				}
					    			}
					    			rowCount+=1;
					    			showSchoolUrlInExcelSheetFooter(rowCount-2,excelView,18);
					    		}
					    		else{
		    						excelView.getWs().mergeCells(0, 1, 18, 1);
		    						excelView.getWs().addCell(new Label(0,1, "No students found for this Caste.", excelView.getDefaultFormat()));
		    					}
					    	}
				    	excelView.getWb().write();
						excelView.getWb().close();
					}else{
						super.addActionError("Please select class,community and gender.");
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		}
	 
	 @Actions( {
			@Action(value = "ajaxDoGetAdmissionDayWiseGenderWiseReport", results = {@Result(location = "../admin/reports/ajaxDoGetAdmissionDayWiseGenderWiseReport.jsp", name = "success") }) })
		public String ajaxDoGetAdmissionDayWiseGenderWiseReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoGetAdmissionDayWiseGenderWiseReport' method");
			}
		try {
			
			loadAcademicYearStartDateAndDates(getAcademicYearId());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxAdmissionDayWiseGenderWiseReport", results = {}) })
		public String ajaxAdmissionDayWiseGenderWiseReport() {
			try {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'printStudentReligionWiseDetails' method");
				}
				
				String fileName = null;
				if (getUserAcademicYearId()!=0) {
					Customer customer = getCustomerByCustId();
					
					String fromDate = null;
					String endDate = null;
					
					fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
					endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
					
						fileName = "Admission Summary";
						PDFGenerator pDFGenerator = new PDFGenerator();
						getResponse().setContentType(pDFGenerator.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
						pDFGenerator.createDocumentJasper();
						pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
						PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
						pDFGenerator.getPdfWriter().setPageEvent(phfmj);
						pDFGenerator.getDocument().open();
						List<ClassName> classList = null;
						
						AdmissionSettings openedAdmissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, "custId=" + getUserCustId()+ " and status='"+Constants.YES_STRING+"'");
						if (!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings)) {
							
							classList = adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),openedAdmissionSettings.getAcademicYearId(),Constants.YES_STRING,null,false);
							if (ObjectFunctions.isNotNullOrEmpty(classList)) {
								Collections.sort(classList);
							}
						}
						
						
						if (!ObjectFunctions.isNullOrEmpty(getTempString())) 
						{
							String genderArr[] = getTempString().split(",");
							
							
							String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
							FontFactory.register(fontPath);
							// creating pDF page event to set header and Footer to document
							PdfPTable mainTable = new PdfPTable(1);
							mainTable.setWidthPercentage(100);
							mainTable.setSplitLate(false);
							mainTable.getDefaultCell().setBorder(Rectangle.BOX);
							
							//int width = religionsList.size()+getObjectList().size()+6;
							int width = 3;
							PdfPTable defaultersHeaderReport = new PdfPTable(width);
							defaultersHeaderReport.setWidthPercentage(100);
							
							PdfPTable headerReport = new PdfPTable(100);
							headerReport.setWidthPercentage(100);
							
							if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
								headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 100,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}
							if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
								headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 100,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}
							mainTable.addCell(headerReport);
							for(String admissionType : getChkBoxSelectedIds())
							{
								if("NA".equalsIgnoreCase(admissionType))
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("New Admission (Day wise/Periodic)",100, fontPath));
								else
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("Re-Admission (Day wise/Periodic)",100, fontPath));
								
									for(ClassName classNameObj: classList)
									{
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("Class Name:"+classNameObj.getClassName(),100, fontPath));
										for(String gender : genderArr)
										{
											if(!StringFunctions.isNullOrEmpty(gender))
											{
												StringBuilder builder = new StringBuilder();
												if("NA".equalsIgnoreCase(admissionType))
													builder.append("joinedThroughAdmissions='"+ Constants.YES_STRING+ "'");
												else
													builder.append("joinedThroughAdmissions='"+ Constants.NO_STRING+ "'");
												
												builder.append(" and custId=" + getUserCustId());
												builder.append(" and classId=" + classNameObj.getId());
												builder.append(" and academicYearId=" + getTempId2());
												
												if("M".equalsIgnoreCase(gender.trim()))
													builder.append(" and gender='M'");
												else
													builder.append(" and gender='F'");
												
												if("DR".equalsIgnoreCase(getTempString3()))
												{
													//builder.append(" and (createdDate>='"+ fromDate+ " 00:00:00' OR createdDate<='"+ endDate+ " 00:00:00')");
													builder.append(" and DATE(createdDate) Between DATE('"+ fromDate+ " 00:00:00') AND DATE('"+ endDate+ " 00:00:00')");
												}
												
												builder.append(" and studDiscontinueDesc is null order by classId,firstName");
													
												List<ViewStudentClassDetails> viewStudentClassDetailsList = adminManager.getAll(ViewStudentClassDetails.class,builder.toString());
												
												if("M".equalsIgnoreCase(gender.trim()))
												{
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("Male:" + viewStudentClassDetailsList.size(),100, fontPath));
												}
												if("F".equalsIgnoreCase(gender.trim()))
												{
													defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("Female:"+ viewStudentClassDetailsList.size(),100, fontPath));
												}
												generateAdmission(defaultersHeaderReport, viewStudentClassDetailsList, fontPath);
												
											}
										}
									}
							}
							
							mainTable.addCell(defaultersHeaderReport);
							pDFGenerator.getDocument().add(mainTable);
							pDFGenerator.getDocument().close();
							pDFGenerator = null;
							mainTable = null;
							defaultersHeaderReport = null;
							phfmj = null;
						}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
	 public void generateAdmission(PdfPTable defaultersHeaderReport,List<ViewStudentClassDetails> viewStudentClassDetailsList,String fontPath)
	 {
		 int size =3;
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Admission No ", "#000",fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Student Name ", "#000",fontPath));
			defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Contact Number ", "#000",fontPath));
			
			for(ViewStudentClassDetails viewStudentClassDetails : viewStudentClassDetailsList)
			{
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+viewStudentClassDetails.getAdmissionNumber(),"#000", fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(viewStudentClassDetails.getFullName(),"#000", fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(viewStudentClassDetails.getMobileNumber(),"#000", fontPath));
			}
	 }
	 
	 @Actions( { @Action(value = "ajaxAdmissionsOverallSummaryDetails", results = {}) })
		public String ajaxAdmissionsOverallSummaryDetails() {
			try {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxAdmissionsOverallSummaryDetails' method");
				}
				
				String fileName = null;
				if (getUserAcademicYearId()!=0) {
					Customer customer = getCustomerByCustId();
					
					String fromDate = null;
					String endDate = null;
					
					fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
					endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
					
						fileName = "Student Strrength";
						PDFGenerator pDFGenerator = new PDFGenerator();
						getResponse().setContentType(pDFGenerator.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
						pDFGenerator.createDocumentJasper();
						pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
						PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
						pDFGenerator.getPdfWriter().setPageEvent(phfmj);
						pDFGenerator.getDocument().open();
						List<ClassName> classList = null;
						
						AdmissionSettings openedAdmissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, "custId=" + getUserCustId()+ " and status='"+Constants.YES_STRING+"'");
						if (!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings)) {
							
							classList = adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),openedAdmissionSettings.getAcademicYearId(),Constants.YES_STRING,null,false);
							if (ObjectFunctions.isNotNullOrEmpty(classList)) {
								Collections.sort(classList);
								
								if (!ObjectFunctions.isNullOrEmpty(classList)) 
								{
									
									String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
									FontFactory.register(fontPath);
									// creating pDF page event to set header and Footer to document
									PdfPTable mainTable = new PdfPTable(1);
									mainTable.setWidthPercentage(100);
									mainTable.setSplitLate(false);
									mainTable.getDefaultCell().setBorder(Rectangle.BOX);
									
									//int width = religionsList.size()+getObjectList().size()+6;
									int width = 5;
									PdfPTable defaultersHeaderReport = new PdfPTable(width);
									defaultersHeaderReport.setWidthPercentage(100);
									
									PdfPTable headerReport = new PdfPTable(100);
									headerReport.setWidthPercentage(100);
									
									if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
										headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 100,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
									}
									if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
										headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 100,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
									}
									
									mainTable.addCell(headerReport);
										
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("STATEMENT OF TOTAL STUDENT STRENGTH FOR THE YEAR "+openedAdmissionSettings.getAcademicYear().getAcademicYear(),100, fontPath));
										
									//int size =5;
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Sl.No ", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Class ", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Fresh Admission", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Re-Admission", "#000",fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Total Sudents", "#000",fontPath));
									
									int i=1;
									int freshAdminTotalCount = 0;
									int reAdminTotalCount = 0;
									int totalStudentsCount = 0;
									for(ClassName classNameObj: classList)
									{
													
										List<ViewStudentClassDetails> viewFreshStudentClassDetailsList = adminManager.getAll(ViewStudentClassDetails.class,"joinedThroughAdmissions='"+ Constants.YES_STRING+ "' and custId=" + getUserCustId()+ " and classId="+classNameObj.getId()+" and academicYearId="+ getTempId2()+" and studDiscontinueDesc is null order by classId,firstName");
										List<ViewStudentClassDetails> viewReStudentClassDetailsList = adminManager.getAll(ViewStudentClassDetails.class,"joinedThroughAdmissions='"+ Constants.NO_STRING+ "' and custId=" + getUserCustId()+ " and classId="+classNameObj.getId()+" and academicYearId="+ getTempId2()+" and studDiscontinueDesc is null order by classId,firstName");
										
										freshAdminTotalCount = freshAdminTotalCount + viewFreshStudentClassDetailsList.size();
										reAdminTotalCount = reAdminTotalCount + viewReStudentClassDetailsList.size();
										
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+i,"#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+classNameObj.getClassName(),"#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+viewFreshStudentClassDetailsList.size(),"#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+viewReStudentClassDetailsList.size(),"#000", fontPath));
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+(viewFreshStudentClassDetailsList.size() + viewReStudentClassDetailsList.size()),"#000", fontPath));
										
										totalStudentsCount = totalStudentsCount + (viewFreshStudentClassDetailsList.size() + viewReStudentClassDetailsList.size());
										viewFreshStudentClassDetailsList = null;
										viewReStudentClassDetailsList = null;
										i++;
									}
									
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont("","#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Total Strength","#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(""+freshAdminTotalCount,"#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(""+reAdminTotalCount,"#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(""+totalStudentsCount,"#000", fontPath));
									
									mainTable.addCell(defaultersHeaderReport);
									pDFGenerator.getDocument().add(mainTable);
									pDFGenerator.getDocument().close();
									pDFGenerator = null;
									mainTable = null;
									defaultersHeaderReport = null;
									phfmj = null;
								}
							}
						}
								
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}

	public void prepareFeeCollectionHeader(ExcelView excelView, int rowCount,WritableCellFormat cellFormatGray8) {
		try {
			excelView.getWs().addCell(new Label(0, rowCount, "Invoice No", cellFormatGray8));
			excelView.getWs().addCell(new Label(1, rowCount, "Payment Date", cellFormatGray8));
			excelView.getWs().addCell(new Label(2, rowCount, "Admission No", cellFormatGray8));
			excelView.getWs().addCell(new Label(3, rowCount, "Student Name", cellFormatGray8));
			excelView.getWs().addCell(new Label(4, rowCount, "Class & Section", cellFormatGray8));
			excelView.getWs().addCell(new Label(5, rowCount, "Payment Mode", cellFormatGray8));
			excelView.getWs().addCell(new Label(6, rowCount, "Paid Amount", cellFormatGray8));
			excelView.getWs().addCell(new Label(7, rowCount, "Discount Amount", cellFormatGray8));
			excelView.getWs().addCell(new Label(8, rowCount, "Concession Amount",cellFormatGray8));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public int prepareFeeCollectionCustomerHeader(ExcelView excelView, int rowCount,WritableCellFormat cellFormat10,WritableCellFormat cellFormat8,Customer customer){
		try {
			if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
				excelView.getWs().mergeCells(0, rowCount, 8, rowCount);
				excelView.getWs().addCell(new Label(0,rowCount, customer.getOrganization(),cellFormat10));
			}
			rowCount++;
			if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
				excelView.getWs().mergeCells(0, rowCount, 8, rowCount);
				excelView.getWs().addCell(new Label(0, rowCount, customer.getCustomerFormattedAddress(),cellFormat8));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return rowCount;
	}
	public int feeCollectionDate(ExcelView excelView, int rowCount,WritableCellFormat cellFormat10,WritableCellFormat cellFormat8,List<ViewStudentFeePaymentDetails> feeCollectionList,AcademicYear academicYear,HashMap<Long, SchoolTerms> schoolTermsMap,WritableCellFormat cellFormat,WritableCellFormat cellFormatGray8,WritableCellFormat cellFormatLeft,WritableCellFormat cellFormatRight){
		try {
			long schoolTermId=0;
			double totalPaidAmount=0;
			double totalDiscountAmount=0;
			double termTotalPaidAmount=0;
			double termTotalDiscountAmount=0;
			double termTotalConcessionAmount=0;
			double totalConcessionAmount=0;
			long laastRec=0;
			for (ViewStudentFeePaymentDetails studentFeePaymentDetails : feeCollectionList) {
				Object[]  concessionAmountObj  = null;		
				if(Constants.TRANSPORT_FEES.equalsIgnoreCase(studentFeePaymentDetails.getSettingName()))
					concessionAmountObj  = adminManager.get("select sum(concessionAmount),custId from vw_studentConcessionTransportFees where custId="+getUserCustId()+" and academicYearId="+academicYear.getId()+" and schoolTermId ="+studentFeePaymentDetails.getSchoolTermId()+" and  studentId="+studentFeePaymentDetails.getStudentId());
				else
					concessionAmountObj  = adminManager.get("select sum(concessionAmount),custId from vw_studentConcessionClassFees where custId="+getUserCustId()+" and academicYearId="+academicYear.getId()+" and schoolTermId ="+studentFeePaymentDetails.getSchoolTermId()+" and  studentId="+studentFeePaymentDetails.getStudentId());
				if(!ObjectFunctions.isNullOrEmpty(concessionAmountObj))
				{
					if(!ObjectFunctions.isNullOrEmpty(concessionAmountObj[0]))
					{
						studentFeePaymentDetails.setPaymentConcessionAmount(Double.valueOf(concessionAmountObj[0].toString()));
					}
					else
						studentFeePaymentDetails.setPaymentConcessionAmount(0.0);
				}
				else
					studentFeePaymentDetails.setPaymentConcessionAmount(0.0);
				
					concessionAmountObj = null;
					if (schoolTermId != studentFeePaymentDetails.getSchoolTermId()) {
						if (schoolTermId != 0 && schoolTermId != studentFeePaymentDetails.getSchoolTermId()) {
							excelView.getWs().mergeCells(0, rowCount, 5, rowCount);
							excelView.getWs().addCell(new Label(0,rowCount,schoolTermsMap.get(schoolTermId).getTermName()+" Total Paid & Discount Amount",cellFormat));
							excelView.getWs().addCell(new Label(6,rowCount,String.valueOf(termTotalPaidAmount),cellFormat));
							excelView.getWs().addCell(new Label(7,rowCount,String.valueOf(termTotalDiscountAmount),cellFormat));
							excelView.getWs().addCell(new Label(8,rowCount,String.valueOf(termTotalConcessionAmount),cellFormat));
							termTotalPaidAmount=0;
							termTotalDiscountAmount=0;
							termTotalConcessionAmount=0;
							rowCount++;
						}
						excelView.getWs().mergeCells(0, rowCount,8, rowCount);
						excelView.getWs().addCell(new Label(0,rowCount,studentFeePaymentDetails.getTermName(),cellFormatGray8));
						rowCount++;
					}
				excelView.getWs().addCell(new Label(0, rowCount, studentFeePaymentDetails.getInvoiceNumberStr(),cellFormatLeft));
				excelView.getWs().addCell(new Label(1, rowCount, studentFeePaymentDetails.getPaymentDateStr(),cellFormatLeft));
				excelView.getWs().addCell(new Label(2, rowCount, studentFeePaymentDetails.getAdmissionNumber(),cellFormatLeft));
				excelView.getWs().addCell(new Label(3, rowCount, studentFeePaymentDetails.getFullName(),cellFormatLeft));
				excelView.getWs().addCell(new Label(4, rowCount, studentFeePaymentDetails.getClassAndSection(),cellFormatLeft));
				excelView.getWs().addCell(new Label(5, rowCount, studentFeePaymentDetails.getPaymentTypeStr(),cellFormatLeft));
				excelView.getWs().addCell(new Label(6, rowCount, String.valueOf(studentFeePaymentDetails.getPaymentAmount()),cellFormatRight));
				if(studentFeePaymentDetails.getDiscountAmount() > 0.0)
					excelView.getWs().addCell(new Label(7, rowCount, String.valueOf(studentFeePaymentDetails.getDiscountAmount()),cellFormatRight));
				else
					excelView.getWs().addCell(new Label(7, rowCount, "",cellFormatRight));
				
				if(studentFeePaymentDetails.getPaymentConcessionAmount() > 0.0)
					excelView.getWs().addCell(new Label(8, rowCount, String.valueOf(studentFeePaymentDetails.getPaymentConcessionAmount()),cellFormatRight));
				else
					excelView.getWs().addCell(new Label(8, rowCount, "",cellFormatRight));
				rowCount++;
				totalPaidAmount+=studentFeePaymentDetails.getPaymentAmount();
				totalDiscountAmount+=studentFeePaymentDetails.getDiscountAmount();
				termTotalPaidAmount+=studentFeePaymentDetails.getPaymentAmount();
				termTotalDiscountAmount+=studentFeePaymentDetails.getDiscountAmount();
				termTotalConcessionAmount += studentFeePaymentDetails.getPaymentConcessionAmount();
				totalConcessionAmount += studentFeePaymentDetails.getPaymentConcessionAmount();
				schoolTermId=studentFeePaymentDetails.getSchoolTermId();
				//if ("Term Wise".equalsIgnoreCase(feeGenerateType)){
					laastRec++;
					if (laastRec == feeCollectionList.size()) {
						excelView.getWs().mergeCells(0, rowCount, 5, rowCount);
						excelView.getWs().addCell(new Label(0,rowCount,schoolTermsMap.get(schoolTermId).getTermName()+" Total Paid & Discount Amount",cellFormat));
						excelView.getWs().addCell(new Label(6,rowCount,String.valueOf(termTotalPaidAmount),cellFormat));
						excelView.getWs().addCell(new Label(7,rowCount,String.valueOf(termTotalDiscountAmount),cellFormat));
						excelView.getWs().addCell(new Label(8,rowCount,String.valueOf(termTotalConcessionAmount),cellFormat));
						rowCount++;
						log.debug("this is last record......Wooooooffffff.....");
					}
				//}
			}
			
			rowCount++;
			excelView.getWs().mergeCells(0, rowCount, 7, rowCount);
			excelView.getWs().addCell(new Label(0, rowCount, "Total Paid Amount",cellFormat));
			excelView.getWs().addCell(new Label(8, rowCount, String.valueOf(totalPaidAmount),cellFormat));
			rowCount++;
			excelView.getWs().mergeCells(0, rowCount, 7, rowCount);
			excelView.getWs().addCell(new Label(0, rowCount, "Total Discount Amount",cellFormat));
			excelView.getWs().addCell(new Label(8, rowCount, String.valueOf(totalDiscountAmount),cellFormat));
			rowCount++;
			excelView.getWs().mergeCells(0, rowCount, 7, rowCount);
			excelView.getWs().addCell(new Label(0, rowCount, "Total Concession Amount",cellFormat));
			excelView.getWs().addCell(new Label(8, rowCount, String.valueOf(totalConcessionAmount),cellFormat));
			
			showSchoolUrlInExcelSheetFooter(rowCount, excelView, 8);
		
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return rowCount;
	}
	 @Actions( {
			@Action(value = "ajaxDoGeneratedTCReport", results = { @Result(location = "../admin/reports/ajaxGeneratedTCReport.jsp", name = "success") })
			})
	public String ajaxDoGeneratedTCReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGeneratedTCReport' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			checkStudyClassHavingStudentsOrNot();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	 @Actions( { @Action(value = "ajaxGeneratedTCReport", results = {}) })
		public void ajaxGeneratedTCReport()throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGeneratedTCReport' method");
			}
			try {
				if (getUserAcademicYearId() != 0) {
					if(StringFunctions.isNotNullOrEmpty(getAnyId())){
						
						String fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
						String endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
						
						String fileName = "GeneratedTCReport"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
						ExcelView excelView = new ExcelView();
						WritableCellFormat cellFormat =null;
						getResponse().setContentType(excelView.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
						excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
						WritableFont font = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
						List<StudyClass> studyClassList = adminManager.getAll(StudyClass.class," id in"+getAnyId());
						
						
						WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
						font1.setColour(Colour.WHITE);
						cellFormat=ExcelView.getUserFormattedCell(font1, Colour.GREEN, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
						cellFormat=ExcelView.getUserFormattedCell(font, Colour.AQUA, false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL,BorderLineStyle.THIN);
				    	
				    		Collections.sort(studyClassList);
				    		for(StudyClass studyClass:studyClassList)
				    		{
				    			excelView.setWorkSheetName(studyClass.getClassAndSection());
				    			excelView.createWorkSheet(0);
				    			excelView.setDefaultFormat(excelView.getArial10format());
				    			
				    			log.debug("select * from vw_studentsTCDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and studyClassId="+studyClass.getId()+" and serialNumber != 0 and DATE(tcIssueDate) Between DATE('"+ fromDate+ " 00:00:00') AND DATE('"+ endDate+ " 00:00:00')");
				    			List<ViewStudentsTCDetails> viewStudentsTCDetailsList =  adminManager.getAll(ViewStudentsTCDetails.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and studyClassId="+studyClass.getId()+" and serialNumber != 0 and DATE(tcIssueDate) Between DATE('"+ fromDate+ " 00:00:00') AND DATE('"+ endDate+ " 00:00:00')");
					    		if(!ObjectFunctions.isNullOrEmpty(viewStudentsTCDetailsList))
					    		{
					    			int rowCount=6;
					    			int studentCount=1;
					    			
					    			schoolAddresDetailsOnlyForExcel(excelView,13);
							    	excelView.getWs().removeRow(0);
					    			
							    	excelView.getWs().setColumnView(0,6);
									excelView.getWs().setColumnView(1,15);
									excelView.getWs().setColumnView(2,20);
									excelView.getWs().setColumnView(3,25);
									excelView.getWs().setColumnView(4,30);
									excelView.getWs().setColumnView(5,20);
									excelView.getWs().setColumnView(6,25);
									excelView.getWs().setColumnView(7,20);
									excelView.getWs().setColumnView(8,20);
									excelView.getWs().setColumnView(9,20);
									excelView.getWs().setColumnView(10,20);
									excelView.getWs().setColumnView(11,20);
									excelView.getWs().setColumnView(12,20);
									excelView.getWs().setColumnView(13,25);
									
					    		 	excelView.getWs().addCell(new Label(0,5, "S.No", excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(1,5, "TC NO", excelView.getUsermore10BoldformatGreenBgClr()));
						    		excelView.getWs().addCell(new Label(2,5, "ADMI. NO ", excelView.getUsermore10BoldformatGreenBgClr()));
									excelView.getWs().addCell(new Label(3,5, "DATE OF APPLICATION", excelView.getUsermore10BoldformatGreenBgClr()));
									excelView.getWs().addCell(new Label(4,5, "STUDENT'S  NAME", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(5,5, "FATHER'S NAME", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(6,5, "MOTHER'S NAME", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(7,5, "D.O.B", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(8,5, "D.O.JOINING", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(9,5, "CLASS OF ADMI.", excelView.getUsermore10BoldformatGreenBgClr()));		    		    	
							    	excelView.getWs().addCell(new Label(10,5, "CASTE", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(11,5, "TC ISSUE CLASS", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(12,5, "TC ISSUE DATE", excelView.getUsermore10BoldformatGreenBgClr()));
							    	excelView.getWs().addCell(new Label(13,5, "FEES PAID UPTO", excelView.getUsermore10BoldformatGreenBgClr()));
							    	
					    			if(!ObjectFunctions.isNullOrEmpty(viewStudentsTCDetailsList)){
					    				for(ViewStudentsTCDetails viewStudentsTCDetails : viewStudentsTCDetailsList){
					    						
			    							excelView.getWs().addCell(new Label(0,rowCount, String.valueOf(studentCount), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(1,rowCount, ""+viewStudentsTCDetails.getSerialNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(2,rowCount, viewStudentsTCDetails.getAdmissionNumber(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(3,rowCount, "", excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(4,rowCount, viewStudentsTCDetails.getFullName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(5,rowCount, viewStudentsTCDetails.getFatherName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(6,rowCount, viewStudentsTCDetails.getMotherName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(7,rowCount, viewStudentsTCDetails.getDateOfBirthStr(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(8,rowCount, viewStudentsTCDetails.getDateOfJoiningStr(), excelView.getDefaultFormat()));
			    							
			    							excelView.getWs().addCell(new Label(9,rowCount, viewStudentsTCDetails.getClassJoinedStr(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(10,rowCount, viewStudentsTCDetails.getSubCastName(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(11,rowCount, viewStudentsTCDetails.getClassAndSection(), excelView.getDefaultFormat()));
			    							excelView.getWs().addCell(new Label(12,rowCount, viewStudentsTCDetails.getTcIssueDateStr(), excelView.getDefaultFormat()));
			    							
			    							Object[] studentPaymentObj = adminManager.get("select studentId,sum(paidAmount) from studentPayment where studentId="+viewStudentsTCDetails.getStudId()+" and academicYearId="+getUserAcademicYearId());
			    							if(!ObjectFunctions.isNullOrEmpty(studentPaymentObj[1]))
			    								excelView.getWs().addCell(new Label(13,rowCount, ""+studentPaymentObj[1].toString(), excelView.getDefaultFormat()));
			    							else
			    								excelView.getWs().addCell(new Label(13,rowCount, "0", excelView.getDefaultFormat()));
			    							
			    							studentCount+=1;
					    					rowCount+=1;
					    				}
					    			}
					    			rowCount+=1;
					    			showSchoolUrlInExcelSheetFooter(rowCount-2,excelView,13);
					    		}
					    		else{
		    						excelView.getWs().mergeCells(0, 1, 18, 1);
		    						excelView.getWs().addCell(new Label(0,1, "No students found for generated TC.", excelView.getDefaultFormat()));
		    					}
					    	}
				    	excelView.getWb().write();
						excelView.getWb().close();
					}else{
						super.addActionError("Please select class,community and gender.");
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		}
	 
	 
	 @Actions( {
			@Action(value = "ajaxDoReAdmissionFeeReport", results = { @Result(location = "../admin/reports/ajaxDoReAdmissionFeeReport.jsp", name = "success")})	
	 }) 
		public String ajaxDoReAdmissionFeeReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoReAdmissionFeeReport' method");
			}
			try {
				checkStudyClassHavingStudentsOrNot();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxReAdmissionFeeReport", results = {}) })
		public String ajaxReAdmissionFeeReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxReAdmissionFeeReport' method");
			}
			try {
				
				if("PS".equalsIgnoreCase(getTempString3()))
					ajaxReAdmissionPaymentSummaryReport();
				else
					ajaxReAdmissionFeeNotPaidStudentsReport();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
		public String ajaxReAdmissionPaymentSummaryReport() {
			try {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxReAdmissionFeeReport' method");
				}
				
				String fileName = null;
				if (getUserAcademicYearId()!=0) {
					Customer customer = getCustomerByCustId();
					
						fileName = "Student Strrength";
						PDFGenerator pDFGenerator = new PDFGenerator();
						getResponse().setContentType(pDFGenerator.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
						pDFGenerator.createDocumentJasper();
						pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
						PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
						pDFGenerator.getPdfWriter().setPageEvent(phfmj);
						pDFGenerator.getDocument().open();
						List<ClassName> classList = null;
						
						//checkStudyClassHavingStudentsOrNot();
						List<StudyClass> studyClassList = adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(),null);
						if (!ObjectFunctions.isNullOrEmpty(studyClassList)) {
							
							StudyClass studyClassObj = studyClassList.get(0);
							Collections.sort(studyClassList);
								
							if (!ObjectFunctions.isNullOrEmpty(studyClassList)) 
							{
								String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
								FontFactory.register(fontPath);
								// creating pDF page event to set header and Footer to document
								PdfPTable mainTable = new PdfPTable(1);
								mainTable.setWidthPercentage(100);
								mainTable.setSplitLate(false);
								mainTable.getDefaultCell().setBorder(Rectangle.BOX);
								
								int width = 5;
								PdfPTable defaultersHeaderReport = new PdfPTable(width);
								defaultersHeaderReport.setWidthPercentage(100);
								
								PdfPTable headerReport = new PdfPTable(100);
								headerReport.setWidthPercentage(100);
								
								if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
									headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 100,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
								}
								if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
									headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 100,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
								}
								
								mainTable.addCell(headerReport);
									
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("PAYMENT SUMMARY FOR THE YEAR "+studyClassObj.getAcademicYear().getAcademicYear(),100, fontPath));
									
								//int size =5;
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Sl.No ", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Class Name ", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Total Re Admitted Students", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Fee Paid", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Fee Not Paid", "#000",fontPath));
								
								int i=1;
								long freshAdminTotalCount = 0;
								int totalStudentsCount = 0;
								int totalfeePaymentCount = 0;
								int totalfeeNotPaymentCount = 0;
								for(StudyClass studyClass: studyClassList)
								{
									
									List<ViewStudentClassDetails> viewReStudentClassDetailsList = adminManager.getAll(ViewStudentClassDetails.class," custId=" + getUserCustId()+ "  and academicYearId="+ getUserAcademicYearId()+" and classSectionId="+studyClass.getId()+" and joinedThroughAdmissions='"+ Constants.NO_STRING+ "' and studDiscontinueDesc is null order by rollNumber,firstName");
									totalStudentsCount = totalStudentsCount  + viewReStudentClassDetailsList.size();
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+i,"#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+studyClass.getClassAndSection(),"#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+viewReStudentClassDetailsList.size(),"#000", fontPath));
									
									int feePaymentCount = 0;
									
									Object[] feePaymentObj = adminManager.get("select id,count(*) as PaidStudentsCount from student where custId = "+getUserCustId() + " and academicYearId="+getUserAcademicYearId()+" and classSectionId="+studyClass.getId()+" and joinedThroughAdmissions='N' and feePaidStatus !='N' and status='Y'");
									//Object[] feePaymentObj = adminManager.get("select className,section,COUNT(StudentId) AS PaidStudentsCount from (select sc.className,sc.section,s.classSectionId,s.id as StudentId from studentPayment sp LEFT JOIN student s on (s.id=sp.studentId) LEFT JOIN studyClass sc on (sc.id=s.classSectionId) where sc.id = "+studyClass.getId()+" and s.joinedThroughAdmissions='N' group by s.id) as a group by classSectionId");
									if (!ObjectFunctions.isNullOrEmpty(feePaymentObj)) 
									{
										feePaymentCount = Integer.valueOf(feePaymentObj[1].toString());
										totalfeePaymentCount =  totalfeePaymentCount + feePaymentCount;
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(feePaymentObj[1].toString(),"#000", fontPath));
									}
									else
										defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont("0","#000", fontPath));
									
									totalfeeNotPaymentCount = totalfeeNotPaymentCount + (viewReStudentClassDetailsList.size() - feePaymentCount);
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+(viewReStudentClassDetailsList.size() - feePaymentCount),"#000", fontPath));
									viewReStudentClassDetailsList = null;
									feePaymentObj = null;
									i++;
								}
								
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont("","#000", fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Total Strength","#000", fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(""+totalStudentsCount,"#000", fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(""+totalfeePaymentCount,"#000", fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass(""+totalfeeNotPaymentCount,"#000", fontPath));
								
								mainTable.addCell(defaultersHeaderReport);
								pDFGenerator.getDocument().add(mainTable);
								pDFGenerator.getDocument().close();
								pDFGenerator = null;
								mainTable = null;
								defaultersHeaderReport = null;
								phfmj = null;
							}
						}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
		
		
		public String ajaxReAdmissionFeeNotPaidStudentsReport() {
			try {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxReAdmissionFeeNotPaidStudentsReport' method");
				}
				
				String fileName = null;
				if (getUserAcademicYearId()!=0) {
					Customer customer = getCustomerByCustId();
					
					String fromDate = null;
					String endDate = null;
					
					fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
					endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
					
						fileName = "Admission Summary";
						PDFGenerator pDFGenerator = new PDFGenerator();
						getResponse().setContentType(pDFGenerator.getMimeType());
						getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".pdf");
						pDFGenerator.createDocumentJasper();
						pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
						PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
						pDFGenerator.getPdfWriter().setPageEvent(phfmj);
						pDFGenerator.getDocument().open();
						List<StudyClass> studyClassList = adminManager.getAll(StudyClass.class, "custId="+ getUserCustId() + " and academicYearId="+getUserAcademicYearId()+" and id in "+getSelectedId());
						if (ObjectFunctions.isNotNullOrEmpty(studyClassList)) {
							Collections.sort(studyClassList);
							
							String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
							FontFactory.register(fontPath);
							// creating pDF page event to set header and Footer to document
							PdfPTable mainTable = new PdfPTable(1);
							mainTable.setWidthPercentage(100);
							mainTable.setSplitLate(false);
							mainTable.getDefaultCell().setBorder(Rectangle.BOX);
							
							//int width = religionsList.size()+getObjectList().size()+6;
							int width = 4;
							PdfPTable defaultersHeaderReport = new PdfPTable(width);
							defaultersHeaderReport.setWidthPercentage(100);
							
							PdfPTable headerReport = new PdfPTable(100);
							headerReport.setWidthPercentage(100);
							
							if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
								headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 100,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}
							if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
								headerReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 100,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
							}
							
							mainTable.addCell(headerReport);
						
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings("Fee Not Paid Students Report",100, fontPath));
						
							for(StudyClass studyClass: studyClassList)
							{
								StringBuilder builder = new StringBuilder();
								builder.append(" custId=" + getUserCustId());
								builder.append(" and academicYearId=" + getUserAcademicYearId());
								builder.append(" and classSectionId=" + studyClass.getId());
								builder.append(" and joinedThroughAdmissions='"+ Constants.NO_STRING+ "'");
								builder.append(" and feePaidStatus='"+ Constants.NO_STRING+ "'");
								builder.append(" and studDiscontinueDesc is null order by rollNumber,firstName");
									
								List<ViewStudentClassDetails> viewStudentClassDetailsList = adminManager.getAll(ViewStudentClassDetails.class,builder.toString());
								if("N".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) || StringFunctions.isNullOrEmpty(customer.getAlphaNumericRollNumber()))
									Collections.sort(viewStudentClassDetailsList,new StudentRollNumberComparator());
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadings(studyClass.getClassAndSection()+" - "+ viewStudentClassDetailsList.size() ,100, fontPath));
								
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Admission No ", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Student Name ", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Father Name ", "#000",fontPath));
								defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Contact Number ", "#000",fontPath));
								
								for(ViewStudentClassDetails viewStudentClassDetails : viewStudentClassDetailsList)
								{
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(""+viewStudentClassDetails.getAdmissionNumber(),"#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(viewStudentClassDetails.getFullName(),"#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(viewStudentClassDetails.getFatherName(),"#000", fontPath));
									defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignLeftNormalFont(viewStudentClassDetails.getMobileNumber(),"#000", fontPath));
								}
								viewStudentClassDetailsList = null;
							}
						
						
						mainTable.addCell(defaultersHeaderReport);
						pDFGenerator.getDocument().add(mainTable);
						pDFGenerator.getDocument().close();
						pDFGenerator = null;
						mainTable = null;
						defaultersHeaderReport = null;
						phfmj = null;
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
		@Actions( {
			@Action(value = "ajaxDoOtherFeeDetails", results = { @Result(location = "../admin/reports/ajaxDoSelectOtherFeeReports.jsp", name = "success") })
			})
		public String ajaxDoOtherFeeDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoOtherFeeDetails' method");
			}
			try {
				checkStudyClassHavingStudentsOrNot();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		@Actions( { @Action(value = "ajaxDownloadOtherFeeDetails",  results = {}) })
	public String ajaxDownloadOtherFeeDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadOtherFeeDetails' method");
		}
		try {
			String reportType=getParamValue("reportType");
			if("OL".equalsIgnoreCase(reportType)){
				ajaxDownloadOtherFeeOverAllReport(reportType);
			}else{
				ajaxDownloadOtherFeeReport(reportType);
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();
			RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	public void ajaxDownloadOtherFeeReport(String reportType)throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadOtherFeeReport' method");
		}
		String paymentDateStr=null;
		try {
			String fromDate =null;
			String endDate =null;
			String currentDate=null;
			AcademicYear academicYear = null;
			Date newDate = new Date();
			StringBuilder query = new StringBuilder();
			StringBuilder queryString = new StringBuilder();
			String fileName = null;
			SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
			String toDayDate = lastUpdatedStr.format(newDate);
			log.debug("toDayDate  "+toDayDate);
			if("C".equalsIgnoreCase(reportType))
				fileName = "Other Fee Collection_Today";
			else
				fileName = "Other Fee Collection_Dates_Between";
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
			
			
			WritableCellFormat cellFormat8 = getCellFormat8();
			// For School name
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormatGray8 = getCellFormatGray10();
			WritableCellFormat cellFormatGrayRight8 = getCellFormatGrayRight10();
			WritableCellFormat cellFormat = null;
			WritableCellFormat cellFormatLeft = null;
			WritableCellFormat cellFormatBoldRight = null;
			NumberFormat fivedps = new NumberFormat("#.#####"); 
			WritableCellFormat cellFormatRight = new WritableCellFormat(fivedps);
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
			font1.setColour(Colour.BLACK);
			font2.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			cellFormatLeft = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.LEFT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			cellFormatRight = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			
			cellFormatBoldRight = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.THIN);
			
			Customer customer = getCustomerByCustId();
			academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getUserAcademicYearId());
			
			if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
					excelView.setWorkSheetName(" Collection");
					excelView.createWorkSheet(0);
					excelView.setDefaultFormat(excelView.getArial10format());
					excelView.getWs().setColumnView(0, 10);
					excelView.getWs().setColumnView(1, 20);
					excelView.getWs().setColumnView(2, 35);
					excelView.getWs().setColumnView(3, 20);
					excelView.getWs().setColumnView(4, 15);
					excelView.getWs().setColumnView(5, 30);
					excelView.getWs().setColumnView(6, 15);
					excelView.getWs().setColumnView(7, 17);
					excelView.getWs().setColumnView(8, 17);
					if (!ObjectFunctions.isNullOrEmpty(customer)) {
						if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
							excelView.getWs().mergeCells(0, 0, 7, 1);
							excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
						}
						if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
							excelView.getWs().mergeCells(0, 2, 7, 2);
							excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
						}
						int rowCount = 3;
						int sno=0;
						long invoiceNumber=0;
						int startRow=0;
						double dateWiseInvoiceTotal=0;
						double invoiceTotal=0;
						int lessVal=0;
						int listSize=0;
						int dateCount=1;
						double totalDatesAmount=0;
						query.append("select paymentDate,date_format(paymentDate,'%d-%m-%Y') from vw_studentFineFeeDetails where custId="+getUserCustId()+" and academicYearId="+academicYear.getId()+" and  classSectionId in "+getSelectedId()+" and status='Y' and deleteStatus='N' ");
						if("C".equalsIgnoreCase(reportType)){
							currentDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,new Date());
							query.append(" and paymentDate='"+currentDate+" 00:00:00' ");
						}else{
							fromDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("startDate"));
							endDate = DateFormatter.formatDate(DateFormatter.CCYY_MM_DD_PATTERN,getParamValue("endDate"));
							query.append(" and DATE(paymentDate) Between DATE('"+ fromDate+ " 00:00:00') AND DATE('"+ endDate+ " 00:00:00')");
						}
						query.append(" group by paymentDate order by paymentDate desc");
						List<Object[]> fineFeePaymentDates = adminManager.getAll(query.toString());
						if(!ObjectFunctions.isNullOrEmpty(fineFeePaymentDates)){
							for(Object[] object : fineFeePaymentDates){
								List<ViewStudentFineFeeDetails> studentFineFeeDetails =adminManager.getAll(ViewStudentFineFeeDetails.class,"custId="+getUserCustId()+" and academicYearId="+academicYear.getId()+" and paymentDate='"+object[0].toString()+"' and  classSectionId in "+getSelectedId()+" and status='Y' and deleteStatus='N' order by invoiceNumber");
								if(ObjectFunctions.isNotNullOrEmpty(studentFineFeeDetails)){
									sno=1;
									rowCount=otherFeeInvoiceHeader(excelView,object[1].toString(),rowCount,cellFormatGray8);
									for(ViewStudentFineFeeDetails fineFeeDetails : studentFineFeeDetails){
										if(sno==1){
											lessVal=4;
										}else
											lessVal=1;
										if(fineFeeDetails.getInvoiceNumber() != invoiceNumber && invoiceNumber !=0){
											otherFeeMergeCellDetails(excelView,startRow,(rowCount-lessVal),reportType);
											excelView.getWs().addCell(new jxl.write.Number(7, startRow,invoiceTotal,cellFormatRight));
											if(sno>1){
												dateWiseInvoiceTotal = (dateWiseInvoiceTotal+invoiceTotal);
											}
											startRow=rowCount;
											invoiceTotal=0;
										}else if(invoiceNumber==0)
											startRow=rowCount;
										
										otherFeeDetails(excelView,fineFeeDetails,rowCount,sno,cellFormatLeft,cellFormatRight);
										invoiceTotal = (invoiceTotal + fineFeeDetails.getFineFeeAmount());
										rowCount++;
										sno++;
										paymentDateStr=fineFeeDetails.getPaymentDateStr();
										invoiceNumber=fineFeeDetails.getInvoiceNumber();
										listSize++;
									}
									if(listSize==studentFineFeeDetails.size()){
										if(dateCount==fineFeePaymentDates.size()){
											otherFeeMergeCellDetails(excelView,startRow,(rowCount-lessVal),reportType);
											excelView.getWs().addCell(new jxl.write.Number(7, startRow,invoiceTotal,cellFormatRight));
										}
										dateWiseInvoiceTotal = (dateWiseInvoiceTotal+invoiceTotal);
										totalDatesAmount = (totalDatesAmount+dateWiseInvoiceTotal);
										excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
										excelView.getWs().addCell(new Label(0, rowCount,"Total ",cellFormatRight));
										excelView.getWs().addCell(new jxl.write.Number(7, rowCount,dateWiseInvoiceTotal,cellFormatRight));
										dateWiseInvoiceTotal=0;
										listSize=0;
									}
								}
								rowCount++;
								dateCount++;
							}
							excelView.getWs().addCell(new Label(6, rowCount,"Grand Total ",cellFormatGrayRight8));
							excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalDatesAmount,cellFormatGrayRight8));
						}else{
							excelView.getWs().mergeCells(0, 2, 7, 2);
							excelView.getWs().addCell(new jxl.write.Number(7, rowCount,totalDatesAmount,cellFormatGrayRight8));
						}
					}
					excelView.getWb().write();
					excelView.getWb().close();
			}
	
	} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}	

	public void ajaxDownloadOtherFeeOverAllReport(String reportType)throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadOtherFeeOverAllReport' method");
		}
		String paymentDateStr = null;
		try {
			String fromDate = null;
			String endDate = null;
			String currentDate = null;
			AcademicYear academicYear = null;
			Date newDate = new Date();
			StringBuilder query = new StringBuilder();
			StringBuilder queryString = new StringBuilder();
			String fileName = null;
			SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
			String toDayDate = lastUpdatedStr.format(newDate);
			fileName = "Other Fee Collection_Over_All";
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));

			WritableCellFormat cellFormat8 = getCellFormat8();
			// For School name
			WritableCellFormat cellFormat10 = getCellFormat10();
			WritableCellFormat cellFormatGray8 = getCellFormatGray10();
			WritableCellFormat cellFormatGrayRight8 = getCellFormatGrayRight10();
			WritableCellFormat cellFormat = null;
			WritableCellFormat cellFormatLeft = null;
			WritableCellFormat cellFormatBoldRight = null;
			NumberFormat fivedps = new NumberFormat("#.#####");
			WritableCellFormat cellFormatRight = new WritableCellFormat(fivedps);
			WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
			WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10);
			font1.setColour(Colour.BLACK);
			font2.setColour(Colour.BLACK);
			cellFormat = ExcelView.getUserFormattedCell(font1, Colour.WHITE,false, false, Alignment.CENTRE, VerticalAlignment.CENTRE,Border.ALL, BorderLineStyle.THIN);
			cellFormatLeft = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.LEFT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);
			cellFormatRight = ExcelView.getUserFormattedCell(font2,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);
			cellFormatBoldRight = ExcelView.getUserFormattedCell(font1,Colour.WHITE, false, false, Alignment.RIGHT,VerticalAlignment.CENTRE, Border.ALL, BorderLineStyle.THIN);

			Customer customer = getCustomerByCustId();
			academicYear = (AcademicYear) adminManager.get(AcademicYear.class,getUserAcademicYearId());

			if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
				excelView = prepareRowWidth(excelView);

				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if (!ObjectFunctions.isNullOrEmpty(customer.getOrganization())) {
						excelView.getWs().mergeCells(0, 0, 8, 1);
						excelView.getWs().addCell(new Label(0, 0, customer.getOrganization(),cellFormat10));
					}
					if (StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())) {
						excelView.getWs().mergeCells(0, 2, 8, 2);
						excelView.getWs().addCell(new Label(0, 2, customer.getCustomerFormattedAddress(),cellFormat8));
					}
					int rowCount = 3;
					int sno = 0;
					long invoiceNumber = 0;
					int startRow = 0;
					double dateWiseInvoiceTotal = 0;
					double invoiceTotal = 0;
					int listSize = 0;
					int dateCount = 1;
					double totalDatesAmount = 0;
					query.append("select paymentDate,date_format(paymentDate,'%d-%m-%Y') from vw_studentFineFeeDetails where custId="+ getUserCustId()+ " and academicYearId="+ academicYear.getId()+ " and  classSectionId in "+ getSelectedId() + " and status='Y' and deleteStatus='N' ");
					query.append(" group by paymentDate order by paymentDate desc");
					List<Object[]> fineFeePaymentDates = adminManager.getAll(query.toString());
					if (!ObjectFunctions.isNullOrEmpty(fineFeePaymentDates)) {
						rowCount = otherFeeInvoiceOverAllHeader(excelView,rowCount, cellFormatGray8);
						for (Object[] object : fineFeePaymentDates) {
							List<ViewStudentFineFeeDetails> studentFineFeeDetails = adminManager.getAll(ViewStudentFineFeeDetails.class,"custId="+ getUserCustId()+ " and academicYearId="+ academicYear.getId()+ " and paymentDate='"+ object[0].toString()+ "' and  classSectionId in "+ getSelectedId()+ " and status='Y' and deleteStatus='N' order by invoiceNumber");
							if (ObjectFunctions.isNotNullOrEmpty(studentFineFeeDetails)) {
								sno = 1;
								for (ViewStudentFineFeeDetails fineFeeDetails : studentFineFeeDetails) {
									if (fineFeeDetails.getInvoiceNumber() != invoiceNumber && invoiceNumber != 0) {
										otherFeeMergeCellDetails(excelView,startRow, (rowCount - 1),reportType);
										excelView.getWs().addCell(new jxl.write.Number(8,startRow, invoiceTotal,cellFormatRight));
										if (sno > 1) {
											dateWiseInvoiceTotal = (dateWiseInvoiceTotal + invoiceTotal);
										}
										startRow = rowCount;
										invoiceTotal = 0;
									} else if (invoiceNumber == 0)
										startRow = rowCount;
									otherFeeOverAllDetails(excelView,fineFeeDetails, rowCount, sno,cellFormatLeft, cellFormatRight);

									invoiceTotal = (invoiceTotal + fineFeeDetails.getFineFeeAmount());
									rowCount++;
									sno++;
									paymentDateStr = fineFeeDetails.getPaymentDateStr();
									invoiceNumber = fineFeeDetails.getInvoiceNumber();
									listSize++;
								}
								if (listSize == studentFineFeeDetails.size()) {
									if (dateCount == fineFeePaymentDates.size()) {
										otherFeeMergeCellDetails(excelView,startRow, (rowCount - 1),reportType);
										excelView.getWs().addCell(new jxl.write.Number(8,startRow, invoiceTotal,cellFormatRight));
									}
									dateWiseInvoiceTotal = (dateWiseInvoiceTotal + invoiceTotal);
									totalDatesAmount = (totalDatesAmount + dateWiseInvoiceTotal);
									dateWiseInvoiceTotal = 0;
									listSize = 0;
								}
							}
							dateCount++;
						}
						excelView.getWs().addCell(new Label(7, rowCount, "Grand Total ",cellFormatGrayRight8));
						excelView.getWs().addCell(new jxl.write.Number(8, rowCount,totalDatesAmount,cellFormatGrayRight8));
					}
				}
				excelView.getWb().write();
				excelView.getWb().close();
			}

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();
			raygex.sendRayGunException(ex);raygex = null;JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public ExcelView prepareRowWidth(ExcelView excelView){
		try {
			excelView.setWorkSheetName(" Collection");
			excelView.createWorkSheet(0);
			excelView.setDefaultFormat(excelView.getArial10format());
			excelView.getWs().setColumnView(0, 5);
			excelView.getWs().setColumnView(1, 12);
			excelView.getWs().setColumnView(2, 15);
			excelView.getWs().setColumnView(3, 35);
			excelView.getWs().setColumnView(4, 20);
			excelView.getWs().setColumnView(5, 20);
			excelView.getWs().setColumnView(6, 30);
			excelView.getWs().setColumnView(7, 15);
			excelView.getWs().setColumnView(8, 15);
			return excelView;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	public int otherFeeInvoiceHeader(ExcelView excelView,String paymentDate,int rowCount,WritableCellFormat cellFormatGray8){
		try {
			excelView.getWs().mergeCells(0, rowCount, 7, rowCount);
			excelView.getWs().addCell(new Label(0, rowCount, paymentDate,cellFormatGray8));
			rowCount++;
			excelView.getWs().addCell(new Label(0, rowCount,"S.No.", cellFormatGray8));
			excelView.getWs().addCell(new Label(1, rowCount, "Receipt No.",cellFormatGray8));
			excelView.getWs().addCell(new Label(2, rowCount,"Student Name",cellFormatGray8));
			excelView.getWs().addCell(new Label(3, rowCount,"Class And Section",cellFormatGray8));
			excelView.getWs().addCell(new Label(4, rowCount,"Admission No",cellFormatGray8));
			excelView.getWs().addCell(new Label(5, rowCount,"Particular Narration",cellFormatGray8));
			excelView.getWs().addCell(new Label(6, rowCount,"Paid Amount",cellFormatGray8));
			excelView.getWs().addCell(new Label(7, rowCount,"Total",cellFormatGray8));
			rowCount++;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return rowCount;
	}
	public int otherFeeInvoiceOverAllHeader(ExcelView excelView,int rowCount,WritableCellFormat cellFormatGray8){
		try {
			excelView.getWs().addCell(new Label(0, rowCount,"S.No.", cellFormatGray8));
			excelView.getWs().addCell(new Label(1, rowCount, "Receipt No.",cellFormatGray8));
			excelView.getWs().addCell(new Label(2, rowCount, "Payment Date",cellFormatGray8));
			excelView.getWs().addCell(new Label(3, rowCount,"Student Name",cellFormatGray8));
			excelView.getWs().addCell(new Label(4, rowCount,"Class And Section",cellFormatGray8));
			excelView.getWs().addCell(new Label(5, rowCount,"Admission No",cellFormatGray8));
			excelView.getWs().addCell(new Label(6, rowCount,"Particular Narration",cellFormatGray8));
			excelView.getWs().addCell(new Label(7, rowCount,"Paid Amount",cellFormatGray8));
			excelView.getWs().addCell(new Label(8, rowCount,"Total",cellFormatGray8));
			rowCount++;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return rowCount;
	}
	public void otherFeeMergeCellDetails(ExcelView excelView,int startRow,int endRow,String reportType){
		try {
			excelView.getWs().mergeCells(1,startRow,1,endRow);
			excelView.getWs().mergeCells(2,startRow,2,endRow);
			excelView.getWs().mergeCells(3,startRow,3,endRow);
			excelView.getWs().mergeCells(4,startRow,4,endRow);
			excelView.getWs().mergeCells(5,startRow,5,endRow);
			if("OL".equalsIgnoreCase(reportType)){
				excelView.getWs().mergeCells(8,startRow,8,endRow);
			}else
				excelView.getWs().mergeCells(7,startRow,7,endRow);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public void otherFeeOverAllMergeCellDetails(ExcelView excelView,int startRow,int endRow){
		try {
			excelView.getWs().mergeCells(1,startRow,1,endRow);
			excelView.getWs().mergeCells(2,startRow,2,endRow);
			excelView.getWs().mergeCells(3,startRow,3,endRow);
			excelView.getWs().mergeCells(4,startRow,4,endRow);
			excelView.getWs().mergeCells(5,startRow,5,endRow);
			excelView.getWs().mergeCells(8,startRow,8,endRow);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public void otherFeeDetails(ExcelView excelView,ViewStudentFineFeeDetails fineFeeDetails,int rowCount,int sno,WritableCellFormat cellFormatLeft,WritableCellFormat cellFormatRight){
		try {
			excelView.getWs().addCell(new jxl.write.Number(0, rowCount, sno,cellFormatLeft));
			excelView.getWs().addCell(new Label(1, rowCount, String.valueOf(fineFeeDetails.getInvoiceNumber()),cellFormatLeft));
			excelView.getWs().addCell(new Label(2, rowCount, fineFeeDetails.getStudentFullName(),cellFormatLeft));
			excelView.getWs().addCell(new Label(3, rowCount, fineFeeDetails.getClassAndSection(),cellFormatLeft));
			excelView.getWs().addCell(new Label(4, rowCount, fineFeeDetails.getAdmissionNumber(),cellFormatLeft));
			excelView.getWs().addCell(new Label(5, rowCount,fineFeeDetails.getDescription(),cellFormatLeft));
			excelView.getWs().addCell(new jxl.write.Number(6, rowCount, fineFeeDetails.getFineFeeAmount(),cellFormatRight));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	public void otherFeeOverAllDetails(ExcelView excelView,ViewStudentFineFeeDetails fineFeeDetails,int rowCount,int sno,WritableCellFormat cellFormatLeft,WritableCellFormat cellFormatRight){
		try {
			excelView.getWs().addCell(new jxl.write.Number(0, rowCount, sno,cellFormatLeft));
			excelView.getWs().addCell(new Label(1, rowCount, String.valueOf(fineFeeDetails.getInvoiceNumber()),cellFormatLeft));
			excelView.getWs().addCell(new Label(2, rowCount, fineFeeDetails.getPayDateStr(),cellFormatLeft));
			excelView.getWs().addCell(new Label(3, rowCount, fineFeeDetails.getStudentFullName(),cellFormatLeft));
			excelView.getWs().addCell(new Label(4, rowCount, fineFeeDetails.getClassAndSection(),cellFormatLeft));
			excelView.getWs().addCell(new Label(5, rowCount, fineFeeDetails.getAdmissionNumber(),cellFormatLeft));
			excelView.getWs().addCell(new Label(6, rowCount,fineFeeDetails.getDescription(),cellFormatLeft));
			excelView.getWs().addCell(new jxl.write.Number(7, rowCount, fineFeeDetails.getFineFeeAmount(),cellFormatRight));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
		public void ajaxAllStudentsCountWithCommunityAndCaste()
				throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAllStudentsCountWithCommunityAndCaste' method");
			}
			try {
				if (getUserAcademicYearId() != 0) {
					String fileName = null;
					if (getUsername().equalsIgnoreCase("ROLE_HOSTEL")) {
						fileName = "Hostel_community_import_template_"+ getUserAcademicYearId();
					}else{
						fileName = "School_Community_Caste_Statistics";
					}
					ExcelView excelView = new ExcelView();
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
							 List<CastSettings> castSettingList = adminManager.getAllByCustId("CastSettings", getUserCustId(),0);
							 	List<StudyClass> classNameList = studentManager.getAll(StudyClass.class, "id in " + getSelectedId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
								 	excelView.setWorkSheetName("Community And Caste Information");
							    	excelView.createWorkSheet(0);
							    	excelView.setDefaultFormat(excelView.getArial10format());
							    	
							        int size = castSettingList.size()*2+3;
							        //For School Name
						        	WritableCellFormat cellFormat10= getCellFormat10();
									//For School Address
						        	WritableCellFormat cellFormat8= getCellFormat8();
							    	//For data with white color
						        	WritableCellFormat cellFormatWht10 = getCellFormatWhtX(10);
									  Customer customer = getCustomerByCustId();
									  if (!ObjectFunctions.isNullOrEmpty(customer)) {
											if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
												excelView.getWs().mergeCells(0, 1, size,3);
												excelView.getWs().addCell(new Label(0,1, customer.getOrganization()+"\n"+customer.getOrganizationFullAddress(), getCellFormatWhtX(12)));
											}
										}
								  
						     		excelView.getWs().removeRow(0);
							        excelView.getWs().setColumnView(0,20);
							        excelView.getWs().setColumnView(1,10);
							        excelView.getWs().setColumnView(2,10);
									excelView.getWs().mergeCells(0, 3, size,3);
									if (!ObjectFunctions.isNullOrEmpty(castSettingList) && !ObjectFunctions.isNullOrEmpty(classNameList)) {
											
										excelView.getWs().addCell(new Label(0,3, "CASTE & COMMUNITY WIDE MATRIX", cellFormatWht10));
								    	
								    	excelView.getWs().addCell(new Label(0,4, "COMMUNITY", cellFormatWht10));
								    	excelView.getWs().addCell(new Label(0,5, "CASTE", cellFormatWht10));
								    	
								    		int cellCount =1;
								    		int cellNum=1;
								    		int mergeNum=0;
								    		int gendersSize = 0;
								    		int cellRowNum=6;
								    		boolean areSubCastes = false;
								    		StringBuffer classSectionIds = new StringBuffer();
											for (CastSettings castSettings : castSettingList) {
												if (!ObjectFunctions.isNullOrEmpty(castSettings.getSubCastSettings()))
												{
													if(!areSubCastes)
														areSubCastes = true;
													for (SubCastSettings subCastSettings : castSettings.getSubCastSettings()) {
															excelView.getWs().addCell(new Label(cellCount,5, subCastSettings.getSubCastName(), cellFormatWht10));
															cellCount++;
															mergeNum++;
													}
													excelView.getWs().addCell(new Label(cellCount,5, "Community Total", cellFormatWht10));
													excelView.getWs().setColumnView(cellCount, 15);
													cellCount++;
													mergeNum++;
													excelView.getWs().addCell(new Label(cellNum,4, castSettings.getCastName(), cellFormatWht10));
													excelView.getWs().mergeCells(cellNum, 4, mergeNum,4);
													cellNum=cellNum+castSettings.getSubCastSettings().size()+1;
												}
											}
											if(areSubCastes){
												int cellstart =0;
												gendersSize=castSettingList.size()+1;
												Object[] subcastesCount = null;
												for(StudyClass className:classNameList){
													//Passing classID as string and using IN operator in DB side for making common service
													classSectionIds = new StringBuffer();
													classSectionIds.append("("+className.getId()+")");
													subcastesCount = adminManager.getAllStudentsByClassNameAndCastAndSubCastName(getUserCustId(),getUserAcademicYearId(),castSettingList,classSectionIds.toString(),getUsername());
													if(!ObjectFunctions.isNullOrEmpty(subcastesCount)){
														excelView.getWs().addCell(new Label(cellstart,cellRowNum, className.getClassAndSection(),getCellFormatWhtXNoBold(10)));
													//	excelView.getWs().addCell(new Label(cellstart,cellRowNum, String.valueOf(className.getNoOfSections()),cellFormatWht10));
														cellstart++;
															for (int j = 0; j < subcastesCount.length; j++) {
																if(!ObjectFunctions.isNullOrEmpty(subcastesCount[j])){
																	excelView.getWs().addCell(new Label(cellstart,cellRowNum, subcastesCount[j].toString(),getCellFormatWhtXNoBold(10)));
																}
																else
																	excelView.getWs().addCell(new Label(cellstart,cellRowNum, "0",getCellFormatWhtXNoBold(10)));
																	
																	cellstart++;
																}
															}
															cellRowNum++;
															cellstart=0;
															subcastesCount=null;
												}
										
											int starts =1;
											Object[] totalStudentCasteCount  = null;
												//Passing classIDs as string and using IN operator in DB side for making common service
												classSectionIds = new StringBuffer();
												classSectionIds.append("(");
												for(StudyClass studyClass : classNameList)
												{
													classSectionIds.append(studyClass.getId());
													classSectionIds.append(",");
												}
												classSectionIds.append("0)");
												totalStudentCasteCount = adminManager.getAllStudentsByClassNameAndCastAndSubCastName(getUserCustId(),getUserAcademicYearId(),castSettingList,classSectionIds.toString(),getUsername());
												if(!ObjectFunctions.isNullOrEmpty(totalStudentCasteCount)){
												for (int l = 0; l < totalStudentCasteCount.length; l++) {
													if(!ObjectFunctions.isNullOrEmpty(totalStudentCasteCount[l])){
															excelView.getWs().addCell(new Label(starts,cellRowNum, totalStudentCasteCount[l].toString(),getCellFormatWhtX(11)));
													}else 
															excelView.getWs().addCell(new Label(starts,cellRowNum, "0",getCellFormatWhtX(10)));
													
													starts++;
												}
												cellRowNum++;
												starts=0;
												}
											}
											else{
												excelView.getWs().addCell(new Label(0,11, "Castes/Sub Castes are not defined", cellFormatWht10));
												excelView.getWs().mergeCells(0, 11, size,11);
											}
									}	
									else{
										excelView.getWs().addCell(new Label(0,5, "Communities/Castes are not defined", cellFormatWht10));
										excelView.getWs().mergeCells(0, 5, size,5);
									}
						excelView.getWb().write();
						excelView.getWb().close();
						
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		}
		public WritableCellFormat getCellFormatGrayRight10(){
			WritableFont boldfont8 = null;
			WritableCellFormat cellFormat8 = null;
			try {
				
				boldfont8 = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD, true);
				cellFormat8 = new WritableCellFormat(boldfont8);
				boldfont8.setColour(Colour.WHITE);
				cellFormat8 = ExcelView.getUserFormattedCell(boldfont8, Colour.GRAY_50, false,false, Alignment.RIGHT, VerticalAlignment.CENTRE,Border.NONE, BorderLineStyle.NONE);
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return cellFormat8;
		}
		
	@Actions({ @Action(value = "ajaxDoConsolidatedFeeCollectionDetails", results = { @org.apache.struts2.convention.annotation.Result(location = "../schoolfee/reports/ajaxDoFeeConsolidatedFeeDetails.jsp", name = "success") }) })
	public String ajaxDoConsolidatedFeeCollectionDetails()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoConsolidatedFeeCollectionDetails' method");
		}
		try {
			checkStudyClassHavingStudentsOrNot();
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return "success";
	}

	@Action(value = "ajaxGenerateStudentConsolidatedFeeDetails", results = {})
	public String ajaxGenerateStudentConsolidatedFeeDetails()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateStudentConsolidatedFeeDetails' method");
		}
		try {

			String fileName = "Consolidated_Studnet_Fee_Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			getResponse().setContentType("application/vnd.ms-excel");
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			org.apache.poi.ss.usermodel.Workbook wb = new HSSFWorkbook();
			HSSFSheet sheet = (HSSFSheet) wb.createSheet("Consolidated Report");
			Customer customer = getCustomerByCustId();
			String sizeOfFeeType = null;

			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				int rowNum = 0;
				int totalCellNum = 0;
				Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
				Row row = sheet.createRow(rowNum);
				row.setHeightInPoints(72);
				org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);

				String[] header = new String[] { "S.No.", "Admission Number","Student Name", "Total Amount", "Paid Amount","Concession Amount", "Discount Amount","Excess Amount", "Due Amount" };
				sizeOfFeeType = org.apache.poi.ss.util.CellReference.convertNumToColString(8);
				sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$"+ sizeOfFeeType + "$1"));
				cell.setCellValue(customer.getOrganization() + "\n"+ customer.getCustomerFormattedAddress() + "\n"+ "Consolidated Fee Collection Report");
				cell.setCellStyle(styles.get("title"));
				row = sheet.createRow(++rowNum);
				int cellNum = 0;
				for (String hea : header) {
					cell = row.createCell(cellNum++);
					cell.setCellValue(hea);
					cell.setCellStyle(styles.get("header"));
				}
				header=null;
				totalCellNum = cell.getColumnIndex();
				// Students Fee Details
				List<ViewStudentFeePaymentDetails> feePaidDetailsList = null;
				StringBuilder cellPosition = new StringBuilder();
				int sNo = 1;
				feePaidDetailsList = accountManager.getClassWiseConsolidatedStudentFeeDetails(getUserCustId(), getUserAcademicYearId(),getAnyId(), getWishTitle());
				if (!ObjectFunctions.isNullOrEmpty(feePaidDetailsList)) {
					sNo = 1;
					long classSectionId = 0;
					int count = 0;

					int startRow = 4;
					for (ViewStudentFeePaymentDetails feeSettingDetail : feePaidDetailsList) {
						if (feeSettingDetail.getClassSectionId() != classSectionId) {
							if (count > 0) {
								rowNum = classWiseTotalValues(sheet, row, cell,rowNum, startRow, styles, cellPosition);
								startRow = row.getRowNum() + 4;
							}
							row = sheet.createRow(++rowNum);
							sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum, 0, 8));
							cell = row.createCell(0);
							cell.setCellValue(StringFunctions.isNullOrEmpty(feeSettingDetail.getClassName())? " ": feeSettingDetail.getClassName());
							cell.setCellStyle(styles.get("headerBold"));

						}
						cellNum = 0;
						row = sheet.createRow(++rowNum);
						cell = row.createCell(cellNum++);
						cell.setCellValue(sNo++);
						cell.setCellStyle(styles.get("string"));

						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getAdmissionNumber(),styles);
						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getFullName(), styles);
						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getFeeAmount(),styles);
						//cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getPaymentAmount(),styles);
						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getPaidAmount(),styles);
						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum,feeSettingDetail.getConcessionAmount(), styles);
						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getDiscountAmount(),styles);
						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getExcessAmount(),styles);
						//cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getPaidAmount(),styles);
						cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, feeSettingDetail.getTotalBalanceAmount(),styles);

						classSectionId = feeSettingDetail.getClassSectionId();
						count++;
						if (count == feePaidDetailsList.size()) {
							rowNum = classWiseTotalValues(sheet, row, cell,rowNum, startRow, styles, cellPosition);
						}
						feeSettingDetail=null;
					}
					
					
					
				}
				feePaidDetailsList=null;
				rowNum = overAllotalValues(sheet, row, cell, rowNum, styles,cellPosition);
				rowNum++;
				log.info("getWishTitle()-->"+getWishTitle());
				if("Y".equalsIgnoreCase(getWishTitle())){
					rowNum = prepareStudentConsolidatedFeeRefunDetails(sheet,row,cell,rowNum,styles,cellNum);
				}
				showSchoolUrlInPOIExcelSheetFooter(wb, null, sheet, rowNum + 1,totalCellNum);
				feePaidDetailsList = null;
				Integer[] colwidths = { 7, 25, 35, 20, 20, 20, 20, 20, 20 };
				for (int i = 0; i < colwidths.length; i++) {
					sheet.setColumnWidth(i, colwidths[i] * 256);
				}
				colwidths=null;
				customer=null;
				styles=null;
				row=null;
			}
			wb.write(getResponse().getOutputStream());
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return null;
	}

	public int classWiseTotalValues(HSSFSheet sheet, Row row,org.apache.poi.ss.usermodel.Cell cell, int rowNum, int startRow,Map<String, CellStyle> styles, StringBuilder cellPosition) {
		try {
			row = sheet.createRow(++rowNum);
			cellPosition.append(rowNum + 1).append(",");
			sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 2));
			cell = row.createCell(0);
			cell.setCellValue("Class Wise Total");
			cell.setCellStyle(styles.get("headerBold"));
			for (int i = 3; i < 9; i++) {
				cell = row.createCell(i);
				String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(i);
				cell.setCellFormula("SUM(" + columnName + startRow + ":"+ columnName + (row.getRowNum()) + ")");
				cell.setCellStyle(styles.get("string"));
			}
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return rowNum;
	}

	public int overAllotalValues(HSSFSheet sheet, Row row,org.apache.poi.ss.usermodel.Cell cell, int rowNum,Map<String, CellStyle> styles, StringBuilder cellPosition) {
		try {
			StringBuilder cellValues = null;
			StringBuilder cellValuesSplit = null;
			String[] positionArry = cellPosition.toString().split(",");
			if(positionArry.length<=28){
				row = sheet.createRow(++rowNum);
				sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 2));
				cell = row.createCell(0);
				cell.setCellValue("Over All Total");
				cell.setCellStyle(styles.get("headerBold"));
				for (int i = 3; i < 9; i++) {
					cell = row.createCell(i);
					String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(i);
					cellValues=new StringBuilder();
					int k = 0;
					for (int j = 0; j < positionArry.length; j++) {
						cellValues.append(columnName).append(positionArry[j]);
						k++;
						if (k != positionArry.length)
							cellValues.append(",");
					}
					cell.setCellFormula("SUM(" + cellValues + ")");
					cell.setCellStyle(styles.get("string"));
				}
			}else{
				row = sheet.createRow(++rowNum);
				
				sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 2));
				cell = row.createCell(0);
				cell.setCellValue("Over All Total");
				cell.setCellStyle(styles.get("headerBold"));
				for (int i = 3; i < 9; i++) {
					cell = row.createCell(i);
					String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(i);
					cellValues=new StringBuilder();
					cellValuesSplit=new StringBuilder();
					int k = 0;
					for (int j = 0; j <=28; j++) {
						
							cellValuesSplit.append(columnName).append(positionArry[j]);
							
						//cellValues.append(columnName).append(positionArry[j]);
						k++;
						if(k!=29)
							cellValuesSplit.append(",");
					}
					cell.setCellFormula("SUM(" + cellValuesSplit + ")");
					cell.setCellStyle(styles.get("string"));
				}
				row.setZeroHeight(true);
				row = sheet.createRow(++rowNum);
				sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 2));
				cell = row.createCell(0);
				cell.setCellValue("Over All Total");
				cell.setCellStyle(styles.get("headerBold"));
				for (int i = 3; i < 9; i++) {
					cell = row.createCell(i);
					String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(i);
					cellValues=new StringBuilder();
					cellValuesSplit=new StringBuilder();
					int k = 29;
					for (int j = 29; j < positionArry.length; j++) {
						if(k==29)
							cellValues.append(columnName).append(rowNum).append(",");
							
						cellValues.append(columnName).append(positionArry[j]);
						k++;
						if(k!=positionArry.length)
							cellValues.append(",");
					}
					cell.setCellFormula("SUM(" + cellValues + ")");
					cell.setCellStyle(styles.get("string"));
				}
			}
			
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return rowNum;
	}

	public int rowStudnetConsolicatedDetails(Row row,org.apache.poi.ss.usermodel.Cell cell, int cellNum, String data,Map<String, CellStyle> styles) {
		try {
			cell = row.createCell(cellNum++);
			cell.setCellValue(data);
			cell.setCellStyle(styles.get("string"));
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return cellNum;
	}

	public int rowStudnetConsolicatedDetails(Row row,org.apache.poi.ss.usermodel.Cell cell, int cellNum, double data,Map<String, CellStyle> styles) {
		try {
			cell = row.createCell(cellNum++);
			cell.setCellValue(data);
			cell.setCellStyle(styles.get("string"));
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return cellNum;
	}
	

	public String generateAttendanceNotSubmittedReport(Customer customer,String studyClassIdsArr[],AcademicYear year,String[] montNames){
		if (log.isDebugEnabled()) {
			log.debug("Entering AdminManager 'generateAttendanceNotSubmittedReport' method");
		}
		try {
			int monthId;
			String classIdsArr[] = getSelectedId().replace("0)", "").replace("(", "").split(",");
			if (getUserAcademicYearId() != 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
				String fileName = "Attendance_Not_Submitted_Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				ExcelView excelView = new ExcelView();
				getResponse().setContentType(excelView.getMimeType());
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
				//For School Address
				WritableCellFormat cellFormat8= getCellFormat8();
				//For School name
				WritableCellFormat cellFormat10= getCellFormat10();
				WritableCellFormat cellFormat =getCellFormat();
				//Customer customer = getCustomerByCustId();
				String commaDelimitedString = StringUtil.convertListToString(Arrays.asList(studyClassIdsArr));
				List<Object[]> studyClassObjList = 	adminManager.getAll("select sc.id,sc.className,"
								+ "trim(CONCAT(IFNULL(p.firstName,''),' ',IFNULL(p.lastName ,''))) as staffName ,"
								+ "trim(CONCAT(IFNULL(sc.className,''),' ',IFNULL(sc.section ,''))) as ClassAndSection ,"
								+ "trim(CONCAT(IFNULL(p.mobileNumber,''),' ',IFNULL(p.phoneNumber ,''))) as phoneNumber "
								+ "from studyClass sc left join classTeacher ct ON (ct.studyClassId = sc.id and ct.classTeacher ='Y' ) "
								+ "left join staff s ON(s.id = ct.teacherId) left join Account a ON(a.id = s.accountId) left join Person p ON(p.id = a.personId) "
								+ " where sc.custId = "
								+ customer.getId()
								+ " and sc.id in ( "+commaDelimitedString 
								+ ") and sc.academicYearId = "
								+ year.getId()
								+ " and  sc.filledSeats > 0 and sc.id not in (0)  group by sc.id");

				for(Object[] studyClassObj : studyClassObjList) {
					if(Long.valueOf(studyClassObj[0].toString())>0){
						String classId= studyClassObj[0].toString();
						excelView.setWorkSheetName(studyClassObj[1].toString()+" class");
						excelView.createWorkSheet(0);

						excelView.setDefaultFormat(excelView.getArial10format());
						if (!ObjectFunctions.isNullOrEmpty(customer)) {
							if(!ObjectFunctions.isNullOrEmpty(customer.getOrganization())){
								excelView.getWs().mergeCells(0, 0, 6,1);
								excelView.getWs().addCell(new Label(0,0, customer.getOrganization(), cellFormat10));
							}
							if(StringFunctions.isNotNullOrEmpty(customer.getCustomerFormattedAddress())){
								excelView.getWs().mergeCells(0, 2, 6,2);
								excelView.getWs().addCell(new Label(0,2, customer.getCustomerFormattedAddress(), cellFormat8));
							}
						}
						excelView.getWs().setColumnView(0,10);
						excelView.getWs().setColumnView(1,30);
						excelView.getWs().setColumnView(2,25);
						excelView.getWs().mergeCells(0, 3, 6, 3);
						excelView.getWs().addCell(new Label(0,3, "Attendance Not Submitted Dates",cellFormat));
						excelView.getWs().mergeCells(0, 4, 6,4);
						excelView.getWs().addCell(new Label(0,4, studyClassObj[3].toString() +" - Class Teacher :" + studyClassObj[2].toString(), cellFormat));
						int cellStart = 0;
						int row = 6;
						String monthIds = "";
						boolean isFirst = false;
						for (String monthName : montNames) 
						{	
							excelView.getWs().setColumnView(cellStart,30);
							monthId = getMonthNumberFromMonthName(monthName);
							//excelView.getWs().addCell(new Label(cellStart,5,monthName, excelView.getWrapCellFormat()));
							cellStart++;
							monthId = getMonthNumberFromMonthName(monthName);
							if(!isFirst){
								monthIds = monthId+"";
								isFirst = true;
							}else{
								monthIds = monthIds +","+ monthId;
							}
						}
						excelView.getWs().setColumnView(cellStart,30);
						excelView.getWs().setColumnView(cellStart+1,30);
						cellStart=0;
						List<Object[]> attedanceNotSubmittedDetails = adminManager.getAttendanceNotSubmittedDates(Long.parseLong(classId),year.getId(),monthIds);
						String monthName = "";
						int col = 0;
						boolean isFirstCol  = true;
						if (!ObjectFunctions.isNullOrEmpty(attedanceNotSubmittedDetails)) {
							for(Object[] attendanceDates :attedanceNotSubmittedDetails){

								if(!monthName.equalsIgnoreCase(attendanceDates[0].toString().trim())){
									monthName = attendanceDates[0].toString().trim();
									if(isFirstCol){
										isFirstCol = false;
									}else{
										col = col + 1;
									}
									excelView.getWs().addCell(new Label(col,5,monthName, cellFormat));
									row = 6;
								}
								excelView.getWs().addCell(new Label(col,row, String.valueOf(attendanceDates[1]), excelView.getDefaultFormat()));
								row = row+1;
							}
						}else{
							excelView.getWs().mergeCells(0, 8, 6,8);
							excelView.getWs().addCell(new Label(0,8, "Attendance was submitted for all days. ", cellFormat));
						}
					}
					excelView.getWb().write();
					excelView.getWb().close();
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
}
	@Actions( { 
        @Action(value = "ajaxStudentFeeRefundPdfReport", results = {@Result(location = "../admin/reports/popupViewStudentFeeRefundReciept.jsp", name = "success")}) })
    public String ajaxStudentFeeRefundPdfReport() throws URTUniversalException {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'ajaxStudentFeeRefundPdfReport' method");
    }
    StudentPayment studentPayment = null;
    Object[] totalConfiigureAmount=null;
    Object[] totalTransportConfiigureAmount=null;
	Object[] totalPaidAmount=null;
	Object[] totalTransportPaidAmount=null;
	double totalAmount=0;
	double paymentAmount=0;
	double discountAmount=0;
	double paymentConcessionAmount=0;
	Object[] paidAmount= null;
    try {
        AcademicYear academicYear = getCurrentAcademicYear();
        setAcademicYear(academicYear);
        if(getAcademicYearId() != getUserAcademicYearId() && getAcademicYearId() > 0){
            setAcademicYearId(getAcademicYearId()); 
        }else{
        	setAcademicYearId(getUserAcademicYearId());
        }
        String paybtn = getParamValue("downloadrecipt");
        String spId = getParamValue("spId");
        setAnyTitle(getParamValue("createdDate"));
        if(!StringFunctions.isNullOrEmpty(getParamValue("plTitle"))){
        	setPlTitle(getParamValue("plTitle"));
        }
        //Here get the refund amount in words from page
        setPlTitle(getPlTitle());
        if(!StringFunctions.isNullOrEmpty(spId)){
	        setCustomer(getCustomerByCustId());
	        //Added By Siva for displaying country currency symbol
	        setCountry((Country)adminManager.get(Country.class, getCustomer().getAddress().getCountryId()));
	        setViewStudentClassDetails((ViewStudentClassDetails)adminManager.get(ViewStudentClassDetails.class,"studId="+spId+" and custId="+getUserCustId()));
	        if(!ObjectFunctions.isNullOrEmpty(getViewStudentClassDetails())){
	        	StudentFeeRefund studentFeeRefund = (StudentFeeRefund)schoolFeeManager.get(StudentFeeRefund.class,"studentId="+spId);
	        	if(!ObjectFunctions.isNullOrEmpty(studentFeeRefund)){
	        		setStudentFeeRefund(studentFeeRefund);
	        		//Setting Invoice Number
	        		setAnyId(studentFeeRefund.getInvoiceNumberStr());
	        		//Setting Invoice String
	        		setAlertSendType(studentFeeRefund.getInvoiceString());
	        	}
	        	
	        }
        }
    } catch (Exception ex) {
        ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
        JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
    }
    finally{
    	studentPayment=null;
    }
    return SUCCESS;
    }
	
	public int prepareStudentFeeRefundDetails(ExcelView excelView,int rowCount,WritableCellFormat cellFormatGray8,WritableCellFormat cellFormatLeft,WritableCellFormat cellFormatRight,WritableCellFormat cellFormatBoldRight,long custId,long academicYearId,String classSectionIds){
		try {

			List<ViewStudentFeeRefundDetails> studentFeeRefundDetails = accountManager.getAll(ViewStudentFeeRefundDetails.class, "custId="+custId+" and academicYearId="+academicYearId+" and classSectionId in "+classSectionIds);
			if(!ObjectFunctions.isNullOrEmpty(studentFeeRefundDetails)){
				double totalRefundAmount=0;
				rowCount++;
				excelView.getWs().mergeCells(0, rowCount,7, rowCount);
				excelView.getWs().addCell(new Label(0,rowCount,"Refund Amount Details",cellFormatGray8));
				rowCount++;
				
				excelView.getWs().addCell(new Label(0, rowCount,"Admission No", cellFormatGray8));
				excelView.getWs().addCell(new Label(1, rowCount, "Student Name",cellFormatGray8));
				excelView.getWs().addCell(new Label(2, rowCount,"Class & Section",cellFormatGray8));
				excelView.getWs().addCell(new Label(3, rowCount,"Invoice Number",cellFormatGray8));
				excelView.getWs().addCell(new Label(4, rowCount,"Refund Date",cellFormatGray8));
				excelView.getWs().addCell(new Label(5, rowCount,"Paid Amount",cellFormatGray8));
				excelView.getWs().addCell(new Label(6, rowCount,"Refund Mode",cellFormatGray8));
				excelView.getWs().addCell(new Label(7, rowCount,"Refund Amount",cellFormatGray8));
				rowCount++;
				for(ViewStudentFeeRefundDetails studFeeRefundDetails : studentFeeRefundDetails){
					excelView.getWs().addCell(new Label(0, rowCount, studFeeRefundDetails.getAdmissionNumber(),cellFormatLeft));
					excelView.getWs().addCell(new Label(1, rowCount, studFeeRefundDetails.getFullName(),cellFormatLeft));
					excelView.getWs().addCell(new Label(2, rowCount, studFeeRefundDetails.getClassNameAndSection(),cellFormatLeft));
					excelView.getWs().addCell(new Label(3, rowCount, String.valueOf(studFeeRefundDetails.getInvoiceNumber()),cellFormatLeft));
					excelView.getWs().addCell(new Label(4, rowCount,studFeeRefundDetails.getRefundDateStr(),cellFormatRight));
					excelView.getWs().addCell(new jxl.write.Number(5, rowCount, studFeeRefundDetails.getTotalFeeAmount(),cellFormatRight));
					excelView.getWs().addCell(new Label(6, rowCount,studFeeRefundDetails.getPaymentModeStr(),cellFormatRight));
					excelView.getWs().addCell(new jxl.write.Number(7, rowCount, studFeeRefundDetails.getRefundAmount(),cellFormatRight));
					rowCount++;
					totalRefundAmount=(totalRefundAmount+studFeeRefundDetails.getRefundAmount());
				}
				excelView.getWs().mergeCells(0, rowCount, 6, rowCount);
				excelView.getWs().addCell(new Label(0, rowCount, "Total Refund Amount",cellFormatBoldRight));
				excelView.getWs().addCell(new jxl.write.Number(7, rowCount, totalRefundAmount,cellFormatRight));
				rowCount=rowCount+2;
			}
		
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return rowCount;
	}
	public int prepareStudentConsolidatedFeeRefunDetails(HSSFSheet sheet, Row row,org.apache.poi.ss.usermodel.Cell cell, int rowNum,Map<String, CellStyle> styles,int cellNum){
		try {
			StringBuilder query = new StringBuilder("custId="+getUserCustId()+" AND academicYearId="+getUserAcademicYearId());
			if(!StringFunctions.isNullOrEmpty(getAnyId()))
				query.append(" AND classSectionId IN ").append(getAnyId());
			query.append(" order by refundDate DESC");
			List<ViewStudentFeeRefundDetails> studentFeeRefundDetails = accountManager.getAll(ViewStudentFeeRefundDetails.class, query.toString());
			if(!ObjectFunctions.isNullOrEmpty(studentFeeRefundDetails)){
				String[]  header = new String[] {"S.No.","Admission Number","Student Name", "Class & Section", "Invoice Number","Refund Date", "Paid Amount","Refund Mode", "Refund Amount" };
				row = sheet.createRow(rowNum=(rowNum+2));
				sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 8));
				cell = row.createCell(0);
				cell.setCellValue("Refund Amount Details");
				cell.setCellStyle(styles.get("headerBold"));
				
				row = sheet.createRow(++rowNum);
				cellNum = 0;
				for (String hea : header) {
					cell = row.createCell(cellNum++);
					cell.setCellValue(hea);
					cell.setCellStyle(styles.get("header"));
				}
				header=null;
				int startRow=0;
				startRow = (rowNum+2);
				int sNo=1;
				for(ViewStudentFeeRefundDetails viewStudentFeeRefundDetails : studentFeeRefundDetails){
					cellNum = 0;
					row = sheet.createRow(++rowNum);
					cell = row.createCell(cellNum++);
					cell.setCellValue(sNo++);
					cell.setCellStyle(styles.get("string"));
					
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getAdmissionNumber(),styles);
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getFullName(),styles);
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getClassNameAndSection(),styles);
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getInvoiceNumber(),styles);
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getRefundDateStr(),styles);
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getTotalFeeAmount(),styles);
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getPaymentModeStr(),styles);
					cellNum = rowStudnetConsolicatedDetails(row, cell,cellNum, viewStudentFeeRefundDetails.getRefundAmount(),styles);
				}

				row = sheet.createRow(++rowNum);
				sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 7));
				cell = row.createCell(0);
				cell.setCellValue("Over All Refund Total");
				cell.setCellStyle(styles.get("headerBold"));
				cell = row.createCell(8);
				String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(8);
				cell.setCellFormula("SUM(" + columnName + startRow + ":"+ columnName + (row.getRowNum()) + ")");
				cell.setCellStyle(styles.get("string"));
			
			}
		
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return rowNum;
	}
	
	@Action(value = "ajaxGenerateStudentFeeRefundExcel", results = {})
	public String ajaxGenerateStudentFeeRefundExcel() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateStudentFeeRefundExcel' method");
		}
		try {

			String fileName = "Studnet_Fee_Refund_Details"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			getResponse().setContentType("application/vnd.ms-excel");
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			org.apache.poi.ss.usermodel.Workbook wb = new HSSFWorkbook();
			HSSFSheet sheet = (HSSFSheet) wb.createSheet("Fee Refund Details");
			Customer customer = getCustomerByCustId();
			String sizeOfFeeType = null;

			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				int rowNum = 0;
				Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
				Row row = sheet.createRow(rowNum);
				row.setHeightInPoints(72);
				org.apache.poi.ss.usermodel.Cell cell = row.createCell(0);

				//String[] header = new String[] { "S.No.", "Admission Number","Student Name", "Total Amount", "Paid Amount","Concession Amount", "Discount Amount","Excess Amount", "Due Amount" };
				sizeOfFeeType = org.apache.poi.ss.util.CellReference.convertNumToColString(8);
				sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$"+ sizeOfFeeType + "$1"));
				cell.setCellValue(customer.getOrganization() + "\n"+ customer.getCustomerFormattedAddress() + "\n"+ "Student Fee Refund Details Report");
				cell.setCellStyle(styles.get("title"));
				int cellNum=0;
				rowNum = prepareStudentConsolidatedFeeRefunDetails(sheet,row,cell,rowNum,styles,cellNum);
				showSchoolUrlInPOIExcelSheetFooter(wb, null, sheet, rowNum + 1,8);
				Integer[] colwidths = { 7, 25, 35, 20, 20, 20, 20, 20, 20 };
				for (int i = 0; i < colwidths.length; i++) {
					sheet.setColumnWidth(i, colwidths[i] * 256);
				}
				colwidths=null;
				customer=null;
				styles=null;
				row=null;
			}
			wb.write(getResponse().getOutputStream());
		} catch (Exception ex) {
			commonJREException(ex);
		}
		return null;
	}
	
	@Actions( {
		@Action(value = "ajaxDoMotherTongueWiseSummaryDetails", results = { @Result(location = "../admin/reports/ajaxMotherTongueStudentSummaryReports.jsp", name = "success")}) }) 
	public String ajaxDoMotherTongueWiseSummaryDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoMotherTongueWiseSummaryDetails' method");
		}
		try {
			//getting mother tongue id's for student of current acadamic year.
			List<Long> motherTongIds = studentManager.getAll("Select distinct(p.motherToungId) 	FROM student s JOIN Account a ON (s.accountId = a.id)	"
			 		+ "LEFT JOIN Person p ON (a.personId = p.id)	LEFT JOIN studyClass c ON (c.id = s.classSectionId) LEFT JOIN motherTongue mtype ON (mtype.id = p.motherToungId)"
			 		+ "	WHERE a.custId ="
			 		+ getUserCustId()
			 		+ " AND s.academicYearId = "
			 		+ getUserAcademicYearId() );
			 		
			setMotherTongueList(studentManager.getAll(MotherTongue.class,"id in ("+ StringFunctions.convertListToCommaDelimitedString(motherTongIds)+ ")"));
		    checkStudyClassHavingStudentsOrNot();
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/**
	 * @return the motherTongueList
	 */
	public List<MotherTongue> getMotherTongueList() {
		return motherTongueList;
	}
	/**
	 * @param motherTongueList the motherTongueList to set
	 */
	public void setMotherTongueList(List<MotherTongue> motherTongueList) {
		this.motherTongueList = motherTongueList;
	}
	/**
	 * Generates studnet count details report with respective to monther tongue wise.
	 * @return
	 * @throws URTUniversalException
	 */
	@Actions( { @Action(value = "ajaxMotherTongueTypeReports",  results = {})})
	public String ajaxMotherTongueTypeReports()		throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxMotherTongueTypeReports' method");
		}
		try {
			List<MotherTongue> motherTongueList = (List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST);
			Map<Long,String> motherTongueNamesMap = new HashMap<Long,String>();
			for(MotherTongue obj  :motherTongueList){
				motherTongueNamesMap.put(obj.getId(), obj.getName());
			}
			motherTongueNamesMap.put(0L, "No Mother Tongue");
			List<Object[]> motherTongueSummaryList = studentManager.getAllMotherTongueWiseStudentSummaryDetails(getUserCustId(),getUserAcademicYearId(),getSelectedId(),getSelectedMotherTongueId());
			String motherTongIds = getSelectedMotherTongueId();
			String[] motherTongueIdArr = StringUtils.commaDelimitedListToStringArray((motherTongIds.replace("(","")).replace(")",""));
			String fileName = "Mother_Tongue_Wise_Student_Summary_Details_Report_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			getResponse().setContentType("application/vnd.ms-excel");
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			org.apache.poi.ss.usermodel.Workbook wb = new HSSFWorkbook();
			HSSFSheet sheet = (HSSFSheet) wb.createSheet("MotherTongueReport");
			Customer customer = getCustomerByCustId();
			String mergeCellPosition1 = null;
			String mergeCellPosition2 = null;
			int size = (motherTongueIdArr.length *2);
			int rowNum = 0;
			int cellNum = 0;
			long classSectionId = 0;
			int classId =0;
			int colPosition =0;
			int boysCell =1;
			int girlCell = 2;
			
			Map<String, CellStyle> styles = PrepareStudentExcel.createStyles(wb);
			Row row = sheet.createRow(rowNum);
			row.setHeightInPoints(25);
			org.apache.poi.ss.usermodel.Cell cell ;
			for(int i= 0;i <=size ;i++){
				cell = row.createCell(i);
				cell.setCellStyle(styles.get("titleBorder"));
			}
			cell = row.createCell(0);
			String sizeOfType = org.apache.poi.ss.util.CellReference.convertNumToColString(size >6 ?size:6);
			sheet.addMergedRegion(CellRangeAddress.valueOf("$A$1:$"+ sizeOfType + "$1"));
			cell.setCellValue(customer.getOrganization());
			cell.setCellStyle(styles.get("titleBorder"));
			rowNum =1;
			row = sheet.createRow(rowNum);
			row.setHeightInPoints(30);
			for(int i= 0;i <=size ;i++){
				cell = row.createCell(i);
				cell.setCellStyle(styles.get("subtitleBorder"));
			}
			cell = row.createCell(0);
			sheet.addMergedRegion(CellRangeAddress.valueOf("$A$2:$"+ sizeOfType + "$2"));
			cell.setCellValue(customer.getCustomerFormattedAddress());
			cell.setCellStyle(styles.get("subtitleBorder"));
			rowNum =2;
			row = sheet.createRow(rowNum);
			row.setHeightInPoints(15);
			for(int i= 0;i <=size ;i++){
				cell = row.createCell(i);
				cell.setCellStyle(styles.get("titleHeaderBorder"));
			}
			cell = row.createCell(0);
			sheet.addMergedRegion(CellRangeAddress.valueOf("$A$3:$"+ sizeOfType + "$3"));
			cell.setCellValue(" MOTHER TONGUE WISE STUDENTS COUNT");
			cell.setCellStyle(styles.get("titleHeaderBorder"));
			
			rowNum =3;
			row = sheet.createRow(rowNum);
			Map<String,Integer> motherTongueColPostionMap = new HashMap<String,Integer>();
			if(!ObjectFunctions.isNullOrEmpty(motherTongueSummaryList)){
				cell = row.createCell(cellNum);
				sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum+1,0,0));
				cell.setCellValue("CLASS");
				cell.setCellStyle(styles.get("totalBold"));
				cellNum = 1;
				for(int i=0 ;i< motherTongueIdArr.length ;i++){
					motherTongueColPostionMap.put(motherTongueIdArr[i].trim(), cellNum);
					cell = row.createCell(cellNum);
					sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum,cellNum,cellNum+1));
					cell.setCellValue(motherTongueNamesMap.get(Long.parseLong((motherTongueIdArr[i].trim()).toString())));
					cell.setCellStyle(styles.get("totalBold"));
					cell = row.createCell(cellNum+1);
					cell.setCellStyle(styles.get("totalBold"));
					cellNum = cellNum + 2;
				}
				cellNum = 1;
				rowNum = rowNum+1;
				row = sheet.createRow(rowNum);
				cell = row.createCell(0);
				cell.setCellStyle(styles.get("totalBold"));
				for(int i=0 ;i< motherTongueIdArr.length ;i++){
					
					cell = row.createCell(boysCell);
					cell.setCellValue("BOYS");
					cell.setCellStyle(styles.get("totalBold"));
					cell = row.createCell(girlCell);
					cell.setCellValue("GIRLS");
					cell.setCellStyle(styles.get("totalBold"));
					boysCell = boysCell +2;
					girlCell = girlCell +2;
					cellNum = cellNum + 2;
				}
				rowNum = rowNum + 1;
				int previousrowNumber = 6; // first row of data
				StringBuffer totalRowNumbers = new StringBuffer();
				for(Object[] studentSummaryDetails : motherTongueSummaryList){
					
					if(classId != Integer.parseInt(studentSummaryDetails[4].toString()) && classSectionId > 0 ){
						classId =Integer.parseInt(studentSummaryDetails[4].toString());
						row = sheet.createRow(rowNum);
						cell = row.createCell(0);
						cell.setCellValue("TOTAL");
						cell.setCellStyle(styles.get("totalBold"));
						totalRowNumbers = totalRowNumbers.append(rowNum + 1).append(",");
						for(int m =1 ;m <= size ;m++){
							cell = row.createCell(m);
							String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(m);
							cell.setCellFormula("SUM(" + columnName + previousrowNumber + ":"+ columnName + (row.getRowNum()) + ")");
							cell.setCellStyle(styles.get("totalBold"));
						}
						previousrowNumber = rowNum +2;
						rowNum = rowNum + 1;
					}else{
						classId =Integer.parseInt(studentSummaryDetails[4].toString());
					}
					if(classSectionId != Integer.parseInt(studentSummaryDetails[3].toString())){
						classSectionId =Integer.parseInt(studentSummaryDetails[3].toString());
						row = sheet.createRow(rowNum);
						colPosition = motherTongueColPostionMap.get(studentSummaryDetails[0].toString().trim());
						cell = row.createCell(0);
						cell.setCellValue(String.valueOf(studentSummaryDetails[2]));
						cell.setCellStyle(styles.get("cell"));
						for(int m =1 ;m < cellNum ;m++){
							cell = row.createCell(m);
							cell.setCellValue(0);
							cell.setCellStyle(styles.get("cell"));
						}
						rowNum = rowNum + 1;	
					}
					colPosition = motherTongueColPostionMap.get(studentSummaryDetails[0].toString().trim());
					cell = row.createCell(colPosition);
					cell.setCellValue(Integer.parseInt(String.valueOf(studentSummaryDetails[5])));
					cell.setCellStyle(styles.get("cell"));

					cell = row.createCell(colPosition+1);
					cell.setCellValue(Integer.parseInt(String.valueOf(studentSummaryDetails[6])));
					cell.setCellStyle(styles.get("cell"));
					
				}
				// for last class total
				row = sheet.createRow(rowNum);
				cell = row.createCell(0);
				cell.setCellValue("TOTAL");
				cell.setCellStyle(styles.get("totalBold"));
				totalRowNumbers = totalRowNumbers.append(rowNum + 1).append(",");
				for(int m =1 ;m <= size ;m++){
					cell = row.createCell(m);
					String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(m);
					cell.setCellFormula("SUM(" + columnName + previousrowNumber + ":"+ columnName + (row.getRowNum()) + ")");
					cell.setCellStyle(styles.get("totalBold"));
					
				}
				rowNum = rowNum + 1;	
				//Grand Total
				StringBuilder cellValues = null;
				StringBuilder cellValuesSplit = null;
				String[] positionArry = totalRowNumbers.toString().split(",");
				row = sheet.createRow(rowNum);
				cell = row.createCell(0);
				cell.setCellValue("GRAND TOTAL");
				cell.setCellStyle(styles.get("grandTotalBold"));
				for(int m =1 ;m <= size ;m++){
					cell = row.createCell(m);
					String columnName = org.apache.poi.ss.util.CellReference.convertNumToColString(m);
					cellValues=new StringBuilder();
					int k = 0;
					for (int j = 0; j < positionArry.length; j++) {
						cellValues.append(columnName).append(positionArry[j]);
						k++;
						if (k != positionArry.length)
							cellValues.append(",");
					}
					cell.setCellFormula("SUM(" + cellValues + ")");
					cell.setCellStyle(styles.get("grandTotalBold"));
				}
			
				showSchoolUrlInPOIExcelSheetFooter(wb, null, sheet, rowNum + 1,size);
				
				sheet.setColumnWidth(0, 15*256);
				sheet.setColumnWidth((motherTongueIdArr.length *2), 16*256);
				customer=null;
				styles=null;
				row=null;
				wb.write(getResponse().getOutputStream());
			}
 
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	/**
	 * @return the selectedMotherTongueId
	 */
	public String getSelectedMotherTongueId() {
		return selectedMotherTongueId;
	}
	/**
	 * @param selectedMotherTongueId the selectedMotherTongueId to set
	 */
	public void setSelectedMotherTongueId(String selectedMotherTongueId) {
		this.selectedMotherTongueId = selectedMotherTongueId;
	}
	
	@Actions( {
		@Action(value = "ajaxGetStudyClassesWithStudents", results = { @Result(location = "../admin/reports/ajaxDoViewClassDetails.jsp", name = "success")}) }) 
	public String ajaxGetStudyClassesWithStudents() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoComunityDetails' method");
		}
		try {
			
			 setStudyClassList(adminManager.getAll(StudyClass.class,"custId=" + getUserCustId() + " and academicYearId="+ getUserAcademicYearId()+" and filledSeats > 0"));
			 Collections.sort(getStudyClassList());
			
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions({
		@Action(value = "ajaxParentOccuptationChart", results = {  @Result(type = "json", name = "success", params = {"includeProperties","wishDescription" }) })
	})
		public String ajaxParentOccuptationChart() throws URTUniversalException {
		
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxParentOccuptationChart' method");
		}
		try
		{
			List<Object[]> parentOcupationList = adminManager.getParentOccupationDetails(getUserCustId(), getUserAcademicYearId(), getSelectedId());
					if(ObjectFunctions.isNotNullOrEmpty(parentOcupationList)){
					JSONObject ja = new JSONObject();
					JSONArray totalSeriesArray=new JSONArray();
					JSONObject seriesObj = new JSONObject();
					JSONObject j;
					StringBuffer query = null;
					for(Object[] occupation : parentOcupationList){
						seriesObj=new JSONObject();
						seriesObj.put("name", occupation[0].toString());
						seriesObj.put("y", Integer.parseInt( occupation[1].toString()));
						totalSeriesArray.put(seriesObj);
				    }
					ja.put("series", totalSeriesArray);
					JSONArray out = new JSONArray();
					JSONObject obj = new JSONObject();
					obj.put("name", "Result");
					obj.put("colorByPoint", true);
					obj.put("data", totalSeriesArray);
					out.put(obj);
					getResponse().getOutputStream().print(out.toString());
					log.debug(out.toString());
					totalSeriesArray=null;
				}
			}catch(Exception ex) {
				ex.printStackTrace();
			}
			return null;
	    }
	@Actions( {
		@Action(value = "ajaxGetClassWithStudentList", results = { @Result(location = "../admin/reports/ajaxDoViewClassDetailsForParentWiseIncome.jsp", name = "success")}) }) 
	public String ajaxGetClassWithStudentList() throws URTUniversalException {
		if (log.isInfoEnabled()) {
			log.info("Entering 'ajaxGetClassWithStudentList' method");
		}
		try {
			List<ParentIncomeRange> incomeList = adminManager.getAll(ParentIncomeRange.class);
			List<ParentIncomeRange> parentIncomeList = new ArrayList<ParentIncomeRange>();
			if(!ObjectFunctions.isNullOrEmpty(incomeList)){
				for(ParentIncomeRange parentIncome : incomeList){
					ParentIncomeRange rangevalue= new ParentIncomeRange();
					rangevalue.setId(parentIncome.getId());
					rangevalue.setMaxRange(parentIncome.getMaxRange());
					rangevalue.setMinRange(parentIncome.getMinRange());
					if(parentIncome.getId() == incomeList.size())
						rangevalue.setRangeValues("Range "+parentIncome.getId()+" ("+parentIncome.getMinRange()+"-"+parentIncome.getMaxRange()+" and Above)");
					else
						rangevalue.setRangeValues("Range "+parentIncome.getId()+" ("+parentIncome.getMinRange()+"-"+parentIncome.getMaxRange()+")");
					parentIncomeList.add(rangevalue);
					rangevalue = null;
				}
				setParentIncomeRangesList(parentIncomeList);
			}
			setStudyClassList(adminManager.getAll(StudyClass.class,"custId=" + getUserCustId() + " and academicYearId="+ getUserAcademicYearId()+" and filledSeats > 0"));
			Collections.sort(getStudyClassList());
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return SUCCESS;
	}
	@Actions({
		@Action(value = "ajaxParentIncomeWiseChart", results = {  @Result(type = "json", name = "success", params = {"includeProperties","wishDescription" }) })
	})
		public String ajaxParentIncomeWiseChart() throws URTUniversalException {
		
		if (log.isInfoEnabled()) {
			log.info("Entering 'ajaxParentIncomeWiseChart' method");
		}
		try
		{
			List<Object[]> parentOcupationList = adminManager.getParentIncomeWiseDetails(getUserCustId(), getUserAcademicYearId(), getSelectedId(),getSelectedIncomeId());
					if(ObjectFunctions.isNotNullOrEmpty(parentOcupationList)){
					JSONObject ja = new JSONObject();
					JSONArray totalSeriesArray=new JSONArray();
					JSONObject seriesObj = new JSONObject();
					JSONObject j;
					StringBuffer query = null;
					boolean isNoData = false;
					int listSize = parentOcupationList.size();
					for(Object[] incomeRange : parentOcupationList){
						if(listSize == 1 && Integer.parseInt( incomeRange[1].toString()) == 0 ){
							isNoData = true;
							continue;
						}
						seriesObj=new JSONObject();
						seriesObj.put("name", incomeRange[0].toString());
						seriesObj.put("y", Integer.parseInt( incomeRange[1].toString()));
						totalSeriesArray.put(seriesObj);
				    }
					if(!isNoData){
						ja.put("series", totalSeriesArray);
						JSONArray out = new JSONArray();
						JSONObject obj = new JSONObject();
						obj.put("name", "Result");
						obj.put("colorByPoint", true);
						obj.put("data", totalSeriesArray);
						out.put(obj);
						getResponse().getOutputStream().print(out.toString());
					 }else{
						 getResponse().getOutputStream().print(null);
					 }
					totalSeriesArray=null;
				}
			}catch(Exception ex) {
				ex.printStackTrace();
			}
			return null;
	    }

}