package com.urt.webapp.action.admin;

import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.zip.ZipOutputStream;

import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.SimpleDoc;
import javax.servlet.ServletOutputStream;

import jxl.Cell;
import jxl.CellView;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.Colour;
import jxl.format.VerticalAlignment;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRXlsAbstractExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Actions;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper;
import org.hibernate.persister.entity.AbstractEntityPersister;
import org.springframework.dao.DataAccessException;
import org.w3c.dom.Document;

import com.ccavenue.security.AesCryptUtil;
import com.churchgroup.common.constants.Constants;
import com.churchgroup.util.date.DateFormatter;
import com.churchgroup.util.date.DateFunctions;
import com.churchgroup.util.date.DateUtil;
import com.churchgroup.util.image.CropImage;
import com.churchgroup.util.image.ThumbNail;
import com.churchgroup.util.object.ConvertUtil;
import com.churchgroup.util.object.ObjectFunctions;
import com.churchgroup.util.pdf.PDFGenerator;
import com.churchgroup.util.pdf.PdfHeaderFooterMarkJasper;
import com.churchgroup.util.string.StringFunctions;
import com.churchgroup.util.string.StringUtil;
import com.churchgroup.util.xls.ExcelView;
import com.ecwid.mailchimp.MailChimpClient;
import com.ecwid.mailchimp.MailChimpObject;
import com.ecwid.mailchimp.method.v1_3.campaign.CampaignCreateMethod;
import com.ecwid.mailchimp.method.v1_3.campaign.CampaignSendNowMethod;
import com.ecwid.mailchimp.method.v1_3.campaign.CampaignType;
import com.ecwid.mailchimp.method.v1_3.list.ListInformation;
import com.ecwid.mailchimp.method.v1_3.list.ListsMethod;
import com.ecwid.mailchimp.method.v1_3.list.ListsResult;
import com.ecwid.mailchimp.method.v2_0.lists.Email;
import com.ecwid.mailchimp.method.v2_0.lists.SubscribeMethod;
import com.hyniva.common.cache.SMSLookUpDataCache;
import com.hyniva.mailchimp.service.CampaignReportMethod;
import com.hyniva.mailchimp.service.ListCampaigsMethod;
import com.hyniva.mailchimp.service.MergeVars;
import com.hyniva.sms.ws.vo.AcademicYearVo;
import com.hyniva.sms.ws.vo.ClassNameAutoAcademicNumberVO;
import com.hyniva.sms.ws.vo.OnlineApplicationDetailsVO;
import com.hyniva.sms.ws.vo.StaffElgibleSubjectsVO;
import com.hyniva.sms.ws.vo.TicketDetailsVO;
import com.hyniva.sms.ws.vo.ViewStudentFeePaymentDetailsVO;
import com.lowagie.text.Element;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.rackspacecloud.client.cloudfiles.FilesCDNContainer;
import com.rackspacecloud.client.cloudfiles.RockSpaceFilesClient;
import com.urt.exception.base.URTUniversalException;
import com.urt.json.JSONArray;
import com.urt.json.JSONObject;
import com.urt.persistence.model.common.AcademicYear;
import com.urt.persistence.model.common.AcademicYearTimings;
import com.urt.persistence.model.common.Address;
import com.urt.persistence.model.common.AdmissionInquiry;
import com.urt.persistence.model.common.AdmissionNumberSettings;
import com.urt.persistence.model.common.AdmissionSettings;
import com.urt.persistence.model.common.Attachment;
import com.urt.persistence.model.common.AutoReportsTypes;
import com.urt.persistence.model.common.BankMaster;
import com.urt.persistence.model.common.CastSettings;
import com.urt.persistence.model.common.Country;
import com.urt.persistence.model.common.Departments;
import com.urt.persistence.model.common.FeedBackSettings;
import com.urt.persistence.model.common.FeedbackGrades;
import com.urt.persistence.model.common.FeedbackQuestions;
import com.urt.persistence.model.common.HallTicketSettings;
import com.urt.persistence.model.common.LeaveManagement;
import com.urt.persistence.model.common.Medium;
import com.urt.persistence.model.common.Messages;
import com.urt.persistence.model.common.PaidSMS;
import com.urt.persistence.model.common.ReplyScrapMessage;
import com.urt.persistence.model.common.Salary;
import com.urt.persistence.model.common.ScrapMessage;
import com.urt.persistence.model.common.StaffDailyAttendance;
import com.urt.persistence.model.common.StaffPermissionsDayDetails;
import com.urt.persistence.model.common.StaffPermissionsSettings;
import com.urt.persistence.model.common.StaffStatutory;
import com.urt.persistence.model.common.State;
import com.urt.persistence.model.common.StudentMonthlyAttendance;
import com.urt.persistence.model.common.StudyAndBonafiedSettings;
import com.urt.persistence.model.common.StudyCertificateBookSettings;
import com.urt.persistence.model.common.StudyMaterialAttachments;
import com.urt.persistence.model.common.SubCastSettings;
import com.urt.persistence.model.common.TcBookSettings;
import com.urt.persistence.model.common.TcSettings;
import com.urt.persistence.model.common.UserAutoReportsConfiguration;
import com.urt.persistence.model.common.UserImage;
import com.urt.persistence.model.common.VWAcademicYearTimings;
import com.urt.persistence.model.common.VWFeedbackRatingDetails;
import com.urt.persistence.model.common.ViewAllUsers;
import com.urt.persistence.model.common.ViewStaffPermissionsSettings;
import com.urt.persistence.model.common.ViewUserRoles;
import com.urt.persistence.model.common.WorkingDays;
import com.urt.persistence.model.customer.AccountCategorys;
import com.urt.persistence.model.customer.AccountGroup;
import com.urt.persistence.model.customer.Customer;
import com.urt.persistence.model.customer.CustomerPreferences;
import com.urt.persistence.model.customer.Fee;
import com.urt.persistence.model.customer.FeeType;
import com.urt.persistence.model.customer.Hostel;
import com.urt.persistence.model.customer.Leave;
import com.urt.persistence.model.customer.LedgerDetails;
import com.urt.persistence.model.customer.LoginAccessbilityRoles;
import com.urt.persistence.model.customer.SMSServiceProviders;
import com.urt.persistence.model.customer.SchoolTerms;
import com.urt.persistence.model.customer.StaffRoom;
import com.urt.persistence.model.customer.ViewLedgerDetailsWithAccountCategories;
import com.urt.persistence.model.customer.ViewVoucherDetails;
import com.urt.persistence.model.customer.Voucher;
import com.urt.persistence.model.customer.VoucherDetails;
import com.urt.persistence.model.customer.WashRoom;
import com.urt.persistence.model.event.AlbumAttachment;
import com.urt.persistence.model.event.Events;
import com.urt.persistence.model.event.EventsAlbum;
import com.urt.persistence.model.event.SmsEvents;
import com.urt.persistence.model.exam.ActivitiesGrades;
import com.urt.persistence.model.exam.CommonType;
import com.urt.persistence.model.exam.ExamSchedules;
import com.urt.persistence.model.exam.ExamTypes;
import com.urt.persistence.model.exam.KBank;
import com.urt.persistence.model.exam.MotherTongue;
import com.urt.persistence.model.exam.OverAllGrades;
import com.urt.persistence.model.exam.SchoolGrades;
import com.urt.persistence.model.exam.ScoreCardTemplates;
import com.urt.persistence.model.exam.SubType;
import com.urt.persistence.model.exam.Syllabus;
import com.urt.persistence.model.exam.ViewClassExamDetails;
import com.urt.persistence.model.exam.ViewStaffSubjectsDetails;
import com.urt.persistence.model.exam.WeekDays;
import com.urt.persistence.model.fee.ViewStudentFeeRefundDetails;
import com.urt.persistence.model.hostel.Building;
import com.urt.persistence.model.hostel.Floor;
import com.urt.persistence.model.hostel.Room;
import com.urt.persistence.model.hostel.ViewRoomDetails;
import com.urt.persistence.model.secretary.BudgetParticularHistory;
import com.urt.persistence.model.secretary.BudgetRequest;
import com.urt.persistence.model.secretary.FinancialYear;
import com.urt.persistence.model.secretary.MeetingDetails;
import com.urt.persistence.model.secretary.MeetingRequestToCustomers;
import com.urt.persistence.model.secretary.Particular;
import com.urt.persistence.model.secretary.ParticularType;
import com.urt.persistence.model.study.ClassAssignment;
import com.urt.persistence.model.study.ClassName;
import com.urt.persistence.model.study.ClassSubjectsSettings;
import com.urt.persistence.model.study.ClassTeacher;
import com.urt.persistence.model.study.CombinedClassSubjects;
import com.urt.persistence.model.study.LeavingCertificate;
import com.urt.persistence.model.study.ParentFeedbackResult;
import com.urt.persistence.model.study.PromoteClass;
import com.urt.persistence.model.study.SchoolCategory;
import com.urt.persistence.model.study.SchoolHolidays;
import com.urt.persistence.model.study.Section;
import com.urt.persistence.model.study.Staff;
import com.urt.persistence.model.study.StaffElgibleSubjects;
import com.urt.persistence.model.study.Student;
import com.urt.persistence.model.study.StudentAcademicPendingFee;
import com.urt.persistence.model.study.StudentActivities;
import com.urt.persistence.model.study.StudentActivityTypes;
import com.urt.persistence.model.study.StudentClassAssignment;
import com.urt.persistence.model.study.StudentFeePaidDetails;
import com.urt.persistence.model.study.StudentMarks;
import com.urt.persistence.model.study.StudentPayment;
import com.urt.persistence.model.study.StudentsHallTicketDetails;
import com.urt.persistence.model.study.StudyClass;
import com.urt.persistence.model.study.StudyClassClassNameComparator;
import com.urt.persistence.model.study.StudyMaterials;
import com.urt.persistence.model.study.StudySubject;
import com.urt.persistence.model.study.SubTypeGrades;
import com.urt.persistence.model.study.SyllabusType;
import com.urt.persistence.model.study.SyllabusTypeSchoolCode;
import com.urt.persistence.model.study.TcHistory;
import com.urt.persistence.model.study.TimeTable;
import com.urt.persistence.model.study.TransferCertificate;
import com.urt.persistence.model.study.ViewClassAssignmentDetails;
import com.urt.persistence.model.study.ViewClassFeeDetails;
import com.urt.persistence.model.study.ViewClassSectionTeacher;
import com.urt.persistence.model.study.ViewClassSubjectsSettings;
import com.urt.persistence.model.study.ViewClassWisePeriodsCountDetails;
import com.urt.persistence.model.study.ViewPromotionClassDetails;
import com.urt.persistence.model.study.ViewStaffLeaveDetails;
import com.urt.persistence.model.study.ViewStaffPersonAccountDetails;
import com.urt.persistence.model.study.ViewStudentClassDetails;
import com.urt.persistence.model.study.ViewStudentFeePaidAndNotPaidDetails;
import com.urt.persistence.model.study.ViewStudentFeePaymentDetails;
import com.urt.persistence.model.study.ViewStudentMarksDetails;
import com.urt.persistence.model.study.ViewStudentPersonAccountDetails;
import com.urt.persistence.model.study.ViewStudentTransportFeePaymentDetails;
import com.urt.persistence.model.study.ViewStudentsLatestExamMarksDetails;
import com.urt.persistence.model.study.ViewStudentsTCDetails;
import com.urt.persistence.model.study.ViewStudyClassMaterials;
import com.urt.persistence.model.study.ViewTimeTableDetails;
import com.urt.persistence.model.subscription.PackageDetails;
import com.urt.persistence.model.transport.Route;
import com.urt.persistence.model.transport.RouteBoardingPoints;
import com.urt.persistence.model.transport.Vehicles;
import com.urt.persistence.model.transport.VehiclesAcademicDetails;
import com.urt.persistence.model.user.OnlineApplicationDetails;
import com.urt.persistence.model.user.OnlineApplicationDetailsView;
import com.urt.persistence.model.user.Person;
import com.urt.persistence.model.user.Role;
import com.urt.persistence.model.user.User;
import com.urt.service.thread.EventsNotificationThread;
import com.urt.service.thread.GenerateBarCodeForAllCustomersThread;
import com.urt.service.thread.SendAssignmentEmailThread;
import com.urt.service.thread.SendCreateAssignmentSMSThread;
import com.urt.util.common.PasswordUtils;
import com.urt.util.common.RayGunException;
import com.urt.util.email.MailUtil;
import com.urt.util.excel.parser.SheetParser;
import com.urt.util.excel.settings.PrepareSchoolHolidaysExcel;
import com.urt.webapp.action.base.BaseAction;
import com.urt.webapp.action.event.DOMUtil;
import com.urt.webapp.action.event.RecurringEventsDOM;
import com.urt.webapp.action.jrexception.JRExceptionClient;

import fr.opensagres.xdocreport.document.IXDocReport;
import fr.opensagres.xdocreport.document.registry.XDocReportRegistry;
import fr.opensagres.xdocreport.template.IContext;
import fr.opensagres.xdocreport.template.TemplateEngineKind;

@Namespace("/admin")
@Actions( {
		@Action(value = "doCreateWebsite", results = { @Result(location = "website/createWebsite.jsp", name = "success") }),
		@Action(value = "ajaxManageStaff", results = { @Result(location = "staff/ajaxManageStaff.jsp", name = "success") }),
		@Action(value = "ajaxCapturePhoto", results = { @Result(location = "admission/ajaxPopupCapturePhoto.jsp", name = "success") }),
		@Action(value = "ajaxDoUploadCustomerEnrollmentSheet", results = { @Result(location = "ajaxImportCustomerEnrollmentSheet.jsp", name = "success")}),
		@Action(value = "ajaxDoSendEmailToStaff", results = { @Result(location = "staff/popupSendEmail.jsp", name = "success") }),
		@Action(value = "ajaxViewEventLeftNav", results = { @Result(location = "viewEvents.jsp", name = "success") }),
		@Action(value = "ajaxDoUploadEntranceMarks", results = { @Result(location = "admission/importEntranceMarksSheet.jsp", name = "success") }),
		@Action(value = "ajaxSchoolCongiruration", results = { @Result(location = "ajaxManageSchoolConfiguration.jsp", name = "success") }),
		@Action(value = "ajaxViewStudentReports", results = { @Result(location = "academic/ajaxViewStudentReports.jsp", name = "success") }),
		@Action(value = "ajaxStaffPerformance", results = { @Result(location = "staff/ajaxViewStaffPerformance.jsp", name = "success") }),
		@Action(value = "ajaxDoGetReports", results = { @Result(location = "fee/ajaxViewCategoryList.jsp", name = "success") }),
		@Action(value = "ajaxModifyStudentPaymentFee", results = { @Result(location = "fee/searchStudentDetails.jsp", name = "success") }),
		@Action(value = "ajaxDoAddExaminationSettings", results = { @Result(location = "exam/ajaxDoAddExaminationSettings.jsp", name = "success") }) ,
		@Action(value = "manageTimeTable", results = {@Result(location = "academic/timeTable/ajaxManageTimeTable.jsp", name = "success") }),
		@Action(value = "generateStudentsCertificates", results = { @Result(location = "academic/ajaxGenerateCertificatesHome.jsp", name = "success") }),
		@Action(value = "ajaxSchoolPaymentReports", results = { @Result(location = "fee/ajaxGetClasses.jsp", name = "success") }) ,
		@Action(value = "ajaxDoUploadPhotos", results = { @Result(location = "event/ajaxUploadPhotos.jsp", name = "success") }),
		@Action(value = "ajaxSchoolInfo", results = { @Result(location = "secretary/ajaxSecretarySchoolInfo.jsp", name = "success") }),
		@Action(value = "ajaxLibraryVideos", results = { @Result(location = "ajaxLibraryVideos.jsp", name = "success") }),
		@Action(value = "ajaxGetOnlineAdmissionsCode", results = { @Result(location = "admission/ajaxGetOnlineAdmissionsCode.jsp", name = "success") }),
		 @Action(value = "ajaxBudgetView", results = { @Result(location = "secretary/ajaxSchoolBudgetView.jsp", name = "success") })
		//@Action(value = "manageAdmissionSettings", results = { @Result(location = "admission/manageAdmissionSettings.jsp", name = "success") })
		})
public class AdminAction extends BaseAction {

	private static final long serialVersionUID = -1646390427462403153L;
	protected Section classSection;
	protected Fee feeStructure;
	protected List studentsList;
	protected String firstName;
	protected String lastName;
	protected String totalAttendance;
	protected String sectionId;
	protected String classId;
	protected StudentPayment studentPayment;
	private StudySubject studySubject;
	protected List studentsFeeTypeList;
	protected List objectList;
	private String eventBelongs;
	protected String eventFrequency;
	protected String eventType;
	private List<ViewStaffPersonAccountDetails> viewStaffAccountDetails;
	private TimeTable timeTable;
	public String weekday;
	public String noOfStudents;
	public String feeId;
	protected ViewStaffLeaveDetails viewStaffLeaveDetails;
	private List<ViewStudentFeePaymentDetails> viewStudentFeePaymentDetails;
	private Set studentFeePaymentDetails;
	public String payType;
	private List viewPrincipalAccountDetails;
	private List viewHodAccountDetails;
	private List viewTeacherAccountDetails;
	private List viewLibrarianAccountDetails;
	private List viewTransportAccountDetails;
	private List viewClerkAccountDetails;
	private List viewFinanceAccountDetails;
	protected long percentage;
	protected String present;
	protected String totalStudents;
	private String status;
	private String description;
	private String schoolStartTime;
	private String schoolEndTime;
	private String minMarks;
	private String maxMarks;
	private String custEmail;
	private String customerName;
	private String contactNumber;
	private Set applicationDetailsSet;
	protected FeeType feeType;
	private String admissionFee;
	protected ViewClassFeeDetails classAdmissionDetails;
	protected List<PromoteClass> promoteClassList;
	private CommonType commonType;
	private CastSettings castSettings;
	private List classFeeTypeList;
	protected SmsEvents smsEvents;
  	private Date thresholdDate;
    protected TcSettings tcSettings;
    
    private Voucher voucher;  	
    protected FeedBackSettings feedBackSettings;
    protected FeedbackQuestions feedbackQuestions;
    protected  EventsAlbum eventsAlbum;
    private String contentType;
    private StudyMaterials studyMaterial;
    private Departments departments;
    private VoucherDetails voucherDetails;
    private AccountGroup accountGroup;
    private LedgerDetails ledgerDetails;
    private AccountCategorys  accountCategorys;
    private List<ViewVoucherDetails> viewVoucherDetailsList;
    private AcademicYearTimings academicYearTimings;
    private ViewStudyClassMaterials viewStudyClassMaterials;
    
    private List selectedRolesList;
    private long morningSessionAbsentees;
	private long afternoonSessionAbsentees;
     
    
    public ViewStudyClassMaterials getViewStudyClassMaterials() {
		return viewStudyClassMaterials;
	}

	public void setViewStudyClassMaterials(
			ViewStudyClassMaterials viewStudyClassMaterials) {
		this.viewStudyClassMaterials = viewStudyClassMaterials;
	}

	public AcademicYearTimings getAcademicYearTimings() {
		return academicYearTimings;
	}

	public void setAcademicYearTimings(AcademicYearTimings academicYearTimings) {
		this.academicYearTimings = academicYearTimings;
	}

	public List<ViewVoucherDetails> getViewVoucherDetailsList() {
		return viewVoucherDetailsList;
	}

	public void setViewVoucherDetailsList(
			List<ViewVoucherDetails> viewVoucherDetailsList) {
		this.viewVoucherDetailsList = viewVoucherDetailsList;
	}

	public AccountCategorys getAccountCategorys() {
		return accountCategorys;
	}

	public void setAccountCategorys(AccountCategorys accountCategorys) {
		this.accountCategorys = accountCategorys;
	}


	public AccountGroup getAccountGroup() {
		return accountGroup;
	}

	public void setAccountGroup(AccountGroup accountGroup) {
		this.accountGroup = accountGroup;
	}

	public LedgerDetails getLedgerDetails() {
		return ledgerDetails;
	}

	public void setLedgerDetails(LedgerDetails ledgerDetails) {
		this.ledgerDetails = ledgerDetails;
	}

	public VoucherDetails getVoucherDetails() {
		return voucherDetails;
	}

	public void setVoucherDetails(VoucherDetails voucherDetails) {
		this.voucherDetails = voucherDetails;
	}

	public Voucher getVoucher() {
		return voucher;
	}

	public void setVoucher(Voucher voucher) {
		this.voucher = voucher;
	}

	public Departments getDepartments() {
		return departments;
	}

	public void setDepartments(Departments departments) {
		this.departments = departments;
	}

	public StudyMaterials getStudyMaterial() {
		return studyMaterial;
	}

	public void setStudyMaterial(StudyMaterials studyMaterial) {
		this.studyMaterial = studyMaterial;
	}

	public String getContentType() {
		return contentType;
	}

	public void setContentType(String contentType) {
		this.contentType = contentType;
	}

	public EventsAlbum getEventsAlbum() {
		return eventsAlbum;
	}
	public void setEventsAlbum(EventsAlbum eventsAlbum) {
		this.eventsAlbum = eventsAlbum;
	}
	public FeedbackQuestions getFeedbackQuestions() {
		return feedbackQuestions;
	}
	public void setFeedbackQuestions(FeedbackQuestions feedbackQuestions) {
		this.feedbackQuestions = feedbackQuestions;
	}
	public FeedBackSettings getFeedBackSettings() {
		return feedBackSettings;
	}
	public void setFeedBackSettings(FeedBackSettings feedBackSettings) {
		this.feedBackSettings = feedBackSettings;
	}
	
	public TcSettings getTcSettings() {
		return tcSettings;
	}
	public void setTcSettings(TcSettings tcSettings) {
		this.tcSettings = tcSettings;
	}
	/**
     * @return the smsEvents
     */
    @Override
    public SmsEvents getSmsEvents() {
	return smsEvents;
    }

    /**
     * @param smsEvents
     *            the smsEvents to set
     */
    @Override
    public void setSmsEvents(SmsEvents smsEvents) {
	this.smsEvents = smsEvents;
    }
	/**
	 * @return the classFeeTypeList
	 */
	@Override
	public List getClassFeeTypeList() {
		if (ObjectFunctions.isNullOrEmpty(this.classFeeTypeList)) {
			this.classFeeTypeList = new ArrayList();
		}
		return classFeeTypeList;
	}

	/**
	 * @param classFeeTypeList the classFeeTypeList to set
	 */
	@Override
	public void setClassFeeTypeList(List classFeeTypeList) {
		this.classFeeTypeList = classFeeTypeList;
	}
	/**
	 * @return the commonType
	 */
	@Override
	public CommonType getCommonType() {
		return commonType;
	}

	@Override
	public void setCommonType(CommonType commonType) {
		this.commonType = commonType;
	}

	/**
	 * @return the promoteClassList
	 */
	public List<PromoteClass> getPromoteClassList() {
		if (ObjectFunctions.isNullOrEmpty(this.promoteClassList)) {
			this.promoteClassList = new ArrayList();
		}
		return promoteClassList;
	}

	/**
	 * @param promoteClassList the promoteClassList to set
	 */
	public void setPromoteClassList(List<PromoteClass> promoteClassList) {
		this.promoteClassList = promoteClassList;
	}

	@Override
	public CastSettings getCastSettings() {
		return castSettings;
	}
	@Override
	public void setCastSettings(CastSettings castSettings) {
		this.castSettings = castSettings;
	}
	/**
	 * @return the classAdmissionDetails
	 */
	public ViewClassFeeDetails getClassAdmissionDetails() {
		return classAdmissionDetails;
	}

	/**
	 * @param classAdmissionDetails the classAdmissionDetails to set
	 */
	public void setClassAdmissionDetails(ViewClassFeeDetails classAdmissionDetails) {
		this.classAdmissionDetails = classAdmissionDetails;
	}

	/**
	 * @return the admissionFee
	 */
	public String getAdmissionFee() {
		return admissionFee;
	}

	/**
	 * @param admissionFee the admissionFee to set
	 */
	public void setAdmissionFee(String admissionFee) {
		this.admissionFee = admissionFee;
	}

	/**
	 * @return the feeType
	 */
	public FeeType getFeeType() {
		return feeType;
	}

	/**
	 * @param feeType the feeType to set
	 */
	public void setFeeType(FeeType feeType) {
		this.feeType = feeType;
	}

	public String getContactNumber() {
		return contactNumber;
	}

	public void setContactNumber(String contactNumber) {
		this.contactNumber = contactNumber;
	}

	public String getCustEmail() {
		return custEmail;
	}

	public void setCustEmail(String custEmail) {
		this.custEmail = custEmail;
	}

	@Override
	public String getCustomerName() {
		return customerName;
	}

	@Override
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}

	public String getMinMarks() {
		return minMarks;
	}

	public void setMinMarks(String minMarks) {
		this.minMarks = minMarks;
	}

	public String getMaxMarks() {
		return maxMarks;
	}

	public void setMaxMarks(String maxMarks) {
		this.maxMarks = maxMarks;
	}

	public String getSchoolStartTime() {
		return schoolStartTime;
	}

	public void setSchoolStartTime(String schoolStartTime) {
		this.schoolStartTime = schoolStartTime;
	}

	public String getSchoolEndTime() {
		return schoolEndTime;
	}

	public void setSchoolEndTime(String schoolEndTime) {
		this.schoolEndTime = schoolEndTime;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Override
	public String getDescription() {
		return description;
	}

	@Override
	public void setDescription(String description) {
		this.description = description;
	}

	public String getTotalAttendance() {
		return totalAttendance;
	}

	public void setTotalAttendance(String totalAttendance) {
		this.totalAttendance = totalAttendance;
	}

	@Override
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getPresent() {
		return present;
	}

	public void setPresent(String present) {
		this.present = present;
	}

	public long getPercentage() {
		return percentage;
	}

	public void setPercentage(long percentage) {
		this.percentage = percentage;
	}

	public String getTotalStudents() {
		return totalStudents;
	}

	public void setTotalStudents(String totalAttendance) {
		this.totalStudents = totalAttendance;
	}

	/**
	 * @return the viewClassExamDetails
	 */

	public List<ViewStaffPersonAccountDetails> getViewPrincipalAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewPrincipalAccountDetails)) {
			this.viewPrincipalAccountDetails = new ArrayList();
		}
		return viewPrincipalAccountDetails;
	}

	public void setViewPrincipalAccountDetails(
			List<ViewStaffPersonAccountDetails> viewPrincipalAccountDetails) {
		this.viewPrincipalAccountDetails = viewPrincipalAccountDetails;
	}

	public List<ViewStaffPersonAccountDetails> getViewHodAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewHodAccountDetails)) {
			this.viewHodAccountDetails = new ArrayList();
		}
		return viewHodAccountDetails;
	}

	public void setViewHodAccountDetails(
			List<ViewStaffPersonAccountDetails> viewHodAccountDetails) {
		this.viewHodAccountDetails = viewHodAccountDetails;
	}

	public List<ViewStaffPersonAccountDetails> getViewTeacherAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewTeacherAccountDetails)) {
			this.viewTeacherAccountDetails = new ArrayList();
		}
		return viewTeacherAccountDetails;
	}

	public void setViewTeacherAccountDetails(
			List<ViewStaffPersonAccountDetails> viewTeacherAccountDetails) {
		this.viewTeacherAccountDetails = viewTeacherAccountDetails;
	}

	public List<ViewStaffPersonAccountDetails> getViewLibrarianAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewLibrarianAccountDetails)) {
			this.viewLibrarianAccountDetails = new ArrayList();
		}
		return viewLibrarianAccountDetails;
	}

	public void setViewLibrarianAccountDetails(
			List<ViewStaffPersonAccountDetails> viewLibrarianAccountDetails) {
		this.viewLibrarianAccountDetails = viewLibrarianAccountDetails;
	}

	public List<ViewStaffPersonAccountDetails> getViewTransportAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewTransportAccountDetails)) {
			this.viewTransportAccountDetails = new ArrayList();
		}
		return viewTransportAccountDetails;
	}

	public void setViewTransportAccountDetails(
			List<ViewStaffPersonAccountDetails> viewTransportAccountDetails) {
		this.viewTransportAccountDetails = viewTransportAccountDetails;
	}

	public List<ViewStaffPersonAccountDetails> getViewClerkAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewClerkAccountDetails)) {
			this.viewClerkAccountDetails = new ArrayList();
		}
		return viewClerkAccountDetails;
	}

	public void setViewClerkAccountDetails(
			List<ViewStaffPersonAccountDetails> viewClerkAccountDetails) {
		this.viewClerkAccountDetails = viewClerkAccountDetails;
	}

	public List<ViewStaffPersonAccountDetails> getViewFinanceAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewFinanceAccountDetails)) {
			this.viewFinanceAccountDetails = new ArrayList();
		}
		return viewFinanceAccountDetails;
	}

	public void setViewFinanceAccountDetails(
			List<ViewStaffPersonAccountDetails> viewFinanceAccountDetails) {
		this.viewFinanceAccountDetails = viewFinanceAccountDetails;
	}

	public Set getStudentFeePaymentDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.studentFeePaymentDetails)) {
			this.studentFeePaymentDetails = new HashSet();
		}
		return this.studentFeePaymentDetails;

	}

	public String getPayType() {
		return payType;
	}

	public void setPayType(String payType) {
		this.payType = payType;
	}

	public void setStudentFeePaymentDetails(Set studentFeePaymentDetails) {
		this.studentFeePaymentDetails = studentFeePaymentDetails;
	}

	public List<ViewStudentFeePaymentDetails> getViewStudentFeePaymentDetails() {
		return viewStudentFeePaymentDetails;
	}

	public void setViewStudentFeePaymentDetails(
			List<ViewStudentFeePaymentDetails> viewStudentFeePaymentDetails) {
		this.viewStudentFeePaymentDetails = viewStudentFeePaymentDetails;
	}

	@Override
	public ViewStaffLeaveDetails getViewStaffLeaveDetails() {
		return viewStaffLeaveDetails;
	}

	@Override
	public void setViewStaffLeaveDetails(
			ViewStaffLeaveDetails viewStaffLeaveDetails) {
		this.viewStaffLeaveDetails = viewStaffLeaveDetails;
	}

	@Override
	public List getStudentsFeeTypeList() {
		if (ObjectFunctions.isNullOrEmpty(this.studentsFeeTypeList)) {
			this.studentsFeeTypeList = new ArrayList();
		}
		return this.studentsFeeTypeList;
	}

	@Override
	public void setStudentsFeeTypeList(List studentsFeeTypeList) {
		this.studentsFeeTypeList = studentsFeeTypeList;
	}

	public List<ViewStaffPersonAccountDetails> getViewStaffAccountDetails() {
		if (ObjectFunctions.isNullOrEmpty(this.viewStaffAccountDetails)) {
			return this.viewStaffAccountDetails = new ArrayList<ViewStaffPersonAccountDetails>();
		}
		return this.viewStaffAccountDetails;
	}

	public void setViewStaffAccountDetails(List<ViewStaffPersonAccountDetails> viewStaffAccountDetails) {
		this.viewStaffAccountDetails = viewStaffAccountDetails;
	}

	public String getEventBelongs() {
		return eventBelongs;
	}

	public void setEventBelongs(String eventBelongs) {
		this.eventBelongs = eventBelongs;
	}

	public String getEventFrequency() {
		return eventFrequency;
	}

	public void setEventFrequency(String eventFrequency) {
		this.eventFrequency = eventFrequency;
	}

	public String getEventType() {
		return eventType;
	}

	public void setEventType(String eventType) {
		this.eventType = eventType;
	}
	public long getMorningSessionAbsentees() {
		return morningSessionAbsentees;
	}

	public void setMorningSessionAbsentees(long morningSessionAbsentees) {
		this.morningSessionAbsentees = morningSessionAbsentees;
	}

	public long getAfternoonSessionAbsentees() {
		return afternoonSessionAbsentees;
	}

	public void setAfternoonSessionAbsentees(long afternoonSessionAbsentees) {
		this.afternoonSessionAbsentees = afternoonSessionAbsentees;
	}
	@Override
	public Map getJsonResult() {
		if (ObjectFunctions.isNullOrEmpty(super.jsonResult)) {
			super.jsonResult = new HashMap();

		}
		return super.jsonResult;
	}

	/*
	 * public Section getClassSection() { return classSection; }
	 */
	@Override
	public List getObjectList() {
		if (ObjectFunctions.isNullOrEmpty(this.objectList)) {
			this.objectList = new ArrayList();
		}
		return objectList;
	}

	@Override
	public void setObjectList(List objectList) {
		this.objectList = objectList;
	}

	@Override
	public List getStudentsList() {
		if (ObjectFunctions.isNullOrEmpty(this.studentsList)) {
			this.studentsList = new ArrayList();
		}
		return studentsList;
	}

	@Override
	public void setStudentsList(List studentsList) {
		this.studentsList = studentsList;
	}

	public String getSectionId() {
		return sectionId;
	}

	public void setSectionId(String sectionId) {
		this.sectionId = sectionId;
	}

	@Override
	public String getClassId() {
		return classId;
	}

	@Override
	public void setClassId(String classId) {
		this.classId = classId;
	}

	public Section getClassSection() {
		return classSection;
	}

	public void setClassSection(Section classSection) {
		this.classSection = classSection;
	}
	/**
	 * @return the tempActivePrekgClassList
	 */
	@Override
	public List getTempActivePrekgClassList() {
		return tempActivePrekgClassList;
	}

	/**
	 * @param tempActivePrekgClassList
	 *            the tempActivePrekgClassList to set
	 */
	@Override
	public void setTempActivePrekgClassList(List tempActivePrekgClassList) {
		this.tempActivePrekgClassList = tempActivePrekgClassList;
	}

	@Override
	public StudentPayment getStudentPayment() {
		return studentPayment;
	}

	@Override
	public void setStudentPayment(StudentPayment studentPayment) {
		this.studentPayment = studentPayment;
	}

	public Date getThresholdDate() {
		return thresholdDate;
	}

	public void setThresholdDate(Date thresholdDate) {
		this.thresholdDate = thresholdDate;
	}
	
	@Override
	public String getTeachingRoleName() {
		return teachingRoleName;
	}

	@Override
	public void setTeachingRoleName(String teachingRoleName) {
		this.teachingRoleName = teachingRoleName;
	}

	/**
	 * @return the timeTable
	 */
	@Override
	public TimeTable getTimeTable() {
		return timeTable;
	}

	/**
	 * @param timeTable
	 *            the timeTable to set
	 */
	@Override
	public void setTimeTable(TimeTable timeTable) {
		this.timeTable = timeTable;
	}

	/**
	 * @return the weekday
	 */
	public String getWeekday() {
		return weekday;
	}

	/**
	 * @param weekday
	 *            the weekday to set
	 */
	public void setWeekday(String weekday) {
		this.weekday = weekday;
	}

	/**
	 * @return the noOfStudents
	 */
	public String getNoOfStudents() {
		return noOfStudents;
	}

	/**
	 * @param noOfStudents
	 *            the noOfStudents to set
	 */
	public void setNoOfStudents(String noOfStudents) {
		this.noOfStudents = noOfStudents;
	}

	/**
	 * @return the feeId
	 */
	public String getFeeId() {
		return feeId;
	}

	/**
	 * @param feeId
	 *            the feeId to set
	 */
	public void setFeeId(String feeId) {
		this.feeId = feeId;
	}


	/**
	 * @return the studySubject
	 */
	public StudySubject getStudySubject() {
		if (ObjectFunctions.isNullOrEmpty(this.studySubject)) {
			this.studySubject = new StudySubject();
		}
		return this.studySubject;
	}

	/**
	 * @param studySubject
	 *            the studySubject to set
	 */
	public void setStudySubject(StudySubject studySubject) {
		this.studySubject = studySubject;
	}

	
	/**
	 * @return the feeStructure
	 */
	public Fee getFeeStructure() {
		return feeStructure;
	}

	/**
	 * @param feeStructure
	 *            the feeStructure to set
	 */
	public void setFeeStructure(Fee feeStructure) {
		this.feeStructure = feeStructure;
	}
	
	@Override
	public String getAutoCheck() {
		return super.autoCheck;
		}
	
	
	//New Changes Starts from Here
	
	/**Chaged by seshu on 17th April 2013.*/  
	@Actions( {
		/** This method calls from Academics -> Subjects. For displaying subjects based on academicYear.*/
		@Action(value = "ajaxGetStudyClassSubjects", results = { @Result(location = "academic/class/ajaxViewStudySubjects.jsp", name = "success") }),
		/**This method calls from Academics -> Subjects -> Change Subjects Order. For changing subjects order.*/
		@Action(value = "ajaxChangeSubjectsOrder", results = { @Result(location = "academic/class/ajaxChangeSubjectsOrder.jsp", name = "success") })
		})
	public String ajaxGetStudyClassSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxChangeSubjectsOrder' method");
		}
		try {
			getSession().removeAttribute("admissionAcademicYearId");
			setStudySubjectList(adminManager.GetAllStudySubjects(getUserCustId(),getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			
		}
		return SUCCESS;
	}

	/**
	 * Chaged by seshu on 17th April 2013. This method calls from Academics -> Subjects -> Add Subject and Edit Subject. For displaying subject Creation form.*/
	@Actions( {
		@Action(value = "ajaxDoAddSubject", results = { @Result(location = "academic/class/ajaxAddSubject.jsp", name = "success") }) })
		public String ajaxDoAddSubject() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAddSubject' method");
			}
			try {
				if(getStudySubject().getId() > 0)
					setStudySubject((StudySubject)adminManager.get(StudySubject.class, getStudySubject().getId()));
				else
					setStudySubject(null);
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	/**
	 * Chaged by seshu on 17th April 2013. This method calls from Academics -> Subjects -> Add Subject and submit the form. For Subject creation and edit process.*/
	@Actions( { @Action(value = "ajaxAddSubjects", results = { @Result(location = "academic/class/ajaxViewStudySubjects.jsp", name = "success") }) })
	public String ajaxAddSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddSubjects' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getStudySubject()) && StringFunctions.isNotNullOrEmpty(getStudySubject().getName())){
				addActionMessages(adminManager.addUpdateSubject(getStudySubject(), getUserCustId(), getUser().getId()));
			}
			setStudySubjectList(adminManager.GetAllStudySubjects(getUserCustId(),getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/**
	 * Chaged by seshu on 17th April 2013. This method calls from Academics -> Subjects -> Change Subjects Order -> change subject event is done. For storing subjects order.*/
	@Actions( { @Action(value = "ajaxUpdateSubjectsOrder", results = { @Result(location = "academic/class/ajaxChangeSubjectsOrder.jsp", name = "success") }) })
	public String ajaxUpdateSubjectsOrder() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxUpdateSubjectsOrder' method");
	}
	try {
		if(StringFunctions.isNotNullOrEmpty(getTempString())){
			addActionMessages(adminManager.UpdateSubjectOrder(getTempString()));
		}
		ajaxGetStudyClassSubjects();
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	/**
	 * Chaged by seshu on 17th April 2013. This method calls from Academics -> Subjects -> Remove Subject. For removing subjects.*/
	@Actions( { @Action(value = "ajaxRemoveSubject", results = { @Result(location = "academic/class/ajaxViewStudySubjects.jsp", name = "success") }) })
	public String ajaxRemoveSubject() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxRemoveSubject' method");
	}
	try {
			if(getStudySubject().getId() > 0){				
				int subjectsCount=0;
				subjectsCount = adminManager.getCount("examSchedules", "classSubjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Exam Schedules are assigned to this subject.");
					return SUCCESS;
				}
				subjectsCount = adminManager.getCount("ClassSubject", "subjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Subject is assigned to classes.");
					return SUCCESS;
				}
				subjectsCount = adminManager.getCount("staffElgibleSubjects", "studySubjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Subject is assigned staff eligible subjects.");
					return SUCCESS;
				}
				/*subjectsCount = adminManager.getCount("period", "subjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Subject is assigned peroid.");
					return SUCCESS;
				}*/
				subjectsCount = adminManager.getCount("classTeacher", "studySubjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Subject is assigned teacher.");
					return SUCCESS;
				}
				subjectsCount = adminManager.getCount("bookTitle", "subjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Subject is assigned to library.");
					return SUCCESS;
				}
				subjectsCount = adminManager.getCount("rackDetails", "subjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Subject is assigned to library.");
					return SUCCESS;
				}
				subjectsCount = adminManager.getCount("studyMaterials", "subjectId="+getStudySubject().getId());
				if(subjectsCount > 0){
					super.addActionError("Study Materials are uploaded to this subject.");
					return SUCCESS;
				}
				adminManager.remove(StudySubject.class, getStudySubject().getId());				
				super.addActionMessage("Subject removed successfully.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			ajaxGetStudyClassSubjects();
		}
		return SUCCESS;
	}
	/** Chaged by seshu on 17th April 2013. <p> It contains classNames list and active students and staffs count.
	 * This method calls from Academics -> Class & Sections. For displaying all class&sections.*/
	@Actions( {
		@Action(value = "ajaxDoManageClassSections", results = { @Result(location = "academic/class/ajaxClassSectionHome.jsp", name = "success") })
		})
		public String ajaxDoManageClassSections() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'doManageClassSections' method");
			}
			try {
				getSession().removeAttribute("GetAllClassNames");
				setClassList(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
				setTempId1(adminManager.getCount("student", "description is null and custId="+ getUserCustId()+ " and academicYearId="+getUserAcademicYearId()));
				setTempId2(adminManager.getCount("staff", "status='Y' and custId="+ getUserCustId()));
				log.debug(getBankName());
				setBankName(getBankName());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	/** @author seshu. <p> Modified on 17th April 2013. <p>This method calls from Academics -> Class & Sections -> Add Class.
	 * <p> Implementation : Gets StudySubject and Section objects list for creating class. If class id is available it gets ClassName object. 
	 * */
	@Actions( { @Action(value = "ajaxDoAddClass", results = { @Result(location = "academic/class/ajaxAddClass.jsp", name = "success") }) })
	public String ajaxGetStudyClass() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStudyClass' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getClassId())){
				setClassName((ClassName) adminManager.get(ClassName.class, Long.valueOf(getClassId())));
			}
			setTempList(null);// For unselecting sections.
			setStudySubjectList(adminManager.GetAllStudySubjects(getUserCustId(),getUserAcademicYearId()));
			setObjectList(adminManager.getAllByCustId("Section",getUserCustId(),0));
			if(ObjectFunctions.isNotNullOrEmpty(getObjectList()))
				Collections.sort(getObjectList());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/** @author seshu. <p> Modified on 18th April 2013. <p>This method calls from Academics -> Class & Sections -> Add Class -> Next.
	 * <p> Implementation : creates ClassName record and based on sections creates StudyClass records with subjects. 
	 * After that updates noOfSection value in ClassName record. 
	 * */
	@Actions( { @Action(value = "ajaxAddClass", results = { @Result(location = "academic/class/assignSectionTeachers.jsp", name = "success"),
			@Result(location = "academic/class/ajaxAddClass.jsp", name = "classNameChk") 	}) })
	public String addClass() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'addClass' method");
		}
		try {
			StringBuffer query = null;
			if(StringFunctions.isNullOrEmpty(getClassName().getClassName())){
				setClassId("0");
				setClassName(null);
				ajaxGetStudyClass();
				super.addActionError("Please provide class name.");
				return "classNameChk";
			}else{
				String className = getClassName().getClassName().trim().toUpperCase();
				getClassName().setClassName(className);
				query = new StringBuffer();
				query.append("className='").append(className).append("' ");
				query.append("and academicYearId=").append(getUserAcademicYearId());
				int classAvailableCount =  adminManager.getCount("class", query.toString());
				query = null;
				if(classAvailableCount > 0 || StringFunctions.isNullOrEmpty(getSubject())){
					setClassId("0");
					setClassName(null);
					ajaxGetStudyClass();
					if(classAvailableCount > 0){
						query = new StringBuffer("Class name '").append(className).append("' is already exist. Please change class name.");
						super.addActionError(query.toString());
						query = null;
					}
					else
						super.addActionError("Please select atleast one subject.");
					return "classNameChk";
				}else{
						ClassName classNameObj= adminManager.addClass(getClassName(), getUserCustId(), getUser().getId(), getSection(), getSubject());
						//Update no of section field in ClassName table.
						query = new StringBuffer("select id from studyClass where classNameClassId=").append(classNameObj.getId()).append(" order by section");
						List<BigInteger> studyClassIds = adminManager.getAll(query.toString());
						query = null;
						if (ObjectFunctions.isNotNullOrEmpty(studyClassIds)) {
							String classSectionIdsString = StringFunctions.convertListToCommaDelimitedString(studyClassIds);
							if(StringFunctions.isNotNullOrEmpty(classSectionIdsString))
							{
								classNameObj= (ClassName)adminManager.get(ClassName.class, classNameObj.getId());
								if(!ObjectFunctions.isNullOrEmpty(classNameObj))
								{
									classNameObj.setNoOfSections(classSectionIdsString.split(",").length);
									adminManager.saveOrUpdateObject(classNameObj);
								}
								
								setClassId(classSectionIdsString.split(",")[0]);
								log.debug("Class Id:" + getClassId());
								prepareSubjectsWiseStaffsAndClassDetails();
								if(classSectionIdsString.indexOf(",") != -1){
					        		setClassSectionId(classSectionIdsString.substring(classSectionIdsString.indexOf(",")+1));
					        		setTempBoolean(true);
					        	}else
					        		setTempBoolean(false);
							}
							classSectionIdsString = null;
						}
						classNameObj = null;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}finally{
			removeClassesFromSession();
		}
		return SUCCESS;
	}
	/** Created by seshu on 23rd April. For preparing subjects wise staffs,syllabus and medium details. */
	public void prepareSubjectsWiseStaffsAndClassDetails(){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'prepareSubjectsWiseStaffsAndClassDetails' method");
		}
		classSectionSubjectsAndSubjectTeachers();
		Customer customer = getCustomerByCustId();
		if (!ObjectFunctions.isNullOrEmpty(customer) && !ObjectFunctions.isNullOrEmpty(customer.getSyllabusType()) && customer.getSyllabusType().size() > 0) {
			log.debug("Syllabus type size:" + customer.getSyllabusType().size());
			setAllUsersSet(customer.getSyllabusType());
		}
		setTempList((List<Medium>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MEDIUM_LIST));
	}
	
	/** Change by seshu on 19th April. <p>This method calls from ACADEMICS -> Class & Sections -> Add Class -> Next.
	 * <p> This method callse from ACADEMICS -> Class & Sections -> Edit.
	 * Implementeation : For displaying staffs for appropriate subjects.
	 */
	public void classSectionSubjectsAndSubjectTeachers()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'classSectionSubjectsAndSubjectTeachers' method");
		}
		try {
			setSubjectsList(null);
			if (!StringFunctions.isNullOrEmpty(getClassId())) {
				long classId = Long.valueOf(getClassId());
				setTeacherList(adminManager.getAllTeacherListByStatus(getUserCustId(), Constants.YES_STRING));
				if (classId != 0) {
					StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class," id ="+classId+" and custId="+getUserCustId());
					
					if (!ObjectFunctions.isNullOrEmpty(studyClass) && ObjectFunctions.isNotNullOrEmpty(studyClass.getSubjects())) {
						String  subjectEligibleStaffIds = null;
						String  subjectAssignedStaffIds = null;
						List<ViewStaffPersonAccountDetails> subjectStaffsList = null;
						List<ViewStaffPersonAccountDetails> subjectAssignedStaffsList = null;
						ClassTeacher classTeacher = null;
						List<BigInteger> staffIdsList = null;
						List<BigInteger> subjAssignedStaffIds=null;
						for (StudySubject studySubject : studyClass.getSubjects()) {
							studySubject.setExpecTeacherList(null);
							if (!ObjectFunctions.isNullOrEmpty(studySubject)) {
								//classTeacher = staffManager.getTeacherByClassandSubjectId(0, Long.valueOf(classId), studySubject.getId(),"Y");
								subjAssignedStaffIds=staffManager.getTeacherIdsByStudyClassSubject(getUserCustId(),getUserAcademicYearId(),classId,studySubject.getId());
								/*if (!ObjectFunctions.isNullOrEmpty(classTeacher)) {
									studySubject.setSubjectStaffId(String.valueOf(classTeacher.getStaff().getId()));
								}*/
								if(!ObjectFunctions.isNullOrEmpty(subjAssignedStaffIds)){
									subjectAssignedStaffIds=StringFunctions.convertListToCommaDelimitedString(subjAssignedStaffIds);
								}else
									subjectAssignedStaffIds="0";
								staffIdsList = adminManager.getStaffElgibleSubjectsListByStudySubjectId(studySubject.getId(),subjectAssignedStaffIds);
								if (!ObjectFunctions.isNullOrEmpty(staffIdsList)) {
									subjectEligibleStaffIds = StringFunctions.convertListToCommaDelimitedString(staffIdsList);
									subjectStaffsList = adminManager.getViewStaffDetailsListByStaffIds(subjectEligibleStaffIds,getUserCustId(),getUserAcademicYearId());
									
									if (ObjectFunctions.isNotNullOrEmpty(subjectStaffsList)) {
										studySubject.getTeacherList().addAll(subjectStaffsList);
										studyClass.addSubject(studySubject);
									}
								}
								
								subjectAssignedStaffsList=adminManager.getViewStaffDetailsListByStaffIds(subjectAssignedStaffIds,getUserCustId(),getUserAcademicYearId());
								if (ObjectFunctions.isNotNullOrEmpty(subjectAssignedStaffsList)) {
									studySubject.getExpecTeacherList().addAll(subjectAssignedStaffsList);
									studyClass.addSubject(studySubject);
								}
								
								studySubject = null;
							}
							staffIdsList = null;
							subjectEligibleStaffIds = null;
							subjectStaffsList = null;
							classTeacher = null;
						}
						setStudyClass(studyClass);
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	/** Change by seshu on 19th April.  This methods calls when user onChange staffs select box for assigning to subjects. 
	 * For displaying selected subjects teachers to classTeachers list. */
	@Actions( { @Action(value = "ajaxPrepareSelectedStaffsListForClassTeacherAssignment", results = { @Result(location = "academic/class/isClassTeacherPage.jsp", name = "success") }) })
	public String ajaxPrepareSelectedStaffsListForClassTeacherAssignment() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrepareSelectedStaffsListForClassTeacherAssignment' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getTempString())){
				List<ViewStaffPersonAccountDetails> staffs = null;
				JSONArray classSubjectsTechers=new JSONArray(getTempString());
				JSONObject classSubjectJson=null;
				List<String> staffIds=new ArrayList<String>();
				String staffId = null;
				for(int i=0;i < classSubjectsTechers.length();i++)
				{
					classSubjectJson=classSubjectsTechers.getJSONObject(i);
					if(!ObjectFunctions.isNullOrEmpty(classSubjectJson))
					{
						staffId =(String)classSubjectJson.get("staffId");
						if(!StringFunctions.isNullOrEmpty(staffId)){
							staffIds.add(staffId);
						}
					}
				}
				if (!ObjectFunctions.isNullOrEmpty(staffIds)) {
					staffs = adminManager.getAll(ViewStaffPersonAccountDetails.class, "staffId in("+StringFunctions.convertListToCommaDelimitedString(staffIds)+")");
					if(ObjectFunctions.isNotNullOrEmpty(staffs))
						setBirthDaysListSet(ConvertUtil.convertListToSet(staffs));
				}
				staffs = null;
				classSubjectsTechers = null;
				classSubjectJson = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/** Change by seshu on 19th April.  
	 * <p> For assigning staffs to classes. */
	@Actions( { @Action(value = "ajaxAddStaffSubjects", results = { @Result(location = "academic/class/ajaxClassSectionHome.jsp", name = "success"),
																	@Result(location = "academic/class/assignSectionTeachers.jsp", name = "assignTeacher") }) })
	public String ajaxAddStaffSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddStaffSubjects' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassId())){
				StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, "id="+getClassId());
				if(!ObjectFunctions.isNullOrEmpty(studyClass)){
					studyClass.setSyllabusType((SyllabusType)adminManager.get(SyllabusType.class,getStudyClass().getSyllabusType().getId()));
					studyClass.setMediumId((Medium)adminManager.get(Medium.class, getStudyClass().getMediumId().getId()));
					studyClass.setGroupNumber(getStudyClass().getGroupNumber());
					studyClass.setEducationType(getStudyClass().getEducationType());
					studyClass.setLastUpdatedById(getUser().getId());
					studyClass.setLastUpdatedDate(new Date());
					studyClass.setLastAccessDate(new Date());
					
					if(!ObjectFunctions.isNullOrEmpty(getStudyClass().getSyllabusTypeSchoolCode()))
					{
						SyllabusTypeSchoolCode syllabusTypeSchoolCode = (SyllabusTypeSchoolCode)adminManager.get(SyllabusTypeSchoolCode.class, "id="+getStudyClass().getSyllabusTypeSchoolCode().getId());
						studyClass.setSyllabusTypeSchoolCode(syllabusTypeSchoolCode);
						syllabusTypeSchoolCode = null;
						
					}
					
					studyClass = (StudyClass) adminManager.saveOrUpdateObject(studyClass);
					if(StringFunctions.isNotNullOrEmpty(getTempString())){
						if("alreadyAClassTeacher".equalsIgnoreCase(ajaxAssignStaffsToClassSectionSubjects(getTempString(),studyClass,getIsClassTeacher()))){
							prepareSubjectsWiseStaffsAndClassDetails();
							ajaxPrepareSelectedStaffsListForClassTeacherAssignment();
							return "assignTeacher";
						}
					}
				}
				if(StringFunctions.isNotNullOrEmpty(getClassSectionId())){
					setClassId(getClassSectionId().split(",")[0]);
					if(getClassSectionId().indexOf(",") != -1){ // getClassSectionId() contains multiple classSectionIds. If it is not '-1' we will show staff assignment for subjects screen else we will show completed class&Section screen.  
		        		setClassSectionId(getClassSectionId().substring(getClassSectionId().indexOf(",")+1));
		        		setTempBoolean(true);
		        	}else{
		        		setClassSectionId(null);
		        		setTempBoolean(false);
		        	}
					prepareSubjectsWiseStaffsAndClassDetails();
					
	        		return "assignTeacher";
				}
				super.addActionMessage("Class details added successfully.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			ajaxDoManageClassSections();
		}
		return SUCCESS;
	}
	/**Created by Seshu on 19th April. For storing staffs to Class subjects.*/
	public String ajaxAssignStaffsToClassSectionSubjects(String staffSubjectsData,StudyClass studyClass,String classTeacherStaffId){
		try{
			StringBuffer query = null;
			Staff staff = null;
			ClassTeacher classTeacher = null;
			if(StringFunctions.isNotNullOrEmpty(staffSubjectsData)){
				String subjectId = null;
				String staffId = null;
				StudySubject studySubject = null;
				JSONObject classSubjectJson=null;
				StaffElgibleSubjects staffElgibleSubjects = null;
				AcademicYear academicYear = studyClass.getAcademicYear();
				JSONArray classSubjectsTechers=new JSONArray(staffSubjectsData); 
				for(int i=0;i < classSubjectsTechers.length();i++)
				{
					classSubjectJson=classSubjectsTechers.getJSONObject(i);
					if(!ObjectFunctions.isNullOrEmpty(classSubjectJson))
					{
						subjectId =(String) classSubjectJson.get("subjectId");
						staffId =(String) classSubjectJson.get("staffId");
						if(StringFunctions.isNotNullOrEmpty(staffId)){
							query = new StringBuffer("id=").append(staffId).append(" and status='Y'");
							staff = (Staff)adminManager.get(Staff.class,query.toString());
						}
						if(StringFunctions.isNotNullOrEmpty(subjectId))
							studySubject = (StudySubject) staffManager.get(StudySubject.class, "id="+subjectId);
						if(!ObjectFunctions.isNullOrEmpty(studySubject)){
                            if(!ObjectFunctions.isNullOrEmpty(staff)){
                            	query = new StringBuffer("studySubjectId="+studySubject.getId()+" and staffId="+staff.getId()+" and academicYearId="+getUserAcademicYearId());
                                staffElgibleSubjects = (StaffElgibleSubjects)adminManager.get(StaffElgibleSubjects.class, query.toString());
                                if(ObjectFunctions.isNullOrEmpty(staffElgibleSubjects)){
                                        staffElgibleSubjects = new StaffElgibleSubjects();
                                        staffElgibleSubjects.setAcademicYear(academicYear);
                                        staffElgibleSubjects.setStaffId(staff);
                                        staffElgibleSubjects.setStudySubjectId(studySubject);
                                        staffElgibleSubjects.setCreatedDate(new Date());
                                        staffElgibleSubjects.setLastAccessDate(new Date());
                                        staffElgibleSubjects.setCreatedById(getUser().getId());
                                        staffElgibleSubjects.setLastUpdatedDate(new Date());
                                        adminManager.save(staffElgibleSubjects);
                                }
                                staffElgibleSubjects = null;
                                query = null;
                            }
                            classTeacher = staffManager.getTeacherByClassandSubjectId(0, studyClass.getId(), studySubject.getId(),null);
							if (!ObjectFunctions.isNullOrEmpty(classTeacher)) {
								if(ObjectFunctions.isNullOrEmpty(staff) || "N".equalsIgnoreCase(classTeacher.getStaff().getStatus()))
									adminManager.removeClassTeacherByCustId(classTeacher.getId(),getUserCustId());
								else 
									createOrUpdateClassTeacher(classTeacher,studyClass,studySubject,staff,false);
							} else if(!ObjectFunctions.isNullOrEmpty(staff)){
									classTeacher =new ClassTeacher() ;
									createOrUpdateClassTeacher(classTeacher,studyClass,studySubject,staff,false);
								}
							classTeacher=null;
						}
						staff=null;
						studySubject=null;
						staffElgibleSubjects=null;
					}
				}
			}
			if(StringFunctions.isNotNullOrEmpty(classTeacherStaffId)){
				adminManager.removeClassTeacherByStudyClassId(getUserCustId(),studyClass.getId());
				if(ObjectFunctions.isNullOrEmpty(classTeacher)){
					query = new StringBuffer("studyClassId=").append(studyClass.getId()).append(" and teacherId=").append(classTeacherStaffId);
					classTeacher = (ClassTeacher)adminManager.get(ClassTeacher.class, query.toString());
					if(!ObjectFunctions.isNullOrEmpty(classTeacher)){
						createOrUpdateClassTeacher(classTeacher,classTeacher.getStudyClass(),classTeacher.getStudySubject(),classTeacher.getStaff(),true);
					}
				}
				classTeacherStaffId = null;
				query = null;
			}else{
				adminManager.removeClassTeacherByStudyClassId(getUserCustId(),studyClass.getId());
			}
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	/**Created by seshu on 19th April. <P> For Storing ClassTeacher object.*/
	public void createOrUpdateClassTeacher(ClassTeacher classTeacher,StudyClass studyClass,StudySubject studySubject,Staff staff,boolean classTeacherStatus){
		classTeacher.setStudyClass(studyClass);
		classTeacher.setClassTeacher(classTeacherStatus);
		classTeacher.setStudySubject(studySubject);
		classTeacher.setAcademicYear(studyClass.getAcademicYear());
		classTeacher.setCustId(getUserCustId());
		classTeacher.setStaff(staff);
		classTeacher.setLastAccessDate(new Date());
		classTeacher.setLastUpdatedById(getUser().getId());
		classTeacher.setLastUpdatedDate(new Date());
		adminManager.merge(classTeacher);
		classTeacher = null;
		studyClass = null;
		studySubject = null;
		staff = null;
	} 
	/**Changed by seshu on 22th April. For creating new sections to existing classes we will call this method.*/
	@Actions( { @Action(value = "ajaxDoAddAnotherSection", results = { @Result(location = "academic/class/assignSectionTeachers.jsp", name = "success"),
			   @Result(location = "academic/class/ajaxAddClass.jsp", name = "classNameChk"),
			   @Result(location = "academic/class/ajaxAddClass.jsp", name = "sectionAvailable"),
			   @Result(location = "academic/class/ajaxAddClassSubjectSyllabus.jsp", name = "classesNotFound")})})
	public String ajaxDoAddAnotherSection() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddAnotherSection' method");
		}
		try {
			if(getClassName().getId() > 0 && StringFunctions.isNotNullOrEmpty(getClassName().getClassName())){
				if(StringFunctions.isNullOrEmpty(getSubject())){
					setClassId(getClassName().getStrId());
					ajaxGetStudyClass();
					super.addActionError("Please select atleast one subject.");
					return "classNameChk";
				}else{
					List<String> sections = null;
					Set<String> sectionsSet = null;
					Section section = null;
					StringBuffer query = new StringBuffer("id in(").append(getSubject()).append(")");
					List<StudySubject> studySubjects = adminManager.getAll(StudySubject.class,query.toString());
					query = null;
					String sectionUpperCase = null;
					ClassName className= null;
					AcademicYear academicYear = getCurrentAcademicYear();
					List<String> existingSectionNames = new ArrayList<String>();
					List<String> staffAssignmentClassSectionIds = new ArrayList<String>();
					if(StringFunctions.isNotNullOrEmpty(getSection())){
						sections = Arrays.asList(getSection().split(","));
						Collections.sort(sections);
						sectionsSet = new LinkedHashSet<String>(sections);
						className=(ClassName)adminManager.get(ClassName.class, getClassName().getId());
						className.setNoOfStudents(getClassName().getNoOfStudents());
						query = new StringBuffer("classNameClassId =").append(getClassName().getId()).append(" and  section=' '");
						StudyClass classWithOutSecName =(StudyClass)adminManager.get(StudyClass.class,query.toString());
						query = null;
						StudyClass studyClass = null;
						for(String sectionName: sectionsSet){
							sectionUpperCase =sectionName.toUpperCase();
							query = new StringBuffer("section = '").append(sectionUpperCase).append("' ");
							query.append("and custId=").append(getUserCustId());
							section = (Section) adminManager.get(Section.class, query.toString());
							if(ObjectFunctions.isNullOrEmpty(section)){
								section = new Section();
								section.setSection(sectionUpperCase);
								section.setCustId(getUserCustId());
								section.setCreatedById(getUser().getId());
								section.setCreatedDate(new Date());
								section.setLastAccessDate(new Date());
								section.setLastUpdatedDate(new Date());
								section = (Section) adminManager.save(section);
							}
							studyClass = adminManager.getclassByClassAndsection(getClassName().getClassName(),section.getSection(),getUserCustId(),getUserAcademicYearId());
							if (ObjectFunctions.isNullOrEmpty(studyClass)) {
								if(ObjectFunctions.isNullOrEmpty(classWithOutSecName)){
									studyClass = adminManager.createStudyClass(className, section.getSection(), academicYear, studySubjects,getUserCustId(), getUser().getId());
									staffAssignmentClassSectionIds.add(studyClass.getStrId());
								}else{
									classWithOutSecName.setSection(section.getSection());
									classWithOutSecName.setLastAccessDate(new Date());
									classWithOutSecName.setLastUpdatedById(getUser().getId());
									adminManager.save(classWithOutSecName);
									classWithOutSecName = null;
								}
							}else{
								existingSectionNames.add(section.getSection().toUpperCase());
							}
							section = null;
						}
						if(!ObjectFunctions.isNullOrEmpty(existingSectionNames) && existingSectionNames.size() > 0){
							setAnyTitle("Section Exit");
							query = new StringBuffer(StringFunctions.convertListToCommaDelimitedString(existingSectionNames));
							if(existingSectionNames.size() == 1)
								query.append(" section is already available for this class.");
							else	
								query.append(" sections are already available for this class.");
							super.addActionError(query.toString());
							setClassId(getClassName().getStrId());
							return "sectionAvailable";
						}
						if(ObjectFunctions.isNullOrEmpty(staffAssignmentClassSectionIds)){
							return "classesNotFound";
						}else{
							String classSectionIdsString = StringFunctions.convertListToCommaDelimitedString(staffAssignmentClassSectionIds);
							if(StringFunctions.isNotNullOrEmpty(classSectionIdsString)){
								
								className.setNoOfSections(className.getNoOfSections()+staffAssignmentClassSectionIds.size());
								adminManager.save(className);
								setClassId(classSectionIdsString.split(",")[0]);
								if(classSectionIdsString.indexOf(",") != -1){
					        		setClassSectionId(classSectionIdsString.substring(classSectionIdsString.indexOf(",")+1));
					        	}
								prepareSubjectsWiseStaffsAndClassDetails();
								if(staffAssignmentClassSectionIds.size() > 1)
									setTempBoolean(true);
								else
									setTempBoolean(false);
							}
							classSectionIdsString = null;
							staffAssignmentClassSectionIds = null;
						}
					}
					className= null;
					sections = null;
					sectionsSet = null;
					section = null;
					query = null;
					studySubjects = null;
					sectionUpperCase = null;
					academicYear = null;
					existingSectionNames = null;
					staffAssignmentClassSectionIds = null;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}finally{
			ajaxGetStudyClass();
			removeClassesFromSession();
		}
		return SUCCESS;
	}
	/**Changed by seshu on 23rd April. <p>For managing sections. ACADEMICS -> Class&Sections -> Add Section */
	@Actions( { @Action(value = "ajaxDoAddSection", results = { @Result(location = "academic/class/ajaxAddSection.jsp", name = "success") }), 
        @Action(value = "ajaxGetSections", results = { @Result(location = "academic/class/ajaxViewSections.jsp", name = "success") }) })
	public String ajaxGetSections() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxGetSections' method");
	}
	try {
		setObjectList(adminManager.getAllByCustId("Section",getUserCustId(),0));
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	/**Changed by seshu on 23rd April. <p>For creating sections. */
	@Actions( { @Action(value = "ajaxAddSections", results = { @Result(location = "academic/class/ajaxAddSection.jsp", name = "success") }) })
	public String ajaxAddSections() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxAddSections' method");
	}
	try {
		if(StringFunctions.isNotNullOrEmpty(getSection())){
			String[] sectionNames=getSection().split(",");
			List<String> availableSections = new ArrayList<String>();
			if(!ObjectFunctions.isNullOrEmpty(sectionNames)){
					Section section=null;
					for (String sectionName : sectionNames) {
						if(StringFunctions.isNotNullOrEmpty(sectionName)){	
							section = adminManager.getSectionBySectionName(sectionName,getUserCustId()); 
							if(ObjectFunctions.isNullOrEmpty(section)){	
								section = new Section();
								section.setCustId(getUserCustId());
								section.setCreatedById(getUser().getId());
								section.setCreatedDate(new Date());
								section.setLastAccessDate(new Date());
								section.setLastUpdatedDate(new Date());
								section.setSection(sectionName.toUpperCase());
								adminManager.save(section);
							}else
								availableSections.add(sectionName);
							section = null;
						}
					}
			}
			if(ObjectFunctions.isNullOrEmpty(availableSections))
				super.addActionMessage("Sections added successfully.");
			else if(availableSections.size() == 1){
				super.addActionError(StringFunctions.convertListToCommaDelimitedString(availableSections)+" section already exist.");
			}else{
				super.addActionError(StringFunctions.convertListToCommaDelimitedString(availableSections)+" sections already exist.");
			}
			availableSections = null;
			sectionNames = null;
		}
		ajaxGetSections();
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	/**Changed by seshu on 23rd April. This method calls from Academics -> Class & Sections -> Change Classes order. For displaying all class&sections.*/
	@Actions( {
		@Action(value = "ajaxDoChangeClassSectionsOrder", results = { @Result(location = "academic/class/ajaxChangeClassSectionsOrder.jsp", name = "success") })
		})
		public String ajaxDoChangeClassSectionsOrder() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoChangeClassSectionsOrder' method");
			}
			try {
				setClassList(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
	/** Changed by seshu on 23rd April.<p> For storing Classes order.*/
	@Actions( { @Action(value = "ajaxUpdateClassesOrder", results = { @Result(location = "academic/class/ajaxChangeClassSectionsOrder.jsp", name = "success") }) })
	public String ajaxUpdateClassesOrder() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxUpdateClassesOrder' method");
	}
	try {
		if(StringFunctions.isNotNullOrEmpty(getTempString())){
			JSONArray classJSONArray=new JSONArray(getTempString());
			JSONObject classJson=null;
			long classId=0;
			long sortingOrder=0;
			for(int i=0;i<classJSONArray.length();i++)
			{
				classJson=classJSONArray.getJSONObject(i);
				if(!ObjectFunctions.isNullOrEmpty(classJson))
				{
					classId = Long.valueOf((String)classJson.get("classId"));
					sortingOrder =Long.valueOf((Integer)classJson.get("sortingOrder"));
					 if(classId > 0 && sortingOrder > 0){
							adminManager.updateClassesOrder(classId,sortingOrder);
					 }
			     }
				classJson=null;
		     }
			super.addActionMessage("Classes order updated successfully.");
			classJSONArray=null;
		}
		getSession().removeAttribute("GetAllClassNames");
		getSession().removeAttribute("GetAllStudyClasses");
		getSession().removeAttribute("GetStudyClassesByCustIdAndAcademicYearId");
		ajaxDoChangeClassSectionsOrder();
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	
	/**Changed by seshu on 23rd April. For displaying edit classsection screen. ACADEMICS -> Class&Sections -> Edit. */
	@Actions( { @Action(value = "ajaxDoEditClassDetails", results = { @Result(location = "academic/class/ajaxEditStudyClassDetails.jsp", name = "success") }) })
	public String ajaxDoEditClassDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditClassDetails' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassId())){
				setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(),null));// For displaying all classes list using drop down list.
				setStudyClass((StudyClass)adminManager.get(StudyClass.class, "id="+getClassId()));
				setSectionName(getStudyClass().getSection());
				Customer customer = getCustomerByCustId();
				if(!ObjectFunctions.isNullOrEmpty(customer)){
					setAllUsersSet(customer.getSyllabusType());
				}
				setTempList((List<Medium>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MEDIUM_LIST));
				setSectionList(adminManager.getAll(Section.class, "custId="+getUserCustId()));
				if(ObjectFunctions.isNotNullOrEmpty(getSectionList()))
					Collections.sort(getSectionList());
				
				if(!ObjectFunctions.isNullOrEmpty(getStudyClass().getSyllabusType()))
				{
					List<Long> customerSyllabusTypeIds = new ArrayList<Long>();
					Set<SyllabusType> syllabusTypeSet = customer.getSyllabusType();
					for(SyllabusType syllabusType : syllabusTypeSet)
					{
						if (!ObjectFunctions.isNullOrEmpty(syllabusType)) {
							customerSyllabusTypeIds.add(syllabusType.getId());
						}
						syllabusType = null;
					}
					
					if(customerSyllabusTypeIds.contains(getStudyClass().getSyllabusType().getId()))
					{
						setTempString3("Y");
						setTempList1(adminManager.getAll(SyllabusTypeSchoolCode.class, "custId="+getUserCustId()+ " and syllabusTypeId=" + getStudyClass().getSyllabusType().getId()));
					}
					else
					{
						setTempString3("N");
					}
				}
				ajaxEditClassSubjects();
				ajaxStaffSubjects();
				/*ajaxDoEditSyllabus();*/ //For displaying Syllabus details. We don't have syllabus module now.  
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/**Changed by seshu on 23rd Apr. For displaying class subjects,medium,syllabus screen.*/
	public void ajaxEditClassSubjects() throws URTUniversalException {
		try {
			setStudySubjectList(adminManager.GetAllStudySubjects(getUserCustId(),getUserAcademicYearId()));
			if (!ObjectFunctions.isNullOrEmpty(getStudyClass()) && ObjectFunctions.isNotNullOrEmpty(getStudyClass().getSubjects()) && getStudyClass()!=(getStudyClass().getSubjects())) {
				for(StudySubject subject : getStudyClass().getSubjects()){
					log.debug("Subject Name:"+subject.getName());
					getObjectList().add(subject.getId());
				}
				//setObjectList(adminManager.getAll("select subjectId from vw_studyClassSubjectDetails where studyClassId="+getStudyClass().getId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	/**Changed by seshu on 23rd April. For displaying subjects with staff in edit studyclass screen. */
	public String ajaxStaffSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStaffSubjects' method");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getClassId())) {
				classSectionSubjectsAndSubjectTeachers();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/** Created by seshu on 24th April. For displaying classTeachers list and display classTeacher name. */
	@Actions( { @Action(value = "ajaxPrepareClassSectionSubjectsWiseStaffsAndClassTeacher", results = { @Result(location = "academic/class/isClassTeacherPage.jsp", name = "success") }) })
	public String ajaxPrepareClassSectionSubjectsWiseStaffsAndClassTeacher() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPrepareClassSectionSubjectsWiseStaffsAndClassTeacher' method");
		}
		try {
			ajaxPrepareSelectedStaffsListForClassTeacherAssignment();
			if(StringFunctions.isNotNullOrEmpty(getClassId())){
				StringBuffer query = new StringBuffer("select teacherId,id from classTeacher where studyClassId=").append(getClassId()).append(" and classTeacher='Y'");
				Object[] staffId = adminManager.get(query.toString());
				if(!ObjectFunctions.isNullOrEmpty(staffId) && !ObjectFunctions.isNullOrEmpty(staffId[0]))
					setIsClassTeacher(staffId[0].toString());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/**Changed by seshu on 25th April. Not using this method for now. If we implement syllabus module we will use this method. */
	@Actions( { @Action(value = "ajaxDoEditSyllabus", results = { @Result(location = "academic/editClassSyllabus.jsp", name = "success") }) })
	public String ajaxDoEditSyllabus() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditSyllabus' method");
		}
		try {
			setSyllabusList(adminManager.getClassSyllabusList(Long.valueOf(getClassId())));
			setStudyClass((StudyClass)adminManager.get(StudyClass.class, Long.valueOf(getClassId())));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	  /********************************************************************
	   * Date              Name               Description
	   * ============      =======		    ==================
	   * April 25, 2013    Seshu		    For storing ClassSection edit details.
	   * July 17, 2013	   Seshu			If syllabus type is not selected by user null pointer exception is throwing. 
	   * 									In page I added anyTitle as hidden variable if user doesn't selects syllabus type I am assigning 0  to this field
	   * 									if user selects any value i am setting that value to this hidden variable.
	  /********************************************************************/
	@Actions( { @Action(value = "ajaxEditSaveSubjects", results = { @Result(location = "academic/class/ajaxEditStudyClassDetails.jsp", name = "success") }) })
	public String addEditSaveSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'addEditSaveSubjects' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getStudyClass()) && StringFunctions.isNotNullOrEmpty(getClassId()) && StringFunctions.isNotNullOrEmpty(getSubject()))
			{
				getSession().removeAttribute("GetAllClassNames");
				getSession().removeAttribute("GetAllStudyClasses");
				getSession().removeAttribute("GetStudyClassesByCustIdAndAcademicYearId");
				StringBuffer query,msg= new StringBuffer();
				query = new StringBuffer("id=").append(getClassId());
				StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, query.toString());
				query = null;
				msg = new StringBuffer();
				int count = 0;
				studyClass.setGroupNumber(getStudyClass().getGroupNumber());
				studyClass.setEducationType(getStudyClass().getEducationType());
				studyClass.setMediumId(getStudyClass().getMediumId());
				//studyClass.setSyllabusType((SyllabusType)adminManager.get(SyllabusType.class, getStudyClass().getSyllabusType().getId()));
				if(StringFunctions.isNotNullOrEmpty(getAnyTitle()) && !"0".equalsIgnoreCase(getAnyTitle())){
					studyClass.setSyllabusType((SyllabusType)adminManager.get(SyllabusType.class, "id="+getAnyTitle()));
				}else{
					studyClass.setSyllabusType(null);
				}
				
				if(!ObjectFunctions.isNullOrEmpty(getStudyClass().getSyllabusTypeSchoolCode()))
				{
					SyllabusTypeSchoolCode syllabusTypeSchoolCode = (SyllabusTypeSchoolCode)adminManager.get(SyllabusTypeSchoolCode.class, "id="+getStudyClass().getSyllabusTypeSchoolCode().getId());
					studyClass.setSyllabusTypeSchoolCode(syllabusTypeSchoolCode);
					syllabusTypeSchoolCode = null;
					
				}
				
				ClassName classNameClassName=(ClassName)adminManager.get(ClassName.class, studyClass.getClassNameClassId().getId());
				if(!studyClass.getClassName().equalsIgnoreCase(getStudyClass().getClassName())){
					String className = getStudyClass().getClassName().trim().toUpperCase();
					query = new StringBuffer("className= '").append(className).append("' and academicYearId=").append(studyClass.getAcademicYearId()).append(" and id !=").append(studyClass.getClassId());
					count = adminManager.getCount("class", query.toString());
					query = null;
					if(count > 0)
						msg.append(className).append(" class name is already available. Please change class name.");
					else{
						classNameClassName.setClassName(className);
						classNameClassName.setDescription(className);
						studyClass.setClassName(className);
						studyClass.getClassNameClassId().setClassName(className);
						studyClass.getClassNameClassId().setDescription(className);
						adminManager.updateClassNameByClassId(className,studyClass.getClassId());
					}
					className = null;
					
				}
				
				classNameClassName.setHigherStandard(getStudyClass().getClassNameClassId().isHigherStandard());
				
				adminManager.save(classNameClassName);
				classNameClassName=null;
				
				if(!studyClass.getSection().equalsIgnoreCase(getStudyClass().getSection().trim())){
					query = new StringBuffer("section='").append(getStudyClass().getSection().trim()).append("' and academicYearId=").append(studyClass.getAcademicYearId()).
					append(" and classNameClassId=").append(studyClass.getClassId()).append(" and id !=").append(studyClass.getId());
					count = adminManager.getCount("studyClass", query.toString());
					query = null;
					if(count > 0){
						msg.append("\n ").append(getStudyClass().getSection().trim().toUpperCase()).append(" section is already available to this class.Please change section name.");
					}else{
						studyClass.setSection(getStudyClass().getSection().toUpperCase());
						if(StringFunctions.isNotNullOrEmpty(getStudyClass().getSection())){
							Section sec=(Section)adminManager.get(Section.class, "section='"+getStudyClass().getSection().trim()+"' and custId="+studyClass.getCustId());
							if(ObjectFunctions.isNullOrEmpty(sec)){
								Section section=new Section();
								section.setCreatedById(getUser().getId());
								section.setLastUpdatedById(getUser().getId());
								section.setCustId(studyClass.getCustId());
								section.setSection(getStudyClass().getSection().trim().toUpperCase());
								section.setCreatedDate(new Date());
								adminManager.save(section);
								section=null;
							}
							sec=null;
						}
					}
				}
				if(getStudyClass().getSectionCapacity() < studyClass.getSectionCapacity()){
					int studentsCount=studentManager.getClassStudentsCountByClassIdandStatus(studyClass.getId(),Constants.YES_STRING,getUserCustId());
					if(getStudyClass().getSectionCapacity() >= studentsCount)
						studyClass.setSectionCapacity(getStudyClass().getSectionCapacity());
					else
						msg.append("\n").append(studyClass.getClassAndSection()).append(" class contains ").append(studentsCount).append(" students. Class capacity should be more than or equals to students count. Please change the capacity.");
				}else
					studyClass.setSectionCapacity(getStudyClass().getSectionCapacity());
				if(StringFunctions.isNotNullOrEmpty(getSubject())){
					List<StudySubject> subjectsList = null;
					query = new StringBuffer("select subjectId,subjectName from vw_studyClassSubjectDetails where studyClassId=").append(studyClass.getId()).
					append(" and subjectId not in(").append(getSubject()).append(")");
					List<Object[]> unSelectedSubjs= adminManager.getAll(query.toString());
					query = null;
					if(ObjectFunctions.isNullOrEmpty(unSelectedSubjs)){
						query = new StringBuffer("id in(").append(getSubject()).append(")");
						subjectsList = adminManager.getAll(StudySubject.class, query.toString());
						query = null;
					}else{
						StringBuffer removeSubIds,availableScheduleSubIds =  new StringBuffer();
						String content = null;
						removeSubIds = new StringBuffer();
						for(Object[] subj : unSelectedSubjs){
							if(!ObjectFunctions.isNullOrEmpty(subj) && !ObjectFunctions.isNullOrEmpty(subj[0]) && !ObjectFunctions.isNullOrEmpty(subj[1])){
								query = new StringBuffer("classSectionId=").append(studyClass.getId()).append(" and classSubjectId=").append(subj[0].toString());
								count = adminManager.getCount("examSchedules", query.toString());
								int count1 = adminManager.getCount("vw_studyClassMaterials", "subjectId="+subj[0].toString()+" and classSectionId="+studyClass.getId());
								query = null;
								if(count > 0){
									availableScheduleSubIds.append(subj[0].toString()).append(",");
									msg.append(subj[1].toString()).append(",");
									content = "examSchedules";
								}else if(count1 > 0){
									availableScheduleSubIds.append(subj[0].toString()).append(",");
									msg.append(subj[1].toString()).append(",");
									content = "study Materials uploaded";
								}
								else{
									removeSubIds.append(subj[0].toString()).append(",");
								}
							}
						}
						if(!ObjectFunctions.isNullOrEmpty(removeSubIds) && removeSubIds.length() > 0){
							removeSubIds.insert(0, "(").append("0)");
							query = new StringBuffer("timeTableId in(select id from timeTable where classSectionId=").append(studyClass.getId())
							.append(" and subjectId in ").append(removeSubIds.toString()).append(" and custId=").append(getUserCustId()).append(")");
							adminManager.remove("staffTimeTablePeriods",query.toString());
							adminManager.updateTimeTableDetailsByClassSectionIdAndSubjectIds(studyClass.getId(),removeSubIds.toString());
							//adminManager.remove("timeTable","classSectionId="+studyClass.getId()+" and subjectId in "+removeSubIds.toString()+" and custId="+getUserCustId());
							adminManager.removeClassTeachersByStudyClassIdandSubjectIdsandCustId(studyClass.getId(),getUserCustId(),removeSubIds.toString());
							// We are not providing adding syllabus to the customers. Once we provide option we have to uncomment following line.
							//adminManager.removeSyllabusByStudyClassIdandSubjectIdsCustId(studyClass.getId(),getUserCustId(),removeSubIds.toString());
							query = new StringBuffer("classSectionId=").append(studyClass.getId()).append(" and studySubjectId in").append(removeSubIds.toString()).
							append(" and custId=").append(getUserCustId());
							adminManager.remove("classSubjectsSettings",query.toString()) ;
							query = null;
						}
						query =  new StringBuffer("id in(").append(getSubject());
						if(!ObjectFunctions.isNullOrEmpty(availableScheduleSubIds) && availableScheduleSubIds.length() > 0){
							msg.deleteCharAt(msg.length()-1);
							msg.append(" subject(s) have "+content+".So you can't edit these subjects.");
							query.append(",").append(availableScheduleSubIds.toString()).append("0");
							
						}
						query.append(")"); 
						subjectsList = adminManager.getAll(StudySubject.class,query.toString());
						query = null;
						removeSubIds = null;
					}
					if(ObjectFunctions.isNullOrEmpty(subjectsList))
						studyClass.setSubjects(null);
					else
						studyClass.setSubjects(ConvertUtil.convertListToSet(subjectsList));
					unSelectedSubjs = null;
					subjectsList = null;
				}
				studyClass.setLastUpdatedById(getUser().getId());
				studyClass.setLastUpdatedDate(new Date());
				studyClass.setLastAccessDate(new Date());
				adminManager.save(studyClass);
				studyClass=null;
				if(!ObjectFunctions.isNullOrEmpty(msg) && msg.length() > 0)
					super.addActionError(msg.toString());
				else
					super.addActionMessage("Class details updated successfully.");
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}finally{
			removeClassesFromSession();
			ajaxDoEditClassDetails();
		}
		return SUCCESS;
	}
	/** Changed by seshu on 26th April. For assigning staffs to ClassSection subjects from edit classAndSection screen. */
	@Actions( { 
		@Action(value = "ajaxEditStaffSubjects", results = {
				@Result(location = "academic/class/ajaxEditStudyClassDetails.jsp", name = "success")
				}),
		@Action(value = "ajaxStaffAssignClassSubjects", results = { @Result(location = "academic/class/ajaxAssignClassSubjects.jsp", name = "success") })
	})
	public String ajaxEditStaffSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditStaffSubjects' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassId()) && StringFunctions.isNotNullOrEmpty(getTempString())){
				setStudyClass((StudyClass)adminManager.get(StudyClass.class, "id="+getClassId()));
				if(!ObjectFunctions.isNullOrEmpty(getStudyClass())){
					if(!"alreadyAClassTeacher".equalsIgnoreCase(ajaxAssignStaffsToClassSectionSubjects(getTempString(),getStudyClass(),getIsClassTeacher())))
						if(StringFunctions.isNotNullOrEmpty(getAnyTitle())){
							super.addActionMessage(getStudyClass().getClassAndSection()+" Successfully updated staff assign to subjects details.");
						}else
							super.addActionMessage("Successfully updated staff details.");
				}
			}
			if(StringFunctions.isNotNullOrEmpty(getAnyTitle())){
				ajaxDoAssignClassSubjectsToStaff();
				return SUCCESS;
			}
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}finally{
			removeClassesFromSession();
			if(StringFunctions.isNullOrEmpty(getAnyTitle())){
				ajaxDoEditClassDetails();
			}
		}
		return SUCCESS;
	}
	/**Changed by seshu on 26th April.*/
	@Actions( { @Action(value = "ajaxRemoveStudyClass", results = { @Result(location = "academic/class/ajaxClassSectionHome.jsp", name = "success") }) })
	public String ajaxRemoveStudyClass() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxRemoveStudyClass' method");
	}
	try {
		if(StringFunctions.isNotNullOrEmpty(getClassId())){
			long classSectionId=Long.valueOf(getClassId());
			StudyClass studyClass=(StudyClass)adminManager.get(StudyClass.class, classSectionId);
			if(!ObjectFunctions.isNullOrEmpty(studyClass)){
				String className=studyClass.getClassAndSection();
				long classNameId=studyClass.getClassId();
				//studyClass=null;
				List perfomance = null;
				StringBuffer query = new StringBuffer("classSectionId=").append(classSectionId);
				int count = adminManager.getCount("student", query.toString());
				if(count > 0){
					super.addActionError(className+" class contains students. You can't remove this class.");
					ajaxDoManageClassSections();
					return SUCCESS;
				}else{
					count = adminManager.getCount("examSchedules",  query.toString());
					if(count > 0){
						super.addActionError(className+" class contains exam schedules.You can't remove this class.");
						ajaxDoManageClassSections();
						return SUCCESS;
					}else{
						count = adminManager.getCount("materialsStudyClasses",  "studyClassId="+classSectionId);
						if(count > 0){
							super.addActionError(className+" class contains uploaded study materials.You can't remove this class.");
							ajaxDoManageClassSections();
							return SUCCESS;
						}else{
							query = new StringBuffer("FROM StudentAcademicPerformance performance JOIN performance.studentActivityType activityType JOIN activityType.activityTypClasses className WHERE className=").append(classSectionId);
							perfomance = adminManager.getAllHqlQuery(query.toString());
							if(ObjectFunctions.isNotNullOrEmpty(perfomance)){
								super.addActionError(className+" class contains students activities grades.You can't remove this class.");
								ajaxDoManageClassSections();
								return SUCCESS;
							}else
							{
								query = new StringBuffer("studentActivityTypeId in(select activityTypeId from activityTypeClasses WHERE classId=").append(classSectionId).append(")"); 
								adminManager.remove("studentAcademicPerformance",query.toString());
								adminManager.remove("activityTypeClasses", "classId="+classSectionId);
								adminManager.removeClassTeachersByStudyClassIdCustId(classSectionId,getUserCustId());
								//adminManager.removeClassEventsByClassSectionId(classSectionId);
								adminManager.removeExamSchedulesByClassSectionId(classSectionId);
								adminManager.removeKbanksByClassSectionId(classSectionId);
								adminManager.removeClassSubjectsByClassSectionId(classSectionId);
								adminManager.removeClassSubjectsSettingsByClassSectionId(classSectionId);
								adminManager.remove("staffTimeTablePeriods", "timeTableId in(select id from timeTable where classSectionId="+classSectionId+" and custId="+getUserCustId()+")");
								adminManager.removeTimeTablePeriodsByClassSectionId(classSectionId);
								adminManager.remove("studyBookSettingsClasses", "classId="+classNameId);
								adminManager.remove("tcBookSettingsClasses", "classId="+classNameId);
								adminManager.remove("classSectionExamTypes", "classSectionId="+classSectionId);
								adminManager.remove("substitutionTimeTable", "classSectionId="+classSectionId);
								adminManager.remove("deptStudyClasses", "studyClassesId="+classSectionId);
								adminManager.remove("studyClass", "id="+classSectionId);
								count=adminManager.getCount("studyClass", "classNameClassId="+classNameId);
								ClassName clasName=(ClassName)adminManager.get(ClassName.class, classNameId);
								if(count <=0 ){
									List<Fee> fees=adminManager.getAll(Fee.class, "classId="+classNameId);
									if(!ObjectFunctions.isNullOrEmpty(fees)){
										for(Fee fee:fees){
											fee.setAcademicYear(null);
											fee.setFeeType(null);
											fee.setSchoolTerms(null);
											adminManager.save(fee);
											fee=null;
										}
										adminManager.remove("Fee", "classId="+classNameId);
										fees=null;
									}
									adminManager.remove("onlineApplicationDetails", "classId="+classNameId);
									//adminManager.remove("classExamTypes", "classNameId="+classNameId);
									adminManager.remove(ClassName.class, classNameId);

								}else{
									//ClassName clasName=(ClassName)adminManager.get(ClassName.class, classNameId);
									clasName.setNoOfSections(clasName.getNoOfSections()-1);
									adminManager.save(clasName);
									setTempString("R");
								}
								clasName=null;
								super.addActionMessage(className+" class removed successfully.");
								removeClassesFromSession();
							}
						}
					}
				}
			}
		}
		} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
		finally{
			ajaxDoManageClassSections();
		}
	return SUCCESS;
	}
	/**Created by seshu on 26th April. For removing classes list from sesssion.*/
	public void removeClassesFromSession(){
		getSession().removeAttribute("GetAllStudyClasses");
		getSession().removeAttribute("GetStudyClassesByCustIdAndAcademicYearId");
		getSession().removeAttribute("GetAllClassNames");
	}
/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * May 9, 2013       Seshu		        Changed method name for getting all classes upcoming exam schedules.
/********************************************************************/	
	@Actions( { @Action(value = "managePrincipal", results = { @Result(location = "principal/principalHome.jsp", name = "principal") }) 
	})
	public String managePrincipal() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'managePrincipal' method");
		}
		try {
			ajaxClassWiseUpcomingExamSchedules();
			setClassList(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
			if(!ObjectFunctions.isNullOrEmpty(getClassList())){
				ClassName className = getClassList().get(0);
				if (!ObjectFunctions.isNullOrEmpty(className)) {
					setTempId1(className.getId());
				}
			}
			setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(),null));
			Collections.sort(getStudyClassList());
			if(!ObjectFunctions.isNullOrEmpty(getStudyClassList())){
				StudyClass studyClass = getStudyClassList().get(0);
				if (!ObjectFunctions.isNullOrEmpty(studyClass)) {
					setTempId(studyClass.getId());
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return "principal";
	}
	@Actions( {
		@Action(value = "eventCalendar", results = { @Result(location = "event/eventHome.jsp", name = "success") }),
		@Action(value = "ajaxViewEvents", results = { @Result(location = "event/viewEvents.jsp", name = "success") }),
		@Action(value = "ajaxViewEvent", results = { @Result(type = "json", name = "success", location = "viewEvents.jsp", params = {
				"includeProperties", "eventDetailsList.*" }) }) })
	public String eventHome() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'eventHome' method");
	}
	try {
		ajaxAcademicSchoolSettings();
		setToDate(new Date());
		if(getUserAcademicYearId() > 0){
			//setObjectList(adminManager.getAllEventsByCustIdAndAcademicYearId(getUserCustId(),getUserAcademicYearId()));
			
			//List<Events> eventsList = adminManager.getAllEventsByCustIdAndAcademicYearId(getUserCustId(),getUserAcademicYearId());
			
			List<Events> eventsList = 	adminManager.getAll(Events.class, "custId =" + getUserCustId() +" and academicYearId = "+ getUserAcademicYearId()+" and endDate >='"+DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date())+" 00:00:00' order By startDate DESC");
			if(!ObjectFunctions.isNullOrEmpty(eventsList)){
				for(Events events : eventsList)
				{
					List<EventsAlbum> eventsAlbumList=adminManager.getAll(EventsAlbum.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and eventId="+events.getId());
					if(!ObjectFunctions.isNullOrEmpty(eventsAlbumList)){
						events.setEventsAlbum(eventsAlbumList);
					}
					getObjectList().add(events);
				}
			}
			eventsList = null;
		}
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxViewSingleEvent", results = { @Result(location = "event/eventDetails.jsp", name = "success") }) })
	public String viewEvent() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewSingleEvent' method");
		}

		try {
			String eventId = getParamValue("eventId");
			if(!StringFunctions.isNullOrEmpty(eventId))
			{
			    setEvents((Events)adminManager.get(Events.class, Long.valueOf(eventId)));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
		@Action(value = "ajaxDeleteEvent", results = { @Result(location = "event/viewEvents.jsp", name = "success") }),
		@Action(value = "ajaxDeleteExpiredEvent", results = { @Result(location = "event/viewExpiredEvents.jsp", name = "success") }) })
		public String ajaxDeleteEvent() throws URTUniversalException  {

		if (log.isDebugEnabled()) {
		log.debug("Entering 'deleteEvent' method");
		}
		try {
			if(getTempId() > 0 && StringFunctions.isNotNullOrEmpty(getTempString())){
				adminManager.updateAndDeleteSchoolHolidays(getUserCustId(),getAcademicYearId(),getTempString());
				adminManager.remove(Events.class, getTempId());
				//Sending notification for event delete
				adminManager.sendNotificationForEventDelete(getTempId(), getUserCustId());
				super.addActionMessage("Event is deleted successfully.");
			}
            	  
		eventHome();
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}

	@Actions( {
			@Action(value = "ajaxDoAddEvent", results = { @Result(location = "event/ajaxNewEvent.jsp", name = "success") }) 
			})
	public String doAddEvent() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'doAddEvent' method");
		}
		try {
				checkStudyClassHavingStudentsOrNot();
				prepareNonTeachingRolesMap(getCustomerByCustId());
				getNonTeachingRoleMap().remove(getNonTeachingRoleMap().firstKey());
				String academicYear=(String)getSession().getAttribute("academicYearName");
				if(StringFunctions.isNotNullOrEmpty(academicYear)){
					setObjectList(adminManager.getAll(SmsEvents.class," academicYear='"+academicYear+"' order by startDate"));
				}
				
				if(getUserAcademicYearId() > 0)
					loadAcademicYearStartDateAndDates(getUserAcademicYearId());
				if(getTempId() > 0)
				{
					setEvents((Events)adminManager.get(Events.class, getTempId()));
					
					if(!ObjectFunctions.isNullOrEmpty(getEvents().getStudyClass()))
					{
						for(StudyClass studyClass : getEvents().getStudyClass())
						{
							getChkBoxSelectedIds().add(String.valueOf(studyClass.getId()));
						}
					}
					
					if(!ObjectFunctions.isNullOrEmpty(getEvents().getRole()))
					{
						for(Role role : getEvents().getRole())
						{
							getChkBoxNonTeachingRoleIds().add(role.getName());
						}
					}
					
					setEventsVO(getEvents().copyFromEntityToVo(getEvents()));
				}
				else
				{
					setEvents(null);
					setChkBoxSelectedIds(null);
					setEventsVO(null);
				}
				
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	} 
	@Actions( { @Action(value = "ajaxViewStudentsByClassName", results = { @Result(location = "student/ajaxViewStudentList.jsp", name = "success") }) })
	public String viewStudentsByClassName() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'viewStudentsByClassName' method");
		}
		try {
			String classId = getParamValue("type");
			if (!StringFunctions.isNullOrEmpty(classId)) {
				if(!ObjectFunctions.isNullOrEmpty(getUserAcademicYearId()))
				{
					setStudentsList(adminManager.getAllStudentsByClassName(Long.valueOf(classId), getUserCustId(),Constants.YES_STRING, getUserAcademicYearId()));
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoEditStudentDetails", results = { @Result(location = "student/ajaxEditStudentDetails.jsp", name = "success") }) })
	public String editStudentDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'doEditStudentDetails' method");
		}
		try {
			String academicYearId = null;
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = (String) getSession().getAttribute("academicYear");
			} else {
				academicYearId = (String) getSession().getAttribute("newYear");
			}
			setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
			setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(),Long.valueOf(academicYearId),null));
			String studentId = getParamValue("id");
			if (!StringFunctions.isNullOrEmpty(studentId)) {
				setStudent(adminManager.getStudentByRollNumber(studentId, getUserCustId()));
				if(!ObjectFunctions.isNullOrEmpty(getStudent())){
					setNewUser(getStudent().getAccount());
					setPerson(getStudent().getAccount().getPerson());
					setAddress(getStudent().getAccount().getPrimaryAddress());
					setStudyClassId(String.valueOf(getStudent().getClassSection().getId()));
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
			@Action(value = "ajaxSendEmailToParent", results = { @Result(location = "student/ajaxManageStudents.jsp", name = "success") }),
			@Action(value = "ajaxSendEmailToStaff", results = { @Result(location = "staff/popupSendEmail.jsp", name = "success") })

	})
	public String ajaxSendEmailToParent() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSendEmailToParent' method");
		}
		try {
			String subject = getParamValue("subject");
			String description = getParamValue("description");
			ViewAllUsers viewAllUsers = null;
			if (getTempId() != 0) {
				viewAllUsers = (ViewAllUsers) staffManager.get(ViewAllUsers.class, Long.valueOf(getTempId()),"accountId");
				if (!ObjectFunctions.isNullOrEmpty(viewAllUsers)) {
					String[] emailAddresses = new String[1];
					if(Constants.SCHOOL_STUDENT.equalsIgnoreCase(viewAllUsers.getRoleName()) || Constants.SCHOOL_PARENT.equalsIgnoreCase(viewAllUsers.getRoleName()))
					{
						emailAddresses[0] = viewAllUsers.getParentEmail();
					}
					else
					{
						emailAddresses[0] = viewAllUsers.getStaffEmail();
					}
					if(!ObjectFunctions.isNullOrEmpty(emailAddresses[0])){
						MailUtil mailUtil=new MailUtil(emailAddresses, subject, description, getUser());
						mailUtil.sendEmailToParentOrStaff(viewAllUsers);
						mailUtil=null;
						super.addActionMessage("Message sent successfully.");
					}else{
						super.addActionError("Please add E-Mail.");
					}
				}viewAllUsers = null;
				setSubject(null);
				setDescription(null);
			}
		} catch (Exception err) {
			err.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(err);jre = null;
		}
		adminStudentDashboard();
		return SUCCESS;
	}

	@Actions( {
			@Action(value = "ajaxSearchStudentsByRollNumber", results = { @Result(location = "student/ajaxViewStudentList.jsp", name = "success") }),
			@Action(value = "ajaxSearchStudentsFeeByRollNumber", results = { @Result(location = "fee/ajaxViewFeeStudentList.jsp", name = "success") }) })
	public String searchStudentsByRollNumber() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'searchStudentsByRollNumber' method");
		}
		try {
			String firstname = getParamValue("firstName");
			if (!StringFunctions.isNullOrEmpty(firstname)) {
				setWishTitle(firstname);
				// setViewStudentPersonAccountDetailsList(adminManager.getStudentsByRollNumber(getStudentNumber(),getUserCustId()));
				setViewStudentPersonAccountDetailsList(adminManager.getStudentsByFirstName(firstname, getUserCustId()));
				if (!ObjectFunctions.isNullOrEmpty(getViewStudentPersonAccountDetailsList())) {
					setStudentsList(getViewStudentPersonAccountDetailsList());
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDeleteStudent", results = { @Result(location = "student/ajaxViewStudentsList.jsp", name = "success") }) })
	public String deleteStudent() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'deleteStudent' method");
		}
		try {
			String studentId = getParamValue("id");
			if (!StringFunctions.isNullOrEmpty(studentId)) {
				Student student = adminManager.getStudentByRollNumber(studentId, getUserCustId());
				long studentAccoutnId = student.getAccount().getId();
				User studentAccount = (User) adminManager.get(User.class,studentAccoutnId);
				adminManager.deleteStudentAttendanceByStudentId(student.getId());
				adminManager.remove(Student.class, student.getId());
				studentAccount.setRoles(null);
				// adminManager.save(studentAccount);
				adminManager.remove(User.class, studentAccoutnId);
				student = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	/** Removed manageSchoolFeeDefaulters() method and implemented newly used getUserAcademicYearId()  -- Balu 23 th Apr 13 */
	@Actions( {
			@Action(value = "adminGetBackAllSchoolFee", results = { @Result(location = "fee/ajaxGetSchoolHome.jsp", name = "success") }),
			@Action(value = "ajaxAdminGetFourteenSchoolFee", results = { @Result(location = "fee/ajaxGetFourteenSchoolFee.jsp", name = "success") }),
			@Action(value = "ajaxAdminGetFifteenSchoolFee", results = { @Result(location = "fee/ajaxGetAboveFifteenSchoolFee.jsp", name = "success") }),
			@Action(value = "ajaxAdminGetThirtySchoolFee", results = { @Result(location = "fee/ajaxGetThirtySchoolFee.jsp", name = "success") }),
			@Action(value = "ajaxAdminSixtySchoolFee", results = { @Result(location = "fee/ajaxGetSixtySchoolFee.jsp", name = "success") }),
			@Action(value = "ajaxAdminUpcomingSchoolFee", results = { @Result(location = "fee/ajaxGetUpcomingSchoolFee.jsp", name = "success") }) })
	public String manageSchoolFeeHome() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'manageSchoolFee' method");
		}
		try {
			List<SchoolTerms> schoolTermsList=null;
			Date newDate = new Date();
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			String today = formatter.format(newDate);
			StringBuffer buffer = new StringBuffer();
			String transportmode=null;
			AcademicYear academicYear=getCurrentAcademicYear();
			buffer.append("(");
			if(getUser().isTransportFinance() ||  getUser().isSchoolTransport()){
				transportmode = Constants.TRANSPORT_STATUS;
				buffer.append("3");
			}else if(getUser().isHostelFinance() ||  getUser().isSchoolHostel()){
				buffer.append("4");
			}else{
				buffer.append("1,2");
			}
			buffer.append(")");
			if (!ObjectFunctions.isNullOrEmpty(getUserCustId())) {
				schoolTermsList=adminManager.getAll(SchoolTerms.class," custId="+getUserCustId()+" and  academicYearId="+getUserAcademicYearId()+" and dueDate <'"+today+" 00:00:00'  and feeSettingId in "+buffer.toString()+" order by dueDate");
				Double totalAmount = 0.0;
				for (SchoolTerms schoolTerms : schoolTermsList) {
					List<BigInteger> studentIds = adminManager.getAllStudentFeeDefaultersByCustId("vw_studentFeePaymentDetails",getUserCustId(),getUserAcademicYearId(),schoolTerms.getId(),"",transportmode);//,Constants.NO_STRING
					if (!ObjectFunctions.isNullOrEmpty(studentIds)) {
					     doGetclassWiseDefaultstudentsFeeList(schoolTerms, today,academicYear);
					     totalAmount =  getPaymentAmount()+totalAmount;
					     setPaymentAmount(0.0);
					}
				}
				setTotalAmount(totalAmount);
				academicYear=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxAdminSchoolFeeReports", results = { @Result(location = "fee/ajaxStudentPaymentReports.jsp", name = "success") }),
				@Action(value = "ajaxAllFinanceeReports", results = { @Result(location = "reports/viewAllFinanceReports.jsp", name = "success") }),
				@Action(value = "ajaxSelectedClassReportDetails", results = { @Result(location = "fee/ajaxSelectedClassFeeReports.jsp", name = "success") })
	})
	public String doSchoolFee() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'adminSchoolFeeReports' method");
	}
	try {
		
		if (getUserAcademicYearId()!=0) {
			 prepareSmsReportsMap();
			 setClassList(adminManager.getAllByCustId("ClassName",getUserCustId(),getUserAcademicYearId()));
		}
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}

	@Actions( {
			@Action(value = "ajaxAllAdminSchoolFeeReports", results = { @Result(location = "fee/ajaxGetFeePayments.jsp", name = "success") }),
			@Action(value = "ajaxAdminSchoolFeeReports", results = { @Result(location = "fee/ajaxStudentPaymentReports.jsp", name = "success") }),
			@Action(value = "ajaxSelectedClassReportDetails", results = { @Result(location = "fee/ajaxSelectedClassFeeReports.jsp", name = "success") }) })
	public String ajaxAllAdminSchoolFeeReports() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'adminSchoolFeeReports' method");
		}
		try {
			
			if (getUserAcademicYearId() != 0) {
				prepareFeeDuesList();
				setClassList(adminManager.getAllByCustId("ClassName",getUserCustId(), getUserAcademicYearId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions({ @Action(value = "ajaxAddEvent", results = { @Result(location = "event/viewEvents.jsp", name = "success") }) })
	public String addEvent() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering ' addEvent ' method");
		}
		try {
			Events events = null;
			if (getUserAcademicYearId() > 0) 
			{
				if (!ObjectFunctions.isNullOrEmpty(getEventsVO()))
				{
					getEventsVO().setStartDateTime(DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,getEventsVO().getStartDateTime()));
					getEventsVO().setEndDateTime(DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,getEventsVO().getEndDateTime()));
					getEventsVO().setEventCreatedUserId(getUser().getId());
					getEventsVO().setRequestType("W");
					events = adminManager.addEvent(getEventsVO());
					if(getEventsVO().getId() > 0){
						super.addActionMessage("Event updated successfully.");
					}
					else{
						super.addActionMessage("Event created successfully.");
					}
					events = null;
				}
			}
	    
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally
		{
			eventHome();
		}
		return SUCCESS;
	}
	/*
	* Removed session AcademicYearId and unnecessary code is done by venkatesh - 04-29-2013
	*/
	@Actions( { @Action(value = "ajaxDeleteLeave", results = { @Result(location = "leave/viewLeavesList.jsp", name = "success") }) })
	public String ajaxDeleteLeave() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDeleteLeave' method");
		}
		try {
			String leavesId = getParamValue("id");
			if (!StringFunctions.isNullOrEmpty(leavesId)) {
				adminManager.remove(Leave.class, Long.valueOf(leavesId));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/*
	* Removed session AcademicYearId and unnecessary code is done by venkatesh - 04-29-2013
	*/
	@Actions( { @Action(value = "ajaxDoAdminApplyLeave", results = { @Result(location = "leave/adminApplyLeave.jsp", name = "success") }) })
	public String adminApplyLeave() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'adminApplyLeave' method");
		}
		try {
			long id = getUser().getId();
			ViewStaffPersonAccountDetails viewStaffPersonAccountDetails = (ViewStaffPersonAccountDetails) adminManager.get(ViewStaffPersonAccountDetails.class, id,"accountId");
			if (!ObjectFunctions.isNullOrEmpty(viewStaffPersonAccountDetails)) {
				setViewStaffPersonAccountDetails(viewStaffPersonAccountDetails);
			}
			Leave leave = new Leave();
			leave.setStartDate(new Date());
			setLeave(leave);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/*
	* Removed session AcademicYearId and unnecessary code is done by venkatesh - 04-29-2013
	*/
	@Actions( { @Action(value = "ajaxDoEditAdminleave", results = { @Result(location = "leave/editAdminLeave.jsp", name = "success") }) })
	public String doEditAdminLeave() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'Staff Home' method");
		}
		try {
			String leavesId = getParamValue("id");
			if (!StringFunctions.isNullOrEmpty(leavesId)) {
				setSelectedId(leavesId);
				Leave leaves = (Leave) adminManager.get(Leave.class, Long.valueOf(leavesId));
				if (!ObjectFunctions.isNullOrEmpty(leaves)) {
					setLeave(leaves);
				}leaves=null;
			}
			ViewStaffPersonAccountDetails viewStaffPersonAccountDetails = (ViewStaffPersonAccountDetails) adminManager.get(ViewStaffPersonAccountDetails.class, getUser().getId(),"accountId");
			if (!ObjectFunctions.isNullOrEmpty(viewStaffPersonAccountDetails)) {
				setViewStaffPersonAccountDetails(viewStaffPersonAccountDetails);
			}viewStaffPersonAccountDetails=null;
			setTodayDate(DateFormatter.formatDate(DateFormatter.MMDDCCYY_PATTERN, new Date()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	} 

	@Actions( { @Action(value = "ajaxDoEditStaffDetails", results = { @Result(location = "staff/ajaxEditStaffDetails.jsp", name = "success") }) })
	public String doEditStaffDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'doEditStaffDetails' method");
		}
		try {
			setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
			setChkBoxSelectedIds(null); //added by seshu
			if (!ObjectFunctions.isNullOrEmpty(getParamValue("staffId"))) {
				long staffId = Long.parseLong(getParamValue("staffId"));
				setStaff((Staff) adminManager.get(Staff.class, staffId));
				setNewUser(getStaff().getAccount());
				setPerson(getStaff().getAccount().getPerson());
				setAddress(getStaff().getAccount().getPrimaryAddress());
				ViewStaffPersonAccountDetails viewStaffPersonAccountDetails = (ViewStaffPersonAccountDetails) adminManager.get(ViewStaffPersonAccountDetails.class, getNewUser().getId(),"accountId");
				// ViewUserRoles viewUserRoles =
				// (ViewUserRoles)adminManager.get(ViewUserRoles.class,getNewUser().getId(),"accountId");
				if (!ObjectFunctions.isNullOrEmpty(viewStaffPersonAccountDetails)) {
					setViewStaffPersonAccountDetails(viewStaffPersonAccountDetails);
					String staffType = viewStaffPersonAccountDetails.getRoleName();
					log.debug("staff Role : " + staffType);
					if (!StringFunctions.isNullOrEmpty(staffType)) {
						if (Constants.SCHOOL_TEACHER.equalsIgnoreCase(staffType)) {
							List schoolHodsList = adminManager.getViewStaffDetailsByRoleName(Constants.SCHOOL_HOD,getUserCustId(),Constants.YES_STRING);
							if (!ObjectFunctions.isNullOrEmpty(schoolHodsList)) {
								Iterator classTeachersListIterator = schoolHodsList.iterator();
								for (Iterator classTeachersIterator = classTeachersListIterator; classTeachersIterator.hasNext();) {
									ViewStaffPersonAccountDetails classTeacher = (ViewStaffPersonAccountDetails) classTeachersIterator.next();
									getSelectboxMap().put(classTeacher.getUsername(),classTeacher.getPersonFullName());
									classTeacher = null;
								}
								// JSR TO-DO: see the below commented line whether required or not
								//setEmailBody("All HODs");
							}
						} else if (Constants.SCHOOL_HOD.equalsIgnoreCase(staffType)) {
							List schoolHodsList = adminManager.getViewStaffDetailsByRoleName(Constants.SCHOOL_PRINCIPAL,getUserCustId(),Constants.YES_STRING);
							if (!ObjectFunctions.isNullOrEmpty(schoolHodsList)) {
								Iterator classTeachersListIterator = schoolHodsList.iterator();
								for (Iterator classTeachersIterator = classTeachersListIterator; classTeachersIterator.hasNext();) {
									ViewStaffPersonAccountDetails classTeacher = (ViewStaffPersonAccountDetails) classTeachersIterator.next();
									getSelectboxMap().put(classTeacher.getUsername(),classTeacher.getPersonFullName());
									classTeacher = null;
								}
								// JSR TO-DO: see the below commented line whether required or not
								//setEmailBody("Principal");
							}
						} else if (Constants.SCHOOL_PRINCIPAL.equalsIgnoreCase(staffType)) {
							setFileName("Principal");
						}
						if (Constants.SCHOOL_TEACHER.equalsIgnoreCase(staffType) || Constants.SCHOOL_HOD.equalsIgnoreCase(staffType) || Constants.SCHOOL_PRINCIPAL.equalsIgnoreCase(staffType)) {
							if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
								long academicYearId = Long.valueOf((String) getSession().getAttribute("academicYear"));
								setStudySubjectList(adminManager.getStudySubjectByCustIdAndAcademicYear(getUserCustId(),academicYearId));
								List<StaffElgibleSubjects> staffElgibleSubjects=adminManager.getStaffElgibleSubjectsByAcademicYearId(staffId,academicYearId);
								if (!ObjectFunctions.isNullOrEmpty(staffElgibleSubjects)) {
									for (StaffElgibleSubjects subject : staffElgibleSubjects) {
										getChkBoxSelectedIds().add(String.valueOf(subject.getStudySubjectId().getId()));
										subject = null;
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}


	@Actions( { @Action(value = "ajaxEditEvent", results = { @Result(location = "event/viewEvents.jsp", name = "success") }) })
	public String editEvent() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering ' editEvent ' method");
		}
		try {
		    
                		long eventsId = Long.valueOf(getParamValue("eventId"));
                		Events events = (Events)adminManager.get(Events.class,eventsId);
                		if (!ObjectFunctions.isNullOrEmpty(events)) {
				events.setCustId(getUserCustId());
				events.setSmsEventId(getEvents().getSmsEventId());
				events.setEventName(getEvents().getEventName());
				events.setEventDescription(getEvents().getEventDescription());
				events.setStartDate(getEvents().getStartDate());
				events.setStartTime(getEvents().getStartTime());
				events.setEndDate(getEvents().getEndDate());
				events.setEndTime(getEvents().getEndTime());
				events.setStatus(getEvents().getStatus());
				if (getEvents().getStatus().equalsIgnoreCase("H")) {
					String[] weekDays = { "", "SUNDAY", "MONDAY", "TUESDAY","WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" };
					SchoolHolidays schoolHolidays = new SchoolHolidays();

					schoolHolidays.setCustId(getUserCustId());
					schoolHolidays.setStartDate(getEvents().getStartDate());
					schoolHolidays.setEndDate(getEvents().getEndDate());
					schoolHolidays.setStatus("H");
					schoolHolidays.setAcademicYear(academicYear);
					schoolHolidays.setCreatedById(getUser().getId());
					schoolHolidays.setLastUpdatedById(getUser().getId());
					schoolHolidays.setCreatedDate(new Date());
					schoolHolidays.setLastAccessDate(new Date());
					schoolHolidays.setLastUpdatedDate(new Date());
					int noOfDays = DateFunctions.daysBetween(getEvents().getStartDate(), getEvents().getEndDate());
					schoolHolidays.setNoOfDays(noOfDays);
					Calendar cal1 = Calendar.getInstance();
					cal1.setTime(getEvents().getStartDate());
					cal1.setTime(getEvents().getStartDate());
					for (int j = 0; j <= noOfDays; j++) {
						String date = DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, cal1.getTime());
						int day = cal1.get(Calendar.DAY_OF_WEEK);
						//SchoolHolidays updateHolidays = adminManager.getHolidaysListForUpdate(date, getUserCustId(),0);
						SchoolHolidays updateHolidays = adminManager.getHolidayByCustIdAndAcademicYearId(getUserCustId(),0,date,0,null,null,"holidayDateLike");
						if (!ObjectFunctions.isNullOrEmpty(updateHolidays)) {
							cal1.add(Calendar.DATE, 1);
							schoolHolidays.setStartDate(cal1.getTime());
							continue;
						} else {
							if (cal1.get(Calendar.DAY_OF_WEEK) == Integer.valueOf(day)) {
								schoolHolidays.setDescription(weekDays[Integer.valueOf(day)]);
							}
							schoolHolidays.setHolidayDate(new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime()));
							int monthId1 = Integer.parseInt(new SimpleDateFormat("MM").format(cal1.getTime()));
							schoolHolidays.setYearId(new SimpleDateFormat("yyyy").format(cal1.getTime()));
							schoolHolidays.setMonthId(monthId1);
							adminManager.save(schoolHolidays);
							cal1.add(Calendar.DATE, 1);
							setFromDate(cal1.getTime());
						}
					}
				}
				adminManager.save(events);
			}
	    super.addActionMessage("Event updated sucessfully.");
	    eventHome();
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAddTimeTable", results = { @Result(location = "academic/ajaxAddClassTimetable.jsp", name = "success") }) })
	public String doAddClassTimetable() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'doAddClassTimetable' method");
		}
		try {
			//setClassList(adminManager.getStudyClassesByCustId(1));
			setStudySubjectList(adminManager.getAll(StudySubject.class));

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	} 
 
	@Actions( { @Action(value = "ajaxDoShowFeeDetails", results = { @Result(location = "fee/displaySchoolFee.jsp", name = "success") }) })
	public String viewSchoolFee() {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoShowFeeDetails' method");
		}
		try {
			String displayFeeId = getParamValue("displayFeeDetails");
			setFeeStructure((Fee) adminManager.get(Fee.class, Long.parseLong(displayFeeId)));

		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/*
	* Removed PrepareAcademicYearId and used getUserAcademicYearId() done by venkatesh - 04-26-2013
	*/
	@Actions( { @Action(value = "ajaxViewAllManageLeaves", results = { @Result(location = "staff/leaves/leaveManagementHome.jsp", name = "success") }) })
	/*@Actions( { @Action(value = "ajaxViewAllManageLeaves", results = { @Result(location = "staff/leaves/ajaxViewManageLeavesList.jsp", name = "success") }) })*/
	public String viewAllManageLeaves() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'viewAllManageLeaves' method");
		}
		try {
			LeaveManagement leavemangementObj=new LeaveManagement();
				if("C".equalsIgnoreCase(getAnyId())){
					leavemangementObj.setPermanentOrContract("C");
				}else{
					leavemangementObj.setPermanentOrContract("P");
				}
			setLeaveManagement(leavemangementObj);
			doAssignedManageLeaves();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoManageLeaves", results = { @Result(location = "staff/leaves/ajaxManageLeaves.jsp", name = "success") }) })
	public String doManageLeaves() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'doManageLeaves' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			List rolesList=adminManager.getAll(Role.class);
			if(!ObjectFunctions.isNullOrEmpty(rolesList)){
				LeaveManagement leaveManagement=null;
				LeaveManagement leaveManagementShow=null;
				for(Object objRole:rolesList){
					Role role=(Role)objRole;
					if("C".equalsIgnoreCase(getAnyId())){
						leaveManagement=(LeaveManagement)adminManager.get(LeaveManagement.class,"custId="+getUserCustId()+" and permanentOrContract='"+ Constants.BOOK_CLOSED+ "' and academicYearId="+getUserAcademicYearId()+" and roleId="+role.getId());
						leaveManagementShow=new LeaveManagement();
						leaveManagementShow.setPermanentOrContract("C");
					}else{
						leaveManagement=(LeaveManagement)adminManager.get(LeaveManagement.class,"custId="+getUserCustId()+" and permanentOrContract='"+ Constants.PAYMENT_STATUS+ "' and academicYearId="+getUserAcademicYearId()+" and roleId="+role.getId());
						leaveManagementShow=new LeaveManagement();
						leaveManagementShow.setPermanentOrContract("P");
					}
					setLeaveManagement(leaveManagementShow);
					leaveManagementShow=null;
					if(ObjectFunctions.isNullOrEmpty(leaveManagement))
					{
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_PRINCIPAL )){
							getTeachingRoleMap().put(Constants.SCHOOL_PRINCIPAL, "Principal");
						}
						else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_VICEPRINCIPAL)){
							getTeachingRoleMap().put(Constants.SCHOOL_VICEPRINCIPAL, "Vice Principal");
						}
						else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_HOD)){
							getTeachingRoleMap().put(Constants.SCHOOL_HOD, "Hod");
						}
						else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_TEACHER)){
							getTeachingRoleMap().put(Constants.SCHOOL_TEACHER, "Teacher");
						} else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ASST_STAFF)){
							getTeachingRoleMap().put(Constants.SCHOOL_ASST_STAFF, "Asst Teacher");
						} else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ADMIN_COORDINATOR)){
							getTeachingRoleMap().put(Constants.SCHOOL_ADMIN_COORDINATOR, "Admin Coordinator");
						}
						if(!ObjectFunctions.isNullOrEmpty(getCustomer())){
							if(getCustomer().isHostelModuleStatus()) {
								if(role.getName().equalsIgnoreCase(Constants.SCHOOL_HOSTEL)){
									getNonTeachingRoleMap().put(Constants.SCHOOL_HOSTEL, "Hostel");
								}
								else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_HOSTELFINANCE)){
									getNonTeachingRoleMap().put(Constants.SCHOOL_HOSTELFINANCE, "Hostel Finance");
								}
							}
						}
						if (!ObjectFunctions.isNullOrEmpty(getCustomer())) {
							if (getCustomer().isTransportModuleStatus()) {
							  if(role.getName().equalsIgnoreCase(Constants.SCHOOL_TRANSPORT)){
									getNonTeachingRoleMap().put(Constants.SCHOOL_TRANSPORT,"Transport");
								}
								else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_HELPER )){
									getNonTeachingRoleMap().put(Constants.SCHOOL_HELPER, "Helper");
								}
								else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_DRIVER)){
									getNonTeachingRoleMap().put(Constants.SCHOOL_DRIVER, "Driver");
								}
								else if(role.getName().equalsIgnoreCase(Constants.SCHOOL_TRANSPORTFINANCE)){
									getNonTeachingRoleMap().put(Constants.SCHOOL_TRANSPORTFINANCE, "Transport Finance");
								}
							}
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_LIBRARIAN )){
							getNonTeachingRoleMap().put(Constants.SCHOOL_LIBRARIAN, "Librarian");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_CLERK)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_CLERK, "Clerk");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_FINANCE)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_FINANCE, "Finance");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_OTHER)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_OTHER, "Others");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_PEON)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_PEON, "Peon");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_AYAH)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_AYAH, "Ayah");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_CONDUCTOR)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_CONDUCTOR, "Conductor");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_SYSTEMADMINISTRATOR)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_SYSTEMADMINISTRATOR, "System Administrator");
						} 
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_LABASST)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_LABASST, "Lab Assistant");
						} 
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_MANAGEMENTTRAINEE)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_MANAGEMENTTRAINEE, "Management Trainee");
						} 
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_WATCHMAN)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_WATCHMAN, "Watchman");
						} 
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_TYPIST)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_TYPIST, "Typist");
						} 
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_SWEEPER)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_SWEEPER, "Sweeper");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_PUBLICRELATIONOFFICER)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_PUBLICRELATIONOFFICER, " Public Relation Officer");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ADMINOFFICER)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_ADMINOFFICER, "Admin Officer");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ADMIN)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_ADMIN, "Admin");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ROLE_MESS_MANAGER)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_MESS_MANAGER, "Mess Manager");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ROLE_DIRECTOR)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_DIRECTOR, "Director");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ROLE_STOREKEEPER)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_STOREKEEPER, "Store  Keeper");
						}if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ROLE_RECEPTIONIST)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_RECEPTIONIST, "Receptionist");
						}
						if(role.getName().equalsIgnoreCase(Constants.SCHOOL_ROLE_STAFF_NURSE)){
							getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_STAFF_NURSE, "Staff Nurse");
						}
					}
					leaveManagement=null;
				}
			}
			//prepareTeachingRolesMap();
			//prepareNonTeachingRolesMap();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxManageLeaves", results = { @Result(location = "staff/leaves/ajaxViewManageLeavesList.jsp", name = "success") }) })
	public String ajaxManageLeaves() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxManageLeaves' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getLeaveManagement()) && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
				AcademicYear academicYear = getCurrentAcademicYear();
				String roleName =null;
				Boolean isTrue=false;
				Boolean isCreatedTrue=false;
				Boolean isUpdatedTrue=false;
					String staffRoles[]=getSelectedId().split(",");
					StringBuffer roleNameNotAvailable=new StringBuffer();
					LeaveManagement leaveManagement =null;
					for(String staffRole:staffRoles){
						if(StringFunctions.isNotNullOrEmpty(staffRole)){
							roleName = staffRole.replaceAll(",", "");
							Role role = adminManager.getRoleByName(roleName);
							if(!ObjectFunctions.isNullOrEmpty(role) && !ObjectFunctions.isNullOrEmpty(academicYear)){
								//leaveManagement = adminManager.getLeaveManagementByRoleName(role.getId(),getUserCustId(),academicYear.getId());
									leaveManagement = (LeaveManagement) adminManager.get(LeaveManagement.class,"custId="+getUserCustId()+" and roleId="+role.getId()+" and permanentOrContract='"+getLeaveManagement().getPermanentOrContract()+ "'  and academicYearId="+getUserAcademicYearId());
								if (ObjectFunctions.isNullOrEmpty(leaveManagement) ) 
								{
									leaveManagement = new LeaveManagement();
									leaveManagement.setSickLeaves(getLeaveManagement().getSickLeaves());
									leaveManagement.setCasualLeaves(getLeaveManagement().getCasualLeaves());
									leaveManagement.setEarnedLeaves(getLeaveManagement().getEarnedLeaves());
									leaveManagement.setCustId(getUserCustId());
									leaveManagement.setPermanentOrContract(getLeaveManagement().getPermanentOrContract());
									leaveManagement.setRole(role);
									leaveManagement.setCreatedDate(new Date());
									leaveManagement.setCreatedById(getUser().getId());
									isCreatedTrue=true;
								} else {
									int leavesCount=adminManager.getCount("vw_staffLeaveDetails", "leaveManagementId="+leaveManagement.getId()+" and roleName='"+role.getName()+"' and permanentOrContract='"+getLeaveManagement().getPermanentOrContract()+"' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by staffId,permanentOrContract");
									if(leavesCount > 0 && getLeaveManagement().getSickLeaves() >= leaveManagement.getSickLeaves() && getLeaveManagement().getCasualLeaves() >= leaveManagement.getCasualLeaves() && getLeaveManagement().getEarnedLeaves() >= leaveManagement.getEarnedLeaves() || leavesCount == 0  )
									{
										leaveManagement.setSickLeaves(getLeaveManagement().getSickLeaves());
										leaveManagement.setCasualLeaves(getLeaveManagement().getCasualLeaves());
										leaveManagement.setEarnedLeaves(getLeaveManagement().getEarnedLeaves());
										isUpdatedTrue=true;
									}
									else
										super.addActionError("Can edit more than previous leaves but should not editable lesser than previous.");
								}
								leaveManagement.setLastUpdatedDate(new Date());
								leaveManagement.setLastAccessDate(new Date());
								leaveManagement.setAcademicYear(academicYear);
								
								adminManager.save(leaveManagement);
							}else{
								roleNameNotAvailable.append(roleName);
								roleNameNotAvailable.append(",");
								isTrue=true;
							}
							roleName=null;
						}
					}
					academicYear=null;
				if(isTrue){
					super.addActionError("Selected role name(s) "+roleNameNotAvailable.toString()+" not available");
				}
				if(isCreatedTrue){
					super.addActionMessage("Leave(s) configured successfully.");
				}
				else if(isUpdatedTrue){
					super.addActionMessage("Leave(s) updated successfully");
				}
				roleNameNotAvailable=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		viewAllManageLeaves();
		return SUCCESS;
	}
	/*
	* Removed PrepareAcademicYearId and used getUserAcademicYearId() done by venkatesh - 09-05-2013
	*/
	@Actions( { @Action(value = "ajaxDeleteManageLeave", results = { @Result(location = "staff/leaves/ajaxViewManageLeavesList.jsp", name = "success") }) })
	public String deleteManageLeave() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'deleteManageLeave' method");
		}
		try {
			String leavesManageId = getParamValue("id");
			if (!StringFunctions.isNullOrEmpty(leavesManageId)) {
				adminManager.remove(LeaveManagement.class, Long.parseLong(leavesManageId));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		viewAllManageLeaves();
		return SUCCESS;
	}
	/*
	* Removed PrepareAcademicYearId and used getUserAcademicYearId() done by venkatesh - 09-05-2013
	*/
	@Actions( { @Action(value = "ajaxDoEditManageLeaves", results = { @Result(location = "staff/leaves/editManageLeaves.jsp", name = "success") }) })
	public String doEditManageLeaves() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'doEditStaffDetails' method");
		}
		try {
			long leavesManageId = Long.parseLong(getParamValue("id"));
			if (!ObjectFunctions.isNullOrEmpty(leavesManageId)) {
				prepareTeachingRolesMap();
				prepareNonTeachingRolesMap(null);
				setLeaveManagement((LeaveManagement) adminManager.get(LeaveManagement.class, leavesManageId));
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxEditManageLeaves", results = { @Result(location = "staff/leaves/ajaxViewManageLeavesList.jsp", name = "success") }) })
	public String ajaxEditManageLeaves() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditManageLeaves' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getLeaveManagement().getId())) {
				LeaveManagement leaveManagement = (LeaveManagement) adminManager.get(LeaveManagement.class, getLeaveManagement().getId());
				if (!ObjectFunctions.isNullOrEmpty(leaveManagement)) {
					leaveManagement.setCasualLeaves(getLeaveManagement().getCasualLeaves());
					leaveManagement.setSickLeaves(getLeaveManagement().getSickLeaves());
					leaveManagement.setLastUpdatedById(getUser().getId());
					leaveManagement.setLastAccessDate(new Date());
					leaveManagement.setLastUpdatedDate(new Date());
					adminManager.save(leaveManagement);
					super.addActionMessage("Leaves updated successfully.");

				}
			}
		} catch (Exception ex) {
			super.addActionError("Already Updated This Role");
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		viewAllManageLeaves();
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoCancelManageLeaves", results = { @Result(location = "staff/leaves/ajaxViewManageLeavesList.jsp", name = "success") }) })
	public String doCancelManageLeaves() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'doCancelManageLeaves' method");
		}

		try {
			viewAllManageLeaves();

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoGetSupervisorList", results = { @Result(location = "staff/supervisorsList.jsp", name = "success") }) })
	public String doGetSupervisorList() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'doGetSupervisorList' method");
		}
		try {
			String staffType = getParamValue("staffType");
			setFileName(null);
			List schoolHodsList  = null;
			if (!StringFunctions.isNullOrEmpty(staffType)) {
				if (Constants.SCHOOL_TEACHER.equalsIgnoreCase(staffType) || Constants.SCHOOL_ASST_STAFF.equals(staffType)|| Constants.SCHOOL_ADMIN_COORDINATOR.equals(staffType)) {
					 schoolHodsList = adminManager.getViewStaffDetailsByRoleName(Constants.SCHOOL_HOD, getUserCustId(),Constants.YES_STRING);
					if (!ObjectFunctions.isNullOrEmpty(schoolHodsList)) {
						Iterator classTeachersListIterator = schoolHodsList.iterator();
						for (Iterator classTeachersIterator = classTeachersListIterator; classTeachersIterator.hasNext();) {
							ViewStaffPersonAccountDetails classTeacher = (ViewStaffPersonAccountDetails) classTeachersIterator.next();
							getSelectboxMap().put(classTeacher.getUsername(),classTeacher.getPersonFullName());
							classTeacher = null;
						}
					}
					
				}
				if (Constants.SCHOOL_HOD.equalsIgnoreCase(staffType) || Constants.SCHOOL_VICEPRINCIPAL.equals(staffType)) {
					 schoolHodsList = adminManager.getViewStaffDetailsByRoleName(Constants.SCHOOL_PRINCIPAL, getUserCustId(),Constants.YES_STRING);
					if (!ObjectFunctions.isNullOrEmpty(schoolHodsList)) {
						Iterator classTeachersListIterator = schoolHodsList.iterator();
						for (Iterator classTeachersIterator = classTeachersListIterator; classTeachersIterator.hasNext();) {
							ViewStaffPersonAccountDetails classTeacher = (ViewStaffPersonAccountDetails) classTeachersIterator.next();
							getSelectboxMap().put(classTeacher.getUsername(),classTeacher.getPersonFullName());
							classTeacher = null;
						}
					}
				}
				setTempList(schoolHodsList);
				if(Constants.SCHOOL_HOD.equalsIgnoreCase(staffType)||Constants.SCHOOL_ADMIN_COORDINATOR.equalsIgnoreCase(staffType)){
						checkStudyClassHavingStudentsOrNot();
				}
				setTempString(staffType);
			}

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	} 

	@Actions( { @Action(value = "ajaxClassSubjects", results = { @Result(location = "ajaxClassSubjects.jsp", name = "success") }) })
	public String classSubjects() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'classSubjects' method");
		}
		try {
			setClassId(getParamValue("classId"));
			setStudyClass((StudyClass)adminManager.get(StudyClass.class," id ="+getClassId()+" and custId="+getUserCustId()));
			getSession().removeAttribute("timeTableData");
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
			@Action(value = "ajaxViewNoticeBoardList", results = { @Result(location = "academic/noticeBoardHome.jsp", name = "success") }),
			@Action(value = "ajaxCancelNoticeBoard", results = { @Result(location = "academic/viewNoticeBoardMessagesList.jsp", name = "success") })

	})
	public String ajaxViewNoticeBoardList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewNoticeBoardList' method");
		}
		try {
			String academicYearId = null;
			AcademicYear academicYear = null; 
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = (String) getSession().getAttribute("academicYear");
				
			} else {
				academicYear = adminManager.getCurrentAcademicYear("Y",getUserCustId());
				academicYearId = String.valueOf(academicYear.getId());
			}
			List noticeBoardList = adminManager.getAllNoticeBoardMessagesList("NB", getUserCustId(),academicYearId);
			if (!ObjectFunctions.isNullOrEmpty(noticeBoardList)) {
				setNoticeBoardMessagesList(noticeBoardList);
				Collections.sort(getNoticeBoardMessagesList());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;

	}

	@Actions( { @Action(value = "ajaxPostNoticeBoard", results = { @Result(location = "academic/viewNoticeBoardMessagesList.jsp", name = "success") })

	})
	public String ajaxPostNoticeBoard() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPostNoticeBoard' method");
		}

		try {
			String username = getParamValue("viewStudentPersonAccountDetails.username");
			Customer customer;
			AcademicYear academicYear=academicYear=adminManager.getCurrentAcademicYear("Y",getUserCustId());
			if (!ObjectFunctions.isNullOrEmpty(getMessages())) {
				
				customer = getCustomerByCustId();
				if(!ObjectFunctions.isNullOrEmpty(customer)){
				     getMessages().setCustomer(customer);
				}
				getMessages().setTitle(null);
				getMessages().setCreatedById(getUser().getId());
				getMessages().setUsername(username);
				//getMessages().setCustId(getUserCustId());
				getMessages().setMessageDate(new Date());
				getMessages().setCreatedDate(new Date());
				getMessages().setLastAccessDate(new Date());
				getMessages().setLastUpdatedDate(new Date());
				getMessages().setLastUpdatedById(getUser().getId());
				getMessages().setAcademicYear(academicYear);
				adminManager.save(getMessages());
				super.addActionMessage("Message posted successfully.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxViewNoticeBoardList();
		return SUCCESS;
	}
	 

	@Actions( {
			@Action(value = "ajaxViewHolidayBoardList", results = { @Result(location = "academic/holidaysBoardHome.jsp", name = "success") }),
			@Action(value = "ajaxCancelHolidayBoard", results = { @Result(location = "academic/viewHolidayBoardMessagesList.jsp", name = "success") })

	})
	public String ajaxViewHolidayBoardList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewHolidayBoardList' method");
		}
		try {
			List holidayBoardList = adminManager.getAllHolidayBoardMessagesList("SH", getUserCustId());
			if (!ObjectFunctions.isNullOrEmpty(holidayBoardList)) {
				setHolidayBoardMessagesList(holidayBoardList);
				Collections.sort(getHolidayBoardMessagesList());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;

	}

	@Actions( { @Action(value = "ajaxPostHolidayBoard", results = { @Result(location = "academic/viewHolidayBoardMessagesList.jsp", name = "success") }) })
	public String ajaxPostHolidayBoard() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPostHolidayBoard' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getSchoolHolidays())) {
				StringBuffer classNames = new StringBuffer();
				if ("ToALL".equalsIgnoreCase(getEventBelongs())) {
				} else {
					if (!ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds())) {
						for (String className : getChkBoxSelectedIds()) {
							classNames.append(className);
							classNames.append(",");
						}
					}
				}
				getSchoolHolidays().setCustId(getUserCustId());
				getSchoolHolidays().setStatus("SH");
				getSchoolHolidays().setCreatedById(getUser().getId());
				getSchoolHolidays().setLastUpdatedById(getUser().getId());
				getSchoolHolidays().setCreatedDate(new Date());
				getSchoolHolidays().setLastAccessDate(new Date());
				getSchoolHolidays().setLastUpdatedDate(new Date());
				adminManager.save(getSchoolHolidays());
				super.addActionMessage("Holiday posted successfully.");
				List holidayBoardList = adminManager.getAllHolidayBoardMessagesList("SH", getUserCustId());
				if (!ObjectFunctions.isNullOrEmpty(holidayBoardList)) {
					setHolidayBoardMessagesList(holidayBoardList);
					Collections.sort(getHolidayBoardMessagesList());
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxViewHolidayBoardList();
		return SUCCESS;
	}

	@Actions( {
			@Action(value = "ajaxDoGetStaffSubjects", results = { @Result(location = "academic/staffSubjectsHome.jsp", name = "success") }),
			@Action(value = "ajaxDoCancelStaffSubjects", results = { @Result(location = "academic/ajaxStaffSubjectsList.jsp", name = "success") }) })
	public String ajaxGetStaffSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStaffSubjects' method");
		}
		try {
			getSession().removeAttribute("ClassTeacherList");
			List<Object[]> teacherAccountIdsList = adminManager.getAll("select accountId,firstName from vw_staffDetails where custId="+getUserCustId()+" and roleName in ('ROLE_TEACHER','ROLE_HOD','ROLE_PRINCIPAL','ROLE_ADMIN_COORDINATOR') and status='"+Constants.YES_STRING+"' and academicYearStatus='Y' order by FIELD(roleName,'ROLE_PRINCIPAL','ROLE_HOD','ROLE_TEACHER')");
			//List<ViewStaffPersonAccountDetails> teachersList = adminManager.getAllTeacherListByStatus(getUserCustId(),Constants.YES_STRING);
			if (!ObjectFunctions.isNullOrEmpty(teacherAccountIdsList)) {
				StringBuffer buffer = new StringBuffer();
				buffer.append("(");
				for (Object[] accountIdObj : teacherAccountIdsList) 
				{
					if (!ObjectFunctions.isNullOrEmpty(accountIdObj[0])) {
						buffer.append(accountIdObj[0].toString()+",");
					}
				}
				buffer.append("0)");
				List<Staff> staffsList = adminManager.getAll(Staff.class, "accountId in " + buffer.toString() + " and status='" + Constants.YES_STRING + "'");
				if (!ObjectFunctions.isNullOrEmpty(staffsList)) {
					for (Staff staff : staffsList)
					{
						if (!ObjectFunctions.isNullOrEmpty(staff)) 
						{
							staff.getClassTeachers();
							if (!ObjectFunctions.isNullOrEmpty(staffsList)) {
								getTeacherSubjectsList().addAll(staffsList);
							}
						}
					}
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
			@Action(value = "ajaxGetSyllabusSubjects", results = { @Result(location = "academic/ajaxAddSyllabus.jsp", name = "success") }) })
	public String ajaxGetSyllabusSubjects(String classSectionId)
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetSyllabusSubjects' method");
		}
		try {
			if(StringFunctions.isNullOrEmpty(classSectionId))
			{
				setClassId(getParamValue("classId"));
				if (StringFunctions.isNullOrEmpty(getClassId())) {
					return "success";
				}
			}
			else
			{
				setClassId(classSectionId);
			}
			
			setTeacherList(adminManager.getAllTeacherListByStatus(getUserCustId(),Constants.YES_STRING));
			if (!StringFunctions.isNullOrEmpty(getClassId())) {
				setStudyClass((StudyClass)adminManager.get(StudyClass.class,Long.valueOf(getClassId())));
				Set<StudySubject> studySubjectsList = getStudyClass().getSubjects();
				for (StudySubject studySubject : studySubjectsList) {
					if (!ObjectFunctions.isNullOrEmpty(studySubject)) {
						List<BigInteger> staffIdsList = adminManager.getStaffElgibleSubjectsListByStudySubjectId(studySubject.getId(),"0");
						if (!ObjectFunctions.isNullOrEmpty(staffIdsList)) {
							StringBuffer staffIds = new StringBuffer();
							for (BigInteger staffId :  staffIdsList) {
								staffIds.append(staffId);
								staffIds.append(",");
							}
							staffIds.append("0");
							List subjectStaffsList = adminManager.getViewStaffDetailsListByStaffIds(staffIds.toString(), getUserCustId(),getUserAcademicYearId());
							if (!ObjectFunctions.isNullOrEmpty(staffIdsList)) {
								studySubject.getExpecTeacherList().addAll(subjectStaffsList);
							}
						}
						getEventInvitedUserList().add(studySubject);
						studySubject = null;
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAddSyllabus", results = { @Result(location = "academic/ajaxSubjectDetails.jsp", name = "success") }) })
	public String ajaxDoAddSyllabus() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddSyllabus' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getStudyClass())){
				if (!ObjectFunctions.isNullOrEmpty(getStudyClass().getSubjects())) {
					for (StudySubject studySubject :getStudyClass().getSubjects()) {
						if (!ObjectFunctions.isNullOrEmpty(studySubject)) {
							getObjectList().add(studySubject);
						}
						studySubject = null;
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 

	@Actions( { @Action(value = "ajaxCheckClassId", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "autoCheck" }) }) })
	public String ajaxCheckClassId() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckClassId' method");
		}
		try {
			
			String className = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(className)) {
				ClassName classNameObj = adminManager.getClassByClassName(className.trim(),getUserCustId(), getUserAcademicYearId(),true);
				if (ObjectFunctions.isNullOrEmpty(classNameObj)) {
					setAutoCheck("0");
				}
				else {
					setAutoCheck("1");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}

	public void editManageAcademics(String classNameClassId)
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditManageAcademics' method");
		}
		try {
			
			List studyClassListSize = studentManager.getStudyClassesByClassNameClassId(Long.valueOf(classNameClassId), getUserCustId(),getUserAcademicYearId());
			if (!ObjectFunctions.isNullOrEmpty(studyClassListSize)) {
				setStudyClassList(studyClassListSize);
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	/* Admission process code refactor 13/05/13 @Ganesh */
	@Actions( { @Action(value = "onlineApplicationDetails", results = { @Result(location = "admission/admissionHome.jsp", name = "success") }) })
	public String onlineApplicationDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'onlineApplicationDetails' method");
		}
		try {
			getAdmissionsOnlineApplicationDetails();
			setAcademicYear(getCurrentAcademicYear());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
			@Action(value = "ajaxDoCancelAdmission", results = { @Result(location = "admission/approvedApplicationDetails.jsp", name = "success") }),
			@Action(value = "ajaxPendingApplications", results = { @Result(location = "admission/ajaxPendingAdmissionDetails.jsp", name = "success") }) })
	public String ajaxPendingApplications() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPendingApplications' method");
		}
		try {
			if (getAcademicYearId() > 0) {
				getSmsCount();
				ajaxGetApplicationsDetailsByStatus("P", getAcademicYearId(),getAnyTitle(), getSelectedId());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	public void ajaxGetApplicationsDetailsByStatus(String applicationsStatus, long academicYearId,String studentName,String admissionNumber) {
		if (academicYearId > 0) {
			setAdmissionSettings((AdmissionSettings) adminManager.get(AdmissionSettings.class, "academicYearId="+ academicYearId));
			if (!ObjectFunctions.isNullOrEmpty(getAdmissionSettings())) {
				setTempId2(academicYearId);
				setClassList(adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),academicYearId,Constants.YES_STRING,null,false));
				if(!StringFunctions.isNullOrEmpty(getAnyTitle()) || !StringFunctions.isNullOrEmpty(getSelectedId()) || !StringFunctions.isNullOrEmpty(getClassId())){
					if(!StringFunctions.isNullOrEmpty(getAnyTitle())){
						setStudentsList(adminManager.getAll(OnlineApplicationDetailsView.class, "custId="+getUserCustId()+" and academicYearId="+academicYearId+" and status='"+applicationsStatus+"' and (firstName like '%"+ studentName + "%' or lastName like '%"+ studentName+ "%') order by className ASC,firstName"));
					}else if(!StringFunctions.isNullOrEmpty(getSelectedId())){
						setStudentsList(adminManager.getAll(OnlineApplicationDetailsView.class, "custId="+getUserCustId()+" and academicYearId="+academicYearId+" and status='"+applicationsStatus+"' and (applicationNumber like '%"+ admissionNumber.trim()+ "%') order by className ASC,firstName"));//26-05-2014 I have added trim for admission nuber while  searching with copy paste----Rama
					}
					else if(!ObjectFunctions.isNullOrEmpty(getClassId()) && !getClassId().equalsIgnoreCase("undefined") && !StringFunctions.isNullOrEmpty(applicationsStatus)){
						setStudentsList(adminManager.getAll(OnlineApplicationDetailsView.class, "custId="+getUserCustId()+" and academicYearId="+academicYearId+" and status='"+applicationsStatus+"' and classId="+Long.valueOf(getClassId())+" order by className ASC,firstName"));
					}
					else
						setStudentsList(adminManager.getAll(OnlineApplicationDetailsView.class, "custId="+getUserCustId()+" and academicYearId="+academicYearId+" and status='"+applicationsStatus+"' order by className ASC,firstName"));
				}else{
					setStudentsList(adminManager.getAll(OnlineApplicationDetailsView.class, "custId="+getUserCustId()+" and academicYearId="+academicYearId+" and status='"+applicationsStatus+"' order by className ASC,firstName"));
				}
			}
		}
	}
	
	@Actions( { @Action(value = "ajaxApplyOfflineAdmission", results = { @Result(location = "admission/ajaxOfflineApplicationForm.jsp", name = "success") }) })
	public String ajaxApplyAdmission() {
		try {
			AdmissionSettings openedAdmissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, "custId=" + getUserCustId()+ " and status='"+Constants.YES_STRING+"'");
			setAdmissionSettings(openedAdmissionSettings);
			if (!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings)) {
				setClassList(adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),openedAdmissionSettings.getAcademicYearId(),Constants.YES_STRING,null,false));
				if (ObjectFunctions.isNotNullOrEmpty(getClassList())) {
					Collections.sort(getClassList());
				}
				setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
				setCastSettingList(adminManager.getAll(CastSettings.class,"custId=" + getUserCustId()));
				setTempList1(adminManager.getAll(CommonType.class, "custId="+ getUserCustId() + " and type='RELIGION'"));
				setAcademicYear(openedAdmissionSettings.getAcademicYear());
				setSchoolCategoriesList(adminManager.getAllByCustId("SchoolCategory", getUserCustId(),0));
				setCustomer(getCustomerByCustId());
				//Commenting below line because we are not using this list and getting performnace issue
				//getRouteListByCustIdandAcademicYearId(openedAdmissionSettings.getAcademicYearId());
				setAdmissionSettings(openedAdmissionSettings);
				setObjectList((List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST));	
				long receiptNumber= 0;
				if(!ObjectFunctions.isNullOrEmpty(getAcademicYear())){
					receiptNumber = adminManager.getAdmissionReceiptNumberByCustId("onlineApplicationDetails", getUserCustId(),getAcademicYear().getId());
					setTempId(receiptNumber+1);
				}
				
				if(!ObjectFunctions.isNullOrEmpty(getAdmissionInquiry()))
				{
					setTempId(getAdmissionInquiry().getId());
					if(!ObjectFunctions.isNullOrEmpty(getAddress()))
						setAdmissionInquiry((AdmissionInquiry)adminManager.get(AdmissionInquiry.class, "id=" + getAdmissionInquiry().getId()));
						setAddress((Address) adminManager.get(Address.class, "id=" + getAdmissionInquiry().getAddress().getId()));
						setAcademicYearId(getAdmissionInquiry().getAcademicYearId());
						ClassName className = new ClassName();
						className.setId(getAdmissionInquiry().getClassId().getId());
						OnlineApplicationDetails onlineApplicationDetails = new OnlineApplicationDetails();
						onlineApplicationDetails.setClassId(className);
						setOnlineApplicationDetails(onlineApplicationDetails);
				}
				
				if(!ObjectFunctions.isNullOrEmpty(getEmpId()))
				{
					setOnlineApplicationDetails((OnlineApplicationDetails)adminManager.get(OnlineApplicationDetails.class, "id="+ getEmpId()));
					if(getOnlineApplicationDetails().isPhId())
					{
							setTempList(null);
							StringBuffer pathName = new StringBuffer(generateStudentDisabilityUploadFilepath(getCustomerByCustId(),getOnlineApplicationDetails().getFirstName().replaceAll(" ", "_"),getOnlineApplicationDetails().getId(),0));
							if(StringFunctions.isNotNullOrEmpty(pathName.toString()))
							{
						    	File destFile = new File(getSession().getServletContext().getRealPath(pathName.toString()));
						    	String[] children = destFile.list();
								if(!ObjectFunctions.isNullOrEmpty(children))
								{
									log.debug(children.length);
									Attachment attachment = new Attachment();
							    	for (int i=0; i<children.length; i++) {
						            	attachment = new Attachment();
						                // Get filename of file or directory
						                String filename = children[i];
						                attachment.setFileName(filename);
						                getTempList().add(attachment);
						            }
							    	attachment = null;
								}
						    }
					}
					setAdmissionNumber(admissionNumberGenerationBySetting(getOnlineApplicationDetails(), getOnlineApplicationDetails().getClassId().getId()));
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { 
		@Action(value = "ajaxSubmitOfflineRegistration", results = { @Result(location = "admission/admissionDetails.jsp", name = "success"),
																	 @Result(location = "admission/ajaxOfflineApplicationForm.jsp", name = "configureError") }),
		@Action(value = "ajaxOnlineAdmisisonsApplicationForm", results = { @Result(location = "../signup/ajaxRegistrationComplete.jsp", name = "success") })
		})
	public String onlineRegistrarion() throws URTUniversalException {
		CommonType religion =null;
		String religionName = null;
		SMSServiceProviders smsServiceProvider = null;
		Customer customer = null;
		try {
			if (getAcademicYearId() != 0 && !ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails())) {
				if(getCustId() > 0)//We will get custId from online application
					customer = (Customer) adminManager.get(Customer.class,getCustId());
				else
					customer = getCustomerByCustId();
				smsServiceProvider = (SMSServiceProviders)adminManager.getSMSServiceProviderByCustId(customer.getSmsServiceProviderId());
				ClassName className = (ClassName) adminManager.get(ClassName.class,getOnlineApplicationDetails().getClassId().getId());
				if(getOnlineApplicationDetails().getCommittedFee() !=0 ){
					StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, "classNameClassId="+className.getId());
					prepareAdmissionApplicantStudentSchoolFeeSettingList(getOnlineApplicationDetails());
					addCommittedFeeActionMessages(studentManager.validateCommittedFeeConstrains(getUserCustId(),getAcademicYearId(),getOnlineApplicationDetails().getCommittedFee(),className.getId(),studyClass.getId(),getOnlineApplicationDetails().getCategoryId(),getTempString()));
					if(!ObjectFunctions.isNullOrEmpty(getCollectionAndFeeDuesList())){
						ajaxApplyAdmission();
						return "configureError";
					}
				}
				AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getAcademicYearId());
				String applicationNumber = null;
				Address primaryAddr = null;
				Address tempAddress = null;
				OnlineApplicationDetails onlineApplicationDetails =null;
			if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails())) {	
				onlineApplicationDetails = (OnlineApplicationDetails)adminManager.get(OnlineApplicationDetails.class, getOnlineApplicationDetails().getId());
				if(ObjectFunctions.isNullOrEmpty(onlineApplicationDetails))
					onlineApplicationDetails = new OnlineApplicationDetails();
				onlineApplicationDetails.setFirstName(getOnlineApplicationDetails().getFirstName());
				onlineApplicationDetails.setLastName(getOnlineApplicationDetails().getLastName());
				onlineApplicationDetails.setDateOfBirth(getOnlineApplicationDetails().getDateOfBirth());
				onlineApplicationDetails.setAge(getOnlineApplicationDetails().getAge());
				onlineApplicationDetails.setAgeAppropriation(getOnlineApplicationDetails().getAgeAppropriation());
				onlineApplicationDetails.setGender(getOnlineApplicationDetails().getGender());
				onlineApplicationDetails.setTransferCertificateNo(getOnlineApplicationDetails().getTransferCertificateNo());
				onlineApplicationDetails.setTransferCertificateDate(getOnlineApplicationDetails().getTransferCertificateDate());
				onlineApplicationDetails.setAadharCardNumber(getOnlineApplicationDetails().getAadharCardNumber());
				onlineApplicationDetails.setStudentCasteCertificate(getOnlineApplicationDetails().getStudentCasteCertificate());
				onlineApplicationDetails.setStudentMobile(getOnlineApplicationDetails().getStudentMobile());
				onlineApplicationDetails.setStudentEmail(getOnlineApplicationDetails().getStudentEmail());
				onlineApplicationDetails.setHostelMode(getOnlineApplicationDetails().getHostelMode());
				onlineApplicationDetails.setCategoryId(getOnlineApplicationDetails().getCategoryId());
				onlineApplicationDetails.setTransportMode(getOnlineApplicationDetails().getTransportMode());
				if("Y".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) && !ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getRollNumber()))
					onlineApplicationDetails.setRollNumber(getOnlineApplicationDetails().getRollNumber());
				if("T".equals(getOnlineApplicationDetails().getTransportMode())){
					if(StringFunctions.isNotNullOrEmpty(getAnyId()) && StringFunctions.isNotNullOrEmpty(getEventId())){
						onlineApplicationDetails.setBoardingPointId(Long.valueOf(getAnyId()));
						onlineApplicationDetails.setVehicleAcademicDetailsId(Long.valueOf(getEventId()));
					}
				}
				onlineApplicationDetails.setClassId(className);
				onlineApplicationDetails.setMediumOfInstruction(getOnlineApplicationDetails().getMediumOfInstruction());
				onlineApplicationDetails.setDateOfJoining(getOnlineApplicationDetails().getDateOfJoining());
				
				if(!StringFunctions.isNullOrEmpty(getOnlineApplicationDetails().getRteStatus()))
					onlineApplicationDetails.setRteStatus(getOnlineApplicationDetails().getRteStatus());
				else
					onlineApplicationDetails.setRteStatus(Constants.NO_STRING);
				
				onlineApplicationDetails.setLastClassAttended(getOnlineApplicationDetails().getLastClassAttended());
				onlineApplicationDetails.setLastSchool(getOnlineApplicationDetails().getLastSchool());
				onlineApplicationDetails.setPreviousSchoolType(getOnlineApplicationDetails().getPreviousSchoolType());
				onlineApplicationDetails.setPreviousSchoolAffiliation(getOnlineApplicationDetails().getPreviousSchoolAffiliation());
				
				
				if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getPreviousSchoolAddress())) {
					Address previousSchoolAddress = new Address();
					if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getId())) {
						previousSchoolAddress = onlineApplicationDetails.getPreviousSchoolAddress();
						if (ObjectFunctions.isNullOrEmpty(previousSchoolAddress)) {
							previousSchoolAddress = new Address();
						}
					}
					if(!StringFunctions.isNullOrEmpty(getOnlineApplicationDetails().getPreviousSchoolAddress().getState())){
						State stateObject = (State) adminManager.get(State.class, "stateCode='"+getOnlineApplicationDetails().getPreviousSchoolAddress().getState()+"'" );
						if(!ObjectFunctions.isNullOrEmpty(stateObject))
						{
							previousSchoolAddress.setStateId(stateObject.getId());
							onlineApplicationDetails.setPreviousSchoolAddress(previousSchoolAddress);
						}
							
						stateObject = null;
					}
					previousSchoolAddress.copyFrom(getOnlineApplicationDetails().getPreviousSchoolAddress());
					onlineApplicationDetails.setPreviousSchoolAddress(previousSchoolAddress);
				}else
					onlineApplicationDetails.setPreviousSchoolAddress(null);
				
				
				onlineApplicationDetails.setFatherName(getOnlineApplicationDetails().getFatherName());
				onlineApplicationDetails.setFatherQualification(getOnlineApplicationDetails().getFatherQualification());
				onlineApplicationDetails.setOccupation(getOnlineApplicationDetails().getOccupation());
				onlineApplicationDetails.setFatherAadharNumber(getOnlineApplicationDetails().getFatherAadharNumber());
				onlineApplicationDetails.setMotherName(getOnlineApplicationDetails().getMotherName());
				onlineApplicationDetails.setMotherQualification(getOnlineApplicationDetails().getMotherQualification());
				onlineApplicationDetails.setMotherOccupation(getOnlineApplicationDetails().getMotherOccupation());
				onlineApplicationDetails.setMotherAadharNumber(getOnlineApplicationDetails().getMotherAadharNumber());
				onlineApplicationDetails.setMonthlyIncome(getOnlineApplicationDetails().getMonthlyIncome());
				onlineApplicationDetails.setAnnualIncome(getOnlineApplicationDetails().getAnnualIncome());
				if(!StringFunctions.isNullOrEmpty(getOnlineApplicationDetails().getBplStatus()))
					onlineApplicationDetails.setBplStatus(getOnlineApplicationDetails().getBplStatus());
				else
					onlineApplicationDetails.setBplStatus(Constants.NO_STRING);
				
				onlineApplicationDetails.setBplNumber(getOnlineApplicationDetails().getBplNumber());
				
				onlineApplicationDetails.setMobileNumber(getOnlineApplicationDetails().getMobileNumber());
				onlineApplicationDetails.setMotherMobileNumber(getOnlineApplicationDetails().getMotherMobileNumber());
				onlineApplicationDetails.setPhoneNumber(getOnlineApplicationDetails().getPhoneNumber());
				onlineApplicationDetails.setParentEmail(getOnlineApplicationDetails().getParentEmail());
				onlineApplicationDetails.setMotherEmailAddress(getOnlineApplicationDetails().getMotherEmailAddress());
				
				if (StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getTempararyAddress().getStreetName()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getTempararyAddress().getCity()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getTempararyAddress().getState()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getTempararyAddress().getPostalCode())) {
					tempAddress = new Address();
					tempAddress.copyFrom(getOnlineApplicationDetails().getTempararyAddress());
					onlineApplicationDetails.setTempararyAddress(tempAddress);
				}else
					onlineApplicationDetails.setTempararyAddress(null);
				
				if (StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getPrimaryAddress().getStreetName()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getPrimaryAddress().getCity()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getPrimaryAddress().getState()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetails().getPrimaryAddress().getPostalCode())) {
					primaryAddr = new Address();
					if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getId())) {
						primaryAddr = onlineApplicationDetails.getPrimaryAddress();
						if (ObjectFunctions.isNullOrEmpty(primaryAddr)) {
							primaryAddr = new Address();
						}
					}
					if(!StringFunctions.isNullOrEmpty(getOnlineApplicationDetails().getPrimaryAddress().getState())){
						State stateObject = (State) adminManager.get(State.class, "stateCode='"+getOnlineApplicationDetails().getPrimaryAddress().getState()+"'" );
						if(!ObjectFunctions.isNullOrEmpty(stateObject))
						{
							primaryAddr.setStateId(stateObject.getId());
							onlineApplicationDetails.setPrimaryAddress(primaryAddr);
						}
							
						stateObject = null;
					}
					primaryAddr.copyFrom(getOnlineApplicationDetails().getPrimaryAddress());
					onlineApplicationDetails.setPrimaryAddress(primaryAddr);
				}else
					onlineApplicationDetails.setPrimaryAddress(null);
				
				onlineApplicationDetails.setNationality(getOnlineApplicationDetails().getNationality());
				
				if(getOnlineApplicationDetails().getReligionId().getId() > 0){
					religion = (CommonType)adminManager.get(CommonType.class, getOnlineApplicationDetails().getReligionId().getId());
					if(!ObjectFunctions.isNullOrEmpty(religion))
						religionName = religion.getSkillTypeName();
				}
				onlineApplicationDetails.setReligionId(religion);
				onlineApplicationDetails.setReligion(religionName);
				
				if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getCastId())) {
					CastSettings castSetting = (CastSettings)adminManager.get(CastSettings.class, getOnlineApplicationDetails().getCastId().getId());
					onlineApplicationDetails.setCastId(castSetting);
					castSetting = null;
				}
				
				if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getSubCastId())){
					SubCastSettings subCast = (SubCastSettings)adminManager.get(SubCastSettings.class,getOnlineApplicationDetails().getSubCastId().getId());						
					onlineApplicationDetails.setSubCastId(subCast);
					subCast = null;
				}
				else if (!ObjectFunctions.isNullOrEmpty(getNewUser().getPerson())){
					if (!ObjectFunctions.isNullOrEmpty(getNewUser().getPerson().getSubCastId())){
						SubCastSettings subCast = (SubCastSettings)adminManager.get(SubCastSettings.class,getNewUser().getPerson().getSubCastId());						
						onlineApplicationDetails.setSubCastId(subCast);
						subCast = null;
					}
				}
					
				
				onlineApplicationDetails.setCommunityNumber(getOnlineApplicationDetails().getCommunityNumber());
				onlineApplicationDetails.setStudentCasteCertificate(getOnlineApplicationDetails().getStudentCasteCertificate());
				onlineApplicationDetails.setFatherCaste(getOnlineApplicationDetails().getFatherCaste());
				onlineApplicationDetails.setFatherCasteCertificate(getOnlineApplicationDetails().getFatherCasteCertificate());
				onlineApplicationDetails.setMotherCaste(getOnlineApplicationDetails().getMotherCaste());
				onlineApplicationDetails.setMotherCasteCertificate(getOnlineApplicationDetails().getMotherCasteCertificate());
				onlineApplicationDetails.setSocialCategory(getOnlineApplicationDetails().getSocialCategory());
				onlineApplicationDetails.setSpecial(getOnlineApplicationDetails().getSpecial());
				onlineApplicationDetails.setBhagyalakshmiBondNo(getOnlineApplicationDetails().getBhagyalakshmiBondNo());
				onlineApplicationDetails.setNoOfElder(getOnlineApplicationDetails().getNoOfElder());
				onlineApplicationDetails.setNoOfYounger(getOnlineApplicationDetails().getNoOfYounger());
				onlineApplicationDetails.setNoOfElderSisters(getOnlineApplicationDetails().getNoOfElderSisters());
				onlineApplicationDetails.setNoOfYoungerSisters(getOnlineApplicationDetails().getNoOfYoungerSisters());
				onlineApplicationDetails.setPlaceOfBirth(getOnlineApplicationDetails().getPlaceOfBirth());
				onlineApplicationDetails.setMotherToungId(getOnlineApplicationDetails().getMotherToungId());
				onlineApplicationDetails.setIdentification1(getOnlineApplicationDetails().getIdentification1());
				onlineApplicationDetails.setIdentification2(getOnlineApplicationDetails().getIdentification2());
				
				if("true".equalsIgnoreCase(getPlTitle())){
					onlineApplicationDetails.setPhId(true);
					onlineApplicationDetails.setPhysicallyHandicappedDesc(getOnlineApplicationDetails().getPhysicallyHandicappedDesc());
					onlineApplicationDetails.setIsPHDocsUploaded(getOnlineApplicationDetails().getIsPHDocsUploaded());
				}else{
					onlineApplicationDetails.setPhId(false);
					onlineApplicationDetails.setPhysicallyHandicappedDesc(null);
					onlineApplicationDetails.setIsPHDocsUploaded("N");
				}
				
				
				onlineApplicationDetails.setAnyHealthDiseases(getOnlineApplicationDetails().getAnyHealthDiseases());
				onlineApplicationDetails.setBloodGroup(getOnlineApplicationDetails().getBloodGroup());
				onlineApplicationDetails.setHeight(getOnlineApplicationDetails().getHeight());
				onlineApplicationDetails.setWeight(getOnlineApplicationDetails().getWeight());
				onlineApplicationDetails.setUrbanOrRural(getOnlineApplicationDetails().getUrbanOrRural());
				onlineApplicationDetails.setAnyOtherLanguageSpoken(getOnlineApplicationDetails().getAnyOtherLanguageSpoken());
				onlineApplicationDetails.setInterestsAndHobbies(getOnlineApplicationDetails().getInterestsAndHobbies());
				onlineApplicationDetails.setSpecialInterest(getOnlineApplicationDetails().getSpecialInterest());
				onlineApplicationDetails.setSpecificPointNoted(getOnlineApplicationDetails().getSpecificPointNoted());
				onlineApplicationDetails.setStudentOrParentBankAccountName(getOnlineApplicationDetails().getStudentOrParentBankAccountName());
				onlineApplicationDetails.setStudentOrParentBankAccountNumber(getOnlineApplicationDetails().getStudentOrParentBankAccountNumber());
				onlineApplicationDetails.setBankIFSCCode(getOnlineApplicationDetails().getBankIFSCCode());
				onlineApplicationDetails.setCollectedDocuments(getOnlineApplicationDetails().getCollectedDocuments());
				onlineApplicationDetails.setEntranceMarks(getOnlineApplicationDetails().getEntranceMarks());
				
					
					long studProFileImage = 0;
					if (!ObjectFunctions.isNullOrEmpty(onlineApplicationDetails.getProfileImage()))
						studProFileImage = onlineApplicationDetails.getProfileImage().getId();
						UserImage attachment;
					if (getUploadFileName() != null) {
						try {
							attachment = profileImageUpload(Constants.FILE_TYPE_IMAGE,customer.getId(),getUserAcademicYearId(),studProFileImage);
							if (!ObjectFunctions.isNullOrEmpty(attachment)) {
								onlineApplicationDetails.setProfileImage(attachment);
							}
						} catch (Throwable e) {
							e.printStackTrace();
						}
					} else if(!StringFunctions.isNullOrEmpty(getParamValue("customerImage"))) {
						try {
							attachment = captureStudentImage(getParamValue("customerImage"),Constants.FILE_TYPE_IMAGE,customer);
							if (!ObjectFunctions.isNullOrEmpty(attachment)) {
								onlineApplicationDetails.setProfileImage(attachment);
							}
						} catch (Throwable e) {
							e.printStackTrace();
						}

					}
					attachment = null;
					
					String admissionStatus = getOnlineApplicationDetails().getStatus();
					if (getOnlineApplicationDetails().getId() >0) {
						if(!StringFunctions.isNullOrEmpty(getOnlineApplicationDetails().getStatus()))
						{
							if(!"CS".equalsIgnoreCase(getOnlineApplicationDetails().getStatus()))
								onlineApplicationDetails.setStatus(getOnlineApplicationDetails().getStatus());
							
							onlineApplicationDetails.setRejectApplicationDesc(getOnlineApplicationDetails().getRejectApplicationDesc());
						}
						super.addActionMessage("Application updated successfully.");
					}
					else
					{
						onlineApplicationDetails.setStatus(getOnlineApplicationDetails().getStatus());
						
						applicationNumber = studentManager.getApplicationNumber(customer,academicYear);
						onlineApplicationDetails.setApplicationNumber(applicationNumber);
						
						onlineApplicationDetails.setAcademicYear(academicYear);
						onlineApplicationDetails.setCustId(customer.getId());
						onlineApplicationDetails.setAddressType("R");
						if("CS".equalsIgnoreCase(getOnlineApplicationDetails().getStatus())){
							onlineApplicationDetails.setStatus("p");
						}
						super.addActionMessage("Application created successfully.");
						
					}
					if (!ObjectFunctions.isNullOrEmpty(getAdmissionInquiry())) {
						AdmissionInquiry admissionInquiry = (AdmissionInquiry) adminManager.get(AdmissionInquiry.class, "id="+ getAdmissionInquiry().getId());
						if (!ObjectFunctions.isNullOrEmpty(admissionInquiry)) {
							onlineApplicationDetails.setAdmissionInquiry(admissionInquiry);
							admissionInquiry.setStudentAddmitted(Constants.YES_STRING);
							adminManager.merge(admissionInquiry);
						}
						admissionInquiry = null;
					}
					setOnlineApplicationDetails((OnlineApplicationDetails)adminManager.saveOrUpdateObject(onlineApplicationDetails));
					customer = (Customer)adminManager.get(Customer.class, getOnlineApplicationDetails().getCustId());
					StringBuffer pathNames = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,getOnlineApplicationDetails().getFirstName().replaceAll(" ", "_"),getOnlineApplicationDetails().getId(),0));
					if(!StringFunctions.isNullOrEmpty(pathNames.toString())){
						if(getFileUpload().size()!=0){
					    	for(int i=0;i<getFileUpload().size();i++){
					    		 File file = getFileUpload().get(i);
					    		 if(!ObjectFunctions.isNullOrEmpty(file)){
					    			 String fileName = getFileUploadFileName().get(i);
						    		 File destDir = new File(getSession().getServletContext().getRealPath(pathNames+fileName));
									 FileUtils.copyFile(file, destDir);	 
					    		 }
					    	}
					    }
					}
					if (!ObjectFunctions.isNullOrEmpty(getAdmissionSettings().getRegistrationFee()) && !ObjectFunctions.isNullOrEmpty(getAdmissionSettings().getProspectiveFee())) {
						setEmpId(String.valueOf(getAdmissionSettings().getRegistrationFee()));
						setBedId(String.valueOf(getAdmissionSettings().getProspectiveFee()));
						int total = Integer.valueOf(getEmpId()) + Integer.valueOf(getBedId());
						setAnyTitle(String.valueOf(total));
						setTempId1(getOnlineApplicationDetails().getId());
					}
					if(getTempId() > 0){// tempId contains admission setting id. This value will come from online application form.
						setAdmissionSettings((AdmissionSettings)adminManager.get(AdmissionSettings.class,getTempId()));
						if (!StringFunctions.isNullOrEmpty(getOnlineApplicationDetails().getParentEmail())) {
							String[] emailAddresses = new String[1];
							emailAddresses[0]=getOnlineApplicationDetails().getParentEmail();  
							MailUtil mailUtil=new MailUtil(emailAddresses,"Regd : Application Status",customer.getId(),customer.getSender(),"Administrator",getContactFromEmail(customer));
							mailUtil.sendMailForOnlineRegistration(getOnlineApplicationDetails(),getAdmissionSettings());
							mailUtil=null;
						}
					}
					
					if(!StringFunctions.isNullOrEmpty(admissionStatus))
					{
						if("CS".equalsIgnoreCase(admissionStatus))
						{
							String userName = null;
							if (!ObjectFunctions.isNullOrEmpty(customer)) {
								userName = StringFunctions.stripSymbols(customer.getId()+"S"+ getAdmissionNumber());
							}
							
							Student student = studentManager.addStudentFromApplicationAndUpdateCount(onlineApplicationDetails,onlineApplicationDetails.getAcademicYear(),userName,getAdmissionNumber(),customer,smsServiceProvider);
							StringBuffer despathName = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,student.getAccount().getPerson().getFirstName().replaceAll(" ", "_"),0,student.getAccount().getId()));
							StringBuffer sourcepathName = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,student.getAccount().getPerson().getFirstName().replaceAll(" ", "_"),getOnlineApplicationDetails().getId(),0));
							log.debug("pathName ");
							File directory = new File(sourcepathName.toString());
							Person personObj = student.getAccount().getPerson();
							//if(directory.exists()){
							File sourceFile = new File(getSession().getServletContext().getRealPath(sourcepathName.toString()));
							File destFile = new File(getSession().getServletContext().getRealPath(despathName.toString()));
							log.debug(sourceFile);
							if(StringFunctions.isNotNullOrEmpty(sourceFile.toString())){
								if(sourceFile.exists()){
									 FileUtils.copyDirectory(sourceFile, destFile);	 
					    		}
							}
						}
					}
				} else
					super.addActionError("Application not created.");
				
				academicYear=null;
				customer=null;
				primaryAddr=null;
				tempAddress = null;
			}
			if(getCustId() == 0)
				ajaxGetOnlineAdmissions();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			religion =null;
			religionName = null;
			smsServiceProvider = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetApplicationDetails", results = { @Result(location = "admission/ajaxApplicationDetails.jsp", name = "success") }) })
	public String ajaxGetApplicationDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetApplicationDetails' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			log.debug(getTempId1());
			if(StringFunctions.isNotNullOrEmpty(getEmpId()) && StringFunctions.isNotNullOrEmpty(getStatus())){
				setOnlineApplicationDetailsView((OnlineApplicationDetailsView)adminManager.get(OnlineApplicationDetailsView.class, "applicationId="+getEmpId()));
				if(!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView())){
					setClassList(adminManager.getAll(ClassName.class,"custId="+getUserCustId()+" and (admissionsOpen='"+Constants.YES_STRING+"' or id="+getOnlineApplicationDetailsView().getClassId()+") and academicYearId="+getOnlineApplicationDetailsView().getAcademicYearId()));
					if(ObjectFunctions.isNotNullOrEmpty(getClassList())){
						Collections.sort(getClassList());
					}
					getRouteListByCustIdandAcademicYearId(getOnlineApplicationDetailsView().getAcademicYearId());
				}
			}
			setTempList2((List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST));
			setSchoolCategoriesList(adminManager.getAllByCustId("SchoolCategory", getUserCustId(),0));
			setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
			setCastSettingList(adminManager.getAll(CastSettings.class, "custId="+getUserCustId()));
			setTempList1(adminManager.getAll(CommonType.class, "custId="+getUserCustId()+" and	 type='RELIGION'"));
			if(!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView())){
				setTempId(getOnlineApplicationDetailsView().getCastId());
				setOnlineApplicationDetails((OnlineApplicationDetails) adminManager.get(OnlineApplicationDetails.class,"custId="+getUserCustId()+" and id="+getEmpId()));
				if(getTempId()>0){
					ajaxGetOnlineStudentSubCastDetailsByCast();
					
				}
				if(!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getRouteId()) && getOnlineApplicationDetailsView().getRouteId() > 0){
					setViewStudentPersonAccountDetails(new ViewStudentPersonAccountDetails());
					getViewStudentPersonAccountDetails().setRouteId(getOnlineApplicationDetailsView().getRouteId());
				}else{
					setViewStudentPersonAccountDetails(null);
				}
				if(getOnlineApplicationDetailsView().isPhId())
					{
							setTempList(null);
							StringBuffer pathName = new StringBuffer(generateStudentDisabilityUploadFilepath(getCustomerByCustId(),getOnlineApplicationDetailsView().getFirstName().replaceAll(" ", "_"),getOnlineApplicationDetailsView().getApplicationId(),0));
							if(StringFunctions.isNotNullOrEmpty(pathName.toString()))
							{
						    	File destFile = new File(getSession().getServletContext().getRealPath(pathName.toString()));
						    	String[] children = destFile.list();
								if(!ObjectFunctions.isNullOrEmpty(children))
								{
									log.debug(children.length);
									Attachment attachment = new Attachment();
							    	for (int i=0; i<children.length; i++) {
						            	attachment = new Attachment();
						                // Get filename of file or directory
						                String filename = children[i];
						                attachment.setFileName(filename);
						                getTempList().add(attachment);
						            }
							    	attachment = null;
								}
						    }
					}
				setAdmissionNumber(admissionNumberGenerationBySetting(getOnlineApplicationDetails(), getOnlineApplicationDetails().getClassId().getId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxCheckEntranceMarksUploadedForAllClasses", results = { @Result(type = "json", name = "success", params = {"includeProperties", "admissionFee" }) }) })
	public String ajaxCheckEntranceMarksUploadedForAllClasses()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckEntranceMarksUploadedForAllClasses' method");
		}
		try {
			if (getAcademicYearId() > 0) {
				log.debug("select group_concat(CONVERT(className,CHAR)),id from class where academicYearId="+ getAcademicYearId()+ " and id in (select classId from onlineApplicationDetails where  academicYearId="+ getAcademicYearId() + " and status='P' and entranceMarks is null)");
				Object[] notUploadedMars = adminManager.get("select group_concat(CONVERT(className,CHAR)),id from class where academicYearId="+ getAcademicYearId()+ " and id in (select classId from onlineApplicationDetails where  academicYearId="+ getAcademicYearId() + " and status='P' and entranceMarks is null)");
				if (!ObjectFunctions.isNullOrEmpty(notUploadedMars)&& !ObjectFunctions.isNullOrEmpty(notUploadedMars[0])) {
					setAdmissionFee("You have not uploaded marks for "+ notUploadedMars[0].toString()+ " class(es). Are you sure you want process apllications?");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxProcessApplications", results = { @Result(location = "admission/admissionDetails.jsp", name = "success") }) })
	public String ajaxProcessApplications() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxProcessApplications' method");
		}
		try {
			if (getTempId() > 0) {
				AdmissionSettings admissionSettings = null;
				admissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, " academicYearId="+ getTempId());
				if (!ObjectFunctions.isNullOrEmpty(admissionSettings)) {
					if("S".equalsIgnoreCase(getAnyTitle())){
						adminManager.generateShortListApplications(getUserCustId(), getTempId(),getAnyId());
						super.addActionMessage("Selected application has shortlisted.");
					}
					else if("R".equalsIgnoreCase(getAnyTitle())){
						adminManager.generateRejectedListApplications(getUserCustId(),getTempId(),getAnyId());
						super.addActionMessage("Selected application has rejected.");
					//}
					}
				}
			}
			getSmsCount();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		} finally {
			onlineApplicationDetails();
		}
		return SUCCESS;
	}
	
	@Actions( {
			@Action(value = "ajaxSendMsgsToOnlineStudents", results = { @Result(location = "admission/ajaxRejectedApplicationDetails.jsp", name = "success"),
																		@Result(location = "admission/admissionDetails.jsp", name = "PendingApp"),
																		@Result(location = "admission/approvedApplicationDetails.jsp", name = "ShortList"),
																		 @Result(location = "admission/admittedStudentHome.jsp", name = "admittedStuds") }),
			@Action(value = "ajaxSendMsgsToAdmissionsAppliedStudents", results = { @Result(location = "admission/ajaxSendMessagesToAdmissionsAppliedStudents.jsp", name = "success") }) })
	public String ajaxSendMsgsToOnlineStudents() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSendMsgsToOnlineStudents' method");
		}

		try {
			StringBuffer msgDesc = null;
			Set<String> mobileNumberset = null;
			Customer customer = getCustomerByCustId();
			Messages message = null;
			AcademicYear academicYear = null;
			if (!ObjectFunctions.isNullOrEmpty(customer) && customer.isCheckMobileService()) {
				SMSServiceProviders smsServiceProvider = (SMSServiceProviders)adminManager.getSMSServiceProviderByCustId(customer.getSmsServiceProviderId());
				msgDesc = new StringBuffer();
				msgDesc.append("Dear Parent, Your son/daughter ").append(getMessages().getMessageDescription()).append(" Thank you principal from ");
				getMessages().setMessageDescription(msgDesc.toString());
				getMessages().setCustomer(customer);
				getMessages().setStatus("M");
				getMessages().setSmsSenderId(customer.getSender());
				academicYear = (AcademicYear) adminManager.get(AcademicYear.class,getUserAcademicYearId());
				getMessages().setAcademicYear(academicYear);
				mobileNumberset = getMessages().getOtherContactDetails();
				getMessages().setPurposeType("Send MSG To Admissions Applied Students");
				message = getMessages();
				log.debug("Before Calling Deviler SMS.....mobileNumberset---"+mobileNumberset+"-------messageDesc-----"+getMessages().getMessageDescription());
				if (!ObjectFunctions.isNullOrEmpty(mobileNumberset)){
					message = adminManager.addMessageDetailsTracking(message, null, null, mobileNumberset);
					if (communicationManager.deliverSms(getMessages(), mobileNumberset, smsServiceProvider)) {
						super.addActionMessage("SMS has been delivered successfully.");
					} else {
						super.addActionError("SMS has not been delivered.");
						}
				} else
					super.addActionError("SMS has not been delivered as all are invalid mobile numbers.");
			} else 
				super.addActionError("SMS service disabled, enable service.");
					
			msgDesc = null;
			mobileNumberset = null;
			customer = null;
			onlineApplicationDetails();
			setMessages(null);
			if ("PendingApp".equalsIgnoreCase(getStatus())) {
				return "PendingApp";
			} else if ("ShortList".equalsIgnoreCase(getStatus())) {
				return "ShortList";
			}else if("AdmittedStuds".equalsIgnoreCase(getStatus())){
				return "admittedStuds";
			}
			//getSmsCount();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Action(value = "admissionMarksSheetTemplate", results = { @Result(location = "jasper/admission/admissionMarks.jasper", type = "jasper", name = "success", params = {"dataSource", "onlineApplicationDetailsList", "format", "XLS" }) })
	public String marksSheetTemplateReport() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'marksSheetTemplateReport' method");
		}
		try {
			String classId = getClassId();
			List<OnlineApplicationDetailsView> onlineApplicationDetailsList = adminManager.getAll(OnlineApplicationDetailsView.class, "custId="+ getUserCustId() + " and classId="+ Long.valueOf(classId) + " and status = '"+ Constants.PENDING_STATUS + "'");
			if (ObjectFunctions.isNotNullOrEmpty(onlineApplicationDetailsList)) {
				Collections.sort(onlineApplicationDetailsList);
			}
			String path = getSession().getServletContext().getRealPath("/jasper/admission/admissionMarks.jrxml");
			File file=null;
			file=new File(path);
			if(file.exists()){
			InputStream input = new FileInputStream(file);
			JasperDesign design = JRXmlLoader.load(input);
			JasperReport report = JasperCompileManager.compileReport(design);
			JRBeanCollectionDataSource jasperReports = new JRBeanCollectionDataSource(onlineApplicationDetailsList);
			JasperPrint print = JasperFillManager.fillReport(report,new HashMap(), jasperReports);
			String name = null;
			if (StringFunctions.isNullOrEmpty(getAnyTitle())) {
				name = "EntranceMarks_Template_"+ DateFormatter.formatDate(DateFormatter.YYYY_PATTERN,new Date());
			} else {
				name = getAnyTitle()+ " EntranceMarks_Template_"+ DateFormatter.formatDate(DateFormatter.YYYY_PATTERN,new Date());
			}
			getResponse().setHeader("Content-Disposition","attachment;filename=" + name.replace(' ', '_') + ".xls");
			OutputStream output = getResponse().getOutputStream();
			// coding For Excel:
			JRXlsExporter exporterXLS = new JRXlsExporter();
			exporterXLS.setParameter(JRExporterParameter.JASPER_PRINT, print);
			exporterXLS.setParameter(JRExporterParameter.OUTPUT_STREAM,output);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_ONE_PAGE_PER_SHEET,Boolean.FALSE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_WHITE_PAGE_BACKGROUND,Boolean.FALSE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS,Boolean.TRUE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_AUTO_DETECT_CELL_TYPE,Boolean.TRUE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_COLLAPSE_ROW_SPAN, Boolean.TRUE);
			exporterXLS.exportReport();
			}
			return null;
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxImportEntranceMarks", results = { @Result(location = "admission/ajaxPendingAdmissionDetails.jsp", name = "success") }) })
	public String ajaxImportEntranceMarks() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxImportEntranceMarks' method");
		}
		try {
			if (getAcademicYearId() > 0) {
				WorkbookSettings ws = new WorkbookSettings();
				ws.setLocale(new Locale("en", "EN"));
				Workbook workbook = Workbook.getWorkbook(getUpload(), ws);
				Sheet s = workbook.getSheet(0);
				int i = 0;
				int rowSize = s.getRows();
				OnlineApplicationDetails onlineApplications = null;
				String appId = null;
				double maxMarks = 0;
				double obtainedMarks = 0;
				double passMarks = 0;
				ClassName className = null;
				StringBuffer wrongMarksApplicationIds = new StringBuffer();
				StringBuffer notAvailableApplicationIds = new StringBuffer();
				AdmissionSettings admissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, "custId="+ getUserCustId() + " and academicYearId="+ getAcademicYearId());
				if (!ObjectFunctions.isNullOrEmpty(admissionSettings)) {
					maxMarks = Double.valueOf(admissionSettings.getEntranceExamTotalMarks());
					passMarks = Double.valueOf(admissionSettings.getEntranceExamPassMarks());
					for (i = 1; i < rowSize; i++) {
						appId = s.getCell(6, i).getContents();
						if (StringFunctions.isNotNullOrEmpty(appId)) {
							onlineApplications = (OnlineApplicationDetails) adminManager.get(OnlineApplicationDetails.class, "id="+ appId + " and academicYearId="+ getAcademicYearId());
							if (!ObjectFunctions.isNullOrEmpty(onlineApplications)) {
								className = onlineApplications.getClassId();
								if (StringFunctions.isNullOrEmpty(s.getCell(5,i).getContents())) {
									obtainedMarks = 0;
									onlineApplications.setPresent(false);
								} else {
									onlineApplications.setPresent(true);
									obtainedMarks = Double.valueOf(s.getCell(5,i).getContents());
									if (maxMarks >= obtainedMarks) {
										onlineApplications.setEntranceMarks(obtainedMarks);
										onlineApplications.setLastAccessDate(new Date());
										onlineApplications.setLastUpdatedById(getUser().getId());
										onlineApplications.setLastUpdatedDate(new Date());
										if(obtainedMarks >= passMarks)
											onlineApplications.setStatus("S");
										else
											onlineApplications.setStatus("R");
										adminManager.save(onlineApplications);
									} else {
										if (wrongMarksApplicationIds.length() > 1)
											wrongMarksApplicationIds.append(", "+ s.getCell(0, i).getContents());
										else
											wrongMarksApplicationIds.append(s.getCell(0, i).getContents());
									}
								}
							} else {
								if (notAvailableApplicationIds.length() > 1)
									notAvailableApplicationIds.append(", "+ s.getCell(0, i).getContents());
								else
									notAvailableApplicationIds.append(s.getCell(0, i).getContents());
							}
						}
						onlineApplications = null;
					}
					if (wrongMarksApplicationIds.length() > 0 || notAvailableApplicationIds.length() > 0) {
						if (wrongMarksApplicationIds.length() > 0) {
							super.addActionError("Following application number(s) marks are not uploaded. Please check entrance marks for following application number(s). "+ wrongMarksApplicationIds.toString());
						}
						if (notAvailableApplicationIds.length() > 0) {
							super.addActionError("Following application number(s) is(are) not available. Please check details for following applicaion number(s). "+ notAvailableApplicationIds.toString());
						}
					} else {
						super.addActionMessage("You have successfully imported entrance marks.");
					}
				} else {
					super.addActionError("Entrance marks not uploaded.");
				}
					if (!ObjectFunctions.isNullOrEmpty(className)) {
						className.setEntranceMarksUploaded(true);
						className.setLastUpdatedById(getUser().getId());
						className.setLastUpdatedDate(new Date());
						adminManager.save(className);
						className = null;
					}
				admissionSettings = null;
				notAvailableApplicationIds = null;
				wrongMarksApplicationIds = null;
			}
			ajaxPendingApplications();
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			//RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		}
		return SUCCESS;
	}
	
	@Action(value = "ajaxApprovedApplicationsHome", results = { @Result(location = "admission/approvedApplicationDetails.jsp", name = "success") })
	public String ajaxApprovedApplicationsHome() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxApprovedApplicationsHome' method");
		}
		try {
			getSmsCount();
			onlineApplicationDetails();
			/* prepareAcademicYearId();
			 * setAcademicYearList(adminManager.getAll(AcademicYear.class,"custId="+getUserCustId()+" and id>="+getUsrChgedAcademicId()));*/
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxApprovedApplications", results = { @Result(location = "admission/ajaxApprovedApplicationDetails.jsp", name = "success") }) })
	public String ajaxApprovedApplications() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxApprovedApplications' method");
		}
		try {
			getSmsCount();
			if (getAcademicYearId() > 0) {
				ajaxGetApplicationsDetailsByStatus(Constants.SCHOOL_MODULE,getAcademicYearId(),getAnyTitle(), getSelectedId());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions({ @Action(value = "ajaxUpdateApplicationStatus", results = {
			@Result(location = "admission/ajaxPendingAdmissionDetails.jsp", name = "success"),
			@Result(location = "admission/ajaxApprovedApplicationDetails.jsp", name = "approved"),
			@Result(location = "admission/ajaxRejectedApplication.jsp", name = "rejected"),
			@Result(location = "admission/ajaxApplicationDetails.jsp", name = "configureError") }) })
	public String ajaxUpdateApplicationStatus() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUpdateApplicationStatus' method");
		}
		try {
			if (StringFunctions.isNotNullOrEmpty(getEmpId())
					&& StringFunctions.isNotNullOrEmpty(getStatus())) {
				Address coresAddress = null;
				Address tempAddress = null;
				CommonType religion = null;
				CastSettings castSetting = null;
				SubCastSettings subCast = null;
				ClassName className = null;
				StudyClass studyClass = null;
				State stateObject = null;
				OnlineApplicationDetails onlineApplicationDetails = (OnlineApplicationDetails) adminManager.get(OnlineApplicationDetails.class, "id=" + getEmpId());
				if (!ObjectFunctions.isNullOrEmpty(onlineApplicationDetails)) {
					Customer customer = getCustomerByCustId();
					SMSServiceProviders smsServiceProvider=(SMSServiceProviders)  adminManager.getSMSServiceProviderByCustId(customer.getSmsServiceProviderId());
					if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getClassId()) && getOnlineApplicationDetailsView().getClassId() > 0) {
						className = (ClassName) adminManager.get(ClassName.class,getOnlineApplicationDetailsView().getClassId());
					}
					if (getOnlineApplicationDetailsView().getCommittedFee() != 0) {
						if (!ObjectFunctions.isNullOrEmpty(className))
							studyClass = (StudyClass) adminManager.get(StudyClass.class, "classNameClassId="+ className.getId());
						prepareAdmissionApplicantStudentSchoolFeeSettingList(onlineApplicationDetails);
						addCommittedFeeActionMessages(studentManager.validateCommittedFeeConstrains(getUserCustId(),onlineApplicationDetails.getAcademicYear().getId(),getOnlineApplicationDetailsView().getCommittedFee(), className.getId(), studyClass.getId(),getOnlineApplicationDetailsView().getCategoryId(),getTempString()));
						if (!ObjectFunctions.isNullOrEmpty(getCollectionAndFeeDuesList())) {
							ajaxGetApplicationDetails();
							return "configureError";
						}
					}
					long studProFileImage = 0;
					if (!ObjectFunctions.isNullOrEmpty(onlineApplicationDetails.getProfileImage()))
						studProFileImage = onlineApplicationDetails.getProfileImage().getId();
						UserImage attachment;
					if (getUploadFileName() != null) {
						try {
							attachment = profileImageUpload(Constants.FILE_TYPE_IMAGE,customer.getId(),getUserAcademicYearId(),studProFileImage);
							if (!ObjectFunctions.isNullOrEmpty(attachment)) {
								onlineApplicationDetails.setProfileImage(attachment);
							}
						} catch (Throwable e) {
							e.printStackTrace();
						}
					} else if(!StringFunctions.isNullOrEmpty(getParamValue("customerImage"))) {
						try {
							attachment = captureStudentImage(getParamValue("customerImage"),Constants.FILE_TYPE_IMAGE,customer);
							if (!ObjectFunctions.isNullOrEmpty(attachment)) {
								onlineApplicationDetails.setProfileImage(attachment);
							}
						} catch (Throwable e) {
							e.printStackTrace();
						}

					}
					attachment = null;
					onlineApplicationDetails.setFirstName(getOnlineApplicationDetailsView().getFirstName());
					onlineApplicationDetails.setDateOfBirth(getOnlineApplicationDetailsView().getDateOfBirth());
					onlineApplicationDetails.setGender(getOnlineApplicationDetailsView().getGender());
					onlineApplicationDetails.setNationality(getOnlineApplicationDetailsView().getNationality());
					onlineApplicationDetails.setBloodGroup(getOnlineApplicationDetailsView().getBloodGroup());
					onlineApplicationDetails.setLastName(getOnlineApplicationDetailsView().getLastName());
					onlineApplicationDetails.setFatherAadharNumber(getOnlineApplicationDetailsView().getFatherAadharNumber());
					onlineApplicationDetails.setMotherAadharNumber(getOnlineApplicationDetailsView().getMotherAadharNumber());
					if("Y".equalsIgnoreCase(customer.getAlphaNumericRollNumber()) && !ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getRollNumber()))
						onlineApplicationDetails.setRollNumber(getOnlineApplicationDetailsView().getRollNumber());
					if (getOnlineApplicationDetailsView().getReligionId() > 0)
						religion = (CommonType) adminManager.get(CommonType.class,getOnlineApplicationDetailsView().getReligionId());
					onlineApplicationDetails.setReligionId(religion);
					if (!ObjectFunctions.isNullOrEmpty(className)) {
						onlineApplicationDetails.setClassId(className);
						className = null;
					}
					onlineApplicationDetails.setStudentEmail(getOnlineApplicationDetailsView().getStudentEmail());
					if (!StringFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getHostelMode()))
						onlineApplicationDetails.setHostelMode(getOnlineApplicationDetailsView().getHostelMode());
					onlineApplicationDetails.setStudentMobile(getOnlineApplicationDetailsView().getStudentMobile());
					onlineApplicationDetails.setFatherName(getOnlineApplicationDetailsView().getFatherName());
					onlineApplicationDetails.setParentEmail(getOnlineApplicationDetailsView().getParentEmail());
					onlineApplicationDetails.setOccupation(getOnlineApplicationDetailsView().getOccupation());
					onlineApplicationDetails.setMotherName(getOnlineApplicationDetailsView().getMotherName());
					onlineApplicationDetails.setPhoneNumber(getOnlineApplicationDetailsView().getPhoneNumber());
					onlineApplicationDetails.setMobileNumber(getOnlineApplicationDetailsView().getMobileNumber());
					onlineApplicationDetails.setDesignation(getOnlineApplicationDetailsView().getDesignation());
					onlineApplicationDetails.setTransferCertificateNo(getOnlineApplicationDetailsView().getTransferCertificateNo());
					onlineApplicationDetails.setFatherQualification(getOnlineApplicationDetailsView().getFatherQualification());
					onlineApplicationDetails.setMotherQualification(getOnlineApplicationDetailsView().getMotherQualification());
					onlineApplicationDetails.setTransportMode(getOnlineApplicationDetailsView().getTransportMode());
					if ("T".equals(getOnlineApplicationDetailsView()
							.getTransportMode())) {
						if (StringFunctions.isNullOrEmpty(getAnyId()) || StringFunctions.isNullOrEmpty(getEventId())) {
							onlineApplicationDetails.setBoardingPointId(null);
							onlineApplicationDetails.setVehicleAcademicDetailsId(null);
						} else {
							onlineApplicationDetails.setBoardingPointId(Long.valueOf(getAnyId()));
							onlineApplicationDetails.setVehicleAcademicDetailsId(Long.valueOf(getEventId()));
						}
					} else {
						onlineApplicationDetails.setBoardingPointId(null);
						onlineApplicationDetails.setVehicleAcademicDetailsId(null);
					}
					onlineApplicationDetails.setAnnualIncome(getOnlineApplicationDetailsView().getAnnualIncome());
					onlineApplicationDetails.setLastSchool(getOnlineApplicationDetailsView().getLastSchool());
					onlineApplicationDetails.setPlaceOfBirth(getOnlineApplicationDetailsView().getPlaceOfBirth());
					onlineApplicationDetails.setLastClassAttended(getOnlineApplicationDetailsView().getLastClassAttended());
					onlineApplicationDetails.setCollectedDocuments(getOnlineApplicationDetailsView().getCollectedDocuments());
					onlineApplicationDetails.setCategoryId(getOnlineApplicationDetailsView().getCategoryId());
					onlineApplicationDetails.setBplStatus(getOnlineApplicationDetailsView().getBplStatus());
					onlineApplicationDetails.setRteStatus(getOnlineApplicationDetailsView().getRteStatus());
					
					if (StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getCaddrStreetName()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getCaddrCity())|| StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getCaddrPostalCode()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getCaddrState())) {
						coresAddress = onlineApplicationDetails.getPrimaryAddress();
						if (ObjectFunctions.isNullOrEmpty(coresAddress))
							coresAddress = new Address();
						if (!StringFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getCaddrState())) {
							stateObject = (State) adminManager.get(State.class,"stateCode='"+ getOnlineApplicationDetailsView().getCaddrState() + "'");
							if (!ObjectFunctions.isNullOrEmpty(stateObject))
								coresAddress.setStateId(stateObject.getId());
							stateObject = null;
						}
						coresAddress.setStreetName(getOnlineApplicationDetailsView().getCaddrStreetName());
						coresAddress.setCity(getOnlineApplicationDetailsView().getCaddrCity());
						coresAddress.setPostalCode(getOnlineApplicationDetailsView().getCaddrPostalCode());
						coresAddress.setState(getOnlineApplicationDetailsView().getCaddrState());
						coresAddress.setLastUpdatedDate(new Date());
						onlineApplicationDetails.setPrimaryAddress(coresAddress);
					} else
						onlineApplicationDetails.setPrimaryAddress(null);
					if (StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getTAddrStreetName()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getTAddrState()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getTAddrCity()) || StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getTAddrPostalCode())) {
						tempAddress = onlineApplicationDetails.getTempararyAddress();
						if (ObjectFunctions.isNullOrEmpty(tempAddress))
							tempAddress = new Address();
						if (!StringFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getTAddrState())) {
							stateObject = (State) adminManager.get(State.class,"stateCode='"+ getOnlineApplicationDetailsView().getTAddrState() + "'");
							if (!ObjectFunctions.isNullOrEmpty(stateObject))
								tempAddress.setStateId(stateObject.getId());
							stateObject = null;
						}
						tempAddress.setStreetName(getOnlineApplicationDetailsView().getTAddrStreetName());
						tempAddress.setCity(getOnlineApplicationDetailsView().getTAddrCity());
						tempAddress.setPostalCode(getOnlineApplicationDetailsView().getTAddrPostalCode());
						tempAddress.setState(getOnlineApplicationDetailsView().getTAddrState());
						tempAddress.setLastUpdatedDate(new Date());
						onlineApplicationDetails.setTempararyAddress(tempAddress);
					} else
						onlineApplicationDetails.setTempararyAddress(null);
					if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getCastId()) && getOnlineApplicationDetails().getCastId().getId() > 0)
						castSetting = (CastSettings) adminManager.get(CastSettings.class,getOnlineApplicationDetails().getCastId().getId());
					onlineApplicationDetails.setCastId(castSetting);
					if (getOnlineApplicationDetails().getSubCastId().getId() > 0)
						subCast = (SubCastSettings) adminManager.get(SubCastSettings.class,getOnlineApplicationDetails().getSubCastId().getId());
					onlineApplicationDetails.setSubCastId(subCast);
					if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView())&& StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getStatus())) {
						log.debug("Process Application Status :- "+ getOnlineApplicationDetailsView().getStatus());
						if ("S".equalsIgnoreCase(getOnlineApplicationDetailsView().getStatus())) {
							onlineApplicationDetails.setStatus(getOnlineApplicationDetailsView().getStatus());
						} else if ("R".equalsIgnoreCase(getOnlineApplicationDetailsView().getStatus())) {
							onlineApplicationDetails.setStatus(getOnlineApplicationDetailsView().getStatus());
							if (StringFunctions.isNotNullOrEmpty(getOnlineApplicationDetailsView().getRejectApplicationDesc())) {
								onlineApplicationDetails.setRejectApplicationDesc(getOnlineApplicationDetailsView().getRejectApplicationDesc());
							}
						}
					} else {
						if (!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getEntranceExamPassMarks())&& !ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getEntranceMarks())) {
							if (getOnlineApplicationDetailsView().getEntranceMarks() < getOnlineApplicationDetailsView().getEntranceExamPassMarks()) {
								onlineApplicationDetails.setStatus("R");
							} else if (getOnlineApplicationDetailsView().getEntranceMarks() >= getOnlineApplicationDetailsView().getEntranceExamPassMarks()) {
								onlineApplicationDetails.setStatus("S");
							}
						}
					}
					if (onlineApplicationDetails.getEntranceMarks() != getOnlineApplicationDetailsView().getEntranceMarks()) {
						onlineApplicationDetails.setEntranceMarks(getOnlineApplicationDetailsView().getEntranceMarks());
					}
					onlineApplicationDetails.setCommittedFee(getOnlineApplicationDetailsView().getCommittedFee());
					onlineApplicationDetails.setSslcNumber(getOnlineApplicationDetailsView().getSslcNumber());
					onlineApplicationDetails.setTmrNumber(getOnlineApplicationDetailsView().getTmrNumber());
					onlineApplicationDetails.setCommunityNumber(getOnlineApplicationDetailsView().getCommunityNumber());
					onlineApplicationDetails.setMotherToungId(getOnlineApplicationDetailsView().getMotherToungId());
					StringBuffer pathName = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,getOnlineApplicationDetailsView().getFirstName().replaceAll(" ", "_"),Long.valueOf(getEmpId()),0));
					log.debug("pathName ");
					if(getFileUpload().size()!=0 && "true".equalsIgnoreCase(getPlTitle())){
						  if(StringFunctions.isNotNullOrEmpty(pathName.toString())){
							log.debug(pathName);
							for(int i=0;i<getFileUpload().size();i++){
								 if(!ObjectFunctions.isNullOrEmpty(getFileUpload().get(i))){
					    		     File file = getFileUpload().get(i);
					    			 String fileName = getFileUploadFileName().get(i);
						    		 File destDir = new File(getSession().getServletContext().getRealPath(pathName+fileName));
									 FileUtils.copyFile(file, destDir);	 
					    		 }
					    	}
							onlineApplicationDetails.setIsPHDocsUploaded(Constants.YES_STRING);
							onlineApplicationDetails.setPhysicallyHandicappedDesc(getOnlineApplicationDetailsView().getPhysicallyHandicappedDesc());
							log.debug("pathName ");
						  }
					}
					else{
						log.debug("else :"+pathName);
						onlineApplicationDetails.setIsPHDocsUploaded(Constants.NO_STRING);
						onlineApplicationDetails.setPhysicallyHandicappedDesc("");
					    if(StringFunctions.isNotNullOrEmpty(pathName.toString())){
					    	File destFile = new File(getSession().getServletContext().getRealPath(pathName.toString()));
				    		if(destFile.exists()){
				    			FileUtils.deleteDirectory(destFile);
				    		}
				    		setTempList(null);
						}
					}
					if("true".equalsIgnoreCase(getPlTitle()))
							onlineApplicationDetails.setPhId(true);
					else
						onlineApplicationDetails.setPhId(false);
					//onlineApplicationDetails.setPhId(getOnlineApplicationDetailsView().isPhId());
					onlineApplicationDetails.setStudentUniqueNumber(getOnlineApplicationDetailsView().getStudentUniqueNumber());
					onlineApplicationDetails.setVisionL(getOnlineApplicationDetailsView().getVisionL());
					onlineApplicationDetails.setVisionR(getOnlineApplicationDetailsView().getVisionR());
					onlineApplicationDetails.setHeight(getOnlineApplicationDetailsView().getHeight());
					onlineApplicationDetails.setWeight(getOnlineApplicationDetailsView().getWeight());
					onlineApplicationDetails.setGoals(getOnlineApplicationDetailsView().getGoals());
					onlineApplicationDetails.setStrengths(getOnlineApplicationDetailsView().getStrengths());
					onlineApplicationDetails.setInterestsAndHobbies(getOnlineApplicationDetailsView().getInterestsAndHobbies());
					onlineApplicationDetails.setResponsibilities(getOnlineApplicationDetailsView().getResponsibilities());
					onlineApplicationDetails.setAchievements(getOnlineApplicationDetailsView().getAchievements());
					onlineApplicationDetails.setIdentification1(getOnlineApplicationDetailsView().getIdentification1());
					onlineApplicationDetails.setIdentification2(getOnlineApplicationDetailsView().getIdentification2());
					onlineApplicationDetails.setMotherToungId(getOnlineApplicationDetailsView().getMotherToungId());
					onlineApplicationDetails.setTeeth(getOnlineApplicationDetailsView().getTeeth());
					onlineApplicationDetails.setOralHygiene(getOnlineApplicationDetailsView().getOralHygiene());
					onlineApplicationDetails.setRationCardNumber(getOnlineApplicationDetailsView().getRationCardNumber());
					onlineApplicationDetails.setDateOfJoining(getOnlineApplicationDetailsView().getDateOfJoining());
					onlineApplicationDetails.setFamilyDoctor(getOnlineApplicationDetailsView().getFamilyDoctor());
					onlineApplicationDetails.setPrefferedHospital(getOnlineApplicationDetailsView().getPrefferedHospital());
					onlineApplicationDetails.setAadharCardNumber(getOnlineApplicationDetailsView().getAadharCardNumber());
					onlineApplicationDetails.setLastUpdatedDate(new Date());
					onlineApplicationDetails = (OnlineApplicationDetails)adminManager.saveOrUpdateObject(onlineApplicationDetails);
					setAcademicYearId(onlineApplicationDetails.getAcademicYear().getId());
					
					if(!StringFunctions.isNullOrEmpty(getOnlineApplicationDetailsView().getStatus()))
					{
						if("CS".equalsIgnoreCase(getOnlineApplicationDetailsView().getStatus()))
						{
							String userName = null;
							if (!ObjectFunctions.isNullOrEmpty(customer)) {
								userName = StringFunctions.stripSymbols(customer.getId()+"S"+ getAdmissionNumber());
							}
							
							Student student = studentManager.addStudentFromApplicationAndUpdateCount(onlineApplicationDetails,onlineApplicationDetails.getAcademicYear(),userName,getAdmissionNumber(),customer,smsServiceProvider);
							StringBuffer despathName = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,student.getAccount().getPerson().getFirstName().replaceAll(" ", "_"),0,student.getAccount().getId()));
							StringBuffer sourcepathName = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,student.getAccount().getPerson().getFirstName().replaceAll(" ", "_"),onlineApplicationDetails.getId(),0));
							log.debug("pathName ");
							File directory = new File(sourcepathName.toString());
							Person personObj = student.getAccount().getPerson();
							//if(directory.exists()){
							File sourceFile = new File(getSession().getServletContext().getRealPath(sourcepathName.toString()));
							File destFile = new File(getSession().getServletContext().getRealPath(despathName.toString()));
							log.debug(sourceFile);
							if(StringFunctions.isNotNullOrEmpty(sourceFile.toString())){
								if(sourceFile.exists()){
									 FileUtils.copyDirectory(sourceFile, destFile);	 
					    		}
							}
						}
					}
					
					if ("P".equalsIgnoreCase(getStatus())) {
						ajaxPendingApplications();
						super.addActionMessage("Student application updated successfully.");
						return "success";
					}
					if ("R".equalsIgnoreCase(getStatus())) {
						ajaxRejectedApplicationsDetails();
						super.addActionMessage("Student application updated successfully.");
						return "rejected";
					}
					if ("S".equalsIgnoreCase(getStatus())) {
						ajaxApprovedApplications();
						super.addActionMessage("Student application updated successfully.");
						return "approved";
					}
					
				}
				tempAddress = null;
				coresAddress = null;
			}
			ajaxGetOnlineAdmissions();
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			RayGunException raygex = new RayGunException();
			raygex.sendRayGunException(ex);
			raygex = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxRejectedApplications", results = { @Result(location = "admission/ajaxRejectedApplicationDetails.jsp", name = "success") }) })
	public String ajaxRejectedApplications() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRejectedApplications' method");
		}
		try {
			onlineApplicationDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxRejectedApplicationsDetails", results = { @Result(location = "admission/ajaxRejectedApplication.jsp", name = "success") }) })
	public String ajaxRejectedApplicationsDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRejectedApplicationsDetails' method");
		}
		try {
			getSmsCount();
			if(getAcademicYearId() > 0){
				ajaxGetApplicationsDetailsByStatus("R",getAcademicYearId(),getAnyTitle(), getSelectedId());
			}
			 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	public String ajaxSetApplicationList(String status) {
		if (log.isDebugEnabled()) {
			log.debug("Entering ' ajaxSetApplicationList' method");
		}
		try {
			AdmissionSettings admissionSettings = adminManager.getAdmissionSettingsByCustId(getUserCustId());
			if (!ObjectFunctions.isNullOrEmpty(admissionSettings)) {
				long academicYearId = admissionSettings.getAcademicYear().getId();
				setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
				long classId = 0;
				String todayDate = DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date());
				List admissionDetails = adminManager.getApplicationsByStatus(status,classId, getUserCustId(),academicYearId,todayDate);
				if (ObjectFunctions.isNotNullOrEmpty(admissionDetails)) {
					Iterator objectIterator = admissionDetails.iterator();
					for (Iterator objectsIterator = objectIterator; objectsIterator.hasNext();) {
						OnlineApplicationDetailsView onlineApplicationDetails = (OnlineApplicationDetailsView) objectsIterator.next();
						if (!StringFunctions.isNullOrEmpty(onlineApplicationDetails.getClassName())) {
							getObjectList().add(onlineApplicationDetails);
						}
						onlineApplicationDetails = null;
					}
					objectIterator = null;
					admissionDetails = null;
					Collections.sort(getObjectList());
				}	
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxAdmissionSettingsHome", results = { @Result(location = "admission/admissionSettingsHome.jsp", name = "success") }) })
	public String ajaxAdmissionSettingsHome() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAdmissionSettingsHome' method");
		}
		try {
			AdmissionSettings admissionSetting = null;
			setAcademicYearList(getAdmissionAcademicYears());
			List<AdmissionSettings> admissionSettings = adminManager.getAll(AdmissionSettings.class, "custId="+ getUserCustId() + " and academicYearId>="+ getUserAcademicYearId());
			if (ObjectFunctions.isNullOrEmpty(admissionSettings)) {
				setTempBoolean(true);
			} else {
				if (admissionSettings.size() > 1)
					setTempBoolean(false);
				else {
					admissionSetting = admissionSettings.get(0);
					// you can use any format that you want, forexample:("yyyy-MM-dd")
					SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");
					setTempBoolean(DateFunctions.compareDatesByCompareTo(SDF.parse(SDF.format(new Date())), admissionSetting.getAdmissionEndDate()));
				}
			}
			admissionSettings = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxAdmissionSettings", results = { @Result(location = "admission/ajaxAdmissionSettings.jsp", name = "success") }) })
	public String ajaxAdmissionSettings() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAdmissionSettings' method");
		}
		try {
			/* Changes made to show Iframe code on the login page for validation*/
			if(!StringFunctions.isNullOrEmpty(getParamValue("id"))){
				setTempList(adminManager.getAdmissionSettingsForAcademicYears(Long.valueOf(getParamValue("id")),getAcademicYearId()));
			}else{
				setTempList(adminManager.getAdmissionSettingsForAcademicYears(getUserCustId(),getAcademicYearId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxRemoveClassAdmission", results = { @Result(location = "admission/admissionSettingsHome.jsp", name = "success") }) })
	public String ajaxRemoveClassAdmission() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveClassAdmission' method");
		}
		try { 
			if (getTempId() > 0 && getTempId1() > 0) {
				int apllicationsCount =  adminManager.getCount("onlineApplicationDetails", "academicYearId="+getTempId1());
				if(apllicationsCount > 0){
					super.addActionError("Applications are available for this admission settings. Please remove applications for this admission settiings.");
				}else{
					adminManager.updateClassStatus(getUserCustId(),getTempId1());
					adminManager.remove(AdmissionSettings.class, getTempId());
					super.addActionMessage("Successfully removed admission settings.");
				}
			}
			ajaxAdmissionSettingsHome();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoAddAdmissionSettings", results = { @Result(location = "admission/ajaxDoAddAdmissionSettings.jsp", name = "success") })
        		 })
	public String ajaxDoAddAdmissionSettings() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddAdmissionSettings' method");
		}
		try {
			if(getAdmissionSettings().getId() > 0){
				setAdmissionSettings((AdmissionSettings) adminManager.get(AdmissionSettings.class, "id="+getAdmissionSettings().getId()));
				if(!ObjectFunctions.isNullOrEmpty(getAdmissionSettings())){
					getLeaveTypes().put(getAdmissionSettings().getAcademicYear().getAcademicYear(), getAdmissionSettings().getAcademicYear().getAcademicYear());
				}
			}else{
				AcademicYear academicYear=null;
				AcademicYear futureAcademicYear=null;
				AdmissionSettings admissionSettings = null;
				if(getUserAcademicYearId() > 0){
					academicYear=(AcademicYear)adminManager.get(AcademicYear.class, getUserAcademicYearId());
					if(!ObjectFunctions.isNullOrEmpty(academicYear)){
						String futureYear=(Long.valueOf(academicYear.getAcademicYear().split("-")[0])+1)+"-"+(Long.valueOf(academicYear.getAcademicYear().split("-")[1])+1);
						admissionSettings = (AdmissionSettings)adminManager.get(AdmissionSettings.class, "academicYearId="+academicYear.getId()+" and custId="+getUserCustId());
						if(ObjectFunctions.isNullOrEmpty(admissionSettings)){
							getLeaveTypes().put(academicYear.getAcademicYear(), academicYear.getAcademicYear());
						}
						futureAcademicYear = (AcademicYear)adminManager.get(AcademicYear.class, "academicYear='"+futureYear+"' and custId="+getUserCustId());
						if(ObjectFunctions.isNullOrEmpty(futureAcademicYear)){
							getLeaveTypes().put(futureYear, futureYear);
						}else{
							admissionSettings = (AdmissionSettings)adminManager.get(AdmissionSettings.class, "academicYearId="+futureAcademicYear.getId()+" and custId="+getUserCustId());
							if(ObjectFunctions.isNullOrEmpty(admissionSettings)){
								getLeaveTypes().put(futureYear, futureYear);
							}
						}
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxAddAdmissionSettings", results = { @Result(location = "admission/ajaxManageClassesDetails.jsp", name = "success") }) })
	public String ajaxAddAdmissionSettings() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddAdmissionSettings' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getAdmissionSettings()) && !ObjectFunctions.isNullOrEmpty(getAdmissionSettings().getAcademicYear().getAcademicYear())) {
				AdmissionSettings admissionSettings = null;
				AcademicYear admissionAcademicYear = null;
				AcademicYear presentAcademicYear = null;
				if (getAdmissionSettings().getId() > 0) {
					admissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, getAdmissionSettings().getId());
					if (ObjectFunctions.isNullOrEmpty(admissionSettings)) {
						admissionSettings = new AdmissionSettings();
					}
					admissionSettings.setLastUpdatedDate(new Date());
				} else {
					admissionSettings = new AdmissionSettings();
					admissionSettings.setCreatedById(getUser().getId());
					admissionSettings.setCreatedDate(new Date());
				}
				admissionSettings.copyFrom(getAdmissionSettings());
				if (!getAdmissionSettings().isTestConducted()) {
					admissionSettings.setEntranceDate(null);
					admissionSettings.setEntranceExamPassMarks(0);
					admissionSettings.setEntranceExamTotalMarks(0);
				}
				if (getAdmissionSettings().getId() > 0) {
					admissionAcademicYear = admissionSettings.getAcademicYear();
				}else{
					admissionAcademicYear = adminManager.getAcademicYearByAcademicYear(getAdmissionSettings().getAcademicYear().getAcademicYear(),getUserCustId());
				}
				presentAcademicYear = (AcademicYear) adminManager.get(AcademicYear.class, getUserAcademicYearId());
				if (!ObjectFunctions.isNullOrEmpty(admissionAcademicYear)) {
					admissionSettings.setAcademicYear(admissionAcademicYear);
				} else if (!ObjectFunctions.isNullOrEmpty(presentAcademicYear)) {
					createNewAcademicYear(admissionAcademicYear,presentAcademicYear, getAdmissionSettings().getAcademicYear().getAcademicYear());
					if (!ObjectFunctions.isNullOrEmpty(getAcademicYear())) {
						admissionAcademicYear = getAcademicYear();
						admissionSettings.setAcademicYear(getAcademicYear());
					}
				}
				
				admissionSettings.setCustId(getUserCustId());
				admissionSettings.setLastAccessDate(new Date());
				admissionSettings.setLastUpdatedDate(new Date());
				
				AcademicYear academicYear = admissionSettings.getAcademicYear();
				
				academicYear.setManageStudentsAdmissionsByFee(getAdmissionSettings().getAcademicYear().getManageStudentsAdmissionsByFee());
				academicYear = (AcademicYear) adminManager.save(academicYear);
				admissionSettings.setAcademicYear(academicYear);
				
				MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) ServletActionContext.getRequest();
				Enumeration fileParaNames = multiWrapper.getFileParameterNames();
				while (fileParaNames.hasMoreElements()) 
				{
					String key = (String) fileParaNames.nextElement();
					File[] fileObject = multiWrapper.getFiles(key);
					String[] localSysfileNames = multiWrapper.getFileNames(key);
					setUploadFileName(StringFunctions.stripSymbols(localSysfileNames[0]));
					
					String pathName= "/userFiles/admissionFormTemplate/"+getUserCustId()+"/"+academicYear.getId();
					
					File destDir = new File(getSession().getServletContext().getRealPath(pathName.toString())+"/"+getUploadFileName());
					
					if("uploadList[1]".equalsIgnoreCase(key))
					{
						 admissionSettings.setAdmissionFormEmptyTemplatepath(pathName.toString());
						    admissionSettings.setAdmissionFormEmptyTemplateFileName(getUploadFileName());
							FileUtils.copyFile(fileObject[0], destDir);
					}
					else if("upload".equalsIgnoreCase(key))
					{
						FileUtils.copyFile(getUpload(), destDir);
					    admissionSettings.setAdmissionFormTemplatepath(pathName.toString());
					    admissionSettings.setAdmissionFormTemplateFileName(getUploadFileName());
					}
				   
				}
			    
				admissionSettings = adminManager.saveAdmissionSettings(admissionSettings);
				if (admissionSettings.isStatus()) {
					adminManager.updateAdmissionSettingsStatus(admissionSettings.getId(), getUserCustId());
				}
				getSession().setAttribute("admissionAcademicYearId",admissionAcademicYear.getId());
				getSession().setAttribute("admissionSettingId",admissionSettings.getId());
				if (!ObjectFunctions.isNullOrEmpty(admissionAcademicYear) && !ObjectFunctions.isNullOrEmpty(presentAcademicYear))
					ajaxGetAdmissionClassesDetails(admissionAcademicYear,presentAcademicYear);
				presentAcademicYear = null;
				admissionAcademicYear = null;
				academicYear = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetAdmissionSettings", results = { @Result(location = "admission/ajaxGetAdmissionSettings.jsp", name = "success") }) })
	public String ajaxGetAdmissionSettings() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddAdmissionSettings' method");
		}
		try {
			String academicYearId = null;
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = (String) getSession().getAttribute("academicYear");
			} else {
				academicYearId = (String) getSession().getAttribute("newYear");
			}
			AdmissionSettings admissionSettings = adminManager.getAdmissionSettingsByCustId(getUserCustId());
			if (!ObjectFunctions.isNullOrEmpty(admissionSettings)) {
				setAdmissionSettings(admissionSettings);
			}
			String closedStatus = "N";
			String OpenStatus = "Y";
			List admissionClosedClasses = adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),Long.valueOf(academicYearId),closedStatus,null,true);
			if (ObjectFunctions.isNotNullOrEmpty(admissionClosedClasses)) {
				setTempList(admissionClosedClasses);
			}

			List admissionOpenClasses = adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),Long.valueOf(academicYearId),OpenStatus,null,true);
			if (ObjectFunctions.isNotNullOrEmpty(admissionOpenClasses)) {
				setObjectList(admissionOpenClasses);
			}
 } catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	
	public void ajaxGetAdmissionClassesDetails(AcademicYear admissionAcademicYear,AcademicYear presentAcademicYear){
		if(!ObjectFunctions.isNullOrEmpty(admissionAcademicYear) && !ObjectFunctions.isNullOrEmpty(presentAcademicYear)){
			if(admissionAcademicYear.getId() != presentAcademicYear.getId()){
				Map<String,ClassName> classNames=new HashMap<String, ClassName>();
			    Map<String,StudyClass> studyClasses=new HashMap<String, StudyClass>();
			    Map<String,StudySubject> studySubjects=new HashMap<String, StudySubject>();
				classNames = generateClassNames(admissionAcademicYear,classNames,getUser().getId(),presentAcademicYear);
				studySubjects  = generateStudySubjectsAndStaffEligibleSubjects(admissionAcademicYear,studySubjects,getUser().getId(),presentAcademicYear);
				studyClasses=generateStudyClassesAndClassSubjects(admissionAcademicYear,studyClasses,classNames,studySubjects,getUser().getId(),presentAcademicYear);
				Customer customerObject = (Customer)adminManager.get(Customer.class,"id="+getUserCustId());
				if(!ObjectFunctions.isNullOrEmpty(customerObject)){
					if(customerObject.isTransportModuleStatus()){
						createFutureAcademicYearTransportDetails(presentAcademicYear.getId(),admissionAcademicYear);
					}
				}
				customerObject = null;
			}
			ajaxGetAdmissionClassDetails();
		}
	}
	@Action(value = "ajaxGetAdmissionClassDetails", results = { @Result(location = "admission/ajaxManageClassesDetails.jsp", name = "success")})
	public String ajaxGetAdmissionClassDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetAdmissionClassDetails' method");
		}
		try {
			List<ClassName> classesList = null;
			AcademicYear admissionAcademicYear=null;
			boolean isSortingOrderDefined = false;
			int shortListedCount =0;
			Object[] classCapacityDetails = null;
			int filledSeats = 0;
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("admissionAcademicYearId"))){
				 admissionAcademicYear = (AcademicYear)adminManager.get(AcademicYear.class, "id="+getSession().getAttribute("admissionAcademicYearId"));
			}
			classesList = adminManager.getAll(ClassName.class, "academicYearId="+admissionAcademicYear.getId()+" and custId="+getUserCustId());
			if(ObjectFunctions.isNotNullOrEmpty(classesList)){
				for(ClassName clasName: classesList){
					filledSeats = 0;
					classCapacityDetails=adminManager.get("select IFNULL(sum(sectionCapacity),0) as sectionCapacity,IFNULL(sum(filledSeats),0) as filledSeats from vw_classSectionDetails where academicYearId="+clasName.getAcademicYearId()+" and classId="+clasName.getId());
					shortListedCount = adminManager.getCount("onlineApplicationDetails", "academicYearId="+clasName.getAcademicYearId()+" and classId="+clasName.getId()+" and status='"+Constants.SCHOOL_MODULE+"'");
						if(!ObjectFunctions.isNullOrEmpty(classCapacityDetails)){
							clasName.setAbsentiesCount(Integer.valueOf(classCapacityDetails[0].toString()));//Class Capacity
							clasName.setNoOfStudents(shortListedCount + Integer.valueOf(classCapacityDetails[1].toString()));
						}
					
				}
				if(isSortingOrderDefined)
					super.addActionError("Please change classes order.");
				setClassNameList(classesList);
				classesList=null;
				admissionAcademicYear=null;
				//presentAcademicYear = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
		@Action(value = "ajaxGetOnlineAdmissions", results = { @Result(location = "admission/admissionDetails.jsp", name = "success") })
		})
	public String ajaxGetOnlineAdmissions() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetOnlineAdmissions' method");
		}
		try {
			getSmsCount();
			onlineApplicationDetails();
			
			if("finishAdmissionSettings".equalsIgnoreCase(getAnyTitle()))
			{
				super.addActionMessage("Admissions settings updated successfully.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
		
	public void ajaxGetPendingApplicationDetails(long academicYearId){
		setObjectList(adminManager.getApplicationsByStatus(Constants.PENDING_STATUS,0, getUserCustId(),academicYearId,null));
		if(ObjectFunctions.isNotNullOrEmpty(getObjectList()))
			Collections.sort(getObjectList());
	}
	

	@Actions( { @Action(value = "ajaxRemoveApplication", results = {
			@Result(location = "admission/ajaxPendingAdmissionDetails.jsp", name = "pending"),
			@Result(location = "admission/admissionDetails.jsp", name = "success"),
			@Result(location = "admission/ajaxApprovedApplicationDetails.jsp", name = "approved"),
			@Result(location = "admission/ajaxRejectedApplication.jsp", name = "rejected")
			}) })
	public String ajaxRemoveApplication() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveApplication' method");
		}
		try {
			if (getAcademicYearId() > 0) {
			String applicationId = getParamValue("id");
			String status = getParamValue("status");
			if (StringFunctions.isNotNullOrEmpty(applicationId)) {
				OnlineApplicationDetails onlineApplicationDetails = (OnlineApplicationDetails) adminManager.get(OnlineApplicationDetails.class, Long.parseLong(applicationId));
				if (!ObjectFunctions.isNullOrEmpty(onlineApplicationDetails)) {
					getSmsCount();
					onlineApplicationDetails.setAcademicYear(null);
					adminManager.remove(OnlineApplicationDetails.class, Long.valueOf(applicationId));
					if ("P".equalsIgnoreCase(status)) {
						super.addActionMessage("Application removed successfully.");
						ajaxGetApplicationsDetailsByStatus("P",getAcademicYearId(),getAnyTitle(), getSelectedId());
						return "pending";
					}else if ("R".equalsIgnoreCase(status)) {
						super.addActionMessage("Application removed successfully.");
						ajaxGetApplicationsDetailsByStatus("R",getAcademicYearId(),getAnyTitle(), getSelectedId());
						return "rejected";
					}else if ("S".equalsIgnoreCase(status)) {
						super.addActionMessage("Application removed successfully.");
						ajaxGetApplicationsDetailsByStatus(Constants.SCHOOL_MODULE,getAcademicYearId(),getAnyTitle(), getSelectedId());
						return "approved";
					}
				}
			}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	/**
	 * @return the applicationDetailsSet
	 */
	public Set getApplicationDetailsSet() {
		if (ObjectFunctions.isNullOrEmpty(this.applicationDetailsSet)) {
			this.applicationDetailsSet = new HashSet();
		}
		return this.applicationDetailsSet;
	}

	/**
	 * @param applicationDetailsSet
	 *            the applicationDetailsSet to set
	 */
	public void setApplicationDetailsSet(Set applicationDetailsSet) {
		this.applicationDetailsSet = applicationDetailsSet;
	}

	
	@Actions( { @Action(value = "studentDetailsSheetTemplate", results = { @Result(location = "jasper/admission/studentDetails.jasper", type = "jasper", name = "success", params = {
			"dataSource", "applicationDetailsSet", "format", "XLS" }) }) })
	public String studentDetailsSheetTemplate() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'studentDetailsSheetTemplateReport' method");
		}
		try {
			String academicYearId = null;
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = (String) getSession().getAttribute("academicYear");
			} else {
				academicYearId = (String) getSession().getAttribute("newYear");
			}
			String date = DateFormatter.formatDate(DateFormatter.YYYY_PATTERN,new Date());
			String xls = getParamValue("xlsId");
			String classId = getParamValue("classId");
			String todayDate = DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date());
			List onlineApplicationDetailsList = adminManager.getApplicationsByStatus("Y", Long.valueOf(classId),getUserCustId(),Long.valueOf(academicYearId),todayDate);
			if (!ObjectFunctions.isNullOrEmpty(onlineApplicationDetailsList)) {
				Iterator applicationDetailsListIterator = onlineApplicationDetailsList.iterator();
				for (Iterator applicationDetailsListObjectIterator = applicationDetailsListIterator; applicationDetailsListObjectIterator.hasNext();) {
					OnlineApplicationDetails onlineApplicationDetails = (OnlineApplicationDetails) applicationDetailsListObjectIterator.next();
					getObjectList().add(onlineApplicationDetails);
					onlineApplicationDetails = null;
				}
				Collections.sort(getObjectList());
				getApplicationDetailsSet().addAll(ConvertUtil.convertListToSet(getObjectList()));
			}

			String path = getSession().getServletContext().getRealPath("/jasper/admission/studentDetails.jrxml");
			File file=new File(path);
			if(file.exists()){
			InputStream input = new FileInputStream(file);
			JasperDesign design = JRXmlLoader.load(input);
			JasperReport report = JasperCompileManager.compileReport(design);
			JRBeanCollectionDataSource jasperReports = new JRBeanCollectionDataSource(getApplicationDetailsSet());
			JasperPrint print = JasperFillManager.fillReport(report,new HashMap(), jasperReports);
			if ("xls".equalsIgnoreCase(xls)) {
				ClassName className = (ClassName) adminManager.get(ClassName.class, Long.valueOf(classId));
				if (!ObjectFunctions.isNullOrEmpty(className)) {
					String name = className.getDescription().replace(" ", "");
					getResponse().setHeader("Content-Disposition","attachment;filename=" + name + "StudentDetails_"+ date + ".xls");
				}
			}
			OutputStream output = getResponse().getOutputStream();
			// coding For Excel:
			JRXlsExporter exporterXLS = new JRXlsExporter();
			exporterXLS.setParameter(JRExporterParameter.JASPER_PRINT, print);
			exporterXLS.setParameter(JRExporterParameter.OUTPUT_STREAM,output);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_ONE_PAGE_PER_SHEET,Boolean.FALSE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_WHITE_PAGE_BACKGROUND,Boolean.FALSE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS,Boolean.TRUE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_AUTO_DETECT_CELL_TYPE,Boolean.TRUE);
			exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_COLLAPSE_ROW_SPAN, Boolean.TRUE);
			exporterXLS.exportReport();
			}
			return null;
		}

		catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}


/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * March 28, 2013	 Narahari			Modularization of for roll numbers
 * Feb 6, 2014       Seshu		        Add onlineApplicationDetails id in student table.
/********************************************************************/   
	@Actions({
			@Action(value = "ajaxAddAdmissionStudentsToClass", results = { @Result(location = "admission/admittedStudentHome.jsp", name = "success"),
																			  @Result(location = "admission/manageAdmissionStudentInvoicePayment.jsp", name = "userNameAlreadyAdded")  })
	})	
	public String ajaxAddAdmissionStudentsToClass() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddAdmissionStudentsToClass' method");
		}
		try {
			String admissionNumber = getParamValue("admissionNumber");
			long applicationNumber = getOnlineApplicationDetails().getId();
			OnlineApplicationDetails onlineApplicationDetails=(OnlineApplicationDetails)adminManager.get(OnlineApplicationDetails.class, applicationNumber);
			 if (!ObjectFunctions.isNullOrEmpty(onlineApplicationDetails) && !ObjectFunctions.isNullOrEmpty(onlineApplicationDetails.getClassId())
					 && !StringFunctions.isNullOrEmpty(admissionNumber)) {
				String userName = null;
				if(onlineApplicationDetails.getAcademicYear().getId() != getUserAcademicYearId())
					setAcademicYearId(onlineApplicationDetails.getAcademicYear().getId());
				setTempId2(onlineApplicationDetails.getAcademicYear().getId());
				setTempId1(applicationNumber);
				AcademicYear academicYear = onlineApplicationDetails.getAcademicYear();
				Customer customer= getCustomerByCustId();
				SMSServiceProviders smsServiceProvider=(SMSServiceProviders)  adminManager.getSMSServiceProviderByCustId(customer.getSmsServiceProviderId());
				/*Ganesh : Removed admission number validation from student creatio  because few of the schools are asking they are not maintaining admission number duplication for multipule classes and now we are not adding username with admission number we are adding username primary key id so we may not get issue .*/
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					userName = StringFunctions.stripSymbols(customer.getId()+"S"+ admissionNumber);
				}
				Student student = studentManager.addStudentFromApplicationAndUpdateCount(onlineApplicationDetails,academicYear,userName,admissionNumber,customer,smsServiceProvider);
				if(!ObjectFunctions.isNullOrEmpty(student)){
				StringBuffer despathName = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,student.getAccount().getPerson().getFirstName().replaceAll(" ", "_"),0,student.getAccount().getId()));
				StringBuffer sourcepathName = new StringBuffer(generateStudentDisabilityUploadFilepath(customer,student.getAccount().getPerson().getFirstName().replaceAll(" ", "_"),applicationNumber,0));
				log.debug("pathName ");
				File directory = new File(sourcepathName.toString());
				Person personObj = student.getAccount().getPerson();
				File sourceFile = new File(getSession().getServletContext().getRealPath(sourcepathName.toString()));
				File destFile = new File(getSession().getServletContext().getRealPath(despathName.toString()));
				log.debug(sourceFile);
				if(StringFunctions.isNotNullOrEmpty(sourceFile.toString())){
					if(sourceFile.exists()){
						 FileUtils.copyDirectory(sourceFile, destFile);	 
		    		}
				
				}else{
					log.debug("else :"+sourcepathName);
					personObj.setIsPHDocsUploaded(Constants.NO_STRING);
					personObj.setPhysicallyHandicappedDesc("");
				}
				 adminManager.saveOrUpdateObject(personObj);
				
					prepareStudentSchoolFeeSettingList(student);
					
					getStudentPayment().setAcademicYear(academicYear);
					getStudentPayment().setStudent(student);
					setEmpId(String.valueOf(getStudentPayment().getPaidAmount()));//for this used to paid amount
					StudentPayment studentPayment=schoolFeeManager.makeStudentFeePayment(getAnyId(), getUser().getId(),getPaymentType(),getSelectedId(),"N",0,0,getStudentPayment());
					if("Y".equalsIgnoreCase(customer.getAccountModuleUsing()))
						schoolFeeManager.chashBookPaymentEntry(studentPayment);
					setStudentNumber(String.valueOf(student.getId()));//For printing the receipt
					if("Pay".equalsIgnoreCase(getPlSubTopic())){
						ViewStudentClassDetails viewStudentClassDetails = (ViewStudentClassDetails)adminManager.get(ViewStudentClassDetails.class,"studId="+getStudentNumber()+" and custId="+getUserCustId()+" and studDiscontinueDesc is null");
						if(!ObjectFunctions.isNullOrEmpty(viewStudentClassDetails)){
							Object[] paidAmount = null;
							if(academicYear.getReceiptGenerationType().equalsIgnoreCase("A")){
								setStudentPaymentList(adminManager.getAll(ViewStudentFeePaymentDetails.class, "studentId="+viewStudentClassDetails.getStudId()+" and deleteStatus='"+Constants.NO_STRING+"' and invoiceNumber="+String.valueOf(getStudentPayment().getInvoiceNumber())+" and paymentCommitFeeStatus='"+Constants.NO_STRING+"' order by schoolTermId,feeTypeId"));
								setStudentTransportTermsList(adminManager.getAll(ViewStudentTransportFeePaymentDetails.class, "studentId="+viewStudentClassDetails.getStudId()+" and deleteStatus='"+Constants.NO_STRING+"' and invoiceNumber="+String.valueOf(getStudentPayment().getInvoiceNumber())+" and paymentCommitFeeStatus='"+Constants.NO_STRING+"' order by schoolTermId,feeTypeId"));
								paidAmount=adminManager.get("select sp.paidAmount,sp.discountAmount,IFNULL(ep.excessAmount,0) as excessAmount,sp.id,sp.discountDesc,sum(uep.excessAmount) as usedExcessAmount,sp.desktopReceiptNumber  from studentPayment sp LEFT JOIN excessPayment ep on (sp.id=ep.paymentId) LEFT JOIN excessPayment uep on (sp.id=uep.usedPaymentId) where sp.custId="+getUserCustId()+" and sp.invoiceNumber="+String.valueOf(getStudentPayment().getInvoiceNumber())+" and sp.studentId="+Long.valueOf(getStudentNumber()));
							} else{
								setStudentPaymentList(adminManager.getAll(ViewStudentFeePaymentDetails.class, "studentId="+viewStudentClassDetails.getStudId()+" and deleteStatus='"+Constants.NO_STRING+"' and invoiceString='"+String.valueOf(getStudentPayment().getInvoiceString())+"' and paymentCommitFeeStatus='"+Constants.NO_STRING+"' order by schoolTermId,feeTypeId"));
								setStudentTransportTermsList(adminManager.getAll(ViewStudentTransportFeePaymentDetails.class, "studentId="+viewStudentClassDetails.getStudId()+" and deleteStatus='"+Constants.NO_STRING+"' and invoiceString='"+String.valueOf(getStudentPayment().getInvoiceString())+"' and paymentCommitFeeStatus='"+Constants.NO_STRING+"' order by schoolTermId,feeTypeId"));
								paidAmount=adminManager.get("select sp.paidAmount,sp.discountAmount,IFNULL(ep.excessAmount,0) as excessAmount,sp.id,sp.discountDesc,sum(uep.excessAmount) as usedExcessAmount,sp.invoiceString  from studentPayment sp LEFT JOIN excessPayment ep on (sp.id=ep.paymentId) LEFT JOIN excessPayment uep on (sp.id=uep.usedPaymentId) where sp.custId="+getUserCustId()+" and sp.invoiceString='"+String.valueOf(getStudentPayment().getInvoiceString())+"' and sp.studentId="+Long.valueOf(getStudentNumber()));
							}
							if(!ObjectFunctions.isNullOrEmpty(paidAmount)){
								if (Double.valueOf(paidAmount[1].toString()) != 0)
									setThirtyTotalAmount(Double.valueOf(paidAmount[1].toString()));
								if (Double.valueOf(paidAmount[2].toString()) != 0)
									setWishTitle(paidAmount[2].toString());
								setTotalAmount(Double.valueOf(paidAmount[0].toString()));
								if(!ObjectFunctions.isNullOrEmpty(paidAmount[4]))
									setQueryString(paidAmount[4].toString()); //this is stored to discount reason desc
								if(!ObjectFunctions.isNullOrEmpty(paidAmount[5])){
									if(Double.valueOf(paidAmount[5].toString()) !=0)
										setDescription(paidAmount[5].toString());
								}
								// if user use desk top payment we have to show desktop invoice number
								if(!ObjectFunctions.isNullOrEmpty(paidAmount[6])){
									setAnyId(paidAmount[6].toString());
								}
							}
							if(academicYear.getReceiptGenerationType().equalsIgnoreCase("A"))
								ajaxGenerateFeeReceiptPDFReport(viewStudentClassDetails,getStudentPaymentList(),getTotalAmount(),getStudentPayment(),getTempString(),customer,academicYear,student,getStudentTransportTermsList());
							else if(academicYear.getReceiptGenerationType().equalsIgnoreCase("M"))
								ajaxGenerateFeeReceiptPDFReport(viewStudentClassDetails,getStudentPaymentList(),getTotalAmount(),getStudentPayment(),getTempString(),customer,academicYear,student,getStudentTransportTermsList());
						}
					}	
					super.addActionMessage("Payment made successfully.");
				}
				setQuizId(getStudentPayment().getInvoiceNumber());//For printing the receipt
				setAlertSendType(getStudentPayment().getInvoiceString());  // Using alertSendType when u select Fee Generation type Is manual show the receipt Number in pdf format
				Date paymentDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN, DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,getStudentPayment().getPaymentDate()));
				setTodayDate(DateFormatter.formatDate(DateFormatter.ddMMMyyyy_PATTERN1, paymentDate));//For printing the receipt
				customer = null;
				userName = null;
				className = null;
			} else{
				log.debug("Online Application is null.");
				super.addActionError("Online Applications not available.");
				ajaxFeeSettingInvoice();
			 	return "userNameAlreadyAdded";
			}
				 setDescription("viewAdmittedStudents");
				 onlineApplicationDetails();
		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	public Map getAvailableClassCapacity(ClassName className,AdmissionSettings admissionSettings){
		int filledSeats = 0;
		int total = 0;
		//int toAllowStudents = 0;
		int classCapacity = 0;
		int extendableClassCapacity = 0;
		Map classSeatsInfo = new HashMap<String, Integer>();
		Object[] classCapacityDetails = null;
		int shortListedCount = 0;
		AcademicYear presentAcademicYear= (AcademicYear)adminManager.get(AcademicYear.class, "custId="+getUserCustId()+" and status='Y'");
		classCapacityDetails = adminManager.get("select IFNULL(sum(sectionCapacity),0) as sectionCapacity,IFNULL(sum(filledSeats),0) as filledSeats,IFNULL(sum(extendableClassCapacity),0) as extendableClassCapacity from vw_classSectionDetails where academicYearId="+ admissionSettings.getAcademicYearId()+ " and classId=" + className.getId());
		if (!ObjectFunctions.isNullOrEmpty(classCapacityDetails)) {
			classCapacity = Integer.valueOf(classCapacityDetails[0].toString());// ClassCapacity
			filledSeats = Integer.valueOf(classCapacityDetails[1].toString()); // filledSeats
			extendableClassCapacity = Integer.valueOf(classCapacityDetails[2].toString()); // extendableClassCapacity
		}
		if (admissionSettings.getAcademicYearId() == presentAcademicYear.getId() || className.getSortingOrder() <= 0) {
			total = classCapacity + extendableClassCapacity;
			classSeatsInfo.put("totalSeats", total);
			shortListedCount = adminManager.getCount("onlineApplicationDetails", "academicYearId="+className.getAcademicYearId()+" and classId="+className.getId()+" and status='"+Constants.SCHOOL_MODULE+"'");
			classSeatsInfo.put("availableSeats", total - filledSeats+shortListedCount);
			return classSeatsInfo;
		} else {
			classCapacityDetails = adminManager.get("select IFNULL(sum(filledSeats),0) as filledSeats,academicYearId from vw_classSectionDetails where academicYearId="+ presentAcademicYear.getId()+ " and sortingOrder="+ (className.getSortingOrder() - 1));
			if (!ObjectFunctions.isNullOrEmpty(classCapacityDetails)) {
				filledSeats = filledSeats + Integer.valueOf(classCapacityDetails[0].toString());
				total = classCapacity + extendableClassCapacity;
				classSeatsInfo.put("totalSeats", total);
				shortListedCount = adminManager.getCount("onlineApplicationDetails", "academicYearId="+className.getAcademicYearId()+" and classId="+className.getId()+" and status='"+Constants.SCHOOL_MODULE+"'");
				classSeatsInfo.put("availableSeats", total - filledSeats+shortListedCount);
				return classSeatsInfo;
			}
		}
		classSeatsInfo.put("totalSeats", total);
		classSeatsInfo.put("availableSeats", total - filledSeats);
		return classSeatsInfo;
	}
	@Action(value = "ajaxAcademicSchoolSettings", results = { @Result(location = "academic/ajaxCreateSchoolSettings.jsp", name = "success") })
	public String ajaxAcademicSchoolSettings() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAcademicSchoolSettings' method");
		}
		try {
			setCustomer(getCustomerByCustId());//customer have staff permission settings or not checked in the page level
			AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class,Long.valueOf(getUserAcademicYearId()));
			getSession().setAttribute("timetableGenerationByManual",academicYear.isTimetableGenerationByManual());
			if(!ObjectFunctions.isNullOrEmpty(academicYear.getStartDate()) || !ObjectFunctions.isNullOrEmpty(academicYear.getEndDate())){
				setAcademicYear(academicYear);
				if("CH".equalsIgnoreCase(academicYear.getHolidayStatus())){
					List<VWAcademicYearTimings> acyList= adminManager.getAll(VWAcademicYearTimings.class, " academicYearId="+getUserAcademicYearId());
					if(!ObjectFunctions.isNullOrEmpty(acyList)){
						setTempList2(acyList);
						long classId=-1;
						String strStatus=null;
						StringBuffer selectedIds=new StringBuffer();
						selectedIds.append("(");
						for(VWAcademicYearTimings vwAcademicYearTimings : acyList){
							if(!ObjectFunctions.isNullOrEmpty(vwAcademicYearTimings)){
								if("CD".equalsIgnoreCase(vwAcademicYearTimings.getStatus())){
									strStatus="CD";
									if(vwAcademicYearTimings.getClassId()==classId){
										selectedIds.append(vwAcademicYearTimings.getWeekDay()+",");
									}
									else{
									  if(classId > 0){
										  break;
									  }
									  selectedIds.append(vwAcademicYearTimings.getWeekDay()+",");
									}
									classId=vwAcademicYearTimings.getClassId();
								}else{
									break;
								}
							}
						}
						selectedIds.append("0)");
						if(!StringFunctions.isNullOrEmpty(strStatus)){
							List<WeekDays> weekList =adminManager.getAll(WeekDays.class, "id IN " + selectedIds.toString());	
							if(!ObjectFunctions.isNullOrEmpty(weekList)){
								setWeekDayList(weekList);	
							}
						}
					}
				}else{
					setPlTitle("SH"); //here ch is school 
					setAcademicYearTimings((AcademicYearTimings)adminManager.get(AcademicYearTimings.class, " academicYearId="+getUserAcademicYearId()));
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoCreateAcademicDetails", results = { @Result(location = "academic/ajaxCreateAcademicDetails.jsp", name = "success") }) })
	public String ajaxCreateSchoolSettings() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCreateAcademicDetails' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			setAcademicYear(getCurrentAcademicYear());
			setApprovedLeavesList(adminManager.getAllAcademicYearsByCustIdAndStartDateAndEndDateisNull(getUserCustId()));
			setWeekDayList(adminManager.getAll(WeekDays.class));// Changed by seshu
			setClassList(adminManager.getAllByCustId("ClassName",getUserCustId(),getUserAcademicYearId()));
			//prepareWeekDays();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxCreateAcademicDetails", results = { @Result(location = "ajaxManageSchoolConfiguration.jsp", name = "success") }) })
	public String ajaxCreateAcademicDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCreateAcademicDetails' method");
		}
		try {
			AcademicYear academicYear = getCurrentAcademicYear();
			JSONObject formData = new JSONObject(getAnyTitle());
			JSONArray jsonArray =(JSONArray) formData.get("JSONOBJ");
			JSONObject jsonObj = null;
			AcademicYearTimings academicYearTimings=null;
			String endDate = null;
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			JSONObject formHData = new JSONObject(getTempString());
			JSONArray jsonHolidaysArray =(JSONArray) formHData.get("JSONOBJH");
			JSONObject jsonHolidayObj = null;
			Customer customer = getCustomerByCustId();
				if("on".equalsIgnoreCase(getCustomer().getSendSmsUpdatedMobile()))
					customer.setSendSmsUpdatedMobile("Y");
				else
					customer.setSendSmsUpdatedMobile("N");
			customer.setMobileType(getCustomer().getMobileType());
			if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
				academicYear.setStartDate(getAcademicYear().getStartDate());
				academicYear.setEndDate(getAcademicYear().getEndDate());
				academicYear.setNextAcademicStartDate(getAcademicYear().getNextAcademicStartDate());
				academicYear.setAttendancePercentage(getAcademicYear().getAttendancePercentage());
				academicYear.setUseBiometricForStudent(getAcademicYear().getUseBiometricForStudent());
				academicYear.setDispActivityDescField(getAcademicYear().isDispActivityDescField());
				academicYear.setHolidayStatus(getAcademicYear().getHolidayStatus());
				if("Y".equalsIgnoreCase(getAcademicYear().getUseBiometricForStudent()))
				{
					academicYear.setManageAttendanceBy("D");
				}
				else
				{
					if(StringFunctions.isNotNullOrEmpty(getAcademicYear().getManageAttendanceBy()))
					academicYear.setManageAttendanceBy(getAcademicYear().getManageAttendanceBy());
				}
				academicYear.setUseBiometricForStaff(getAcademicYear().getUseBiometricForStaff());
				if("Y".equalsIgnoreCase(getAcademicYear().getUseBiometricForStaff()))
				{
					academicYear.setManageStaffAttendanceBy("D");
				}
				else
				{
					if(StringFunctions.isNotNullOrEmpty(getAcademicYear().getManageStaffAttendanceBy()))
					academicYear.setManageStaffAttendanceBy(getAcademicYear().getManageStaffAttendanceBy());
				}
				academicYear.setTransportFeeByBoardingPoint(getAcademicYear().isTransportFeeByBoardingPoint());
				academicYear.setSendBirthdayAlerts(getAcademicYear().isSendBirthdayAlerts());
				academicYear.setSendStaffBirthdayAlerts(getAcademicYear().isSendStaffBirthdayAlerts());
				academicYear.setManageStudentsAdmissionsByFee(getAcademicYear().getManageStudentsAdmissionsByFee());
				academicYear.setReceiptGenerationType(getAcademicYear().getReceiptGenerationType());
				academicYear.setSendBirthdayAlertsByEmail(getAcademicYear().isSendBirthdayAlertsByEmail());
				academicYear.setSendStaffBirthdayAlertsByEmail(getAcademicYear().isSendStaffBirthdayAlertsByEmail());
				academicYear.setCaptureAttendanceBy(getAcademicYear().getCaptureAttendanceBy());
				academicYear.setCaptureAttendanceForStaff(getAcademicYear().getCaptureAttendanceForStaff());
				List<WeekDays> weekDays = adminManager.getAll(WeekDays.class);
				Map<String,Long> weekDaysMap = new HashMap<String,Long>();
				if(ObjectFunctions.isNotNullOrEmpty(weekDays)){
					for(WeekDays weekDaysObj : weekDays)
					{
						weekDaysMap.put(weekDaysObj.getDayName(),weekDaysObj.getId());
					}
				}
				if(ObjectFunctions.isNotNullOrEmpty(weekDays)){
					Calendar c1 = Calendar.getInstance();
					Date myDate;
					WorkingDays workingDays=null;
					SchoolHolidays schoolHolidays = null;
					if(!ObjectFunctions.isNullOrEmpty(getAcademicYear().getStartDate())){
						academicYear.setStartDate(getAcademicYear().getStartDate());
						c1.setTime(getAcademicYear().getStartDate());
						endDate=formatter.format(getAcademicYear().getStartDate());
					}else{
						c1.setTime(new Date());
						endDate=formatter.format(new Date());
					}
					int dayofDate = c1.get(Calendar.DAY_OF_WEEK);
					int dayDifference = 0;
					//adminManager.remove("workingDays", "academicYearId="+academicYear.getId());
					setTempString(null);
					if(!ObjectFunctions.isNullOrEmpty(jsonHolidaysArray)){
					for (int i = 0; i < jsonHolidaysArray.length(); i++) {
						JSONArray jsnHArr =(JSONArray) jsonHolidaysArray.get(i);
						if (!ObjectFunctions.isNullOrEmpty(jsnHArr)) {
							academicYearTimings=new AcademicYearTimings();
							for (int j = 0; j < jsnHArr.length(); j++) {
								jsonHolidayObj = jsnHArr.getJSONObject(j);
								if (!ObjectFunctions.isNullOrEmpty(jsonHolidayObj)) {
									Iterator<String> iter = jsonHolidayObj.keys();
									 while (iter.hasNext()) {
									   String key = iter.next();
									   String weekDay="";
									   long classId=0;
									   if(!(jsonHolidayObj.get(key).toString().split("_")[0]).equalsIgnoreCase("CLASSID")){
										   if(StringFunctions.isNotNullOrEmpty(jsonHolidayObj.get(key).toString().split("_")[0]) && Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1])>0){
											   long schoolClassId=Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1]);
										   if(!key.equalsIgnoreCase(weekDay) && classId != Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1])){
											   myDate = DateFunctions.add(c1.getTime(),Integer.parseInt(weekDaysMap.get(jsonHolidayObj.get(key).toString().split("_")[0]).toString()) - dayofDate);
												if(!DateFunctions.isFutureOrTodayDate(myDate)){
													myDate = DateFunctions.add(myDate, 7);
												}
												for (;;) {
													if (myDate.before(getAcademicYear().getEndDate())) {
															schoolHolidays = new SchoolHolidays();
															Calendar cal = Calendar.getInstance();
															cal.setTime(myDate);
															log.debug("Edit Unselected week days : "+ myDate.toString());
															String startMonth = new SimpleDateFormat("MM").format(cal.getTime());
															String sdfSource1 = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
															String holidayYear = new SimpleDateFormat("yyyy").format(cal.getTime());
															int monthId = Integer.parseInt(startMonth);
															Date createdDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,myDate));
															schoolHolidays.setStartDate(createdDate);
															schoolHolidays.setEndDate(createdDate);
															schoolHolidays.setNoOfDays(1);
															schoolHolidays.setMonthId(monthId);
															schoolHolidays.setAcademicYear(academicYear);
															schoolHolidays.setHolidayDate(sdfSource1);
															schoolHolidays.setDescription(jsonHolidayObj.get(key).toString().split("_")[0].toUpperCase());
															schoolHolidays.setCustId(getUserCustId());
															schoolHolidays.setYearId(holidayYear);
															schoolHolidays.setStatus("W");
															schoolHolidays.setCreatedById(getUser().getId());
															schoolHolidays.setCreatedDate(new Date());
															schoolHolidays.setClassId(Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1]));
															adminManager.save(schoolHolidays);
													} else {
														break;
													}
												myDate = DateFunctions.add(myDate, 7);
											}
										   }
									   }
									 }
									}
								}
							}
						   }
						}
					}else{
					for (WeekDays day : weekDays) {
						if (!getChkBoxSelectedIds().contains(day.getId())) {
							dayDifference=(int)day.getId() - dayofDate;
							myDate = DateFunctions.add(c1.getTime(),dayDifference);
							if(!DateFunctions.isFutureDate(myDate) && dayDifference < 0){
								myDate = DateFunctions.add(myDate, 7);
							}
							for (;;) {
									if (myDate.before(getAcademicYear().getEndDate())) {
										schoolHolidays = new SchoolHolidays();
										Calendar cal = Calendar.getInstance();
										cal.setTime(myDate);
										log.debug("create Unselected week days : "+ myDate.toString());
										String startMonth = new SimpleDateFormat("MM").format(cal.getTime());
										String sdfSource1 = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
										String holidayYear = new SimpleDateFormat("yyyy").format(cal.getTime());
										int monthId = Integer.parseInt(startMonth);
										Date createdDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,myDate));
										schoolHolidays.setStartDate(createdDate);
										schoolHolidays.setEndDate(createdDate);
										schoolHolidays.setNoOfDays(1);
										schoolHolidays.setMonthId(monthId);
										schoolHolidays.setAcademicYear(academicYear);
										schoolHolidays.setHolidayDate(sdfSource1);
										schoolHolidays.setDescription(day.getDayName().toUpperCase());
										schoolHolidays.setCustId(getUserCustId());
										schoolHolidays.setYearId(holidayYear);
										schoolHolidays.setCreatedById(getUser().getId());
										schoolHolidays.setCreatedDate(new Date());
										schoolHolidays.setStatus("W");
										adminManager.save(schoolHolidays);
									} else {
										break;
									}
								myDate = DateFunctions.add(myDate, 7);
							}
						}else{
							workingDays = new WorkingDays();
							workingDays.setAcademicYearId(academicYear.getId());
							workingDays.setCreatedById(getUser().getId());
							workingDays.setCreatedDate(new Date());
							workingDays.setDayId(day.getId());
							workingDays.setLastAccessDate(new Date());
							workingDays.setLastUpdatedById(getUser().getId());
							workingDays.setLastUpdatedDate(new Date());
							adminManager.save(workingDays);
							workingDays = null;
						
						}
					}
				  }
					weekDays = null;
				}
				adminManager.save(academicYear);
					
				// Saving class wise /day wise timings data.
				if(!ObjectFunctions.isNullOrEmpty(jsonArray)){
				for (int i = 0; i < jsonArray.length(); i++) {
					JSONArray jsnArr =(JSONArray) jsonArray.get(i);
					if (!ObjectFunctions.isNullOrEmpty(jsnArr)) {
						academicYearTimings=new AcademicYearTimings();
						for (int j = 0; j < jsnArr.length(); j++) {
							jsonObj = jsnArr.getJSONObject(j);
							if (!ObjectFunctions.isNullOrEmpty(jsonObj)) {
								Iterator<String> iter = jsonObj.keys();
								 while (iter.hasNext()) {
								   String key = iter.next();
								 if(key.equalsIgnoreCase("CLASSID")){
									academicYearTimings.setClassId(Long.valueOf((String) jsonObj.get(key)));
								 }
								 else if(key.equalsIgnoreCase("DAYID")){
									 academicYearTimings.setWeekDay((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("SST")){
									 academicYearTimings.setStartTime((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("MBST")){
									 academicYearTimings.setMorningBreakStartTime((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("MBET")){
									 academicYearTimings.setMorningBreakEndTime((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("LBST")){
									 academicYearTimings.setLunchStartTime((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("LBET")){
									 academicYearTimings.setLunchEndTime((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("EBST")){
									 academicYearTimings.setEveningBreakStartTime((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("EBET")){
									 academicYearTimings.setEveningBreakEndTime((String) jsonObj.get(key));
								 }
								 else if(key.equalsIgnoreCase("SET")){
									 academicYearTimings.setEndTime((String) jsonObj.get(key));
								 }
								 }
							}
						}
						if(jsnArr.length()>0){
						academicYearTimings.setAcademicYearId(academicYear.getId());
						academicYearTimings.setStatus(getAnyId());
						academicYearTimings.setCreatedById(getUser().getId());
						academicYearTimings.setCreatedDate(new Date());
						academicYearTimings.setLastAccessDate(new Date());
						academicYearTimings.setLastUpdatedById(getUser().getId());
						academicYearTimings.setLastUpdatedDate(new Date());
						adminManager.save(academicYearTimings);
						}
					   }
					}
				}
				super.addActionMessage("Academic year details created successfully.");
			}
			setTitle("R");
			ajaxAcademicSchoolSettings();
			academicYear = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
		@Action(value = "ajaxDoCreateSchoolSettingsHolidays", results = { @Result(location = "academic/ajaxViewAddedSchoolHolidays.jsp", name = "success") }),
		@Action(value = "ajaxCreateSchoolHolidays", results = { @Result(location = "academic/ajaxViewSchoolHolidaysList.jsp", name = "success") }) })
	public String ajaxDoCreateSchoolSettingsHolidays()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCreateSchoolSettingsHolidays' method");
		}
		try {
			
			if(getAcademicYearId() != 0)
			{
				String deletedIds ="";
				
				boolean isCreate=true;
				if (StringFunctions.isNotNullOrEmpty(getAnyId()) && !("0".equalsIgnoreCase(getAnyId())) &&  StringFunctions.isNotNullOrEmpty(getTempString()) && getAcademicYearId() > 0){
					deletedIds = adminManager.updateAndDeleteSchoolHolidays(getUserCustId(),getAcademicYearId(),getTempString());
					log.debug("Deleted  IDS are::"+deletedIds.toString());
					isCreate=false;
				}
				adminManager.createSchoolHolidays(getUserCustId(), getUser().getId(),getAcademicYearId(),getSchoolHolidays().getStartDate(),getSchoolHolidays().getEndDate(),getSchoolHolidays().getDescription(),getSelectedId(),isCreate,deletedIds);
				if(isCreate){
					super.addActionMessage("School holidays added successfully.");
				}
				else{
					super.addActionMessage("School holidays updated successfully.");
				}
	    }
	} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally
		{
			ajaxViewSchoolSettingsHolidays();
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoCreateSchoolOrganizationDetails", results = { @Result(location = "academic/ajaxSchoolSettings.jsp", name = "success") }) })
	public String ajaxDoCreateSchoolOrganizationDetails()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCreateSchoolOrganizationDetails' method");
		}
		try {
			Customer customerInfo = getCustomerByCustId();
			customerInfo.setCustEmail(getCustomer().getCustEmail());
			customerInfo.setCustomerName(getCustomer().getCustomerName());
			customerInfo.setOrganization(getCustomer().getOrganization());
			customerInfo.setContactNumber(getCustomer().getContactNumber());
			customerInfo.setWebSiteUrl(getCustomer().getWebSiteUrl());
			customerInfo.setStatus(true);
			customerInfo.setSubscriptionType("");
			customerInfo.setCreatedById(getUser().getId());
			customerInfo.setLastUpdatedById(getUser().getId());
			customerInfo.setCreatedDate(new Date());
			customerInfo.setLastAccessDate(new Date());
			customerInfo.setLastUpdatedDate(new Date());
			if (getUploadFileName() != null) {
				long custImageId = 0;
				if(!ObjectFunctions.isNullOrEmpty(customerInfo.getCustomerOrgImage()))
					custImageId = Long.valueOf(customerInfo.getCustomerOrgImage().getId());
				UserImage attachment;
				try {
					attachment = profileImageUpload(Constants.FILE_TYPE_IMAGE,customerInfo.getId(),getUserAcademicYearId(),custImageId);
					if (!ObjectFunctions.isNullOrEmpty(attachment)) {
						customerInfo.setCustomerOrgImage(attachment);
					}
				} catch (Throwable e) {
					e.printStackTrace();//RayGunException raygex = new RayGunException();raygex.sendRayGunException(e);raygex=null;
				}
				attachment = null;
			}
			adminManager.save(customerInfo);
			ajaxAcademicSchoolSettings();
			customerInfo = null;
			super.addActionMessage("Customer details added successfully.");
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
		@Action(value = "ajaxViewSchoolSettingsHolidays", results = { @Result(location = "academic/ajaxViewSchoolHolidaysList.jsp", name = "success") })
		 })
	public String ajaxViewSchoolSettingsHolidays() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewSchoolSettingsHolidays' method");
		}
		try {
			setSelectedId("0");
				ajaxAcademicSchoolSettings();
				if(!ObjectFunctions.isNullOrEmpty(getAcademicYear())){
					if ("CH".equalsIgnoreCase(getAcademicYear().getHolidayStatus())) {
						checkStudyClassHavingStudentsOrNot();
					}
					if (!"CH".equalsIgnoreCase(getAcademicYear().getHolidayStatus())) {
						getSession().removeAttribute("GetAllHolidaysListByAcademicYearId");
						List<SchoolHolidays> holidayList = getAllHolidaysListByAcademicYearId("H", getUserCustId(),getUserAcademicYearId(),0);
						if (!ObjectFunctions.isNullOrEmpty(holidayList)) {
							setHolidayBoardMessagesList(holidayList);
							Collections.sort(getHolidayBoardMessagesList());
							setToDate(new Date());
						}
					}
				}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxViewSchooHolidaysByClassId", results = { @Result(location = "academic/ajaxViewSchoolHolidays.jsp", name = "success") })
		 })
	public String ajaxViewSchooHolidaysByClassId() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewSchooHolidaysByClassId' method");
		}
		try {
			setSelectedId("0");
			Object[] classNameClassIds =null;
			if (StringFunctions.isNotNullOrEmpty(getClassId())) { // below lines called at academicyear settings have classwise holidays(CH)
				if("all".equalsIgnoreCase(getClassId()))
					classNameClassIds = adminManager.get("select classId,className from vw_classSectionDetails where custId="+getUserCustId()+ " and academicYearId="+getUserAcademicYearId());
				else
					classNameClassIds = adminManager.get("select classId,className from vw_classSectionDetails where custId="+getUserCustId()+ " and academicYearId="+getUserAcademicYearId()+" and classSectionId="+Long.valueOf(getClassId()));
	 			if(!ObjectFunctions.isNullOrEmpty(classNameClassIds) && !ObjectFunctions.isNullOrEmpty(classNameClassIds[0]) ){
	 				List<SchoolHolidays> holidayList = getAllHolidaysListByAcademicYearId("H", getUserCustId(),getUserAcademicYearId(),Long.valueOf(classNameClassIds[0].toString()));
	 				if (!ObjectFunctions.isNullOrEmpty(holidayList)) {
						setHolidayBoardMessagesList(holidayList);
						Collections.sort(getHolidayBoardMessagesList());
						setToDate(new Date());
					}
	 		  }
	 			setSelectedId(getClassId());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	
	
	@Actions( { @Action(value = "ajaxDoEditSchoolHolidays", results = { @Result(location = "academic/ajaxDoAddNewSchoolHolidays.jsp", name = "success") }) })
	public String ajaxDoEditSchoolHolidays() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditSchoolHolidays' method");
		}
		try {
			AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class,getAcademicYearId());
			if(!ObjectFunctions.isNullOrEmpty(academicYear))
			{
				if ("CH".equalsIgnoreCase(academicYear.getHolidayStatus())) {
					checkStudyClassHavingStudentsOrNot();
				}
				loadAcademicYearStartDateAndDates(academicYear.getId());
			}
			
			setSchoolHolidays((SchoolHolidays) adminManager.get(SchoolHolidays.class, Long.valueOf(getAnyId())));
			setSelectedId(getStudyClassId());
			academicYear = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoUpdateSchoolHolidays", results = { @Result(location = "academic/ajaxViewSchoolHolidaysList.jsp", name = "success") }) })
	public String ajaxDoUpdateSchoolHolidays() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoUpdateSchoolHolidays' method");
		}
		try {
			String holidayId = getParamValue("id");
			String academicYearId = getParamValue("academicYearId");
			if (!StringFunctions.isNullOrEmpty(holidayId) && !StringFunctions.isNullOrEmpty(academicYearId)) {
				setAcademicYearId(Long.valueOf(academicYearId));
				SchoolHolidays schoolHolidays = (SchoolHolidays) adminManager.get(SchoolHolidays.class, Long.valueOf(holidayId));
				schoolHolidays.setDescription(getSchoolHolidays().getDescription());
				schoolHolidays.setStartDate(getSchoolHolidays().getStartDate());
				schoolHolidays.setEndDate(getSchoolHolidays().getEndDate());
				int daysCount = DateFunctions.daysBetween(getSchoolHolidays().getStartDate(), getSchoolHolidays().getEndDate());
				schoolHolidays.setNoOfDays(daysCount);
				adminManager.save(schoolHolidays);
				List holidayList = getAllHolidaysListByAcademicYearId("H",getUserCustId(), Long.valueOf(academicYearId),0);
				if (!ObjectFunctions.isNullOrEmpty(holidayList)) {
					setHolidayBoardMessagesList(holidayList);
					Collections.sort(getHolidayBoardMessagesList());
				}
				int numOfDays = 0;
				if (!ObjectFunctions.isNullOrEmpty(holidayList)) {
					for (Object school : holidayList) {
						SchoolHolidays sc = (SchoolHolidays) school;
						numOfDays += sc.getNoOfDays();
					}
				}
				AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class, Long.valueOf(academicYearId));
				int numDays = academicYear.getNoOfHolidays();
				int totlaDays = numOfDays + numDays;
				academicYear.setNoOfHolidays(totlaDays);
				adminManager.save(academicYear);
				academicYear=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAddNewSchoolHolidays", results = { @Result(location = "academic/ajaxDoAddNewSchoolHolidays.jsp", name = "success") }) })
	public String ajaxDoAddNewSchoolHolidays() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddNewSchoolHolidays' method");
		}
		try {
			setSelectedId("0");
			AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class,getAcademicYearId());
			if(!ObjectFunctions.isNullOrEmpty(academicYear))
			{
				if ("CH".equalsIgnoreCase(academicYear.getHolidayStatus())) {
					checkStudyClassHavingStudentsOrNot();
				}
				loadAcademicYearStartDateAndDates(academicYear.getId());
				setSchoolHolidays(null);
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoEditSchoolExamTypes", results = { @Result(location = "academic/ajaxEditSchoolExamTypes.jsp", name = "success") }) })
	public String ajaxDoEditSchoolExamTypes() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditSchoolExamTypes' method");
		}
		try {
			setChkBoxSelectedIds(null);
			String examTypeId = getParamValue("id");
			String academicYearId = getParamValue("academicYearId");
			setExamTypes((ExamTypes) adminManager.get(ExamTypes.class, Long.valueOf(examTypeId)));
			setClassList(adminManager.getAllByCustId("ClassName", getUserCustId(),Long.valueOf(academicYearId)));
			if(!ObjectFunctions.isNullOrEmpty(getExamTypes())){
				if(!ObjectFunctions.isNullOrEmpty(getExamTypes().getStudyClasses())){
					for (StudyClass studyClass : getExamTypes().getStudyClasses()) {
						getChkBoxSelectedIds().add(String.valueOf(studyClass.getId()));
						studyClass = null;
					}
				}
			}
			setAcademicYearId(Long.valueOf(academicYearId));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {
			@Action(value = "getAdminKBank", results = { @Result(location = "kBank/ajaxGetStaffKBank.jsp", name = "success") }),
			@Action(value = "ajaxAdminKBank", results = { @Result(location = "kBank/ajaxViewKBank.jsp", name = "success") }) })
	public String getStaffKBan1k() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'getStaffKBank' method");
		}
		try {
				ajaxGetKBank();
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxGetKBankDetails", results = { @Result(location = "kBank/ajaxViewKBank.jsp", name = "success") }) })
	public String ajaxGetKBankDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetKBankDetails' method");
		}
		try {
			ajaxKBankDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAddCaseStudy", results = { @Result(location = "kBank/ajaxAddCaseStudy.jsp", name = "success") }) })
	public String ajaxDoPostCaseStudy() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoPostCaseStudy' method");
		}
		try {
			setStudySubjectList(adminManager.getStudySubjectByCustIdAndAcademicYear(getUserCustId(),getUserAcademicYearId() ));
			if(ObjectFunctions.isNotNullOrEmpty(getStudySubjectList()))
				Collections.sort(getStudySubjectList());
			setClassList(adminManager.getAllByCustId("ClassName",getUserCustId(),getUserAcademicYearId()));
			if(ObjectFunctions.isNotNullOrEmpty(getClassList()))
				Collections.sort(getClassList());
			setObjectList(adminManager.getAllCommonTypesByCustIdandType(getUserCustId(),"SkillType"));
			setKBankTypeName(getKBankTypeName());
			setSelectedId(getParamValue("kBankTypeId"));
			setKnowledgeBank(null);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxAddPostCaseStudy", results = { @Result(location = "kBank/ajaxViewKBank.jsp", name = "success") }) })
	public String ajaxAddPostCaseStudy() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoPostCaseStudy' method");
		}
		try {
			ajaxAddCaseStudy();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxRemoveKBankStudies", results = { @Result(location = "kBank/ajaxViewCaseStudy.jsp", name = "success") }) })
	public String removeCampus() throws URTUniversalException {
		try {
			String kBankId = getParamValue("id");
			if (!ObjectFunctions.isNullOrEmpty(kBankId)) {
				staffManager.remove(KBank.class, Long.valueOf(kBankId));
			}
			super
					.addActionMessage("KBank studies deleted successfully.");
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoEditKBankStudies", results = { @Result(location = "kBank/editKBankStudies.jsp", name = "success") }) })
	public String doEditCampus() throws URTUniversalException {
		try {
			setStudySubjectList(staffManager.getAll(StudySubject.class));
			setClassList(staffManager.getAll(ClassName.class));
			setKBankTypeName(getParamValue("kBankTypeName"));
			setSelectedId(getParamValue("kBankTypeId"));
			setObjectList(adminManager.getAllCommonTypesByCustIdandType(getUserCustId(),"SkillType"));
			ajaxDoEditCampus();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxEditKBankStudies", results = { @Result(location = "kBank/ajaxViewKBank.jsp", name = "success") }) })
	public String editKBankStudies() throws URTUniversalException {
		try {
			ajaxEditKBankStudies();
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxReadMoreKbankStudy", results = { @Result(location = "kBank/ajaxReadMoreKbankStudy.jsp", name = "viewReadMoreMinute") }) })
	public String viewReadMoreKbankStudy() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'viewReadMoreMinute' method");
		}
		try {
			ajaxViewReadMoreKbankStudy();
		} catch (Exception ex) {
			log.error(" entering Catch Block of viewReadMoreMinute():"+ ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return "viewReadMoreMinute";
	}

	@Actions( { @Action(value = "ajaxViewAllKBankStudies", results = { @Result(location = "kBank/viewAllKBankStudies.jsp", name = "success") }) })
	public String viewAllKBankStudie() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'viewAllKBankStudie' method");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getParamValue("kBankTypeId"))) {
				setSelectedId(getParamValue("kBankTypeId"));
				setObjectList(staffManager.getAll(KBank.class, "kBankTypeId = "+getParamValue("kBankTypeId")+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
			}
		} catch (Exception ex) {
			log.error(" entering Catch Block of viewAllKBankStudie():"+ ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return "success";
	}

	@Actions( { @Action(value = "ajaxSearchKBankStudies", results = { @Result(location = "kBank/ajaxViewAllKBankSearchDetails.jsp", name = "success") }) })
	public String searchKBankStudies() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'searchKBankStudies' method");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getParamValue("title")) && !StringFunctions.isNullOrEmpty(getParamValue("selectedId"))) {
				setSelectedId(getParamValue("selectedId"));
				setKBankTypeName(getParamValue("kBankTypeName"));
				List title = staffManager.getKBankBySearchKewordsKBankTypeId(getParamValue("title"), Long.valueOf(getParamValue("selectedId")),getUserCustId());
				if (!ObjectFunctions.isNullOrEmpty(title)) {
					setObjectList(title);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAcceptKBankStudies", results = { @Result(location = "kBank/ajaxViewCaseStudy.jsp", name = "success") }) })
	public String ajaxDoAcceptKBankStudies() throws URTUniversalException {
		try {
			ajaxAcceptKBankStudies();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoKBankFavouriteStudies", results = { @Result(location = "kBank/ajaxViewCaseStudy.jsp", name = "success") }) })
	public String ajaxDoKBankFavouriteStudies() throws URTUniversalException {
		try {
			ajaxDoAddKBankFavouriteStudies();
			if (!StringFunctions.isNullOrEmpty(getParamValue("kBankTypeId")) && !StringFunctions.isNullOrEmpty(getParamValue("kBankTypeName"))) {
				ajaxKBankDetails();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxGetKBankFavourites", results = { @Result(location = "kBank/ajaxFavourites.jsp", name = "success") }) })
	public String ajaxGetKBankFavourites() throws URTUniversalException {
		try {
			ajaxKBankFavourites();
			getStaffKBan1k();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAddComments", results = { @Result(location = "kBank/ajaxDoAddComment.jsp", name = "success") }) })
	public String ajaxDoAddComments() throws URTUniversalException {
		try {
			doAddComments();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxAddKBankComments", results = { @Result(location = "kBank/ajaxViewComment.jsp", name = "success") }) })
	public String ajaxAddKBankComments() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddPostKBankComments' method");
		}
		try {
			addKBankComments();
			getStaffKBan1k();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return "success";
	}
	@Actions( { @Action(value = "ajaxViewClassTeacher", results = { @Result(location = "academic/classTeachersValues.jsp", name = "success") }) })
	public String ajaxViewClassTeacher() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewClassTeacher' method");
		}
		try {
		//	AcademicYear academicYear = null;
		//	Student studentDetails = null;
			String classId = getParamValue("classNameClassId");
			if (!StringFunctions.isNullOrEmpty(classId) && getAcademicYearId() > 0) {
				List<StudyClass> allStudyclassList = studentManager.getStudyClassesByClassNameClassId(Long.valueOf(classId), getUserCustId(),getUserAcademicYearId());
				if (!ObjectFunctions.isNullOrEmpty(allStudyclassList)) {
			//		StringBuffer classTeachers = new StringBuffer();
					for (StudyClass studyClass : allStudyclassList) {
						List<ClassTeacher> classTeachersList = adminManager.getClassTeacherByStudyClass(studyClass.getId(),getUserAcademicYearId());
						if (!ObjectFunctions.isNullOrEmpty(classTeachersList)) {
							for (ClassTeacher classTeacher : classTeachersList) {
								if (classTeacher.isClassTeacher()) {
									Staff staff = classTeacher.getStaff();
									staff.setClassNameAndSection(studyClass.getClassAndSection());
									getObjectList().add(staff);
									staff = null;
								}
								classTeacher = null;
								setClassTeacherList(getObjectList());
							}
							classTeachersList = null;
						}
						studyClass = null;
					}
					allStudyclassList = null;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxGetKhanPlayList", results = { @Result(location = "kBank/viewKhanPlayListHome.jsp", name = "success") }) })
	public String ajaxGetKhanPlayList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetKhanPlayList' method");
		}
		try {
			ajaxGetKhanPlayListBase();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxGetPlayListVideosList", results = { @Result(location = "kBank/viewKhanPlayListVideosList.jsp", name = "success") }) })
	public String ajaxGetPlayListVideosList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetPlayListVideosList' method");
		}
		try {
			String playListId = getParamValue("playListId");
			if (!StringFunctions.isNullOrEmpty(playListId)) {
				ajaxGetPlayListVideosListBase(playListId);
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxPlaySelectedVideo", results = { @Result(location = "kBank/videoPlayer.jsp", name = "success") }) })
	public String ajaxPlaySelectedVideo() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetPlayListVideosList' method");
		}
		try {
			String playListVideoId = getParamValue("id");
			if (!StringFunctions.isNullOrEmpty(playListVideoId)) {
				ajaxPlaySelectedVideoBase(playListVideoId);
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxKBankRating", results = { @Result(location = "ajaxKBankRate.jsp", name = "success") }) })
	public String ajaxKBankRating() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxKBankRating' method");
		}
		try {
			ajaxGetKBankRating();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}

	/**
	 * TODO: CVS - Check all the ajax calls link and replace the name with 
	 * @return
	 * @throws URTUniversalException
	 */
	@Actions( {
			@Action(value = "adminManageStudents", results = { @Result(location = "student/ajaxViewStudentsList.jsp", name = "success") }),
			@Action(value = "ajaxDoSearchKVideos", results = { @Result(location = "kBank/ajaxSearchKVideos.jsp", name = "success") }),
			@Action(value = "ajaxManageStudents", results = { @Result(location = "student/ajaxManageStudents.jsp", name = "success") }) })
	public String adminStudentDashboard() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'adminStudentDashboard' method");
		}
		try {
			int academicYearId = 0;
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = Integer.valueOf((String) getSession().getAttribute("academicYear"));
			}
			setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(),academicYearId,null));
			if(ObjectFunctions.isNotNullOrEmpty(getStudyClassList()))
			{
				Collections.sort(getStudyClassList(),new StudyClassClassNameComparator());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxSearchKVideosByKeywords", results = { @Result(location = "kBank/viewKhanPlayListVideosList.jsp", name = "success") }) })
	public String ajaxSearchKVideosByKeywords() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'searchStudentsByRollNumber' method");
		}
		try {
			String keyword = getParamValue("keyword");
			if (!StringFunctions.isNullOrEmpty(keyword)) {
				ajaxSearchKVideosByKeywordsBase(keyword);
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	} 

	@Actions( { @Action(value = "ajaxEditAdmissionSettings", results = { @Result(location = "admission/admissionSettingsHome.jsp", name = "success") }) })
	public String ajaxEditAdmissionSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditAdmissionSettings' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getAnyId())){
				AdmissionSettings admissionSettings = ((AdmissionSettings) adminManager.get(AdmissionSettings.class, "id="+getAnyId()));
				if (!ObjectFunctions.isNullOrEmpty(admissionSettings)) {
					AcademicYear academicYear=admissionSettings.getAcademicYear();
					admissionSettings.setAcademicYear(academicYear);
					admissionSettings.setStartDate(getAdmissionSettings().getStartDate());
					admissionSettings.setEndDate(getAdmissionSettings().getEndDate());
					admissionSettings.setTestConducted(getAdmissionSettings().isTestConducted());
					admissionSettings.setStatus(getAdmissionSettings().isStatus());
					admissionSettings.setEntranceDate(getAdmissionSettings().getEntranceDate());
					admissionSettings.setAdmissionContent(getAdmissionSettings().getAdmissionContent());
					admissionSettings.setAdmissionEndDate(getAdmissionSettings().getAdmissionEndDate());
					admissionSettings.setApplicationFee(getAdmissionSettings().getApplicationFee());
					admissionSettings.setEntranceExamTotalMarks(getAdmissionSettings().getEntranceExamTotalMarks());
					admissionSettings.setEntranceExamPassMarks(getAdmissionSettings().getEntranceExamPassMarks());
					adminManager.save(admissionSettings);
					if(StringFunctions.isNotNullOrEmpty(getSelectedId())){
						adminManager.updateClassStatus(getUserCustId(), admissionSettings.getAcademicYearId());
						adminManager.updateClassAdmissionStatusToActive(getSelectedId(),admissionSettings.getAcademicYearId());
					}
				} 
				super.addActionMessage("Admission settings updated successfully.");
				ajaxAdmissionSettingsHome();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}


	@Actions( { @Action(value = "ajaxGetAttendanceForClasses", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "sectionId" }) }) })
	public String ajaxGetAttendanceForClasses() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetAttendanceForClasses' method");
		}
		try {
			
			setClassList(adminManager.getAllClassNames(getUserCustId(),getUserAcademicYearId()));
			JSONObject ja = new JSONObject();
			JSONArray jas = new JSONArray();
			JSONArray series = new JSONArray();
			ja.put("title", "Attendance Summary");
			jas.put("2008-Aug");
			jas.put("2008-Sep");
			jas.put("2008-Oct");
			ja.put("categories", jas);
			
			JSONObject jo = new JSONObject();
			
			jo.put("type", "column");
			jo.put("name", "Present");
			
			jas = new JSONArray();
			jas.put(15);
			jas.put(10);
			jas.put(80);
			jo.put("data", jas);
			
			series.put(jo);
			
			jo = new JSONObject();
			jo.put("type", "column");
			jo.put("name", "Absentees");
			jas = new JSONArray();
			jas.put(20);
			jas.put(70);
			jas.put(18);
			jo.put("data", jas);
			series.put(jo);
			ja.put("series",series);
			getResponse().getOutputStream().print(ja.toString());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}

/*
	* Removed PrepareAcademicYearId and used getUserAcademicYearId() And Remove the commented line done by venkatesh - 04-26-2013
	*/
	@Actions( { @Action(value = "ajaxViewStaffLeaveDetails", results = { @Result(location = "leave/viewStaffLeaveDetailsList.jsp", name = "success") }) ,
		@Action(value = "ajaxViewAllStaffLeaveDetails", results = { @Result(location = "leave/ajaxViewStaffLeaveDetailsForAdmin.jsp", name = "success") })
	})
	public String ajaxViewStaffLeaveDetails() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewStaffLeaveDetails' method");
		}
		try {
			getSmsCount();
			Customer customer = getCustomerByCustId();
			setViewStaffPersonAccountDetailsList(null);
			StringBuffer sqlQuery = new StringBuffer(); 
			sqlQuery.append(" custId=").append(getUserCustId()).append(" and academicYearId<="+getUserAcademicYearId());
			sqlQuery.append(" and roleId in (1,2,4,5,6,8,9,");
			if(customer.isTransportModuleStatus()) //disabling transport module staff
				sqlQuery.append("10,");
			if(customer.isHostelModuleStatus())  //disabling hostel module staff
				sqlQuery.append("14,");
			sqlQuery.append("11,12,14,15,16,17,18,19,20,21,22,23,24,25,30,31,32,33,35,42)");
			sqlQuery.append(" and description is null order by roleName");
			List<ViewStaffPersonAccountDetails> staffDetailsList=adminManager.getAll(ViewStaffPersonAccountDetails.class,sqlQuery.toString());
			if(ObjectFunctions.isNotNullOrEmpty(staffDetailsList)){
				double paidLeavesCount = 0;
				double totalLeavesCount = 0;
				double tatenLeavesCount = 0;
				for(ViewStaffPersonAccountDetails staffDetail:staffDetailsList)
				{
					if(!ObjectFunctions.isNullOrEmpty(staffDetail))
					{
						DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
						String toDay=dateFormat.format(new Date());
						Date toDayDate= dateFormat.parse(toDay);
						Date startDate=null;
						Date endDate=null;
						setTempChar('P');
						setLeaveManagement((LeaveManagement) adminManager.get(LeaveManagement.class,"custId="+getUserCustId()+" and permanentOrContract='"+staffDetail.getStaffType()+"' and roleId="+staffDetail.getRoleId()+" and academicYearId="+getUserAcademicYearId()));
						if(!ObjectFunctions.isNullOrEmpty(getLeaveManagement()))
						staffDetail.setLeaveManagement(getLeaveManagement());
						Object[] clCount= adminManager.get("select  id,IFNULL(sum(leavesCount),0) as leavesCount from leaves where  custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and leaveType='CL'"+" and leaveStatus='"+Constants.ACTIVE_STATUS+"' and accountId="+staffDetail.getAccountId());
						Object[] slCount= adminManager.get("select  id,IFNULL(sum(leavesCount),0) as leavesCount from leaves where  custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and leaveType='SL'"+" and leaveStatus='"+Constants.ACTIVE_STATUS+"' and accountId="+staffDetail.getAccountId());
						Object[] elCount= adminManager.get("select  id,IFNULL(sum(leavesCount),0) as leavesCount from leaves where  custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and leaveType='EL'"+" and leaveStatus='"+Constants.ACTIVE_STATUS+"' and accountId="+staffDetail.getAccountId());
						//this service changed by Sunanda because of this service we getting all records who was applied leave till now.
						List<Object[]> highLetColorList= adminManager.getAll("select id,startDate,endDate from leaves where  custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and leaveStatus='"+Constants.ACTIVE_STATUS+"' and accountId="+staffDetail.getAccountId()+" and startDate='" + toDay+ " 00:00:00' ORDER BY id DESC limit 3");
						Boolean isTrue=false;
						if(ObjectFunctions.isNotNullOrEmpty(highLetColorList)) {
							for(Object[] highLetColor: highLetColorList){
								if(!ObjectFunctions.isNullOrEmpty(highLetColor)) {
									if(highLetColor[1] !=null && highLetColor[2] !=null ){
										 startDate= new SimpleDateFormat("yyyy-MM-dd").parse(highLetColor[1].toString());
										 endDate= new SimpleDateFormat("yyyy-MM-dd").parse(highLetColor[2].toString());
										 if(toDayDate.compareTo(startDate)==0 || startDate.compareTo(toDayDate)<0){
											 isTrue=defalutCheckTheDateOrAvalailableOrNot(toDayDate,startDate,endDate);
												if(isTrue){
													staffDetail.setPresent(isTrue);
												}
										 }
										highLetColor=null;
									}
								}
							}
						}
						if(!ObjectFunctions.isNullOrEmpty(clCount)){ 
							staffDetail.setCasualLeavesCount(Double.valueOf(clCount[1].toString()));
						}
						if(!ObjectFunctions.isNullOrEmpty(slCount)) {
							staffDetail.setSickLeavesCount(Double.valueOf(slCount[1].toString()));
						}
						if(!ObjectFunctions.isNullOrEmpty(elCount)) {
							staffDetail.setEarnedLeavesCount(Double.valueOf(elCount[1].toString()));
						} 
						if(!ObjectFunctions.isNullOrEmpty(getLeaveManagement()) &&(!ObjectFunctions.isNullOrEmpty(clCount[1]) || !ObjectFunctions.isNullOrEmpty(elCount[1]) || !ObjectFunctions.isNullOrEmpty(slCount[1]))){
							totalLeavesCount=getLeaveManagement().getCasualLeaves() + getLeaveManagement().getSickLeaves() + getLeaveManagement().getEarnedLeaves();
							tatenLeavesCount=Double.valueOf(slCount[1].toString()) + Double.valueOf(elCount[1].toString()) + Double.valueOf(clCount[1].toString()) ;
							if(totalLeavesCount < tatenLeavesCount){
								paidLeavesCount = -(totalLeavesCount - tatenLeavesCount);
							}
						}
						staffDetail.setPayLeavesCount(paidLeavesCount);
						paidLeavesCount=0;
						totalLeavesCount=0;
						tatenLeavesCount=0;
						staffDetail.setLeaveRequest(getTempChar());
						getViewStaffPersonAccountDetailsList().add(staffDetail);
						staffDetail=null;
					}
				}
				if(ObjectFunctions.isNotNullOrEmpty(getViewStaffPersonAccountDetailsList()))
					Collections.sort(getViewStaffPersonAccountDetailsList());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		log.debug(new Date());
		return SUCCESS;
	}
	
	@Actions( {
		@Action(value = "ajaxViewFeedbackList", results = { @Result(location = "academic/feedbackHome.jsp", name = "success") }),
		@Action(value = "ajaxCancelFeedback", results = { @Result(location = "academic/selectChildForFeedback.jsp", name = "success") })
	})
	
	public String ajaxViewFeedbackList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewFeedbackList' method");
		}
		try {
			List<FeedbackQuestions> feedbackQuestionsList =null;
            ParentFeedbackResult parentFeedbackResult=null;
            ViewStaffPersonAccountDetails staffPersonAccountDetails=null;
            if("School Feedback Questions".equalsIgnoreCase(getTempString())){
                 feedbackQuestionsList =  adminManager.getAll(FeedbackQuestions.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and roleDescription='"+getTempString()+"' group by description order by roleDescription");
            }
            else{
                  feedbackQuestionsList =  adminManager.getAll(FeedbackQuestions.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and roleDescription='"+getTempString()+"' group by description order by roleDescription");
            }
            setTempString(getTempString());
			List<FeedbackGrades> feedbackGradeList=adminManager.getAllByCustId("FeedbackGrades",getUserCustId(),0);
			if(!ObjectFunctions.isNullOrEmpty(feedbackGradeList)){
				setFeeTypeList(feedbackGradeList);
			}
			int totalGrades=feedbackGradeList.size();
			if(!ObjectFunctions.isNullOrEmpty(feedbackQuestionsList))
			{
				double gradeCount=0;
				setPercentage(Long.valueOf(totalGrades));
				for(FeedbackQuestions feedbackQuestions : feedbackQuestionsList){
					List<VWFeedbackRatingDetails> feedbackQuestionResultList=adminManager.getAll(VWFeedbackRatingDetails.class, "custId=" + getUserCustId() +" and academicYearId='"+getUserAcademicYearId()+"' and feedbackQuestionId="+feedbackQuestions.getId());
					if(!ObjectFunctions.isNullOrEmpty(feedbackQuestionResultList)){
						for(VWFeedbackRatingDetails feedbackResult : feedbackQuestionResultList){
							gradeCount +=Double.valueOf(feedbackResult.getResultGradeValue());
							feedbackResult=null;
						}
						parentFeedbackResult=new ParentFeedbackResult();
						double totalPeasent=gradeCount/feedbackQuestionResultList.size();
						parentFeedbackResult.setFeedbackGradeId(feedbackQuestions.getDescription());
						parentFeedbackResult.setId(feedbackQuestions.getId());
						parentFeedbackResult.setDescription(feedbackQuestions.getRoleDescription());
						parentFeedbackResult.setTotalRatingVal(totalPeasent);
						getFeedbackQuestionsList().add(parentFeedbackResult);
						gradeCount=0;
						totalPeasent=0;
						parentFeedbackResult=null;
					}else {
						parentFeedbackResult=new ParentFeedbackResult();
						parentFeedbackResult.setFeedbackGradeId(feedbackQuestions.getDescription());
						parentFeedbackResult.setId(feedbackQuestions.getId());
						parentFeedbackResult.setDescription(feedbackQuestions.getRoleDescription());
						parentFeedbackResult.setTotalRatingVal(0.0);
						getFeedbackQuestionsList().add(parentFeedbackResult);
						gradeCount=0;
						parentFeedbackResult=null;
					}
					feedbackQuestions=null;
				}
				feedbackQuestionsList=null;
				//setFeedbackQuestionsList(feedbackQuestionsList);
			}
			List<ViewStaffPersonAccountDetails> ViewStaffList = adminManager.getAllStaffList(getUserCustId(),getUserAcademicYearId());
			if (!ObjectFunctions.isNullOrEmpty(ViewStaffList)) {
				Collections.sort(ViewStaffList);
				double staffGradeCount=0;
				for (ViewStaffPersonAccountDetails staffPersonDetails : ViewStaffList) {
					if(!ObjectFunctions.isNullOrEmpty(staffPersonDetails)){
						if (Constants.SCHOOL_HOD.equalsIgnoreCase(staffPersonDetails.getRoleName()) || Constants.SCHOOL_TEACHER.equalsIgnoreCase(staffPersonDetails.getRoleName())) {
							List<VWFeedbackRatingDetails> feedbackStaffResultList=adminManager.getAll(VWFeedbackRatingDetails.class,"custId="+getUserCustId()+" and roleDescription='Teacher Feedback Questions' and academicYearId="+getUserAcademicYearId()+" and staffId="+staffPersonDetails.getStaffId());
							int feedbackMembers=feedbackStaffResultList.size();
							if(!ObjectFunctions.isNullOrEmpty(feedbackStaffResultList)){
								for(VWFeedbackRatingDetails staffFeedbackResult : feedbackStaffResultList){
									staffGradeCount+=Double.valueOf(staffFeedbackResult.getResultGradeValue());
									staffFeedbackResult=null;
								}
								double staffTotalPersent=staffGradeCount/feedbackMembers;
								staffPersonAccountDetails=new ViewStaffPersonAccountDetails();
								staffPersonAccountDetails.setLastName(staffPersonDetails.getLastName());
								staffPersonAccountDetails.setFirstName(staffPersonDetails.getFirstName());
								staffPersonAccountDetails.setUsername(staffPersonDetails.getUsername());
								staffPersonAccountDetails.setStaffId(staffPersonDetails.getStaffId());
								staffPersonAccountDetails.setTotalDeduction(staffTotalPersent);
								getStaffsList().add(staffPersonAccountDetails);
								feedbackStaffResultList=null;
								staffPersonAccountDetails=null;
							}
							else {
								staffPersonAccountDetails=new ViewStaffPersonAccountDetails();
								staffPersonAccountDetails.setLastName(staffPersonDetails.getLastName());
								staffPersonAccountDetails.setFirstName(staffPersonDetails.getFirstName());
								staffPersonAccountDetails.setUsername(staffPersonDetails.getUsername());
								staffPersonAccountDetails.setStaffId(staffPersonDetails.getStaffId());
								getStaffsList().add(staffPersonAccountDetails);
								staffPersonAccountDetails=null;
							}
							staffGradeCount=0;
							feedbackMembers=0;
						}
						staffPersonDetails=null;
					}
				}
				ViewStaffList=null;
			}
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxTeacherClassRating", results = { @Result(location = "academic/ajaxViewTeacherClassRating.jsp", name = "success") }) })
	public String ajaxTeacherClassRating() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxTeacherClassRating' method");
		}
		try {
			List<Student> studentList=null;
			String staffId = getParamValue("staffId");
			List<ClassTeacher> teacherClassList=staffManager.getTeacherSubjectsByIdAndAcademicYear(Long.valueOf(staffId),getUserAcademicYearId(),getUserCustId());
			if(!ObjectFunctions.isNullOrEmpty(teacherClassList)){
				for(ClassTeacher classTeacher: teacherClassList){
					if (!ObjectFunctions.isNullOrEmpty(classTeacher)) {
						studentList = adminManager.getAllStudentsByClassName(classTeacher.getStudyClass().getId(),getUserCustId(),Constants.YES_STRING,getUserAcademicYearId());
						if (!ObjectFunctions.isNullOrEmpty(studentList)) {
							int feedbackCount=0;
							int studentCount=0;
							for (Student student : studentList) {
								ParentFeedbackResult feedbackResult=adminManager.getTeacherGradeByStudent(Long.valueOf(staffId),student.getId(),getUserCustId());
								if(!ObjectFunctions.isNullOrEmpty(feedbackResult)){
									studentCount+=1;
									feedbackCount+=Integer.valueOf(feedbackResult.getFeedbackGradeId());
								}
							}
							/*Dummy method to show class wide teacher grades*/
							StudyClass studyClass=new StudyClass();
							if(feedbackCount>0){
								int feebackPersent=feedbackCount/studentCount;
								studyClass.setId(classTeacher.getId());
								studyClass.setClassName(classTeacher.getStudyClass().getClassAndSection());
								studyClass.setDescription(classTeacher.getStudySubject().getDescription());
								getStudyClassList().add(studyClass);
							}else {
								studyClass.setId(classTeacher.getId());
								studyClass.setClassName(classTeacher.getStudyClass().getClassAndSection());
								studyClass.setDescription(classTeacher.getStudySubject().getDescription());
								getStudyClassList().add(studyClass);
							}
						}
					}
				}
				classTeacher = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxDoPostFeedback", results = { @Result(location = "academic/newPostFeedback.jsp", name = "success") }) })
	public String doAddFeedback() throws URTUniversalException {
	
		if (log.isDebugEnabled()) {
			log.debug("Entering 'doAddFeedback' method");
		}
		try {
			if(getTempId()>0){
				setFeedbackQuestions((FeedbackQuestions) adminManager.get(FeedbackQuestions.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+getTempId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	
		return SUCCESS;
	}
	@Actions({
		@Action(value = "ajaxAddFeedbackQuestion", results = { @Result(location = "academic/selectChildForFeedback.jsp", name = "success") })
	})
		public String ajaxAddFeedbackQuestion() throws URTUniversalException {
		
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddParentFeedbackForm' method");
		}
		try
		{
			FeedbackQuestions feedbackQuestions=null;
			if(getTempId()>0){
				feedbackQuestions=(FeedbackQuestions) adminManager.get(FeedbackQuestions.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+getTempId());
			}else{
				feedbackQuestions=new FeedbackQuestions();
			}
			feedbackQuestions.setCustId(getUserCustId());
			feedbackQuestions.setDescription(getFeedbackQuestions().getDescription());
			feedbackQuestions.setAcademicYear(getCurrentAcademicYear());
			if("Teacher".equalsIgnoreCase(getFeedbackQuestions().getRoleDescription())){
				feedbackQuestions.setRoleDescription("Teacher Feedback Questions");
				setTempString("School Feedback Questions");
			}else{
				feedbackQuestions.setRoleDescription("School Feedback Questions");
				setTempString("School Feedback Questions");
			}
			setTempString(feedbackQuestions.getRoleDescription());
			adminManager.save(feedbackQuestions);
			ajaxViewFeedbackList();
			if(getTempId()>0)
				super.addActionMessage("Feedback question updated successfully.");
			else
				super.addActionMessage("Feedback question created successfully.");
			
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
	 @Actions( {
			@Action(value = "ajaxDeleteFeedback", results = { @Result(location = "academic/selectChildForFeedback.jsp", name = "success") }) })
	public String ajaxDeleteFeedback() {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDeleteFeedback' method");
		}
		try {
			String feedbackQuestionId = getParamValue("id");
			if (StringFunctions.isNotNullOrEmpty(feedbackQuestionId)) {
				FeedbackQuestions feedbackQuestion=(FeedbackQuestions)adminManager.get(FeedbackQuestions.class, Long.valueOf(feedbackQuestionId));
				if (!ObjectFunctions.isNullOrEmpty(feedbackQuestion)) {
					setTempString(feedbackQuestion.getRoleDescription());
					adminManager.removeFeedbackParentsResults(Long.valueOf(feedbackQuestionId),getUserCustId());
					adminManager.remove(FeedbackQuestions.class, Long.parseLong(feedbackQuestionId));
				}
			}
			ajaxViewFeedbackList();
			super.addActionMessage("Feedback question deleted successfully.");
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	
	@Actions( { @Action(value = "ajaxNewSchoolFee", results = { @Result(location = "fee/ajaxStudentPaymentReports.jsp", name = "success") }) })
	public String ajaxNewSchoolFee() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxNewSchoolFee' method");
		}

		try {
			String feeTypeId = getParamValue("feeTypeId");
			String classId=getParamValue("classId");
			FeeType feeType = (FeeType) adminManager.get(FeeType.class, Long.parseLong(feeTypeId));
			if (!ObjectFunctions.isNullOrEmpty(feeType)) {
					setClassId(classId);
					setFeeId(feeTypeId);
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxNewClassFee", results = { @Result(location = "fee/newClassFee.jsp", name = "success") }) })
	public String ajaxNewClassFee() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxNewClassFee' method");
		}

		try {
			String feeTypeId = getParamValue("feeTypeId");
			String classId = getParamValue("classId");
			String feeAmount = getParamValue("feeAmount");
			AcademicYear academicYear=adminManager.getCurrentAcademicYear("Y",getUserCustId());
			ClassName className = (ClassName) adminManager.get(ClassName.class,Long.valueOf(classId));
			FeeType feeType=(FeeType)adminManager.get(FeeType.class, Long.valueOf(feeTypeId));
			if (!ObjectFunctions.isNullOrEmpty(className)) {
				if (!ObjectFunctions.isNullOrEmpty(feeTypeId)) {
					Fee fee = new Fee();
					fee.setCustomer(getCustomerByCustId());
					fee.setFeeType(feeType);
					fee.setFeeAmount(Double.valueOf(feeAmount));
					fee.setClassName(className);
					fee.setAcademicYear(academicYear);
					adminManager.save(fee);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoEditSchoolSettings", results = { @Result(location = "academic/ajaxDoEditSchoolSettings.jsp", name = "success") }) })
	public String ajaxDoEditSchoolSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditSchoolSettings' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			setChkBoxSelectedIds(null);
			if(!ObjectFunctions.isNullOrEmpty(getAcademicYearId()) && !ObjectFunctions.isNullOrEmpty(getUserCustId())){
				setTempId(adminManager.getCount("studentPayment", "custId=" + getUserCustId()+ " and  academicYearId="+getUserAcademicYearId()));
				setAcademicYear((AcademicYear)adminManager.get(AcademicYear.class, Long.valueOf(getAcademicYearId())));
				setTempString(getAcademicYear().getPastYear()+":"+(Long.valueOf(getAcademicYear().getPastYear())+1));
				setAnyTitle((Long.valueOf(getAcademicYear().getPastYear())+1)+":"+(Long.valueOf(getAcademicYear().getPastYear())+2));
				generateSchoolWorkingDays();
				prepareWeekDays();
				setWeekDayList(adminManager.getAll(WeekDays.class));
				setClassList(adminManager.getAllByCustId("ClassName", getUserCustId(), getUserAcademicYearId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	public void generateSchoolWorkingDays(){
		List<Object[]> workingDays= adminManager.getAll("select dayId,academicYearId from workingDays where academicYearId="+getAcademicYearId());
		if(!ObjectFunctions.isNullOrEmpty(workingDays)) {
			for(Object[] obj : workingDays){
				getChkBoxSelectedIds().add(obj[0].toString());
			}
			workingDays = null;
			 
		}
	}
	
	@Actions( { @Action(value = "ajaxDoUpdateSchoolSettings", results = { @Result(location = "academic/ajaxCreateSchoolSettings.jsp", name = "success") }) })
	public String ajaxDoUpdateSchoolSettings() throws URTUniversalException {
		if (log.isInfoEnabled()) log.info("Entering 'ajaxDoUpdateSchoolSettings' method");
		try {
			if (getAcademicYear().getId() != 0) {
				DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				JSONObject formData = new JSONObject(getAnyTitle());
				JSONArray jsonArray =(JSONArray) formData.get("JSONOBJ");
				JSONObject jsonObj = null;
				AcademicYearTimings academicYearTimings=null;
				JSONObject formHData = new JSONObject(getTempString());
				JSONArray jsonHolidaysArray =(JSONArray) formHData.get("JSONOBJH");
				JSONObject jsonHolidayObj = null;
				String endDate = null;
				Customer customer = getCustomerByCustId();
					if("on".equalsIgnoreCase(getCustomer().getSendSmsUpdatedMobile()))
						customer.setSendSmsUpdatedMobile("Y");
					else
						customer.setSendSmsUpdatedMobile("N");
				customer.setMobileType(getCustomer().getMobileType());
				
				customer =(Customer) adminManager.save(customer);
				AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getAcademicYear().getId());
				if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
					academicYear.setEndDate(getAcademicYear().getEndDate());					 
					academicYear.setNextAcademicStartDate(getAcademicYear().getNextAcademicStartDate());
					academicYear.setAttendancePercentage(getAcademicYear().getAttendancePercentage());
					academicYear.setDispActivityDescField(getAcademicYear().isDispActivityDescField());
					academicYear.setHolidayStatus(getAcademicYear().getHolidayStatus());
					academicYear.setTimetableGenerationByManual(getAcademicYear().isTimetableGenerationByManual());
					if(StringFunctions.isNullOrEmpty(academicYear.getUseBiometricForStudent()))
					{
						academicYear.setUseBiometricForStudent(getAcademicYear().getUseBiometricForStudent());
						if("Y".equalsIgnoreCase(getAcademicYear().getUseBiometricForStudent()))
						{
							academicYear.setManageAttendanceBy("D");
						}
						else
						{
							if(StringFunctions.isNotNullOrEmpty(getAcademicYear().getManageAttendanceBy()))
								academicYear.setManageAttendanceBy(getAcademicYear().getManageAttendanceBy());
						}
					}
					else
					{
						academicYear.setUseBiometricForStudent(academicYear.getUseBiometricForStudent());
						if("Y".equalsIgnoreCase(academicYear.getUseBiometricForStudent()))
						{
							academicYear.setManageAttendanceBy("D");
						}
						else
						{
							if(StringFunctions.isNotNullOrEmpty(academicYear.getManageAttendanceBy()))
								academicYear.setManageAttendanceBy(academicYear.getManageAttendanceBy());
						}
					
					}		
					if(StringFunctions.isNullOrEmpty(academicYear.getUseBiometricForStaff()))
					{
						academicYear.setUseBiometricForStaff(getAcademicYear().getUseBiometricForStudent());
						if("Y".equalsIgnoreCase(getAcademicYear().getUseBiometricForStaff()))
						{
							academicYear.setManageAttendanceBy("D");
						}
						else
						{
							if(StringFunctions.isNotNullOrEmpty(getAcademicYear().getManageStaffAttendanceBy()))
								academicYear.setManageStaffAttendanceBy(getAcademicYear().getManageStaffAttendanceBy());
						}
					}
					else
					{
						academicYear.setUseBiometricForStaff(academicYear.getUseBiometricForStaff());
						if("Y".equalsIgnoreCase(academicYear.getUseBiometricForStaff()))
						{
							academicYear.setManageStaffAttendanceBy(getAcademicYear().getManageStaffAttendanceBy());
						}
						else
						{
							if(StringFunctions.isNotNullOrEmpty(getAcademicYear().getManageStaffAttendanceBy()))
							academicYear.setManageStaffAttendanceBy(getAcademicYear().getManageStaffAttendanceBy());
						}
					
					}
					academicYear.setManageStudentsAdmissionsByFee(getAcademicYear().getManageStudentsAdmissionsByFee());
					academicYear.setTransportFeeByBoardingPoint(getAcademicYear().isTransportFeeByBoardingPoint());
					academicYear.setReceiptGenerationType(getAcademicYear().getReceiptGenerationType());
					if(StringFunctions.isNotNullOrEmpty(getAcademicYear().getEnableSchoolShift()))
						 academicYear.setEnableSchoolShift(getAcademicYear().getEnableSchoolShift());
					academicYear.setSendBirthdayAlerts(getAcademicYear().isSendBirthdayAlerts());
					academicYear.setSendStaffBirthdayAlerts(getAcademicYear().isSendStaffBirthdayAlerts());
					academicYear.setSendBirthdayAlertsByEmail(getAcademicYear().isSendBirthdayAlertsByEmail());
					academicYear.setSendStaffBirthdayAlertsByEmail(getAcademicYear().isSendStaffBirthdayAlertsByEmail());
					academicYear.setSendEventAlertSMS(getAcademicYear().isSendEventAlertSMS());
					academicYear.setSendEventAlertsByEmail(getAcademicYear().isSendEventAlertsByEmail());
					academicYear.setAssignmentSMSLoginUser(getAcademicYear().isAssignmentSMSLoginUser());
					academicYear.setCaptureAttendanceBy(getAcademicYear().getCaptureAttendanceBy());
					academicYear.setCaptureAttendanceForStaff(getAcademicYear().getCaptureAttendanceForStaff());
					List<WeekDays> weekDays = adminManager.getAll(WeekDays.class);
					Map<String,Long> weekDaysMap = new HashMap<String,Long>();
					if(ObjectFunctions.isNotNullOrEmpty(weekDays)){
						for(WeekDays weekDaysObj : weekDays)
						{
							weekDaysMap.put(weekDaysObj.getDayName(),weekDaysObj.getId());
						}
					}
					if(ObjectFunctions.isNotNullOrEmpty(weekDays)){
						Calendar c1 = Calendar.getInstance();
						Date myDate;
						WorkingDays workingDays=null;
						SchoolHolidays schoolHolidays = null;
						if(!ObjectFunctions.isNullOrEmpty(getAcademicYear().getStartDate())){
							academicYear.setStartDate(getAcademicYear().getStartDate());
							c1.setTime(getAcademicYear().getStartDate());
							endDate=formatter.format(getAcademicYear().getStartDate());
						}else{
							c1.setTime(new Date());
							endDate=formatter.format(new Date());
						}
						adminManager.remove("schoolHolidays", "custId="+getUserCustId()+" and academicYearId="+academicYear.getId()+" and status='W' and holidayDate >= curDate()");
						int dayofDate = c1.get(Calendar.DAY_OF_WEEK);
						int dayDifference=0;
						adminManager.remove("workingDays", "academicYearId="+academicYear.getId());
						setTempString(null);
						if(!ObjectFunctions.isNullOrEmpty(jsonHolidaysArray)){
						for (int i = 0; i < jsonHolidaysArray.length(); i++) {
							JSONArray jsnHArr =(JSONArray) jsonHolidaysArray.get(i);
							if (!ObjectFunctions.isNullOrEmpty(jsnHArr)) {
								academicYearTimings=new AcademicYearTimings();
								for (int j = 0; j < jsnHArr.length(); j++) {
									jsonHolidayObj = jsnHArr.getJSONObject(j);
									if (!ObjectFunctions.isNullOrEmpty(jsonHolidayObj)) {
										Iterator<String> iter = jsonHolidayObj.keys();
										 while (iter.hasNext()) {
										   String key = iter.next();
										   String weekDay="";
										   long classId=0;
										   if(!(jsonHolidayObj.get(key).toString().split("_")[0]).equalsIgnoreCase("CLASSID")){
											   if(StringFunctions.isNotNullOrEmpty(jsonHolidayObj.get(key).toString().split("_")[0]) && Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1])>0){
												   long schoolClassId=Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1]);
											   if(!key.equalsIgnoreCase(weekDay) && classId != Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1])){
												   myDate = DateFunctions.add(c1.getTime(),Integer.parseInt(weekDaysMap.get(jsonHolidayObj.get(key).toString().split("_")[0]).toString()) - dayofDate);
													if(!DateFunctions.isFutureDate(myDate)){
														myDate = DateFunctions.add(myDate, 7);
													}
													for (;;) {
														if (myDate.before(getAcademicYear().getEndDate())) {
																schoolHolidays = new SchoolHolidays();
																Calendar cal = Calendar.getInstance();
																cal.setTime(myDate);
																log.debug("Edit Unselected week days : "+ myDate.toString());
																String startMonth = new SimpleDateFormat("MM").format(cal.getTime());
																String sdfSource1 = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
																String holidayYear = new SimpleDateFormat("yyyy").format(cal.getTime());
																int monthId = Integer.parseInt(startMonth);
																Date createdDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,myDate));
																schoolHolidays.setStartDate(createdDate);
																schoolHolidays.setEndDate(createdDate);
																schoolHolidays.setNoOfDays(1);
																schoolHolidays.setMonthId(monthId);
																schoolHolidays.setAcademicYear(academicYear);
																schoolHolidays.setHolidayDate(sdfSource1);
																schoolHolidays.setDescription(jsonHolidayObj.get(key).toString().split("_")[0].toUpperCase());
																schoolHolidays.setCustId(getUserCustId());
																schoolHolidays.setYearId(holidayYear);
																schoolHolidays.setStatus("W");
																schoolHolidays.setCreatedById(getUser().getId());
																schoolHolidays.setCreatedDate(new Date());
																schoolHolidays.setClassId(Long.valueOf(jsonHolidayObj.get(key).toString().split("_")[1]));
																adminManager.save(schoolHolidays);
														} else {
															break;
														}
													myDate = DateFunctions.add(myDate, 7);
												}
											   }
										   }
										 }
										}
									}
								}
							   }
							}
						}else{
						for (WeekDays day : weekDays) {
							if (!getChkBoxSelectedIds().contains(day.getId())) {
								dayDifference=(int)day.getId() - dayofDate;
								myDate = DateFunctions.add(c1.getTime(),dayDifference);
								if(!DateFunctions.isFutureDate(myDate) && dayDifference < 0){
									myDate = DateFunctions.add(myDate, 7);
								}
								for (;;) {
										if (myDate.before(getAcademicYear().getEndDate())) {
											schoolHolidays = new SchoolHolidays();
											Calendar cal = Calendar.getInstance();
											cal.setTime(myDate);
											log.debug("Edit Unselected week days : "+ myDate.toString());
											String startMonth = new SimpleDateFormat("MM").format(cal.getTime());
											String sdfSource1 = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
											String holidayYear = new SimpleDateFormat("yyyy").format(cal.getTime());
											int monthId = Integer.parseInt(startMonth);
											Date createdDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,myDate));
											schoolHolidays.setStartDate(createdDate);
											schoolHolidays.setEndDate(createdDate);
											schoolHolidays.setNoOfDays(1);
											schoolHolidays.setMonthId(monthId);
											schoolHolidays.setAcademicYear(academicYear);
											schoolHolidays.setHolidayDate(sdfSource1);
											schoolHolidays.setDescription(day.getDayName().toUpperCase());
											schoolHolidays.setCustId(getUserCustId());
											schoolHolidays.setYearId(holidayYear);
											schoolHolidays.setCreatedById(getUser().getId());
											schoolHolidays.setCreatedDate(new Date());
											schoolHolidays.setStatus("W");
											adminManager.save(schoolHolidays);
										} else {
											break;
										}
									myDate = DateFunctions.add(myDate, 7);
								}
							}else{
								workingDays = new WorkingDays();
								workingDays.setAcademicYearId(academicYear.getId());
								workingDays.setCreatedById(getUser().getId());
								workingDays.setCreatedDate(new Date());
								workingDays.setDayId(day.getId());
								workingDays.setLastAccessDate(new Date());
								workingDays.setLastUpdatedById(getUser().getId());
								workingDays.setLastUpdatedDate(new Date());
								adminManager.save(workingDays);
								workingDays = null;
							
							}
						}
					  }
					}
					adminManager.save(academicYear);
					
					// Updating class wise /day wise timings data.
					if(!ObjectFunctions.isNullOrEmpty(jsonArray)){
						/* Deleting the records from  academicYearTimings and adding new records using academicYearId*/
						if(!ObjectFunctions.isNullOrEmpty(academicYear.getId()) && !ObjectFunctions.isNullOrEmpty(getUserCustId())){
							List<AcademicYearTimings> acyList= adminManager.getAll(AcademicYearTimings.class, " academicYearId="+academicYear.getId());
							if(!ObjectFunctions.isNullOrEmpty(acyList)){
								adminManager.removeAllAcademicYearTimingsByAcademicYearId(academicYear.getId());
							  }
							}
						
					for (int i = 0; i < jsonArray.length(); i++) {
						JSONArray jsnArr =(JSONArray) jsonArray.get(i);
						if (!ObjectFunctions.isNullOrEmpty(jsnArr)) {
							academicYearTimings=new AcademicYearTimings();
							for (int j = 0; j < jsnArr.length(); j++) {
								jsonObj = jsnArr.getJSONObject(j);
								if (!ObjectFunctions.isNullOrEmpty(jsonObj)) {
									Iterator<String> iter = jsonObj.keys();
									 while (iter.hasNext()) {
									   String key = iter.next();
									   //Object value = jsonObj.get(key);
									   
									 if(key.equalsIgnoreCase("CLASSID")){
										academicYearTimings.setClassId(Long.valueOf((String) jsonObj.get(key)));
									 }
									 else if(key.equalsIgnoreCase("DAYID")){
										 academicYearTimings.setWeekDay((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("SST")){
										 academicYearTimings.setStartTime((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("MBST")){
										 academicYearTimings.setMorningBreakStartTime((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("MBET")){
										 academicYearTimings.setMorningBreakEndTime((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("LBST")){
										 academicYearTimings.setLunchStartTime((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("LBET")){
										 academicYearTimings.setLunchEndTime((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("EBST")){
										 academicYearTimings.setEveningBreakStartTime((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("EBET")){
										 academicYearTimings.setEveningBreakEndTime((String) jsonObj.get(key));
									 }
									 else if(key.equalsIgnoreCase("SET")){
										 academicYearTimings.setEndTime((String) jsonObj.get(key));
									 }
									 }
								}
							}
							if(jsnArr.length()>0){
								academicYearTimings.setAcademicYearId(academicYear.getId());
								academicYearTimings.setStatus(getAnyId());
								academicYearTimings.setCreatedById(getUser().getId());
								academicYearTimings.setCreatedDate(new Date());
								academicYearTimings.setLastAccessDate(new Date());
								academicYearTimings.setLastUpdatedById(getUser().getId());
								academicYearTimings.setLastUpdatedDate(new Date());
								adminManager.save(academicYearTimings);
							}
						   }
						}
					}
					
					super.addActionMessage("Academic year details updated successfully.");
					academicYear = null;
				}
			}
			ajaxAcademicSchoolSettings();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetSchoolHolidaysDetails", results = { @Result(type = "json", name = "success", params = {"includeProperties", "timingsList.*" }) }) })
	public String ajaxGetSchoolHolidaysDetails() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetSchoolHolidaysDetails' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getAcademicYearId())){
				//List<SchoolHolidays> schoolHolyList= adminManager.getAll(SchoolHolidays.class, " academicYearId="+getAcademicYearId()+" and custId="+getUserCustId()+" and status='W' group by classId,classHolidayDescription order by id");
				List<SchoolHolidays> schoolHolyList = adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getAcademicYearId(),null,null,null,null,null,"W",0,"groupByDesc",null);
				if(!ObjectFunctions.isNullOrEmpty(schoolHolyList)){
					JSONArray res = new JSONArray();
					JSONObject j;
					List<WeekDays> weekDays = adminManager.getAll(WeekDays.class);
					Map<String,String> weekDaysMap = new HashMap<String,String>();
					if(ObjectFunctions.isNotNullOrEmpty(weekDays)){
						for(WeekDays weekDaysObj : weekDays)
						{
							weekDaysMap.put(weekDaysObj.getDayName(),weekDaysObj.getDayName());
						}
					}
					for(SchoolHolidays acdt :schoolHolyList){
					    j=new JSONObject();
					    String weekDay="";
						long classId=0;
						if(!ObjectFunctions.isNullOrEmpty(acdt)){
							if(!ObjectFunctions.isNullOrEmpty(weekDaysMap.get(acdt.getDescription()))){
								if(!weekDaysMap.get(acdt.getDescription().toString()).equalsIgnoreCase(weekDay) && classId != acdt.getClassId()){
									j.put("CLASSID", acdt.getDescription().toString()+"_"+acdt.getClassId());
								}
								weekDay=acdt.getDescription().toString();
								classId=acdt.getClassId();
								res.put(j);
							}
					 }
				  }
				    j = new JSONObject();
					j.put("data", res);
					log.debug("Json:-"+j.toString());
					getResponse().getOutputStream().print(j.toString());
				}
			  }
			}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
		}
	
	@Actions( { @Action(value = "ajaxDoAddClassPromote", results = { @Result(location = "academic/ajaxPromoteClass.jsp", name = "success") }),
		@Action(value = "ajaxClancelClassPromote", results = { @Result(location = "academic/ajaxViewPromoteClass.jsp", name = "success") }) })
	public String ajaxDoAddClassPromote() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddClassPromote' method");
		}
		try {
			String academicYearId = null;
		//	AcademicYear academicYear = null; 
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = (String) getSession().getAttribute("academicYear");
			} else {
				academicYearId = (String) getSession().getAttribute("newYear");
			}
			if(!StringFunctions.isNullOrEmpty(academicYearId))
				setClassList(adminManager.getAllByCustId("ClassName",getUserCustId(),Long.valueOf(academicYearId)));
			//setStudySubjectList(adminManager.getAll(StudySubject.class));
			setPromoteClassList(adminManager.getPromoteClassDetailsByCustId(getUserCustId(),Long.valueOf(academicYearId)));

		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}

	
	@Actions({
		@Action(value = "ajaxGetStudentsExamList", results = { @Result(location = "getStudentsList.jsp", name = "success" )}),
		@Action(value = "ajaxGetExamStudentsList", results = { @Result(location = "getExamStudentsList.jsp", name = "success" )}),
	    @Action(value = "ajaxDoGetMyStudents", results = { @Result(location = "student/ajaxViewStudentList.jsp", name = "success") })
			
		})

	public String ajaxDoGetMyStudents() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetMyStudents' method");
		}

		try {
				String studyClassId = getStudyClassId();
				String academicYearId = null;
				List studentsList = null;
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
					academicYearId = (String) getSession().getAttribute("academicYear");
				} else {
					academicYearId = (String) getSession().getAttribute("newYear");
				}

				if (!StringFunctions.isNullOrEmpty(studyClassId)) {
					if (String.valueOf(getSession().getAttribute("newYear")).equalsIgnoreCase(academicYearId)) {
						studentsList = staffManager.getViewStudentPersonAccountDetailsByStudyClassIdandStatus(Long.valueOf(studyClassId),Constants.YES_STRING, academicYearId);
					}else {
						studentsList = staffManager.getViewStudentPersonAccountDetailsByStudyClassIdandStatus(Long.valueOf(studyClassId),Constants.NO_STRING, academicYearId);
					}
					if (!ObjectFunctions.isNullOrEmpty(studentsList)) {
						setClassStudentsList(studentsList);
						studentsList=null;
					}
				}
				academicYearId=null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "doViewSchoolAndStaffFeedback", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "payType" }) })

	})
	public String doViewSchoolAndStaffFeedback() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'doViewSchoolAndStaffFeedback' method");
		}

		try {
			String academicYearId = null;
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = (String) getSession().getAttribute("academicYear");
				
			} else {
				academicYearId = (String) getSession().getAttribute("newYear");
			}
 			String perfomanceName=getParamValue("perfomanceName");
			List<FeedbackQuestions> feedbackQuestionsList =  adminManager.getAllByCustId("FeedbackQuestions",getUserCustId(),0);
			List<FeedbackGrades> feedbackGradeList=adminManager.getAllByCustId("FeedbackGrades",getUserCustId(),0);
			if(!ObjectFunctions.isNullOrEmpty(feedbackGradeList)){
				setFeeTypeList(feedbackGradeList);
			}
			int totalGrades=feedbackGradeList.size();
			if(!ObjectFunctions.isNullOrEmpty(feedbackQuestionsList))
			{
				int gradeCount=0;
				setPercentage(Long.valueOf(totalGrades));
				for(FeedbackQuestions feedbackQuestions : feedbackQuestionsList){
					List<ParentFeedbackResult> feedbackQuestionResultList=adminManager.getAll(ParentFeedbackResult.class, "custId=" + getUserCustId() + " and academicYearId='"+getUserAcademicYearId()+"' and feedbackQuestionId="+feedbackQuestions.getId());
 					if(!ObjectFunctions.isNullOrEmpty(feedbackQuestionResultList)){
						for(ParentFeedbackResult parentFeedbackResult : feedbackQuestionResultList){
							
							gradeCount +=Integer.valueOf(parentFeedbackResult.getFeedbackGradeId());
						}
						int totalPeasent=gradeCount/feedbackQuestionResultList.size();
						ParentFeedbackResult parentFeedbackResult=new ParentFeedbackResult();
						parentFeedbackResult.setFeedbackGradeId(feedbackQuestions.getDescription());
						parentFeedbackResult.setId(feedbackQuestions.getId());
						parentFeedbackResult.setFeedbackQuestionId(totalPeasent);
						getFeedbackQuestionsAnswerList().add(parentFeedbackResult);
						gradeCount=0;
						totalPeasent=0;
					}else {
						ParentFeedbackResult parentFeedbackResult=new ParentFeedbackResult();
						parentFeedbackResult.setFeedbackGradeId(feedbackQuestions.getDescription());
						parentFeedbackResult.setId(feedbackQuestions.getId());
						parentFeedbackResult.setFeedbackQuestionId(0);
						getFeedbackQuestionsAnswerList().add(parentFeedbackResult);
						gradeCount=0;
					}
				}
				//setFeedbackQuestionsList(feedbackQuestionsList);
			}
			List<ViewStaffPersonAccountDetails> ViewStaffList = adminManager.getAllStaffList(getUserCustId(),getUserAcademicYearId());
			if (!ObjectFunctions.isNullOrEmpty(ViewStaffList)) {
				float staffGradeCount=0;
				for (ViewStaffPersonAccountDetails staffPersonDetails : ViewStaffList) {
					//if(!ObjectFunctions.isNullOrEmpty(staffPersonDetails) && Constants.SCHOOL_HOD.equalsIgnoreCase(staffPersonDetails.getRoleName()) || Constants.SCHOOL_TEACHER.equalsIgnoreCase(staffPersonDetails.getRoleName())){
						if (Constants.SCHOOL_HOD.equalsIgnoreCase(staffPersonDetails.getRoleName()) || Constants.SCHOOL_TEACHER.equalsIgnoreCase(staffPersonDetails.getRoleName())) {
							List<ParentFeedbackResult> feedbackStaffResultList=adminManager.getStaffFeedbackResultList(staffPersonDetails.getStaffId(),getUserCustId(),academicYearId);
							float feedbackMembers=Float.valueOf(feedbackStaffResultList.size());
							if(!ObjectFunctions.isNullOrEmpty(feedbackMembers)){
							if(!ObjectFunctions.isNullOrEmpty(feedbackStaffResultList)){
								for(ParentFeedbackResult staffFeedbackResult : feedbackStaffResultList){
									staffGradeCount+=Float.valueOf(staffFeedbackResult.getFeedbackGradeId());
								}
								float staffTotalPersent=staffGradeCount/feedbackMembers;
								int staffToatalPersentRound=Math.round(staffTotalPersent);
								ViewStaffPersonAccountDetails staffPersonAccountDetails=new ViewStaffPersonAccountDetails();
								staffPersonAccountDetails.setLastName(staffPersonDetails.getLastName());
								staffPersonAccountDetails.setFirstName(staffPersonDetails.getFirstName());
								staffPersonAccountDetails.setUsername(staffPersonDetails.getUsername());
								staffPersonAccountDetails.setSupervisorId(String.valueOf(staffToatalPersentRound));
								getStaffsList().add(staffPersonAccountDetails);
								staffTotalPersent=0;
								staffGradeCount=0;
								staffToatalPersentRound=0;
							}
							}
							else {
								ViewStaffPersonAccountDetails staffPersonAccountDetails=new ViewStaffPersonAccountDetails();
								staffPersonAccountDetails.setLastName(staffPersonDetails.getLastName());
								staffPersonAccountDetails.setFirstName(staffPersonDetails.getFirstName());
								staffPersonAccountDetails.setUsername(staffPersonDetails.getUsername());
								getStaffsList().add(staffPersonAccountDetails);
							}
						}
					//}
				}
			}
			if("STP".equalsIgnoreCase(perfomanceName)){
					if(!ObjectFunctions.isNullOrEmpty(feedbackGradeList)){
						int staffQuestionCount=0;
						StringBuffer xmlData = null;
						String[] colors = { "D64646", "A186BE", "8BBA00", "FF8E46","008E8E", "D64646", "8E468E", "588526", "B3AA00","AFD8F8", "9D080D", "A186BE", "F6BD0F", "008ED6","800080", "FF0080", "FF00FF", "408080", "800000","804000", "4E387E", "463E41", "151B8D", "2554C7","6960EC", "488AC7" };
						xmlData = new StringBuffer();
						xmlData.append("<graph caption='Staff Perfomance Feed Back' showNames='1' decimalPrecision='0' yaxismaxvalue='"+ 100+ "'>");
						int i = 0;
						int staffSize=getStaffsList().size();
						for(FeedbackGrades feedbackGrades:feedbackGradeList){
							if(i>25)
								i=0;

							if (!ObjectFunctions.isNullOrEmpty(getStaffsList())) {
								for(Object obj:getStaffsList()){
									ViewStaffPersonAccountDetails personAccountDetails=(ViewStaffPersonAccountDetails)obj;
									if(feedbackGrades.getTitle().equalsIgnoreCase(personAccountDetails.getSupervisorId())){
										staffQuestionCount+=1;
									}
								}
								float staffGradePersent=Float.valueOf(staffQuestionCount*100)/staffSize;
								int staffTotalGradePersent=Math.round(staffGradePersent);
								staffQuestionCount=0;
								if(staffTotalGradePersent>0){
									xmlData.append("<set name='"+feedbackGrades.getDescription()+"' value='"+ staffTotalGradePersent+ "' color='" + colors[i++]+ "' showName='0' />");
								}else {
									xmlData.append("<set name='"+feedbackGrades.getDescription()+",' value='"+ 0 + "' color='" + colors[i++]+ "' showName='1' />");
								}
								
							}
						}
						xmlData.append("</graph>");
						setPayType(xmlData.toString());
					}
			}else {
				if (!ObjectFunctions.isNullOrEmpty(feedbackGradeList)) {
					int questionCount=0;
					StringBuffer xmlData = null;
					String[] colors = { "D64646", "A186BE", "8BBA00", "FF8E46","008E8E", "D64646", "8E468E", "588526", "B3AA00","AFD8F8", "9D080D", "A186BE", "F6BD0F", "008ED6","800080", "FF0080", "FF00FF", "408080", "800000","804000", "4E387E", "463E41", "151B8D", "2554C7","6960EC", "488AC7" };
					xmlData = new StringBuffer();
					xmlData.append("<graph caption='School Perfomance Feed Back' showNames='1' decimalPrecision='0' yaxismaxvalue='"+ 100+ "'>");
					int i = 0;
					int totalQuestionSize=feedbackQuestionsList.size();
					for (FeedbackGrades feedbackGrades : feedbackGradeList) {
						if (!ObjectFunctions.isNullOrEmpty(getFeedbackQuestionsAnswerList())) {
							for (Object obj : getFeedbackQuestionsAnswerList()) {
								ParentFeedbackResult feedbackResult = (ParentFeedbackResult) obj;
								if (feedbackGrades.getTitle().equalsIgnoreCase(String.valueOf(feedbackResult.getFeedbackQuestionId()))) {
									questionCount+=1;
								}
							}
							float totalGradePersent=(questionCount*100)/totalQuestionSize;
							questionCount=0;
							if(totalGradePersent>0){
								xmlData.append("<set name='"+feedbackGrades.getDescription()+"' value='"+ totalGradePersent+ "' color='" + colors[i++]+ "' showName='0' />");
							}else {
								xmlData.append("<set name='"+feedbackGrades.getDescription()+",' value='"+ totalGradePersent+ "' color='" + colors[i++]+ "' showName='1' />");
							}
							
						}
					}
					xmlData.append("</graph>");
					setPayType(xmlData.toString());
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxViewSchoolAndStaffPerfomance", results = { @Result(location = "principal/feedbackHome.jsp", name = "success") }) })
	public String ajaxViewSchoolAndStaffPerfomance() throws URTUniversalException {
	
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewSchoolAndStaffPerfomance' method");
		}
		try {
			ajaxViewFeedbackList();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	
		return SUCCESS;
	}

	@Actions( { @Action(value = "doGenerateSubjectSyllabus", results = {}) })
	public void doGenerateSubjectSyllabus() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetSubjects' method");
		}
		try {
			StudyClass studyClass=(StudyClass)adminManager.get(StudyClass.class, Long.valueOf(getClassId()));
			String fileName = studyClass.getClassAndSection()+"-SubjectSyllabus"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			ExcelView excelView = new ExcelView();
			getResponse().setContentType(excelView.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
			excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
			WritableFont font=new WritableFont(WritableFont.ARIAL,10,WritableFont.BOLD,true);
			WritableCellFormat cellFormat=new WritableCellFormat(font);
			
			if (!ObjectFunctions.isNullOrEmpty(studyClass.getSubjects())) {
				for (StudySubject studySubject : studyClass.getSubjects()) {
					excelView.setWorkSheetName(studySubject.getName());
					excelView.createWorkSheet(0);
					excelView.addHeader();
					excelView.getWs().setColumnView(0,30);
					excelView.getWs().setColumnView(1,30);
					excelView.getWs().setColumnView(2,30);
					excelView.getWs().setColumnView(3,30);
					excelView.getWs().addCell(new Label(0, 0, "Class Name", cellFormat));
					excelView.getWs().addCell(new Label(1, 0, studyClass.getClassAndSection()));
					excelView.getWs().addCell(new Label(0, 1, "Book Title", cellFormat));
					excelView.getWs().addCell(new Label(1, 1, studySubject.getDescription(), cellFormat));
					excelView.getWs().addCell(new Label(2, 1, "Author Name", cellFormat));
					excelView.getWs().addCell(new Label(3, 1, " ", cellFormat));
					excelView.getWs().addCell(new Label(0, 2, "Referance", cellFormat));
					excelView.getWs().addCell(new Label(1, 2, " ", cellFormat));
					excelView.getWs().addCell(new Label(2, 2, "Publisher", cellFormat));
					excelView.getWs().addCell(new Label(3, 2, " ", cellFormat));
					excelView.getWs().addCell(new Label(0, 4, "Chapter Name", cellFormat));
					excelView.getWs().addCell(new Label(1, 4, "Content Name", cellFormat));
				}
			}
			excelView.getWb().write();
			excelView.getWb().close();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	/*Removed action tag by seshu on 17th April 2013*/ 
	public String ajaxAddNextYearSchoolInfo() throws URTUniversalException {
	
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddNextYearSchoolInfo' method");
		}
		try {
			AcademicYear futureAcademicYear=null;
			AcademicYear presentAcademicYear=null;
			boolean dataCreated=true;
			String futureYear=null;
			if(getUserAcademicYearId() > 0){
				presentAcademicYear=(AcademicYear)adminManager.get(AcademicYear.class,getUserAcademicYearId());
				if(StringFunctions.isNullOrEmpty(futureYear) && !ObjectFunctions.isNullOrEmpty(presentAcademicYear) && StringFunctions.isNotNullOrEmpty(presentAcademicYear.getAcademicYear())){
						futureYear = (Long.valueOf(presentAcademicYear.getAcademicYear().split("-")[0])+1)+"-"+(Long.valueOf(presentAcademicYear.getAcademicYear().split("-")[1])+1);
				}
				if (StringFunctions.isNotNullOrEmpty(futureYear)) {

					futureAcademicYear = adminManager.getAcademicYearByAcademicYear(futureYear,getUserCustId());
					if (ObjectFunctions.isNullOrEmpty(futureAcademicYear)&& !ObjectFunctions.isNullOrEmpty(presentAcademicYear)) {
						createNewAcademicYear(futureAcademicYear,presentAcademicYear, futureYear);
						futureAcademicYear = getAcademicYear();
					}
				}
					setAcademicYear(futureAcademicYear);
				if(!presentAcademicYear.isFutureAcademicData()){
					ViewUserRoles masterAdmin=(ViewUserRoles)adminManager.get(ViewUserRoles.class, "roleName='ROLE_MASTERADMIN'");
					if(!ObjectFunctions.isNullOrEmpty(futureAcademicYear) && !ObjectFunctions.isNullOrEmpty(presentAcademicYear) && !ObjectFunctions.isNullOrEmpty(masterAdmin)){
						//This is for generating future year className records
						//List<ClassName> currentClassNamesList=null;
						Map<String,ClassName> classNames=new HashMap<String, ClassName>();
						Map<String,StudyClass> studyClasses=new HashMap<String, StudyClass>();
						Map<String,StudySubject> studySubjects=new HashMap<String, StudySubject>();
						try{
							classNames=generateClassNames(futureAcademicYear,classNames,masterAdmin.getAcountId(),presentAcademicYear);
						}catch (Exception ex) {
							dataCreated=false;
							ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							log.debug("Problem while creating future ClassName records.");
						}
						
						//This is for generating future year StudySubject records
						try{
							studySubjects=generateStudySubjectsAndStaffEligibleSubjects(futureAcademicYear,studySubjects,masterAdmin.getAcountId(),presentAcademicYear);
						}catch (Exception ex) {
							dataCreated=false;
							log.debug("Problem while creating future StudySubjects records and StaffElgible records.");
							ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							// TODO: handle exception
						}

						//This is for generating future year StudyClass records
						//StudyClass stdClass=null;
						try{
							studyClasses=generateStudyClassesAndClassSubjects(futureAcademicYear,studyClasses,classNames,studySubjects,masterAdmin.getAcountId(),presentAcademicYear);
						}catch (Exception ex) {
							dataCreated=false;
							log.debug("Problem while creating future StudyClass records and ClassSubject records.");
							ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							// TODO: handle exception
						}
						
						//This is for generating future year classTeacher records
						  try{
							  List<Object[]> staffList=adminManager.getAllTeachingStaffListByStatus(getUserCustId(), Constants.YES_STRING,presentAcademicYear.getId());
							  if(ObjectFunctions.isNotNullOrEmpty(staffList)){
								  generateClassTeacherRecords(staffList,futureAcademicYear,studyClasses,studySubjects,masterAdmin.getAcountId(),presentAcademicYear);
							  }else
								  log.debug("Current year ClassTeachers list not found.");
							  staffList = null;
							}catch (Exception ex) {
								dataCreated=false;
							  log.debug("Problem while creating future StudyClass records and ClassSubject records.");
							  ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							  JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;							  
							// TODO: handle exception
						  }
							// For adding future academic year data for Transport Module.
							try{
								createFutureAcademicYearTransportDetails(presentAcademicYear.getId(),futureAcademicYear);
							}catch (Exception ex) {
								dataCreated=false;
								log.debug("Problem while creating future academic year vehicles records.");
								ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
								JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							}
							
						//This is for generating future year examTypes records
							try{
								List<ExamTypes> currentYearExamTypes=adminManager.getAllClassExamTypes(getUserCustId(),String.valueOf(presentAcademicYear.getId()));
								if(ObjectFunctions.isNotNullOrEmpty(currentYearExamTypes)){
									generateExamTypes(currentYearExamTypes,futureAcademicYear,studyClasses,masterAdmin.getAcountId());
								}
							}catch (Exception ex) {
								dataCreated=false;
								ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
								JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
								 log.debug("Problem while creating future exam type records.");
								// TODO: handle exception
							}
									
						//This is for creating subTypess
							try{
								List<SubType> currentYearSubTypes=adminManager.getAllByCustId("SubType",getUserCustId(),presentAcademicYear.getId());
								if(ObjectFunctions.isNotNullOrEmpty(currentYearSubTypes)){
									generateSubTypes(currentYearSubTypes,futureAcademicYear,masterAdmin.getAcountId());
								}
							}catch (Exception ex) {
								dataCreated=false;
								ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
								JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
								 log.debug("Problem while creating future subtype records.");
								// TODO: handle exception
							}
							
						//This is for creating leaveManagement records
						   try{
							  List<LeaveManagement> currentLeavesList=adminManager.getAllByCustId("LeaveManagement", getUserCustId(), presentAcademicYear.getId());
							  if(ObjectFunctions.isNotNullOrEmpty(currentLeavesList)){
								  LeaveManagement leaveManagement=null;
								  String parms=null;
								  for(LeaveManagement leave:currentLeavesList){
									  if(!ObjectFunctions.isNullOrEmpty(leave)){
										  if(!ObjectFunctions.isNullOrEmpty(leave.getRole())){
											  parms="custId="+leave.getCustId()+" and roleId="+leave.getRole().getId()+" and academicYearId="+futureAcademicYear.getId();
											  leaveManagement=(LeaveManagement)adminManager.get(LeaveManagement.class, parms);
											  if(ObjectFunctions.isNullOrEmpty(leaveManagement)){
												  leaveManagement=new LeaveManagement();
												  leaveManagement.setCreatedById(masterAdmin.getAcountId());
												  leaveManagement.copyFrom(leave);
												  leaveManagement.setAcademicYear(futureAcademicYear);
												  adminManager.saveOrUpdateObject(leaveManagement);
												  leaveManagement=null;
											  }
										  }
									  }
									  leave=null;
								  }
							  }else
								  log.debug("Current year Leave Management list not found.");
						   }catch (Exception ex) {
							   dataCreated=false;
							   ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							   JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							   log.debug("Problem while creating future year Leave Management records.");
							// TODO: handle exception
						}
							
						//This is for cretaing SchoolGrades
						   try{
							   SchoolGrades schoolGrade=null;
							   String parms=null;
							   List<SchoolGrades> schoolGrades=adminManager.getAllByCustId("SchoolGrades", getUserCustId(),presentAcademicYear.getId());
							   if(ObjectFunctions.isNotNullOrEmpty(schoolGrades)){
								   for(SchoolGrades grade:schoolGrades){
									   if(!ObjectFunctions.isNullOrEmpty(grade)){
										   parms="custId="+grade.getCustId()+" and gradeName='"+grade.getGradeName()+"' and academicYearId="+futureAcademicYear.getId();
										   schoolGrade=(SchoolGrades)adminManager.get(SchoolGrades.class,parms);
										   if(ObjectFunctions.isNullOrEmpty(schoolGrade)){
											   schoolGrade=new SchoolGrades();
											   schoolGrade.setCreatedById(masterAdmin.getAcountId());
											   schoolGrade.copyFrom(grade);
											   schoolGrade.setAcademicYear(futureAcademicYear);
											   adminManager.saveOrUpdateObject(schoolGrade);
											   schoolGrade=null;
										   }
									   }
								   }
								   schoolGrades = null;
							   }else
								   log.debug("Current year School Grades list not found.");
						   }catch (Exception ex) {
							   dataCreated=false;
							   ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							   JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							   log.debug("Problem while creating future year school grades records.");
							// TODO: handle exception
						}
						//Generating OverAll Grades
						try{
							OverAllGrades overallGrade=null;
							String parms=null;
							List<OverAllGrades> overallGrades=adminManager.getAll(OverAllGrades.class, "custId="+getUserCustId()+" and academicYearId="+presentAcademicYear.getId());
							if(ObjectFunctions.isNotNullOrEmpty(overallGrades)){
							   for(OverAllGrades grade : overallGrades){
								   if(!ObjectFunctions.isNullOrEmpty(grade)){
									   parms="custId="+grade.getCustId()+" and gradeName='"+grade.getGradeName()+"' and academicYearId="+futureAcademicYear.getId();
									   overallGrade=(OverAllGrades)adminManager.get(OverAllGrades.class,parms);
									   if(ObjectFunctions.isNullOrEmpty(overallGrade)){
										   overallGrade=new OverAllGrades();
										   overallGrade.setCreatedById(masterAdmin.getAcountId());
										   overallGrade.copyFrom(grade);
										   overallGrade.setAcademicYear(futureAcademicYear);
										   adminManager.saveOrUpdateObject(overallGrade);
										   overallGrade=null;
									   }
								   }
								}
							   overallGrades = null;
							}else
							  log.debug("Current year Overall Grades list not found.");
						  }catch (Exception ex) {
							dataCreated=false;
							ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							log.debug("Problem while creating future year Overall grades records.");
							// TODO: handle exception
						  }
						// Generating Activities Grades
						  try{
							ActivitiesGrades activityGrade=null;
							String parms=null;
							List<ActivitiesGrades> activityGrades=adminManager.getAll(ActivitiesGrades.class, "custId="+getUserCustId()+" and academicYearId="+presentAcademicYear.getId());
							if(ObjectFunctions.isNotNullOrEmpty(activityGrades)){
							   for(ActivitiesGrades grade : activityGrades){
								   if(!ObjectFunctions.isNullOrEmpty(grade)){
									   parms="custId="+grade.getCustId()+" and gradeName='"+grade.getGradeName()+"' and academicYearId="+futureAcademicYear.getId();
									   activityGrade=(ActivitiesGrades)adminManager.get(ActivitiesGrades.class,parms);
									   if(ObjectFunctions.isNullOrEmpty(activityGrade)){
										   activityGrade=new ActivitiesGrades();
										   activityGrade.setCreatedById(masterAdmin.getAcountId());
										   activityGrade.copyFrom(grade);
										   activityGrade.setAcademicYear(futureAcademicYear);
										   adminManager.saveOrUpdateObject(activityGrade);
										   activityGrade=null;
									   }
								   }
								}
							   activityGrades = null;
							}else
							  log.debug("Current year Activities Grades list not found.");
						  }catch (Exception ex) {
							dataCreated=false;
							ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							log.debug("Problem while creating future year Activities grades records.");
							// TODO: handle exception
						  }
						 //For Generating StudentActivities 
						try{
							StudentActivities studentActivities = null;
							List<StudentActivityTypes> studActivitytypes = null;
							String parms=null;
							StudentActivityTypes studActivityType = null;
							List<StudentActivities> studActivities=adminManager.getAll(StudentActivities.class, "custId="+getUserCustId()+" and academicYearId="+presentAcademicYear.getId());
							if(ObjectFunctions.isNullOrEmpty(studActivities)){
								log.debug("Current year studentactivities list not found.");
							}else{
								for(StudentActivities activity: studActivities){
									if(!ObjectFunctions.isNullOrEmpty(activity)){
										if(StringFunctions.isNullOrEmpty(activity.getCategoryName()))
											parms="custId="+activity.getCustId()+" and activityName='"+activity.getActivityName()+"' and categoryName is null and academicYearId="+futureAcademicYear.getId();
										else
											parms="custId="+activity.getCustId()+" and activityName='"+activity.getActivityName()+"' and categoryName='"+activity.getCategoryName()+"' and academicYearId="+futureAcademicYear.getId();
										studentActivities=(StudentActivities)adminManager.get(StudentActivities.class,parms);
										if(ObjectFunctions.isNullOrEmpty(studentActivities)){
											studentActivities=new StudentActivities();
											studentActivities.setCreatedById(masterAdmin.getAcountId());
											studentActivities.copyFrom(activity);
											studentActivities.setAcademicYear(futureAcademicYear);
											studActivitytypes = activity.getStudentActivityTypes();
											if(ObjectFunctions.isNotNullOrEmpty(studActivitytypes)){
												for(StudentActivityTypes activitytype: studActivitytypes){
													if(!ObjectFunctions.isNullOrEmpty(activitytype)){
														String activityType =activitytype.getActivityTypeName().replaceAll("'", "\'");
														log.debug("activityTypeName='"+activityType+"' and academicYearId="+futureAcademicYear.getId());
														studActivityType = (StudentActivityTypes)adminManager.get(StudentActivityTypes.class, "activityTypeName='"+activityType+"' and academicYearId="+futureAcademicYear.getId());
														if(ObjectFunctions.isNullOrEmpty(studActivityType)){
															studActivityType = new StudentActivityTypes();
															studActivityType.copyFrom(activitytype);
															studActivityType.setCreatedById(masterAdmin.getAcountId());
															studActivityType.setAcademicYear(futureAcademicYear);
															studentActivities.addStudentActivityTypes(studActivityType);
														}
														activitytype = null;
													}
												}
											}
											adminManager.save(studentActivities);
											studentActivities=null;
											studActivitytypes = null;
									    }
									}
								}
								studActivities = null;
								studActivitytypes = null;
							}
						}catch (Exception ex) {
							dataCreated=false;
							ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
							log.debug("Problem while creating future year student activities records.");
							// TODO: handle exception
						}

						//This is for generatingFutureAcademicYear Fee Types
							dataCreated=generateFeeTypes(futureAcademicYear,masterAdmin.getAcountId(),presentAcademicYear);
							dataCreated=generateFeeTerms(futureAcademicYear,masterAdmin.getAcountId(),presentAcademicYear);
						   	classNames = null;
						   	studyClasses = null;
						   	studySubjects = null;
						   	presentAcademicYear=null;
						   }
						 
					if(dataCreated){
						presentAcademicYear=(AcademicYear)adminManager.get(AcademicYear.class,getUserAcademicYearId());
						presentAcademicYear.setFutureAcademicData(true);
						adminManager.save(presentAcademicYear);
					}
			      }
				}
				futureAcademicYear=null;
				presentAcademicYear=null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	public void createFutureAcademicYearTransportDetails(long presentAcademicYearId,AcademicYear futureAcademicYear){
		List<Route> currentYearRoutesDetails = adminManager.getAll(Route.class,"academicYearId="+presentAcademicYearId);
		if(ObjectFunctions.isNotNullOrEmpty(currentYearRoutesDetails)){
			createFutureAcademicYearRoutesDetails(currentYearRoutesDetails,futureAcademicYear);
		}
		currentYearRoutesDetails = null;
		List<VehiclesAcademicDetails> currentYearVehicleAcademicDetails= adminManager.getAll(VehiclesAcademicDetails.class, "academicYearId="+presentAcademicYearId);
		if(ObjectFunctions.isNotNullOrEmpty(currentYearVehicleAcademicDetails)){
			createFutureAcademicYearVehiclesDetails(currentYearVehicleAcademicDetails,futureAcademicYear);
		}
		currentYearVehicleAcademicDetails = null;
	}
	public void createFutureAcademicYearVehiclesDetails(List<VehiclesAcademicDetails> currentYearVehicleAcademicDetails,AcademicYear futureAcademicYear){
		List<VehiclesAcademicDetails> vehicleAcademicDetailList = null;
		VehiclesAcademicDetails futureVehicleAcademicDetail = null;
		StringBuffer query = null;
		Set<Route> currentAcademicRoutes = null;
		Route futureAcademicRoute = null;
		Vehicles vehicle = null;
		for(VehiclesAcademicDetails vehicleAcademicDetails: currentYearVehicleAcademicDetails){
			if(!ObjectFunctions.isNullOrEmpty(vehicleAcademicDetails) && !ObjectFunctions.isNullOrEmpty(vehicleAcademicDetails.getVehicle())){
				vehicle = vehicleAcademicDetails.getVehicle();
				query = new StringBuffer("FROM VehiclesAcademicDetails vehicleAcademic WHERE vehicleAcademic.vehicle.vehicleNumber='").append(vehicle.getVehicleNumber())
				.append("' and vehicleAcademic.name='").append(vehicleAcademicDetails.getName()).append("' and vehicleAcademic.academicYearId=").append(futureAcademicYear.getId());
				vehicleAcademicDetailList = adminManager.getAllHqlQuery(query.toString());
				if(ObjectFunctions.isNullOrEmpty(vehicleAcademicDetailList) ){
					futureVehicleAcademicDetail = new VehiclesAcademicDetails();
					futureVehicleAcademicDetail.setAcademicYearId(futureAcademicYear.getId());
					futureVehicleAcademicDetail.setCreatedById(getUser().getId());
					futureVehicleAcademicDetail.setDriverId(vehicleAcademicDetails.getDriverId());
					futureVehicleAcademicDetail.setHelperId(vehicleAcademicDetails.getHelperId());
					futureVehicleAcademicDetail.setLastUpdatedById(getUser().getId());
					futureVehicleAcademicDetail.setName(vehicleAcademicDetails.getName());
					futureVehicleAcademicDetail.setStatus(vehicleAcademicDetails.getStatus());
					vehicle.addVehicleAcademicDetails(futureVehicleAcademicDetail);
					vehicle= (Vehicles)adminManager.saveOrUpdateObject(vehicle);
					currentAcademicRoutes = vehicleAcademicDetails.getRoute();
					if(!ObjectFunctions.isNullOrEmpty(futureVehicleAcademicDetail) && ObjectFunctions.isNotNullOrEmpty(currentAcademicRoutes)){
						for(Route route : currentAcademicRoutes){
							query = new StringBuffer("routeName='").append(route.getRouteName()).append("' and academicYearId=").append(futureAcademicYear.getId());
							futureAcademicRoute = (Route)adminManager.get(Route.class, query.toString());
							if(!ObjectFunctions.isNullOrEmpty(futureAcademicRoute)){
								futureVehicleAcademicDetail.addRoute(futureAcademicRoute);
							}
							futureAcademicRoute = null;
							route = null;
						}
						adminManager.saveOrUpdateObject(futureVehicleAcademicDetail);
						currentAcademicRoutes = null;
					}
					futureVehicleAcademicDetail = null;
				}
				vehicleAcademicDetailList = null;
			}
			vehicleAcademicDetails = null;
		}
		currentYearVehicleAcademicDetails = null;
		futureAcademicYear = null;
	}
	public void createFutureAcademicYearRoutesDetails(List<Route> currentYearRoutesDetails,AcademicYear futureAcademicYear){
		StringBuffer query = null;
		Route route = null;
		RouteBoardingPoints futureYearBoardingPoint = null;
		List<RouteBoardingPoints> routeBoardingPoints = null;
		for(Route routeDetails : currentYearRoutesDetails){
			query = new StringBuffer("academicYearId=").append(futureAcademicYear.getId()).append(" and routeName='").append(routeDetails.getRouteName())
			.append("' and custId=").append(getUserCustId());
			route = (Route)adminManager.get(Route.class,query.toString());
			if(ObjectFunctions.isNullOrEmpty(route)){
				route = new Route();
				route.setAcademicYearId(futureAcademicYear.getId());
				route.copyFrom(routeDetails);
				route = (Route)adminManager.saveOrUpdateObject(route);
			}
			if(!ObjectFunctions.isNullOrEmpty(route)){
				routeBoardingPoints = routeDetails.getRouteBoardingPointList();
				if(ObjectFunctions.isNotNullOrEmpty(routeBoardingPoints)){
					for(RouteBoardingPoints boardingPoint : routeBoardingPoints){
						query = new StringBuffer("routeId=").append(route.getId()).append(" and boardingPointName='")
						.append(boardingPoint.getBoardingPointName()).append("'");
						futureYearBoardingPoint = (RouteBoardingPoints)adminManager.get(RouteBoardingPoints.class,query.toString());
						if(ObjectFunctions.isNullOrEmpty(futureYearBoardingPoint)){
							futureYearBoardingPoint = new RouteBoardingPoints();
							futureYearBoardingPoint.setAcademicYearId(route.getAcademicYearId());
							futureYearBoardingPoint.setCreatedById(getUser().getId());
							futureYearBoardingPoint.setLastUpdatedById(getUser().getId());
							futureYearBoardingPoint.copyFrom(boardingPoint);
							route.addRouteToBoardingPoints(futureYearBoardingPoint);
							adminManager.saveOrUpdateObject(route);
						}
					}
				}
			}
			route = null;
			routeDetails = null;
		}
		currentYearRoutesDetails = null;
		futureAcademicYear = null;
	}
	public void generateSubTypes(List<SubType> currentSubTypes,AcademicYear futureAcademicYear,long masterAccId){
			SubType subtype=null;
			SubTypeGrades subtypeGrade=null;
			String parms=null;
			for(SubType type:currentSubTypes){
				if(!ObjectFunctions.isNullOrEmpty(type)){
					parms="custId="+type.getCustId()+" and subTypeName='"+type.getSubTypeName()+"' and academicYearId="+futureAcademicYear.getId();
					subtype=(SubType)adminManager.get(SubType.class,parms);
					if(ObjectFunctions.isNullOrEmpty(subtype)){
						subtype=new SubType();
						subtype.copyFrom(type);
						subtype.setCreatedById(masterAccId);
						subtype.setAcademicYear(futureAcademicYear);
						subtype = (SubType)adminManager.saveOrUpdateObject(subtype);
						if(ObjectFunctions.isNotNullOrEmpty(type.getSubTypeGrades())){
							for(SubTypeGrades sGrade: type.getSubTypeGrades()){
								subtypeGrade = (SubTypeGrades)adminManager.get(SubTypeGrades.class, "grade='"+sGrade.getGrade()+"' and subTypeId="+subtype.getId()+" and academicYearId="+futureAcademicYear.getId());
								if(ObjectFunctions.isNullOrEmpty(subtypeGrade)){
									subtypeGrade = new SubTypeGrades();
									subtypeGrade.copyFrom(sGrade);
									subtypeGrade.setAcademicYearId(futureAcademicYear.getId());
									subtypeGrade.setCreatedById(masterAccId);
									subtype.addSubTypeGrades(subtypeGrade);
								}
							}
							adminManager.saveOrUpdateObject(subtype);
						}
						subtype=null;
					}
				}
			}
	}
	public Map generateClassNames(AcademicYear futureAcademicYear,Map<String, ClassName> classNames,long masterAccId,AcademicYear presentAcademicYear){
		ClassName clas=null;
		String parms=null;
		List<ClassName> futureClassNamesList = adminManager.getAllByCustId("ClassName",getUserCustId(),futureAcademicYear.getId());
		List<ClassName> currentClassNamesList=adminManager.getAllByCustId("ClassName",getUserCustId(),presentAcademicYear.getId());
		if(ObjectFunctions.isNotNullOrEmpty(currentClassNamesList)){
			for(ClassName className:currentClassNamesList){
				if(!ObjectFunctions.isNullOrEmpty(className)){
					parms=" className ='"+className.getClassName()+"' and custId="+className.getCustId();
					classNames.put(parms+" and academicYearId="+className.getAcademicYearId(), className);
					clas=(ClassName)adminManager.get(ClassName.class,parms+" and academicYearId="+futureAcademicYear.getId());
					if(ObjectFunctions.isNullOrEmpty(clas) && ObjectFunctions.isNullOrEmpty(futureClassNamesList)){
						clas=new ClassName();
						clas.copyFrom(className);
						clas.setAdmissionsOpen(false);
						clas.setAcademicYear(futureAcademicYear);
						clas.setCreatedById(masterAccId);
						clas=adminManager.saveClassName(clas);
					}
					classNames.put(parms+" and academicYearId="+futureAcademicYear.getId(), clas);
					className=null;
					clas=null;
				}
			}
		}else{
				log.debug("Current year classNames list not found.");
		}
		currentClassNamesList=null;
		futureAcademicYear=null;
		futureClassNamesList=null;
		presentAcademicYear = null;
		return classNames;
	}
	
	public Map generateStudySubjectsAndStaffEligibleSubjects(AcademicYear futureAcademicYear,Map<String,StudySubject> studySubjects,long masterAccId,AcademicYear presentAcademicYear){
		
		if (log.isDebugEnabled()) {
			log.debug("Entering 'generateStudySubjectsAndStaffEligibleSubjects' method");
		}
		try {
			StudySubject futureStudySubject=null;
			List<StudySubject> currentStudySubjectsList=null;
			String parms=null;
			currentStudySubjectsList=adminManager.getAllByCustId("StudySubject", getUserCustId(),presentAcademicYear.getId());
			if(ObjectFunctions.isNotNullOrEmpty(currentStudySubjectsList)){
				for(StudySubject subject:currentStudySubjectsList)
				{
					try {
						if(!ObjectFunctions.isNullOrEmpty(subject))
						{
							parms="name='"+subject.getName()+"' and custId="+subject.getCustId();
							studySubjects.put(parms+" and academicYearId="+subject.getAcademicYearId(), subject);
							futureStudySubject=(StudySubject)adminManager.get(StudySubject.class,parms+" and academicYearId="+futureAcademicYear.getId());
							if(ObjectFunctions.isNullOrEmpty(futureStudySubject)){
								futureStudySubject=new StudySubject(); 
								futureStudySubject.copyFrom(subject);
								futureStudySubject.setAcademicYear(futureAcademicYear);
								futureStudySubject.setCreatedById(masterAccId);
								futureStudySubject.setCreatedDate(new Date());
								futureStudySubject.setLastAccessDate(new Date());
								futureStudySubject=adminManager.saveStudySubject(futureStudySubject);
							}
							List<StaffElgibleSubjects> staffEligibleSubjects=adminManager.getAllStaffElgibleSubjectsByStudySubjectId(subject.getId());
							if(ObjectFunctions.isNotNullOrEmpty(staffEligibleSubjects)){
								generateStaffEligibleSubjects(staffEligibleSubjects,futureAcademicYear,futureStudySubject,masterAccId);
							}
							staffEligibleSubjects = null;
							//}
							studySubjects.put(parms+" and academicYearId="+futureAcademicYear.getId(), futureStudySubject);
							subject=null;
							futureStudySubject=null;
						}
					} catch (DataAccessException e) {
						e.printStackTrace();
						JRExceptionClient jre = new JRExceptionClient();jre.sendException(e);jre = null;
					}
				}
			}else{
				log.debug("Current year StudySubjects list not found.");
			}
			futureAcademicYear=null;
			currentStudySubjectsList=null;
			futureStudySubject = null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return studySubjects;
	}
	
	public void generateStaffEligibleSubjects(List<StaffElgibleSubjects> staffEligibleSubjects,AcademicYear futureAcademicYear,StudySubject futureStudySubject,long masterAccId){
		
		if (log.isDebugEnabled()) {
			log.debug("Entering 'generateStaffEligibleSubjects' method");
		}
		
		try{
			StaffElgibleSubjects elgibleSub=null;
			Staff staff=null;
			for(StaffElgibleSubjects elgibleSubject:staffEligibleSubjects){
				if(!ObjectFunctions.isNullOrEmpty(elgibleSubject)){
					elgibleSub=adminManager.getStudySubjectTeacherByStudyClassAndCustId(futureAcademicYear.getId(), elgibleSubject.getStaffId().getId(), futureStudySubject.getId());
					if(ObjectFunctions.isNullOrEmpty(elgibleSub)){
						staff=elgibleSubject.getStaffId();
						if(staff.getStatus().equalsIgnoreCase(Constants.YES_STRING)){
							elgibleSub=new StaffElgibleSubjects();
							elgibleSub.setAcademicYear(futureAcademicYear);
							elgibleSub.setStaffId(staff);
							elgibleSub.setStudySubjectId(futureStudySubject);
							elgibleSub.setCreatedById(masterAccId);
							elgibleSub.setCreatedDate(new Date());
							elgibleSub.setLastAccessDate(new Date());
							adminManager.saveOrUpdateObject(elgibleSub);
						}else{
							log.debug(staff.getFullPersonName()+" is in inactive state.So staff can't add for future year records.");
						}
					}
					elgibleSub=null;
					staff=null;
					elgibleSubject=null;
				}
			}
			futureStudySubject=null;
			staffEligibleSubjects=null;
			futureAcademicYear=null;
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			// TODO: handle exception
		}
	}
	
	public Map generateStudyClassesAndClassSubjects(AcademicYear futureAcademicYear,Map<String,StudyClass> studyClasses,Map<String,ClassName> classNames,Map<String,StudySubject> studySubjects,long masterAccId,AcademicYear presentAcademicYear){
			List<StudyClass> currentStudClassList=null;	
			List<StudyClass> futureStudyClassList = null;
			ClassName currentClassName=null;
			ClassName futureClassName=null;
			StudyClass study=null;
			String params=null;
			Set<StudySubject> classSubjects=null;
			List<Syllabus> classSyllabus=null;
			List<Syllabus> futureSyllabusList=null;
			StudySubject subject=null;
			String parms;
			HashSet<StudySubject> studySubjectSet=null;
			Syllabus futureSyllabus=null;
			currentStudClassList=adminManager.GetAllStudyClasses(getUserCustId(),presentAcademicYear.getId(),null);
			futureStudyClassList = adminManager.GetAllStudyClasses(getUserCustId(),futureAcademicYear.getId(),null);
			if(ObjectFunctions.isNotNullOrEmpty(currentStudClassList)){
				adminManager.removeSyllabusByAcademicYearAndCustId(futureAcademicYear.getCustId(),futureAcademicYear.getId());
				for(StudyClass currentStudyClass:currentStudClassList){
					if(!ObjectFunctions.isNullOrEmpty(currentStudyClass)){
						params="className='"+currentStudyClass.getClassName()+"' and section='"+currentStudyClass.getSection()+"' and custId ="+currentStudyClass.getCustId();
						studyClasses.put(params+" and academicYearId="+currentStudyClass.getAcademicYearId(), currentStudyClass);
						study=(StudyClass)adminManager.get(StudyClass.class,params+" and academicYearId="+futureAcademicYear.getId());
						if(ObjectFunctions.isNullOrEmpty(study)){
							currentClassName=currentStudyClass.getClassNameClassId();
							if(!ObjectFunctions.isNullOrEmpty(currentClassName)){
								if(!ObjectFunctions.isNullOrEmpty(classNames)){
									parms=" className ='"+currentClassName.getClassName()+"' and custId="+currentClassName.getCustId();
									futureClassName=classNames.get(parms+" and academicYearId="+futureAcademicYear.getId());
								}
								if(!ObjectFunctions.isNullOrEmpty(futureClassName)){
									study=new StudyClass();
									study.setClassName(currentStudyClass.getClassName());
									study.setClassNameClassId(futureClassName);
									study.setCustId(currentStudyClass.getCustId());
									study.setSectionCapacity(currentStudyClass.getSectionCapacity());
									study.setSection(currentStudyClass.getSection());
									study.setAcademicYear(futureAcademicYear);
									study.setCreatedById(masterAccId);
									study.setCreatedDate(new Date());
									study.setLastAccessDate(new Date());
									study.setMediumId(currentStudyClass.getMediumId());
									classSubjects=currentStudyClass.getSubjects();
									/*if(ObjectFunctions.isNotNullOrEmpty(classSubjects) && !ObjectFunctions.isNullOrEmpty(studySubjects)){
										studySubjectSet=new HashSet<StudySubject>();
										for(StudySubject sub:classSubjects){
											if(!ObjectFunctions.isNullOrEmpty(sub)){
												subject=studySubjects.get("name='"+sub.getName()+"' and custId="+sub.getCustId()+" and academicYearId="+futureAcademicYear.getId());
												if(!ObjectFunctions.isNullOrEmpty(subject)){
													studySubjectSet.add(subject);
													subject=null;
												}
											}*/
										if(ObjectFunctions.isNotNullOrEmpty(classSubjects)){
											study.setSubjects(classSubjects);
										}
									if(ObjectFunctions.isNotNullOrEmpty(classSyllabus) && !ObjectFunctions.isNullOrEmpty(studySubjects)){
										futureSyllabusList=new ArrayList<Syllabus>();
										for(Syllabus syllabus:classSyllabus){
											if(!ObjectFunctions.isNullOrEmpty(syllabus)){
												subject=(StudySubject)adminManager.get(StudySubject.class, Long.valueOf(syllabus.getSubjectId()));
												if(!ObjectFunctions.isNullOrEmpty(subject)){
													subject=studySubjects.get("name='"+subject.getName()+"' and custId="+subject.getCustId()+" and academicYearId="+futureAcademicYear.getId());
													if(!ObjectFunctions.isNullOrEmpty(subject)){
														futureSyllabus=new Syllabus();
														futureSyllabus.setAcademicYear(futureAcademicYear);
														futureSyllabus.setCreatedById(masterAccId);
														futureSyllabus.setCreatedDate(new Date());
														futureSyllabus.setSubjectId(subject.getId());
														futureSyllabusList.add(futureSyllabus);
														futureSyllabus=null;
													}
												}
											}
										}
									}
									//study=(StudyClass)adminManager.saveOrUpdateObject(study);
									studySubjectSet=null;
									futureClassName=null;
								}else{
									log.debug("Future ClassName obj not found in generateStudyClassesAndClassSubjects() method.");
								}
							}else{
								log.debug("Current ClassName obj not found in generateStudyClassesAndClassSubjects() method.");
							}
							currentStudyClass=null;
						}else if(study.getSectionCapacity()!=currentStudyClass.getSectionCapacity()){
							study.setSectionCapacity(currentStudyClass.getSectionCapacity());
							study.setFilledSeats(currentStudyClass.getFilledSeats());
						}
						if(!ObjectFunctions.isNullOrEmpty(study))
							studyClasses.put(params+" and academicYearId="+futureAcademicYear.getId(), study);
						study=null;
					}
				}
			}else
				log.debug("Current year StudyClass list not found.");
			currentStudClassList=null;
			classNames=null;
			studySubjects=null;
		return studyClasses;
	} 
	
	public void generateClassTeacherRecords(List<Object[]> staffList,AcademicYear futureAcademicYear,Map<String,StudyClass> studyClasses,Map<String,StudySubject> studySubjects,long masterAccId,AcademicYear presentAcademicYear){
			ClassTeacher classTeacher=null;
			StudyClass futureStudyClass=null;
			StudySubject futureStudySubject=null;
			List<ClassTeacher> classTeacherList=null;
			String params=null;
			for(Object[] teacherObj:staffList){
				classTeacherList=adminManager.getClassTeachersByAcademicIdAndStaffIdandCustId(Long.valueOf(teacherObj[0].toString()),getUserCustId(),presentAcademicYear.getId());
				if(!ObjectFunctions.isNullOrEmpty(studyClasses) && !ObjectFunctions.isNullOrEmpty(studySubjects)  && ObjectFunctions.isNotNullOrEmpty(classTeacherList)){
					for(ClassTeacher studyClassTeacher:classTeacherList){
						if(!ObjectFunctions.isNullOrEmpty(studyClassTeacher)){
							params="className='"+studyClassTeacher.getStudyClassName()+"' and section='"+studyClassTeacher.getStudyClassSection()+"' and custId ="+studyClassTeacher.getCustId();
							futureStudyClass=studyClasses.get(params+" and academicYearId="+futureAcademicYear.getId());
							futureStudySubject=studySubjects.get("name='"+studyClassTeacher.getSubjectName()+"' and custId="+studyClassTeacher.getCustId()+" and academicYearId="+futureAcademicYear.getId());
							if(!ObjectFunctions.isNullOrEmpty(futureStudyClass) && !ObjectFunctions.isNullOrEmpty(futureStudySubject)){
								 classTeacher=adminManager.getStudySubjectTeacherByStudyClassAndCustId(studyClassTeacher.getCustId(),futureAcademicYear.getId(),studyClassTeacher.getStaff().getId(),futureStudyClass.getId(),futureStudySubject.getId());
								 if(ObjectFunctions.isNullOrEmpty(classTeacher)){
									 	classTeacher=new ClassTeacher();
					                    classTeacher.copyFrom(studyClassTeacher);
					                    classTeacher.setCreatedById(masterAccId);
					                    classTeacher.setStudyClass(futureStudyClass);
					                    classTeacher.setStudySubject(futureStudySubject);
					                    classTeacher.setAcademicYear(futureAcademicYear);
					                    try {
					                    	adminManager.saveOrUpdateObject(classTeacher);
										} catch (Exception e) {
											e.printStackTrace();
											continue;
										}
					                    classTeacher=null;
								 }
							 }else{
								 log.debug("Future Academic Year Class and Subject not found.");
							 }
							
						}
						studyClassTeacher=null;
						futureStudyClass=null;
						futureStudySubject=null;
					}
				}else{
					 log.debug("Future Academic Year Class and Subjects list  not found.");
				}
				teacherObj=null;
		}
			staffList=null;
			studySubjects=null;
	}
	public void generateExamTypes(List<ExamTypes> currentYearExamTypes,AcademicYear futureAcademicYear,Map<String,StudyClass> studyClassNames,long masterAccId){
			ExamTypes type=null;
			String parms=null;
			Set<StudyClass> studyClassSet=null;
			String pars=null;
			StudyClass futureClassName=null;
			for(ExamTypes examType:currentYearExamTypes){
				if(!ObjectFunctions.isNullOrEmpty(examType)){
					parms="custId="+examType.getCustId()+" and examType='"+examType.getExamType()+"' and academicYearId="+futureAcademicYear.getId();
					type=(ExamTypes)adminManager.get(ExamTypes.class,parms);
					if(ObjectFunctions.isNullOrEmpty(type)){
						type=new ExamTypes();
						type.copyFrom(examType);
						Set<StudyClass> studyClasses=examType.getStudyClasses();
						if(ObjectFunctions.isNotNullOrEmpty(studyClasses) && !ObjectFunctions.isNullOrEmpty(studyClassNames)){
							studyClassSet=new HashSet<StudyClass>();
							for(StudyClass studyClassName:studyClasses){
								pars=" className ='"+studyClassName.getClassName()+"' and custId="+studyClassName.getCustId();
								futureClassName=studyClassNames.get(pars+" and academicYearId="+futureAcademicYear.getId());
								if(!ObjectFunctions.isNullOrEmpty(futureClassName)){
									studyClassSet.add(futureClassName);
								}
								futureClassName=null;
								className=null;
							}
							if(!ObjectFunctions.isNullOrEmpty(studyClassSet)){
								type.setStudyClasses(studyClassSet);
							}
						}
						type.setAcademicYear(futureAcademicYear);
						type.setCreatedById(masterAccId);
						type.setCreatedDate(new Date());
						type.setLastAccessDate(new Date());
						adminManager.saveOrUpdateObject(type);
						type=null;
					}
				}									
			}
			studyClassNames=null;
	}
	
	@Actions({ @Action(value = "ajaxEditStudyClassSubjects", results = { @Result(location = "academic/ajaxEditStudyClassSubjects.jsp", name = "success") }) })
	public String ajaxEditStudyClassSubjects() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditStudyClassSubjects' method");
		}
		try {
			String studySubjectId = getParamValue("studySubjectId");
			if (!StringFunctions.isNullOrEmpty(studySubjectId)) {
				setStudySubject((StudySubject) adminManager.get(StudySubject.class, Long.valueOf(studySubjectId)));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	@Actions( { @Action(value = "ajaxDoManageSkillType", results = { @Result(location = "kBank/ajaxDoGetSkillType.jsp", name = "success") }) })
	public String ajaxDoManageSkillType() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoManageSkillType' method");
		}
		try {
			if (getUserAcademicYearId()>0 && !ObjectFunctions.isNullOrEmpty(getUser())) {
				setObjectList(adminManager.getAllCommonTypesByCustIdandType(getUserCustId(),"SkillType"));
			}
		} catch (Exception ex) {
			log.error(" entering Catch Block of ajaxDoManageSkillType():"+ ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return "success";
	}
	@Actions( { @Action(value = "ajaxDoAddSkillType", results = { @Result(location = "kBank/ajaxViewSkillType.jsp", name = "success") }) })
	public String ajaxDoAddSkillType() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddSkillType' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getUser())){
				String skillTypeName=getParamValue("skillTypeName");
				CommonType commonType = adminManager.getSkillTypeNameByCustIdAndAcademicYear(getUserCustId(),skillTypeName);
				if(ObjectFunctions.isNullOrEmpty(commonType)){
				if(!StringFunctions.isNullOrEmpty(skillTypeName) && !ObjectFunctions.isNullOrEmpty(getCurrentAcademicYear())){
					CommonType commonType1 = new CommonType();
					commonType1.setSkillTypeName(skillTypeName);
					commonType1.setType("SkillType");
					commonType1.setCustId(getUserCustId());
					adminManager.save(commonType1);
					commonType1 = null;
					super.addActionMessage("Skill type added successfully.");
				}
				}
				academicYear = null;
				skillTypeName = null;
			}
			ajaxDoManageSkillType();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxEditSkillTypeList", results = { @Result(location = "kBank/ajaxEditSkillType.jsp", name = "success") }) })
	public String ajaxEditSkillTypeList() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditSkillTypeList' method");
		}
		try {
			String commonTypeId = getParamValue("commonTypeId");
			if (!StringFunctions.isNullOrEmpty(commonTypeId)) {
				setCommonType((CommonType) adminManager.get(CommonType.class, Long.valueOf(commonTypeId)));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxDoUpdateSkillType", results = { @Result(location = "kBank/ajaxViewSkillType.jsp", name = "success") }) })
	public String ajaxDoUpdateSkillType() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoUpdateSkillType' method");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getParamValue("commonTypeId"))) {
				CommonType commonType = (CommonType) adminManager.get(CommonType.class, Long.valueOf(getParamValue("commonTypeId")));
				if (!ObjectFunctions.isNullOrEmpty(commonType)) {
					commonType.setSkillTypeName(getCommonType().getSkillTypeName());
					adminManager.save(commonType);
					super.addActionMessage("Skill type updated successfully.");
				}
				commonType=null;
			}
			ajaxDoManageSkillType();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "schoolSettings", results = { @Result(location = "schoolSettingsHome.jsp", name = "success") }),
		@Action(value = "ajaxViewSchoolSettings", results = { @Result(location = "schoolSettingsHome.jsp", name = "success") })
		})
	public String schoolSettings() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'schoolSettings' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			if(getUserAcademicYearId() > 0)
				setSmsCnt(staffManager.getTotalSmsCount(getUserCustId(),getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxDoSchoolInformation", results = { @Result(location = "ajaxSchoolInformation.jsp", name = "success") }),
		@Action(value = "ajaxDoSchoolFromEmailInfo", results = { @Result(location = "ajaxCustomerFromEmailInfo.jsp", name = "success") }),
		@Action(value = "enableEmailAndMobileServices", results = { @Result(location = "ajaxSchoolInformation.jsp", name = "success") }) })
	public String ajaxDoSchoolInformation() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoSchoolInformation' method");
		}
		try {
			Customer customer =getCustomerByCustId();
			if(ObjectFunctions.isNullOrEmpty(customer.getPreferences())){
				CustomerPreferences preference = new CustomerPreferences();
				preference.setParentMobileNoVisibleToTeacher("Y");
				preference.setFeeBalanceAmountInPaymnetSMS("Y");
				preference.setApprovalRequiredForClassTeacherCreatedSMS("N");
				preference.setFeePaymentNotificationToManagement("N");
				preference.setVisibleFeeInfoToParent("Y");
				customer.setPreferences(preference);
			}else{
				if(!ObjectFunctions.isNullOrEmpty(customer.getPreferences().getRoles())){
					List roleList = new ArrayList();
					 for (Role role : customer.getPreferences().getRoles()) {
						 roleList.add(role.getId());
					    }
					 setSelectedRolesList(roleList);
				}
			}
			setCustomer(customer);
			setRolesList(adminManager.getAll(Role.class,"id in (1,12,36,40,42,47,48,49,50,51,52)"));
			setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
			setCountryList((List<Country>)SMSLookUpDataCache.lookUpDataMap.get(Constants.COUNTRY_LIST));
			setTempBoolean(adminManager.committedFeeStatusEnableOrDisable(getUserCustId(),getUserAcademicYearId()));
			Set<SyllabusType> syllabusTypeSet = getCustomer().getSyllabusType();
			for(SyllabusType syllabusType : syllabusTypeSet)
			{
				if (!ObjectFunctions.isNullOrEmpty(syllabusType)) {
					getObjectList().add(syllabusType.getId());
				}
				syllabusType = null;
			}
			setSyllabusList(adminManager.getAll(SyllabusType.class)); 
			if(getCustomer().getAddress().getCountryId()!=99){
				setSyllabusList(adminManager.getAll(SyllabusType.class)); 
			}else
				setSyllabusList(adminManager.getAll(SyllabusType.class,"id in (1,2,3)")); 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions({ @Action(value = "ajaxDoPackageDetails", results = { @Result(location = "ajaxManagePackageDetails.jsp", name = "success") }) })
	public String ajaxDoPackageDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoPackageDetails' method");
		}
		try {
			setCustomer(getCustomerByCustId());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions({ @Action(value = "ajaxDoUpdatePackageDetails", results = { @Result(location = "ajaxUpdatePackageDetails.jsp", name = "success") }) })
	public String ajaxDoUpdatePackageDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoUpdatePackageDetails' method");
		}
		try {
			setCustomer(getCustomerByCustId());
			if(!ObjectFunctions.isNullOrEmpty(getCustomer())){
				if(!ObjectFunctions.isNullOrEmpty(getCustomer().getPackageDetails())){
					setPackageDetailsList(adminManager.getAllFuturePackagesBycurrentPackage(getCustomer().getPackageDetails().getStudentsRange()));
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxUpdatePackageDetails", results = { @Result(location = "ajaxSchoolPackageDetails.jsp", name = "success") }) })
	public String ajaxUpdatePackageDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUpdatePackageDetails' method");
		}
		try {
			Customer customer = getCustomerByCustId();
			String packageId=getParamValue("packageDetails_");
			if(!StringFunctions.isNullOrEmpty(packageId)){
				PackageDetails pacakage=(PackageDetails)adminManager.get(PackageDetails.class,Long.valueOf(packageId));
				if(!ObjectFunctions.isNullOrEmpty(pacakage)){
					customer.setPackageDetails(pacakage);
				}
				adminManager.save(customer);
				customer=null;
			}
			ajaxDoPackageDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	  /********************************************************************
	   * Date              Name               Description
	   * ============      =======		    ==================
	   * July 17, 2013     Seshu		    Storing syllabus type code change
	   * May 29, 2014	   Seshu			Code Refactor
	  /********************************************************************/
	@Actions({ @Action(value = "ajaxUpdateSchoolDetails", results = { @Result(location = "ajaxSchoolInformation.jsp", name = "success") }) })
	public String ajaxUpdateSchoolDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUpdateSchoolDetails' method");
		}
		try {
			String accountModuleUsing=null;
			if(!ObjectFunctions.isNullOrEmpty(getCustomer())){
				Address address=null;
				WashRoom washRoom = null;
		    	Customer customer = getCustomerByCustId();
		    	accountModuleUsing=customer.getAccountModuleUsing();
		    	//customer.setCustomerStatus("A");
		    	customer.setStatus(true);
		    	customer.setSubscriptionType("");
		    	customer.setLastUpdatedById(getUser().getId());
		    	customer.setLastAccessDate(new Date());
				customer.setLastUpdatedDate(new Date());
		    	customer.copyFrom(getCustomer());
				if (!ObjectFunctions.isNullOrEmpty(customer.getAddress())) {
        		    address = customer.getAddress();
        		    address.setLastUpdatedById(getUser().getId());
        		    address.setLastUpdatedDate(new Date());
                } else {
        		    address = new Address();
        		    address.setCreatedById(getUser().getId());
        		    address.setCreatedDate(new Date());
                }
        		if (!ObjectFunctions.isNullOrEmpty(address)) {
        		    address.setCity(getCustomer().getAddress().getCity());
        		    address.setAddressLine1(getCustomer().getAddress().getAddressLine1());
        		    address.setStreetName(getCustomer().getAddress().getStreetName());
        		    address.setPostalCode(getCustomer().getAddress().getPostalCode());
        		    address.setCountry(getCustomer().getAddress().getCountry());
        		    if(!ObjectFunctions.isNullOrEmpty(getCustomer().getAddress().getCountry())){
        		    	Country countryId = (Country) adminManager.get(Country.class,"countryCode='"+getCustomer().getAddress().getCountry()+"'");
        		    	address.setCountryId(countryId.getId());
        		    }
        		    address.setState(getCustomer().getAddress().getState());
        		    address.setLastAccessDate(new Date());
        		    customer.setAddress(address);
        		}
        		customer.setSyllabusType(null);
				if (!ObjectFunctions.isNullOrEmpty(getObjectList())) 
				{
					for (Object subjectIdObj : getObjectList()) {
						try {
							String syllabusTypeId = (String) subjectIdObj;
							SyllabusType syllabusType = (SyllabusType) adminManager.get(SyllabusType.class, Long.parseLong(syllabusTypeId));
							customer.addSyllabusTypeInfo(syllabusType);
							
							syllabusType = null;
						} catch (Exception ex) {
							log.debug(ex.getMessage());
							ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
						}
					}
				}
				
				
				List<SyllabusType> syllabusTypeList =  new ArrayList<SyllabusType>();
				if(customer.getAddress().getCountryId()!=99){
					syllabusTypeList = adminManager.getAll(SyllabusType.class);
				}else
					syllabusTypeList = adminManager.getAll(SyllabusType.class,"id in (1,2,3)");
				
				
				if (!ObjectFunctions.isNullOrEmpty(syllabusTypeList)) 
				{
					for(SyllabusType syllabusType : syllabusTypeList)
					{
						SyllabusTypeSchoolCode syllabusTypeSchoolCodePrimary = (SyllabusTypeSchoolCode) adminManager.get(SyllabusTypeSchoolCode.class,"custId="+getUserCustId()+" and syllabusTypeId="+syllabusType.getId() + " and type='P'");
						
						String primarySchoolcode = getParamValue("schoolCodePrimary"+syllabusType.getId());
						if(!StringFunctions.isNullOrEmpty(primarySchoolcode))
						{
							
							if(ObjectFunctions.isNullOrEmpty(syllabusTypeSchoolCodePrimary))
							{
								syllabusTypeSchoolCodePrimary = new SyllabusTypeSchoolCode();
								syllabusTypeSchoolCodePrimary.setCustId(getUserCustId());
								syllabusTypeSchoolCodePrimary.setCreatedById(getUser().getId());
								syllabusTypeSchoolCodePrimary.setType("P");
							}
							
							syllabusTypeSchoolCodePrimary.setSchoolCode(primarySchoolcode);
							
							syllabusTypeSchoolCodePrimary.setSyllabusType(syllabusType);
							adminManager.merge(syllabusTypeSchoolCodePrimary);
							syllabusTypeSchoolCodePrimary = null;
						}
						else
						{
							if(!ObjectFunctions.isNullOrEmpty(syllabusTypeSchoolCodePrimary))
							{
								adminManager.updateQuery("update studyClass set syllabusTypeSchoolCodeId=null where syllabusTypeSchoolCodeId="+syllabusTypeSchoolCodePrimary.getId());
								adminManager.remove("syllabusTypeSchoolCode", "id="+syllabusTypeSchoolCodePrimary.getId());
							}
						}
						
						SyllabusTypeSchoolCode syllabusTypeSchoolCodeHigher = (SyllabusTypeSchoolCode) adminManager.get(SyllabusTypeSchoolCode.class,"custId="+getUserCustId()+" and syllabusTypeId="+syllabusType.getId() + " and type='H'");
						String higherSchoolcode = getParamValue("schoolCodeHigher"+syllabusType.getId());
						if(!StringFunctions.isNullOrEmpty(higherSchoolcode))
						{
							if(ObjectFunctions.isNullOrEmpty(syllabusTypeSchoolCodeHigher))
							{
								syllabusTypeSchoolCodeHigher = new SyllabusTypeSchoolCode();
								syllabusTypeSchoolCodeHigher.setCustId(getUserCustId());
								syllabusTypeSchoolCodeHigher.setCreatedById(getUser().getId());
								syllabusTypeSchoolCodeHigher.setType("H");
							}
							
							syllabusTypeSchoolCodeHigher.setSchoolCode(higherSchoolcode);
							
							syllabusTypeSchoolCodeHigher.setSyllabusType(syllabusType);
							adminManager.merge(syllabusTypeSchoolCodeHigher);
							syllabusTypeSchoolCodeHigher = null;
						}
						else
						{
							if(!ObjectFunctions.isNullOrEmpty(syllabusTypeSchoolCodeHigher))
							{
								adminManager.updateQuery("update studyClass set syllabusTypeSchoolCodeId=null where syllabusTypeSchoolCodeId="+syllabusTypeSchoolCodeHigher.getId());
								adminManager.remove("syllabusTypeSchoolCode", "id="+syllabusTypeSchoolCodeHigher.getId());
								//adminManager.remove(SyllabusTypeSchoolCode.class, syllabusTypeSchoolCodeHigher.getId());
							}
						}
					}
				}
				
				syllabusTypeList = null;
				if (!ObjectFunctions.isNullOrEmpty(customer.getWashRoom())) {
					washRoom = customer.getWashRoom();
					washRoom.setLastUpdatedById(getUser().getId());
					washRoom.setLastUpdatedDate(new Date());
                } else {
                	washRoom = new WashRoom();
                	washRoom.setCreatedById(getUser().getId());
                	washRoom.setCreatedDate(new Date());
                }
				washRoom.setNoofWashRoomsForBoys(getCustomer().getWashRoom().getNoofWashRoomsForBoys());
				washRoom.setNoofWashRoomsForGirls(getCustomer().getWashRoom().getNoofWashRoomsForGirls());
				washRoom.setNoofWashRoomsForHeadMasters(getCustomer().getWashRoom().getNoofWashRoomsForHeadMasters());
				washRoom.setNoofWashRoomsForTeachers(getCustomer().getWashRoom().getNoofWashRoomsForTeachers());
				customer.setWashRoom(washRoom);
				
				customer.setAllowPastDatesForPayments(getCustomer().getAllowPastDatesForPayments());
				if("N".equalsIgnoreCase(getCustomer().getAllowPastDatesForPayments())){
					customer.setAllowedPastDatesForPayments(0L);
				}else{
					customer.setAllowedPastDatesForPayments(getCustomer().getAllowedPastDatesForPayments());
				}
				customer.setAllowDiscountOptOnOtherRoles(getCustomer().getAllowDiscountOptOnOtherRoles());
				//Updating the preferences
				CustomerPreferences  preferences =customer.getPreferences();
				if(!ObjectFunctions.isNullOrEmpty(preferences)){
					preferences.setLastUpdatedById(getUser().getId());
					preferences.setLastUpdatedDate(new Date());
				}else{
					preferences = new CustomerPreferences();
					preferences.setCreatedById(getUser().getId());
					preferences.setCreatedDate(new Date());
				}
				preferences.setParentMobileNoVisibleToTeacher(getCustomer().getPreferences().getParentMobileNoVisibleToTeacher());
				preferences.setFeeBalanceAmountInPaymnetSMS(getCustomer().getPreferences().getFeeBalanceAmountInPaymnetSMS());
				preferences.setVisibleFeeInfoToParent(getCustomer().getPreferences().getVisibleFeeInfoToParent());
				preferences.setFeePaymentNotificationToManagement(getCustomer().getPreferences().getFeePaymentNotificationToManagement());
				preferences.setApprovalRequiredForClassTeacherCreatedSMS(getCustomer().getPreferences().getApprovalRequiredForClassTeacherCreatedSMS()); 
				preferences.setVisibleTermWiseBalanceAmount(getCustomer().getPreferences().getVisibleTermWiseBalanceAmount());
				preferences.setFeeRefund(getCustomer().getPreferences().isFeeRefund());
					if("Y".equalsIgnoreCase(getCustomer().getPreferences().getFeePaymentNotificationToManagement())){
						
						//remove existing all and insert newly
						preferences.removeAllRoles(preferences.getRoles());
						List selectedRoleList = getSelectedRolesList();
						String ids = "";
						for(int i= 0;i <selectedRoleList.size();i++){
							if(i==0)
								ids = selectedRoleList.get(i).toString();
							else
								ids =  ids+","+selectedRoleList.get(i);
							
						}
				
					List<Role> rolesList =	adminManager.getAll(Role.class, "id in ("+ids+")");
					
					for(Role role:rolesList){
						preferences.addRole(role);
					}
				}else{
					preferences.removeAllRoles(preferences.getRoles());
				}
				
				customer.setPreferences(preferences);
				
				customer = (Customer)userManager.saveOrUpdateObject(customer);
				getSession().setAttribute("customer", customer);
				customer=null;
				setObjectList(null);
			}
			ajaxDoSchoolInformation();
			getSession().setAttribute("custImage",getCustomer().getCustomerLogo());
			getSession().setAttribute("schoolAddress",getCustomer().getOrganizationFullAddress());
			super.addActionMessage("School details updated successfully.");
		} catch (Exception ex) {
			super.addActionError("School details are not updated.");
			ajaxDoSchoolInformation();
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxChangeEmailServiceStatus", results = { @Result(type = "json", name = "success", params = {
						"includeProperties", "status" }) }) })
	public String ajaxChangeEmailService() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxChangeEmailService' method");
		}
		try {
			Customer customer = getCustomerByCustId();
			if(!ObjectFunctions.isNullOrEmpty(customer)){
				if(customer.isCheckEmailService()){
					customer.setCheckEmailService(false);
					customer.setCheckAttendanceEmailService(false);
				}else
					customer.setCheckEmailService(true);
				    customer=userManager.saveCustomer(customer);
			}
			setStatus(String.valueOf(customer.isCheckEmailService()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxChangeMobileServiceStatus", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "status" }) }) })
	public String ajaxChangeMobileServiceStatus() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxChangeMobileServiceStatus' method");
			}
			try {
				Customer customer = getCustomerByCustId();
				if(!ObjectFunctions.isNullOrEmpty(customer)){
					if(customer.isCheckMobileService()){
						customer.setCheckMobileService(false);
						customer.setCheckMobilePaymentService(false);
					}else
						customer.setCheckMobileService(true);
					    customer=userManager.saveCustomer(customer);
					    
					    setStatus(String.valueOf(customer.isCheckMobileService()));	    
				}
				
	    	} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    	 }
			return SUCCESS;
		}
	@Actions({ @Action(value = "ajaxCastSettingsHome", results = { @Result(location = "admission/castSettings/ajaxCastInformationDetails.jsp", name = "success") }) })
	public String ajaxCastSettingsHome() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCastSettingsHome' method");
			}
			try {
				setCastSettingList(adminManager.getAllByCustId("CastSettings", getUserCustId(),0));
	    	} catch (Exception ex) {
	    		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	    	return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxDoAddCastDetails", results = { @Result(location = "admission/castSettings/ajaxAddCastDetails.jsp", name = "success") }) })
	public String ajaxDoAddCastDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddCastDetails' method");
			}
			try {
				long castId=getQuizId();
				if( castId > 0){ 
					setCastSettings((CastSettings)adminManager.get(CastSettings.class,"custId="+getUserCustId()+" and id="+castId));
					//setSubCastSettings((SubCastSettings)adminManager.get(SubCastSettings.class,"castId="+getCastSettings().getId()+" and custId="+getUserCustId()));
				}
	    	} catch (Exception ex) {
	    		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	    	return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxAddCastDetails", results = { @Result(location = "admission/castSettings/ajaxCastInformationDetails.jsp", name = "success") }) })
	public String ajaxAddCastDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddCastDetails' method");
		}
		try {
			CastSettings casteSettings = null;
			CastSettings casteName = null;
			
			String castName = getCastSettings().getCastName().trim().replace("'", "''");
			
			if(getCastSettings().getId()!= 0){
				if (StringFunctions.isNotNullOrEmpty(getCastSettings().getCastName())) {
					casteSettings = (CastSettings)adminManager.get(CastSettings.class,"castName='"+castName+"' and custId="+getUserCustId()+" and id !="+getCastSettings().getId());
				}
				if(!ObjectFunctions.isNullOrEmpty(casteSettings)){
					super.addActionError(getCastSettings().getCastName().toUpperCase().trim()+" community name already exist. Please provide another community name .");
				}else{
					casteName = (CastSettings) adminManager.get(CastSettings.class, Long.valueOf(getCastSettings().getId()));
					if (!ObjectFunctions.isNullOrEmpty(casteName) && ObjectFunctions.isNullOrEmpty(casteSettings)) {
						casteName.setCastName(getCastSettings().getCastName().toUpperCase().trim());
						casteName.setLastUpdatedById(getUser().getId());
						casteName.setLastAccessDate(new Date());
						casteName.setLastUpdatedDate(new Date());
						casteName.setCustId(getUserCustId());
						adminManager.save(casteName);
						super.addActionMessage(getCastSettings().getCastName().toUpperCase().trim()+" community updated successfully.");
					}
				}
			} 
			else{
				if (StringFunctions.isNotNullOrEmpty(getCastSettings().getCastName().trim())) {
					casteSettings = (CastSettings)adminManager.get(CastSettings.class,"castName='"+castName+"' and custId="+getUserCustId());
				}
				if(!ObjectFunctions.isNullOrEmpty(casteSettings)){
					super.addActionError(getCastSettings().getCastName().toUpperCase().trim()+" community name already exist. Please provide another community name.");
				} 
				else{
					CastSettings newCastSettings = new CastSettings();
					newCastSettings.setCastName(getCastSettings().getCastName().toUpperCase().trim());
					newCastSettings.setCreatedById(getUser().getId());
					newCastSettings.setLastAccessDate(new Date());
					newCastSettings.setLastUpdatedDate(new Date());
					newCastSettings.setCustId(getUserCustId());
					adminManager.save(newCastSettings);
					super.addActionMessage(getCastSettings().getCastName().toUpperCase().trim()+" community created successfully.");
				}
			}
			casteName=null;
			casteSettings=null;
			ajaxCastSettingsHome();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxGetCastDetailsByState", results = { @Result(location = "admission/castSettings/ajaxCastListByState.jsp", name = "success") }), 
		@Action(value = "ajaxGetStudentCastDetailsByState", results = { @Result(location = "admission/castSettings/ajaxStudentCastByState.jsp", name = "success") }) })
	public String ajaxGetCastDetailsByState() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddCastDetails' method");
			}
			try {
				List castList= adminManager.getAllByCustId("CastSettings", getUserCustId(),0);
				CastSettings castSetting = null;
				 if(!ObjectFunctions.isNullOrEmpty(castList)){
					 setCastSettingList(castList);
					 castSetting = new CastSettings();
					 castSetting.setCastName("General");
					 getCastSettingList().add(castSetting);
				 }
				 else{
					 castSetting = new CastSettings();
					 castSetting.setCastName("General");
					 getCastSettingList().add(castSetting);
				 }
				 castSetting=null;
	    	} catch (Exception ex) {
	    		ex.printStackTrace();//RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	    	return SUCCESS;
	}
	 
	@Actions( {
	    		@Action(value = "ajaxViewTicketList", results = { @Result(location = "academic/supportTicketHome.jsp", name = "success") }),
	    		@Action(value = "ajaxCancelTicket", results = { @Result(location = "academic/ajaxViewSupportTicketList.jsp", name = "success") })

	    	})
	    	public String ajaxViewTicketList() throws URTUniversalException {
	    	if (log.isDebugEnabled()) {
	    		log.debug("Entering 'ajaxViewTicketList' method");
	    	}
	    	try {
	    		List supportTicketList= adminManager.getAllByCustId("SupportTicket",getUserCustId(),0);
	    		if (!ObjectFunctions.isNullOrEmpty(supportTicketList)) {
	    			setSupportTicketMessagesList(supportTicketList);
	    			Collections.sort(getSupportTicketMessagesList());
	    		}
	    		setSupportTicketMessagesList(adminManager.getAllByCustId("SupportTicket",getUserCustId(),0));
	    	} catch (Exception ex) {
	    		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    	}
	    	return SUCCESS;

	    }
	    	@Actions( {
	    		@Action(value = "ajaxDoPostTicket", results = { @Result(location = "academic/newPostTicket.jsp", name = "success") })})
	    		public String ajaxDoPostTicket() throws URTUniversalException {

	    	if (log.isDebugEnabled()) {
	    		log.debug("Entering 'ajaxDoPostTicket' method");
	    	}
	    	try {
	    		setObjectList(adminManager.getAllByCustId("CommonType",getUserCustId(),0));
	    		
	    	} catch (Exception ex) {
	    		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    	}

	    		return SUCCESS;
	    	}
	    	
	    	@Actions( { @Action(value = "ajaxAddSupportTicket", results = { @Result(location = "academic/ajaxViewSupportTicketList.jsp", name = "success" ) }) })
	        public String ajaxAddSupportTicket() throws URTUniversalException {
	        if (log.isDebugEnabled()) {
	            log.debug("Entering 'ajaxAddSupportTicket' method");
	        }
	        try
	        {
	        	if (!ObjectFunctions.isNullOrEmpty(getSupportTicket()) && !ObjectFunctions.isNullOrEmpty(getUserCustId())) {
	        		if(getUploadFileName()!= null){
	        			Attachment attachment;
	        			try {
	        				attachment =uploadTicketResources(getAttachment().getFileName());
	        				if(!ObjectFunctions.isNullOrEmpty(attachment)) {
	        					getSupportTicket().setAttachment(attachment);
	        	             }
	        				setObjectList(adminManager.getAllByCustId("CommonType",getUserCustId(),0));
	        			} 
	        			
	        			catch (Throwable e) {
	        				e.printStackTrace();//RayGunException raygex = new RayGunException();raygex.sendRayGunException(e);raygex=null;
	        			}
	        		}
	        		getSupportTicket().setPriority(getSupportTicket().getPriority());
	        		getSupportTicket().setCustId(getUserCustId());
	        		adminManager.save(getSupportTicket());
	    			super.addActionMessage("Support ticket posted Successfully.");
	    			
	        	}
	        	setSupportTicketMessagesList(adminManager.getAllByCustId("SupportTicket",getUserCustId(),0));
	        	
	        }
	        catch(Exception ex) {
	            ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	            JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	        }
	        return SUCCESS;
	    }
	    	public Attachment uploadTicketResources(String bookName) throws Throwable {
	    	    if (log.isDebugEnabled()) {
	    	        log.debug("Entering 'uploadFiles' method");
	    	    }
	    	    // this line is here for when the input page is upload-utf8.jsp,
	    	    // it sets the correct character encoding for the response
	    	    Attachment resource = new Attachment();
	    	    try {
	    	        MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) ServletActionContext.getRequest();
	    	        Enumeration fileParaNames =multiWrapper.getFileParameterNames();
	    	   //     String type="";
	    	        while (fileParaNames.hasMoreElements()) {
	    	            String key = (String) fileParaNames.nextElement();
	    	            File[] fileObject = multiWrapper.getFiles(key);
	    	            if(fileObject[0] instanceof File) {
	    	               /*
	    	                 * The following logic is to determine the order of the file
	    	                 * upload from the html. Due to strange requirements, we have
	    	                 * single file upload - upload as name and mulitple files -
	    	                 * uploadList[] as a name So in order to handle all the
	    	                 * situations, check the length of the name before ??? the chars
	    	                 * Also this supports more than 10 file uploads from a single
	    	                 * html submit
	    	                 */
	    	                String[] localSysfileNames = multiWrapper.getFileNames(key);
	    	                StringBuffer srcFileWithDir = new StringBuffer();
	    	                StringBuffer userDir = new StringBuffer();
	    	                StringBuffer url = new StringBuffer();
	    	                url.append(getText(Constants.FILE_DOCS_DIR));
	    	                userDir.append(getSession().getServletContext().getRealPath(url.toString()));
	    	                userDir.append("/");
	    	                userDir.append(bookName);
	    	                srcFileWithDir.append(userDir.toString());
	    	                srcFileWithDir.append("/");
	    	                setUploadFileName(localSysfileNames[0].replaceAll(" ","_"));
	    	                setUploadFileName(StringFunctions.stripSymbols(getUploadFileName()));
	    	                srcFileWithDir.append(getUploadFileName());
	    	                File destDir = new File(srcFileWithDir.toString());
	    	                FileUtils.copyFile(fileObject[0], destDir);
	    	                url.append("/");
	    	                url.append(bookName);
	    	                url.append("/");
	    	                resource.setFilePath(url.toString() + getUploadFileName());
	    	                resource.setFileName(getUploadFileName());
	    	                //staffManager.save(resource);
	    	            }
	    	     }
	    	     log.debug("Successfully uploaded files for studies....");
	    	    } catch (FileNotFoundException ex) {
	    	    	JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    	        log.error("uploadFiles : " + ex.getMessage());
	    	        log.error(ex.getCause());
	    	    } catch (IOException ex) {
	    	        log.error("uploadFiles : " + ex.getMessage());
	    	        JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    	        log.error(ex.getCause());if("Y".equalsIgnoreCase(getUser().getIsSchoolTeacher()) || "ROLE_ADMIN".equalsIgnoreCase(getUser().getAdminOrDelegate())){
	    				getKnowledgeBank().setStatus("A");
	    			}else if("Y".equalsIgnoreCase(getUser().getIsSchoolStudent())){
	    				getKnowledgeBank().setStatus("I");
	    			}
	    	    } catch (Exception ex) {
	    	        log.error("uploadFiles : " + ex.getMessage());
	    	        JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	    	        log.error(ex.getCause());
	    	    }
	    	    return resource;
	    	}
	    	@Actions( { @Action(value = "ajaxDoEditStaffRoleDetails", results = { @Result(location = "staff/ajaxEditStaffRoleDetails.jsp", name = "success") }) })
	public String ajaxDoEditStaffRoleDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditStaffRoleDetails' method");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getSelectedId())) {
				setChkBoxSelectedIds(null);
				//setSelectedId(getParamValue("userId"));
				setObjectList(userManager.getAll(Role.class));
				User user=null;
					 user=(User)adminManager.get(User.class,Long.valueOf(getSelectedId()));
					if(!ObjectFunctions.isNullOrEmpty(user)){
						if(!ObjectFunctions.isNullOrEmpty(user.getRoles())){
							for (Role roles : user.getRoles()) {
								getChkBoxSelectedIds().add(String.valueOf(roles.getId()));
								roles = null;
							}
						}
					}
					user=null;
			}
			 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
		@Actions( { @Action(value = "ajaxViewSubjectDetails", results = { @Result(location = "academic/ajaxViewSubjectInformation.jsp", name = "success") }) })
		public String ajaxViewSubjectDetails() throws URTUniversalException {
	
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewSubjectDetails' method");
			}
			try {
				String academicYearId = null;
				String subjectId=getSubjectId();
				academicYearId=(String)getSession().getAttribute("newYear");
				if (!StringFunctions.isNullOrEmpty(subjectId) && !StringFunctions.isNullOrEmpty(academicYearId)) {
						setSubjectsList(adminManager.getAllStudyClassSubjects("subjectId="+subjectId+" and custId="+getUserCustId()+" and academicYearId="+academicYearId));
						
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoClassSubjectViewSyllabus", results = { @Result(location = "academic/ajaxViewClassSyllabus.jsp", name = "success") }) })
		public String ajaxDoClassSubjectViewSyllabus() throws URTUniversalException {
	
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoClassSubjectViewSyllabus' method");
			}
			try {
				setChkBoxSelectedIds(null);
				if(!StringFunctions.isNullOrEmpty(getClassId()) && !StringFunctions.isNullOrEmpty(getSubjectId())){
					setSyllabusList(adminManager.getSyllabusByClassIdAndSubjectIdAndCustId(Long.valueOf(getSubjectId()),getUserCustId(),Long.valueOf(getClassId())));
					if(!StringFunctions.isNullOrEmpty(getAnyId())){
							ExamSchedules schedule=(ExamSchedules)adminManager.get(ExamSchedules.class, Long.valueOf(getAnyId()));
							if(!ObjectFunctions.isNullOrEmpty(schedule)){
								schedule=null;
							}
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}

		@Actions( { @Action(value = "ajaxStaffClassesAndSubjects", results = { @Result(location = "staff/ajaxViewStaffClassesAndSubjects.jsp", name = "success") }) })
		public String ajaxStaffClassesAndSubjects() throws URTUniversalException {
	
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxStaffClassesAndSubjects' method");
			}
			try {
				setChkBoxSelectedIds(null);
				if(getTempId() != 0 && getUserAcademicYearId() > 0){
					if(Constants.SCHOOL_HOD.equalsIgnoreCase(getAnyId()) || Constants.SCHOOL_ADMIN_COORDINATOR.equalsIgnoreCase(getAnyId())){
						setStudyClassList(null);
						checkStudyClassHavingStudentsOrNot();
						List<Object[]> teacherstudyClassList = adminManager.getAll("select studyClassId,staffId from staffMultipleStudyClasses where staffId="+getTempId());
						for(Object[] teacher : teacherstudyClassList){
							getChkBoxClassSelectedIds().add(String.valueOf(teacher[0]));
						}
						setAnyId(getAnyId());
					}
					setStudySubjectListVo(adminManager.getStudySubjectVOsByCustIdAndAcademicYear(getUserCustId(),getUserAcademicYearId()));
					List<StaffElgibleSubjectsVO> staffElgibleSubjectVos=adminManager.getStaffElgibleSubjectVOsByAcademicYearId(getTempId(),getUserAcademicYearId());
					if (!ObjectFunctions.isNullOrEmpty(staffElgibleSubjectVos)) {
						StudySubject studySubject =null;
						for (StaffElgibleSubjectsVO staffElgibleSubjectsVO : staffElgibleSubjectVos) {
							studySubject =new StudySubject();
							if(!ObjectFunctions.isNullOrEmpty(staffElgibleSubjectsVO)){
								if(!ObjectFunctions.isNullOrEmpty(staffElgibleSubjectsVO.getStudySubjectIdVo())){
									getChkBoxSelectedIds().add(String.valueOf(staffElgibleSubjectsVO.getStudySubjectIdVo().getId()));
									studySubject = studySubject.copyFromVoToEntity(studySubject, staffElgibleSubjectsVO.getStudySubjectIdVo());
									if(!ObjectFunctions.isNullOrEmpty(studySubject)) {
										List classTeachersList = adminManager.getAll(ViewStaffSubjectsDetails.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and staffId="+getTempId()+" and studySubjectId="+staffElgibleSubjectsVO.getStudySubjectIdVo().getId());
										if(!ObjectFunctions.isNullOrEmpty(classTeachersList)) {
											log.debug("classTeachersList size ::"+ classTeachersList.size());
											studySubject.getSubjectClassList().addAll(classTeachersList);
										}
										getAlertsList().add(studySubject);
									}
									
								}
								studySubject=null;
								staffElgibleSubjectsVO = null;
							}
						}
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	@Actions( { @Action(value = "ajaxEditStaffEligibleSubjects", results = { @Result(location = "staff/ajaxViewStaffClassesAndSubjects.jsp", name = "success") })
		  })
	public String  ajaxEditStaffEligibleSubjects() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditStaffEligibleSubjects' method");
		}
		try {
			long academicYearId=0;
			if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYear"))) {
				academicYearId = Long.valueOf((String) getSession().getAttribute("academicYear"));
			}
			StudySubject studySubject=null;
			StaffElgibleSubjects eligibleSubjects = null;
			if(!ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds()) || getTempId() != 0 && academicYearId != 0){
				Staff staff=(Staff)adminManager.get(Staff.class, getTempId());
				AcademicYear  year=(AcademicYear) adminManager.get(AcademicYear.class, academicYearId);
				if("ROLE_HOD".equalsIgnoreCase(getAnyId()) || Constants.SCHOOL_ADMIN_COORDINATOR.equalsIgnoreCase(getAnyId())){
					List<StudyClass> studyClassList = null; 
					staffManager.remove("staffMultipleStudyClasses", "staffId="+getTempId());
					StringBuffer sb = new StringBuffer("(");
					if(!ObjectFunctions.isNullOrEmpty(getChkBoxClassSelectedIds())){
						for (String studyClassId:getChkBoxClassSelectedIds()) {
							sb.append(studyClassId+",");
						}
					}
					sb.append("0)");
					studyClassList = staffManager.getAll(StudyClass.class, "id in "+sb.toString());
					if(!ObjectFunctions.isNullOrEmpty(studyClassList)){
						staff.setStudyClasses(ConvertUtil.convertListToSet(studyClassList));
						adminManager.save(staff);
						super.addActionMessage("Staff Study Classes updated successfully.");
						studyClassList = null;
					}
				}
				if(!ObjectFunctions.isNullOrEmpty(staff) && !ObjectFunctions.isNullOrEmpty(year)){
					adminManager.removeStaffSubjectList(staff.getId(),academicYearId);
					StringBuffer selectedIds = new StringBuffer();
					selectedIds.append("(");
					setStudyClassList(adminManager.getAllByCustId("StudyClass", getUserCustId(), academicYearId));
					if(ObjectFunctions.isNotNullOrEmpty(getStudyClassList()))
						Collections.sort(getStudyClassList());
				
					for (String subjectId : getChkBoxSelectedIds()) {
						studySubject = (StudySubject) adminManager.get(StudySubject.class, Long.valueOf(subjectId));
						if(!ObjectFunctions.isNullOrEmpty(studySubject)){
							eligibleSubjects=new StaffElgibleSubjects();
							if(!ObjectFunctions.isNullOrEmpty(year)){
								eligibleSubjects.setAcademicYear(year);
								eligibleSubjects.setStaffId(staff);
								eligibleSubjects.setStudySubjectId(studySubject);
								selectedIds.append(studySubject.getId()+",");
								adminManager.save(eligibleSubjects);
								eligibleSubjects=null;
							}
							studySubject = null;
						}
					}
					selectedIds.append("0)");
					
					adminManager.removeClassTeachersByStudyClassIdandSubjectIds(getTempId(), academicYearId, getUserCustId(),selectedIds.toString());
					
					staff=null;
					year=null;
					super.addActionMessage("Staff eligible subjects updated successfully.");
				}
			}
			ajaxStaffClassesAndSubjects();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetAcademicSmsEvents", results = { @Result(type = "json", name = "success", params = {"includeProperties", "smsEvents.*" }) }) })
	public String ajaxGetAcademicSmsEvents() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetAcademicSmsEvents' method");
		}
		try {
			String smsEventId = getParamValue("smsEventId");
	    // log.debug("smsEventId:"+smsEventId);
			if (!StringFunctions.isNullOrEmpty(smsEventId)) {
		SmsEvents smsEvents = (SmsEvents) adminManager.get(
			SmsEvents.class, Long.valueOf(smsEventId));
		if (!ObjectFunctions.isNullOrEmpty(smsEvents)) {
		    JSONArray res = new JSONArray();
		    JSONObject j;
		    j = new JSONObject();
		    j.put("smsEventId", smsEvents.getId());
		    j.put("title", smsEvents.getEventName());
		    j.put("startDate", smsEvents.getEventStartDateStr());
		    j.put("endDate", smsEvents.getEventEndDateStr());
		    res.put(j);
		    j = new JSONObject();
		    j.put("data", res);
		    getResponse().getOutputStream().print(j.toString());
		    smsEvents = null;
		}
	    }
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

	return null;
	}
	
		
		/************************************************************************
		 * Cleaned Code Below - All edited code should be below
		 */
		
	

	@Actions( {
			@Action(value = "ajaxDoCollectionByFeeDetails", results = { @Result(location = "fee/ajaxDoCollectionByFeeDetails.jsp", name = "success") }),
			@Action(value = "ajaxDoAttendanceByAttendanceDetails", results = { @Result(location = "fee/ajaxDoAttendanceByAttendanceDetails.jsp", name = "success") }),
			@Action(value = "ajaxDoFeeDefaulters", results = { @Result(location = "fee/ajaxFeeDefaultersType.jsp", name = "success") }) })
	public String doCollectionFee() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'adminSchoolFeeReports' method");
		}
		try {
			prepareFeeDuesList();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
		
@Actions( {
			@Action(value = "ajaxCollectionTermsByFeeDetails", results = { @Result(location = "fee/ajaxCollectionTermsByFeeDetails.jsp", name = "success") }),
			@Action(value = "ajaxDoClassWiseDefaulters", results = { @Result(location = "fee/ajaxClassWiseList.jsp", name = "success") }) })
	public String doCollectionTermsByFeeDetail() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCollectionTermsByFeeDetails' method");
		}
		try {
			prepareSchoolFeeSettingList();
			setSchoolTermsList(adminManager.getAll(SchoolTerms.class, " custId=" + getUserCustId() + " and academicYearId = " + String.valueOf(getUserAcademicYearId()) + " and feeSettingId in" + getAnyTitle()));
			checkStudyClassHavingStudentsOrNot();	
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
		@Actions( { @Action(value = "ajaxCheckExamType", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
		public String ajaxCheckExamType() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckExamType' method");
			}
			try {
				String examType = getParamValue("keyWord");
				if (StringFunctions.isNotNullOrEmpty(examType)) {
					List examTypesList = adminManager.checkExamTypeByNameAndCustId(examType.trim(),getUserCustId());
					if (ObjectFunctions.isNullOrEmpty(examTypesList)) {
						setAutoCheck("0");
					} else if (examTypesList.size() > 0) {
						setAutoCheck("1");
					} else {
						setAutoCheck("0");
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}

			return SUCCESS;
		}
		
		 
		@Actions( { @Action(value = "ajaxDeleteTeacherSubject", results = { @Result(location = "staff/ajaxViewStaffClassesAndSubjects.jsp", name = "success") }) })
		public String ajaxDeleteTeacherSubject() throws URTUniversalException {
	
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDeleteTeacherSubject' method");
			}
			try {
				if(getTempId1() > 0)
				{
					adminManager.remove(ClassTeacher.class, getTempId1());
				}
				ajaxGetStaffSubjectsDetails();
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			ajaxStaffClassesAndSubjects();
			return SUCCESS;
		}
		
	@Actions({ @Action(value = "ajaxAssignTeacherSubjectToClass", results = { @Result(location = "staff/ajaxAssignStaffSubjetToClass.jsp", name = "success") }) })
	public String ajaxAssignTeacherSubjectToClass() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAssignTeacherSubjectToClass' method");
		}
		try {
			String subjectId = getParamValue("subjectId");
			String staffId = getParamValue("tempId");
			int recCount = 0;
			if (!StringFunctions.isNullOrEmpty(subjectId)) {
				setSubjectId(subjectId);
				setTempString(staffId);
				List<String> studyClassIds = adminManager.getAll("SELECT GROUP_CONCAT(sc.studyClassId) FROM ClassSubject sc WHERE sc.subjectId ="+Long.valueOf(subjectId));
				List<StudyClass> studyClassList= adminManager.getAll(StudyClass.class, "custId="+getUserCustId()+" AND academicYearId="+getUserAcademicYearId()+" AND id IN ("+studyClassIds.get(0)+") ");
				if (!ObjectFunctions.isNullOrEmpty(studyClassList)) {
					for (StudyClass studyClass : studyClassList) {
						if (!ObjectFunctions.isNullOrEmpty(studyClass)) {
							recCount = adminManager.getCount("classTeacher","studySubjectId=" + subjectId+ " and teacherId =" + staffId+ " and studyClassId="+ studyClass.getId());
							if (recCount == 0) {
								if (!ObjectFunctions.isNullOrEmpty(studyClass)) {
									getStudyClassList().add(studyClass);
								}
							}
						}
						studyClass = null;
					}
					studyClassIds=null;
					studyClassList=null;
				}
			}

		} catch (Exception ex) {
			commonJREException(ex);
		}
		return SUCCESS;
	}
		
		@Actions( { @Action(value = "ajaxCheckTeacherSubject", results = { @Result(location = "staff/ajaxAssignStaffSubjetToClass.jsp", name = "success") }) })
		public String ajaxCheckTeacherSubject() throws URTUniversalException {
	
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckTeacherSubject' method");
			}
			try {
				String academicYearId = (String) getSession().getAttribute("academicYear");
				String classId=getParamValue("classId");
				String subjectId=getParamValue("subjectId");
				String staffId=getParamValue("staffId");
				setStudyClassId(classId);
				if(!StringFunctions.isNullOrEmpty(getStudyClassId()) )
				{
					setTempString(staffId);
					ClassTeacher classTeacher = adminManager.getClassTeachersByAcademicIdAndSubjectIdAndClassIdandCustId(Long.valueOf(classId), Long.valueOf(subjectId), getUserCustId(), Long.valueOf(academicYearId));
					if(!ObjectFunctions.isNullOrEmpty(classTeacher))
					{
						super.addActionMessage("Staff is already added this class.");
					}
					else
					{
						setSubjectId(subjectId);
						setAnyId("Add");
						super.addActionMessage("This class is available to add staff to subject.");
					}
				}
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
	@Actions({ @Action(value = "ajaxAddStaffSubjectToClass", results = { @Result(location = "staff/ajaxViewStaffClassesAndSubjects.jsp", name = "success") }) })
	public String ajaxAddStaffSubjectToClass() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddStaffSubjectToClass' method");
		}
		try {
			String academicYearId = (String) getSession().getAttribute("academicYear");
			String subjectId = getParamValue("subjectId");
			String classId = getParamValue("studyClassId");
			String staffId = getParamValue("tempId");
			if (Constants.SCHOOL_HOD.equalsIgnoreCase(getAnyId()) || Constants.SCHOOL_ADMIN_COORDINATOR.equalsIgnoreCase(getAnyId())) {
				setStudyClassList(null);
				setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(), getUserAcademicYearId(), null));
				if (ObjectFunctions.isNotNullOrEmpty(getStudyClassList()))
					Collections.sort(getStudyClassList());
				List<Object[]> teacherstudyClassList = adminManager.getAll("select studyClassId,staffId from staffMultipleStudyClasses where staffId="+ getTempId());
				if(!ObjectFunctions.isNullOrEmpty(teacherstudyClassList)){
					for (Object[] teacher : teacherstudyClassList) {
						getChkBoxClassSelectedIds().add(String.valueOf(teacher[0]));
						teacher=null;
					}
					teacherstudyClassList=null;
				}
				
				setAnyId(getAnyId());
			}
			if (!StringFunctions.isNullOrEmpty(subjectId) && !StringFunctions.isNullOrEmpty(classId)) {
				setTempId(Long.valueOf(staffId));
				ClassTeacher classTeacher = null;
				Staff staff = (Staff) adminManager.get(Staff.class,Long.valueOf(staffId));
				// StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, Long.valueOf(classId));
				StudySubject studySubject = (StudySubject) adminManager.get(StudySubject.class, Long.valueOf(subjectId));
				AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class, Long.valueOf(academicYearId));
				if (!ObjectFunctions.isNullOrEmpty(staff) && !ObjectFunctions.isNullOrEmpty(studySubject) && !ObjectFunctions.isNullOrEmpty(academicYear))// && !ObjectFunctions.isNullOrEmpty(studyClass)
				{
					classTeacher = new ClassTeacher();
					adminManager.saveClassTeacherDetails(classTeacher,getUserCustId(),getUser().getId(),staff,Long.valueOf(classId),studySubject,academicYear);
					super.addActionMessage("Class assigned successfully.");
					classTeacher = null;
					academicYear=null;
					studySubject=null;
					staff=null;
					academicYearId = null;
					subjectId = null;
					classId = null;
					staffId = null;
				}
			}
		} catch (Exception ex) {
			commonJREException(ex);
		}finally{
			ajaxStaffClassesAndSubjects();
		}
		
		return SUCCESS;
	}
		/********************************************************************
		 * Date              Name               Description
		 * ========          ============       ==================
		 * May 9, 2013       Ganesh		        Change the method to validate the term name each fee setting id with same name
		/********************************************************************/	
		@Actions( { @Action(value = "ajaxCheckFeeTurmType", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
		public String ajaxCheckFeeTurmType() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckFeeTurmType' method");
			}
			try {
				long academicYearId = 0;
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("admissionAcademicYearId"))) {
					academicYearId = (Long) getSession().getAttribute("admissionAcademicYearId");
				} else {
					academicYearId = getUserAcademicYearId();
				}
				String termNameAndId = getSelectedId().replace("?keyWord=", ",");
				String[] keyWordAndId = termNameAndId.split(",");
				if (!StringFunctions.isNullOrEmpty(keyWordAndId.toString())) {
					List termNameList = adminManager.getAll(SchoolTerms.class," custId=" + getUserCustId() + " and academicYearId="+ academicYearId + " and termName='"+ keyWordAndId[1].toString().trim()+ "' and feeSettingId="+ keyWordAndId[0].toString().trim());
					if (ObjectFunctions.isNullOrEmpty(termNameList)) {
						setAutoCheck("0");
					} else if (termNameList.size() > 0) {
						setAutoCheck("1");
					} else {
						setAutoCheck("0");
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}

			return SUCCESS;
		}
		
		
	//Admin Attendance Req
		@Actions( {
				@Action(value = "ajaxCreateStaffAttendance", results = {
						@Result(location = "../common/staffAttendance/ajaxViewStaffAttendanceForm.jsp", name = "success"),
						@Result(location = "../common/staffAttendance/ajaxViewStaffBiometricAttendanceDetails.jsp", name = "staffBiometric")
				})
		})
		public String createAttendance() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'createAttendance' method in Admin Action");
			}
			try {
				if (!StringFunctions.isNullOrEmpty(getAnyTitle())) {
					log.debug("********* starting the function:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,new Date()));
					addActionMessages(staffManager.addOrUpdateStaffAttendance(getAnyTitle(),getUserAcademicYearId(),getUserCustId(),getUser().getId(),getParamValue("balance")));
					log.debug("********* End the function:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,new Date()));
					ajaxViewStaffAttendanceForm();
					if("staffBiometric".equalsIgnoreCase(getAnyId())){
						return "staffBiometric";
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Action(value = "ajaxCreateAttendance", results = { @Result(location = "../common/attendance/ajaxEditStudentAttendanceForm.jsp", name = "success"),
														@Result(location = "AttendanceList.jsp", name = "Failure") })
	public String createStudentAttendance() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'createAttendance' method in Admin Action");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getAnyTitle())) {
				log.debug("getAnyTitle() : " + getAnyTitle()); //below classId used to get the holidays for class wise. if school have class wise holidays in school settings tab
				log.debug("********* starting the function:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,new Date()));
				addActionMessages(studentManager.addOrUpdateStudentAttendance(getAnyTitle(), getUserAcademicYearId(),getUserCustId(), getUser().getId(),getParamValue("balance"),getParamValue("email"), Long.valueOf(getClassId())));
				log.debug("********* End the function:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,new Date()));
				ajaxGetSuspendStudent(getClassId());
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			RayGunException raygex = new RayGunException();
			raygex.sendRayGunException(ex);
			raygex = null;
		}
		finally
		{
			ajaxViewAttendanceForm();
		}
		return SUCCESS;
	} 
		
		/********************************************************************
		 * Date              Name               Description
		 * ============      =======		    ==================
		 * June 12, 2013     Seshu		    	Code refactor
		/********************************************************************/
	@Actions( {
			@Action(value = "ajaxDoGetAttendanceForm", results = { @Result(location = "../common/attendance/ajaxManageStudentAttendance.jsp", name = "success"),
																   @Result(location = "../common/attendance/studentAttendanceForm.jsp", name = "todayHoliday") }),
			@Action(value = "ajaxDoGetAttendanceFormImpl", results = { @Result(location = "../common/attendance/studentAttendanceForm.jsp", name = "success"),
																	   @Result(location = "../common/attendance/ajaxEditStudentAttendanceForm.jsp", name = "attendanceForm"),
																	   @Result(location = "../common/attendance/ajaxEditStudentAttendanceForm.jsp", name = "todayHoliday") }),
			@Action(value = "ajaxDoGetSudentAttendanceByMonthOrWeek", results = { @Result(location = "../common/staffAttendance/ajaxStudentMonthlyAttendance.jsp", name = "success") }) })
	public String ajaxDoGetAttendanceForm() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetAttendanceForm' method");
		}
		try {
			HashSet<StudyClass> classSections = new HashSet<StudyClass>();
			// It sets academic year start,end dates and current dates.To control datepicker dates this method is calling. If start date and end date is not provided we need to give access to user to submit attendance.
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			if (!ObjectFunctions.isNullOrEmpty(getStartDate()) && !ObjectFunctions.isNullOrEmpty(getEndDate())) {
				List<StudyClass> studyClassList = adminManager.getStudyClassesForClassTeacherAndAdmin(getUser(),getUserAcademicYearId());				
				if(!ObjectFunctions.isNullOrEmpty(studyClassList)){	
					setStudyClassList(studyClassList);
				}	
				if(getUser().isOnlySchoolHod() || getUser().isAdminCoordinator())
				{
					Object[] staff = adminManager.get("select id,description from staff where accountId="+getUser().getId()+" and  status='Y'");
					if(!ObjectFunctions.isNullOrEmpty(staff))
					{
						if(!ObjectFunctions.isNullOrEmpty(staff[0]))
						{
							List studyClassesList =getHodStudyClassesList(Long.valueOf(staff[0].toString()),getUserAcademicYearId());
							if(!ObjectFunctions.isNullOrEmpty(studyClassesList))
							{
								classSections.addAll(studyClassesList);
							}
							studyClassesList = null;
						}	
					}
				if (ObjectFunctions.isNotNullOrEmpty(classSections)) {
					setStudyClassList(ConvertUtil.convertSetToList(classSections));
					Collections.sort(getStudyClassList());
					}
				if(getUser().isAdminCoordinator() && !ObjectFunctions.isNullOrEmpty(studyClassList) ){
					Map<Long,StudyClass> studyClassMap = new HashMap<Long, StudyClass>();
					for(StudyClass obj:getStudyClassList()){
						studyClassMap.put(obj.getId(),obj);
					}
					List<StudyClass> studyClassList11 = getStudyClassList();
					for(StudyClass obj:studyClassList){
						if(ObjectFunctions.isNullOrEmpty(studyClassMap.get(obj.getId()))){
							getStudyClassList().add(obj);
						}
					}
					Collections.sort(getStudyClassList());
				}
				classSections = null;
				}
				
							
				if ("D".equals(getAcademicYear().getManageAttendanceBy())) {
					//if("D".equalsIgnoreCase(getAcademicYear().getStudentAttendanceType()))
					setAttendanceDate(DateFormatter.getTodayDateStr(DateFormatter.YYYY_MM_DD_PATTERN));
					if (StringFunctions.isNullOrEmpty(getClassId()) && ObjectFunctions.isNotNullOrEmpty(getStudyClassList())) {
						setClassId(getStudyClassList().get(0).getStrId());
					}
				} else {
					setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(), null, null, true,"",getClassId())); //here getClassId() used to academicyear have class wise holiday(CH).
				}
				  Date today = new Date();      
				  if (today.compareTo(getEndDate()) > 0){
				      setPlTitle("E");// Ravi Teja ** 05-05-16 passed the pltitle E means ( EnD Date ) in page show the school end date is lessthan today date show the error message.
				  }
				  if(today.compareTo(getStartDate()) < 0){
					  setTempString("S"); // Ravi Teja ** 05-05-16 passed the tempString S means ( Start Date ) in page show the school Start  date is grathen than today date show the error message.
				  }
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			RayGunException raygex = new RayGunException();
			raygex.sendRayGunException(ex);
			raygex = null;
		}
		return SUCCESS;
	}
		@Action(value = "ajaxViewAttendanceForm", results = { @Result(location = "../common/attendance/ajaxEditStudentAttendanceForm.jsp", name = "success"),
															  @Result(location = "../common/attendance/ajaxEditPreSchoolStudentAttendanceForm.jsp", name = "preSchoolAttendance")
		})	
		public String ajaxViewAttendanceForm(){
			String schoolStandardType ="";
			Object[] dataList=null;
			try{
				setCustomer(getCustomerByCustId());
				schoolStandardType = getCustomer().getStandardType();
				//'P':'Pre School','L':'Lower and Higher','B':'Both'
				getSmsCount();
				setAnyId(getParamValue("sessionType"));
				loadAcademicYearStartDateAndDates(getUserAcademicYearId());
				setAvailableSMSCount(adminManager.getAvailableSmsCount(getUserCustId(), getUserAcademicYearId()));
				if(!ObjectFunctions.isNullOrEmpty(getStartDate()) && !ObjectFunctions.isNullOrEmpty(getEndDate())){
					Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN, getAttendanceDate());
				 	if(ObjectFunctions.isNullOrEmpty(aDate))
				 	{
					 	aDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN, DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, getAttendanceDate()));
				 	}
				 	
				 	if(!ObjectFunctions.isNullOrEmpty(aDate)){
				 		if(!DateFunctions.compare2Dates(aDate,new Date())) //selected date is past date
					 		setTempString3("pastDate");
				 		if(DateFunctions.compare2Dates(aDate,getStartDate()) && DateFunctions.compare2Dates(getEndDate(),aDate)){
							int monthNum =Integer.valueOf(new SimpleDateFormat("MM").format(aDate));
							SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
							String year = simpleDateformat.format(aDate);
						 	if(!ObjectFunctions.isNullOrEmpty(aDate) && StringFunctions.isNotNullOrEmpty(getClassId())){
						 		List<SchoolHolidays> holidaysList = null;
						 		if("CH".equalsIgnoreCase(getCurrentAcademicYear().getHolidayStatus()) && !StringFunctions.isNullOrEmpty(getClassId())){
						 			Object[] classNameClassIds= adminManager.get("select classId,className from vw_classSectionDetails where custId="+getUserCustId()+ " and academicYearId="+getUserAcademicYearId()+" and classSectionId="+Long.valueOf(getClassId()));
						 			if(!ObjectFunctions.isNullOrEmpty(classNameClassIds) && !ObjectFunctions.isNullOrEmpty(classNameClassIds[0]) ){
						 				holidaysList = adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getUserAcademicYearId(),DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,aDate),null,null,classNameClassIds[0].toString(),null,null,monthNum,"holidayDateEqual",year);
						 			}
						 		}else{
						 			 holidaysList = adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getUserAcademicYearId(),DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,aDate),null,null,null,null,null,monthNum,"holidayDateEqual",year);
						 		}
						 		if(!ObjectFunctions.isNullOrEmpty(holidaysList)){
						 			SchoolHolidays schoolHoliday=(SchoolHolidays)holidaysList.get(0);
						 			setAttendanceDate(DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN, aDate));
						 			setBankName("todayHoliday");//here bank name is check the holiday or not in page
						 			super.addActionError(getAttendanceDate()+ " (day) is "+schoolHoliday.getDescription()+" holiday.");
						 		}
						 		else if(getUser().isSchoolHostel()){
						 			setStudentsList(adminManager.getHostelStudentsAttendanceByClassSectionIdAndAttendanceDate(Long.valueOf(getClassId()),getAttendanceDate()));
						 		}
						 		else{
						 			if("P".equalsIgnoreCase(schoolStandardType)){ // for playschool's student data
						 				setStudentsList(adminManager.getStudentsAttendanceByClassSectionIdAndAttendanceDateForPreSchool(Long.valueOf(getClassId()),getAttendanceDate()));
						 			}else{
						 				setStudentsList(adminManager.getStudentsAttendanceByClassSectionIdAndAttendanceDate(Long.valueOf(getClassId()),getAttendanceDate()));
						 			}
						 		}
					 			ajaxGetSuspendStudent(getClassId());
						 		holidaysList = null;
						 	}
				 		}
				 		    AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class, getUserAcademicYearId());
							dataList=adminManager.get("select sum(present='N'),sum(afternoonSession='N') from vw_StudentDailyAttendance where custId= "+getUserCustId()+" and academicYearId= "+getUserAcademicYearId()+" and attendanceDate = '" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,aDate)+ "' and  classSectionId= "+Long.valueOf(getClassId())+"");
							if(!ObjectFunctions.isNullOrEmpty(dataList[0])&&!ObjectFunctions.isNullOrEmpty(dataList[1])){
								if("O".equalsIgnoreCase(academicYear.getCaptureAttendanceBy()))
									setMorningSessionAbsentees(Long.valueOf(dataList[0].toString()));
								else{
							        setMorningSessionAbsentees(Long.valueOf(dataList[0].toString()));
							        setAfternoonSessionAbsentees(Long.valueOf(dataList[1].toString()));
								}
							}
							else{
								setMorningSessionAbsentees(0);
								setMorningSessionAbsentees(0);
							}
				 	}else{
				 		super.addActionError("You cann't submit attendence before academic year start date and after end date.");
				 	}
				}
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			if("P".equalsIgnoreCase(schoolStandardType)) {
				return "preSchoolAttendance";
			}else{
				return SUCCESS;
			}
				
		}
		
		@Actions( {
			@Action(value = "ajaxCancelAttendance", results = { @Result(location = "../common/attendance/ajaxVWStudentAttendance.jsp", name = "success") }),
			@Action(value = "doClassAttendance", results = { @Result(location = "../common/attendance/ajaxAttendanceDetails.jsp", name = "success") }) })
	public String classAttendence() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'classAttendence' method");
		}
		try {
			setStaff(adminManager.getStaffByAcountId(getUser().getId(),Constants.YES_STRING));
			if (!ObjectFunctions.isNullOrEmpty(getStaff())) {
				setClassTeacher(adminManager.getClassTeacherByAcademicId(getStaff().getId(),getUserCustId(), getUserAcademicYearId()));
				if (!ObjectFunctions.isNullOrEmpty(getClassTeacher())) {
					setStudyClass(getClassTeacher().getStudyClass());
					if (!ObjectFunctions.isNullOrEmpty(getStudyClass())) {
						StringBuffer sb = new StringBuffer();
						sb.append(" classId = " + getStudyClass().getId());
						sb.append(" and academicYearid = " + getUserAcademicYearId());
						sb.append(" and custId = " + getUserCustId());
						sb.append(" group by year, month, present,leaveRequest");
						setStudentsList(staffManager.getStudentByClassIdAndStaffId(getStudyClass().getId(), getUserCustId(), getUserAcademicYearId(),Constants.YES_STRING));
						setStudentAttendanceStatusList(null);
						setClassId(String.valueOf(getStudyClass().getId()));
						setSection(getStudyClass().getSection());
					}
					classTeacher = null;
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
		
	@Actions({
		@Action(value = "ajaxDoGetStaffAttendanceForm", results = { 
				@Result(location = "../common/staffAttendance/staffAttendanceForm.jsp", name = "success"),
				@Result(location = "../common/staffAttendance/staffAttendanceFormByWeeklyOrMonthly.jsp", name = "staffMonthAtt")
				})
	})
	public String viewStaffAttendanceList() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'viewStaffAttendanceList' method");
	}
		try
		{
			AcademicYear academicYear =adminManager.getCurrentAcademicYear("Y", getUserCustId());
			if(!ObjectFunctions.isNullOrEmpty(academicYear)){
				if("D".equals(academicYear.getManageStaffAttendanceBy())){
					setAttendanceDate(DateFormatter.getTodayDateStr(DateFormatter.YYYY_MM_DD_PATTERN));
					loadAcademicYearStartDateAndDates(academicYear.getId());
				}else{
					setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null,null,true,"",getClassId())); //here getClassId() used to academicyear have class wise holiday(CH).
					return "staffMonthAtt";
				}
			}
			if(!ObjectFunctions.isNullOrEmpty(getEndDate())){
				Date today = new Date();      
				  if (today.compareTo(getEndDate()) > 0){
				      setPlTitle("E");// Ravi Teja ** 05-05-16 passed the pltitle E means ( EnD Date ) in page show the school end date is lessthan today date show the error message.
				  }
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Action(value = "ajaxViewStaffAttendanceForm", results = {
			@Result(location = "../common/staffAttendance/ajaxViewStaffAttendanceForm.jsp", name = "success"),
			@Result(location = "../common/staffAttendance/ajaxViewStaffBiometricAttendanceDetails.jsp", name = "staffBiometricResults"),
			@Result(location = "../common/staffAttendance/ajaxViewStaffAttendanceForm.jsp", name = "todayHoliday")
	})	
	public String ajaxViewStaffAttendanceForm(){
		try{
			Object[] dataList=null;
			setCustomer(getCustomerByCustId());
			/*It sets academic year start,end dates and current dates.To control datepicker dates this method is calling.
			If start date and end date is not provided we need to give access to user to submit attendance.*/
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			if(!ObjectFunctions.isNullOrEmpty(getStartDate()) && !ObjectFunctions.isNullOrEmpty(getEndDate())){
				getSmsCount();
				setAvailableSMSCount(adminManager.getAvailableSmsCount(getUserCustId(), getUserAcademicYearId()));
				Date aDate=DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN, getAttendanceDate());
			 	if(ObjectFunctions.isNullOrEmpty(aDate))
			 	{
				 	aDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN, DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, getAttendanceDate()));
			 	}
			 	
			 	if(!DateFunctions.compare2Dates(aDate,new Date())) //selected date is past date
			 		setTempString3("pastDate");
			 	
			 	if(DateFunctions.compare2Dates(aDate,getStartDate()) && DateFunctions.compare2Dates(getEndDate(),aDate)){
					int monthNum =Integer.valueOf(new SimpleDateFormat("MM").format(aDate));
					SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
					String year = simpleDateformat.format(aDate);
				 	if(!ObjectFunctions.isNullOrEmpty(aDate))
				 	{
				 		List<SchoolHolidays> holidaysList=null;
				 		if("CH".equalsIgnoreCase(getCurrentAcademicYear().getHolidayStatus()) && !StringFunctions.isNullOrEmpty(getClassId())){
				 			Object[] classNameClassIds= adminManager.get("select classId,className from vw_classSectionDetails where custId="+getUserCustId()+ " and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getClassId());
				 			if(!ObjectFunctions.isNullOrEmpty(classNameClassIds) && !ObjectFunctions.isNullOrEmpty(classNameClassIds[0]) ){
				 				holidaysList = adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getUserAcademicYearId(),DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,aDate),null,null,classNameClassIds[0].toString(),null,null,monthNum,"holidayDateEqual",year);
				 			}
				 		}else{
				 			 holidaysList = adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getUserAcademicYearId(),DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,aDate),null,null,null,null,null,monthNum,"holidayDateEqual",year);
				 		}
				 		if(!ObjectFunctions.isNullOrEmpty(holidaysList))
				 		{ 
				 			setBankName("todayHoliday");//here bank name is check the holiday or not in page
				 			super.addActionError(getAttendanceDate()+ " (day) is "+holidaysList.get(0).getDescription()+" holiday.");
				 			return "todayHoliday";
				 		}
				 		if("staffBiometric".equalsIgnoreCase(getAnyId())){
				 			setViewStaffPersonAccountDetailsList(adminManager.getStaffAttendanceByAttendanceDate(getAttendanceDate(),getUserCustId(),getUserAcademicYearId(),getAnyId()));
				 			return "staffBiometricResults";
				 		}else{
				 			setViewStaffPersonAccountDetailsList(adminManager.getStaffAttendanceByAttendanceDate(getAttendanceDate(),getUserCustId(),getUserAcademicYearId(),""));
				 		}
				 	}
				 	AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class, getUserAcademicYearId());
					dataList=adminManager.get("select sum(present='N'),sum(afternoonSession='N') from vw_StaffDailyAttendance where custId= "+getUserCustId()+" and academicYearId= "+getUserAcademicYearId()+" and attendanceDate = '" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,aDate)+ "'");
					if(!ObjectFunctions.isNullOrEmpty(dataList[0])&&!ObjectFunctions.isNullOrEmpty(dataList[1])){
						if("O".equalsIgnoreCase(academicYear.getCaptureAttendanceForStaff()))
							setMorningSessionAbsentees(Long.valueOf(dataList[0].toString()));
						else{
					        setMorningSessionAbsentees(Long.valueOf(dataList[0].toString()));
					        setAfternoonSessionAbsentees(Long.valueOf(dataList[1].toString()));
						}
					}
					else{
						setMorningSessionAbsentees(0);
						setMorningSessionAbsentees(0);
					}
			 	}else{
			 		super.addActionError("You cann't add attendence before academic year start date and after end date.");
			 	}
			}
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCollectionDaysBetweenByFeeDetails", results = { @Result(location = "fee/ajaxCollectionDaysBetweenByFeeDetails.jsp", name = "success") })})
	public String ajaxCollectionDaysBetweenByFeeDetails()
			throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCollectionDaysBetweenByFeeDetails' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				setSchoolTermsList(adminManager.getAllByCustId("SchoolTerms",getUserCustId(), getUserAcademicYearId()));
                loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxGetStaffAttendanceDetails", results = { @Result(location = "staff/ajaxStaffAttendance.jsp", name = "success") })
	})
	public String ajaxGetStaffAttendanceDetails() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStaffAttendanceDetails' method");
		}
		try {
			getBaseStaffAttendanceDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxdeleteSchoolHolidays", results = { @Result(location = "academic/ajaxViewSchoolHolidaysList.jsp", name = "success") }) })
	public String ajaxdeleteSchoolHolidays() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxdeleteSchoolHolidays' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getAnyId()) && StringFunctions.isNotNullOrEmpty(getTempString()) && getAcademicYearId() > 0)
			{
				String holidayStartDate = getParamValue("startDateFormate");
				String holidayEndDate = getParamValue("endDateFormate");
				adminManager.removeAllSchoolHolidaysByDescriptionAndStartAndEndDate(getUserCustId(),getTempString(),holidayStartDate,holidayEndDate);
	 			super.addActionMessage("School holiday deleted successfully.");
			}
			ajaxViewSchoolSettingsHolidays();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxRemoveSCastDetails", results = { @Result(location = "admission/castSettings/ajaxCastInformationDetails.jsp", name = "success") }) })
	public String ajaxRemoveStaffPendingLeave() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveSCastDetails' method");
		}
		try{
			if(!StringFunctions.isNullOrEmpty(getAnyId())){
				staffManager.remove(CastSettings.class, Long.valueOf(getAnyId()));
			}
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxGetAdminCalendar", results = { @Result(location = "ajaxAdminCalendar.jsp", name = "success") }) })
	
	@Action(value = "ajaxAddStaffEvent1", results = { @Result(location = "addStaffEvent.jsp", name = "success") })
	public String addStaffEvent() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddStaffEvent' method");
		}
		try {
			List<SchoolHolidays> holidayBoardList = null;
			AcademicYear academicYear=getCurrentAcademicYear();
			if(!ObjectFunctions.isNullOrEmpty(academicYear)){	
				if("CH".equalsIgnoreCase(academicYear.getHolidayStatus()) && !StringFunctions.isNullOrEmpty(getClassId())){
					Object[] classNameClassIds= staffManager.get("select classId,className from vw_classSectionDetails where custId="+getUserCustId()+ " and academicYearId="+academicYear.getId()+" and classSectionId="+getClassId());
		 			if(!ObjectFunctions.isNullOrEmpty(classNameClassIds) && !ObjectFunctions.isNullOrEmpty(classNameClassIds[0]) ){
		 				holidayBoardList=adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),academicYear.getId(),null,null,null,classNameClassIds[0].toString(),null,"H",0,"sessionHolidays",null);
		 			}
		 		  }else{
		 			 holidayBoardList=adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),academicYear.getId(),null,null,null,null,null,"H",0,"sessionHolidays",null);
		 		}
				academicYear=null;
			}
			if(!ObjectFunctions.isNullOrEmpty(holidayBoardList))	
			{
				setHolidayBoardMessagesList(holidayBoardList);
				Collections.sort(getHolidayBoardMessagesList());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
			@Action(value = "ajaxViewAllEvents", results = { @Result(location = "ajaxManageEvents.jsp", name = "success") }),
			@Action(value = "adminEventDashboard", results = { @Result(location = "adminEventDashboard.jsp", name = "success") }),
			@Action(value = "ajaxEventDashboard", results = { @Result(location = "adminEventDashboard.jsp", name = "success") }) })
	public String ViewAllEvents() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ViewAllEvents' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getUserCustId())) {
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
	@Actions( { @Action(value = "eventsXml", results = { @Result(location = "ajaxAdminCalendar.jsp", name = "success") }) })
	public String recurringEventXml() throws IOException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'recurringEventXml' method");
		}
		try {
			PrintWriter toClient = getResponse().getWriter();
			getResponse().setContentType("text/xml");
			Document document = null;
			RecurringEventsDOM scDOM = new RecurringEventsDOM();
			ajaxStaffAllEvents();
			ajaxViewSchoolSettingsHolidays();
			scDOM.setObjectList(getObjectList());
			scDOM.setHolidayBoardList(getHolidayBoardMessagesList());
			document = scDOM.emsEvents();
			DOMUtil.writeXmlToFile(toClient, document);
		} 
		catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions({
		@Action(value = "ajaxCancelRegistration", results = { @Result(location = "viewStaffEventsLists.jsp", name = "success") }) })
		public String ajaxStaffAllEvents() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxStaffAllEvents' method");
			}
			try
			{
				setObjectList(adminManager.getAllEventsByCustIdAndAcademicYearId(getUserCustId(),getUserAcademicYearId()));
			}
			catch(Exception ex)
			{
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			
			return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxTotalSmsCount", results = { @Result(location = "ajaxViewTotalSmsCount.jsp", name = "success") }) })
	public String ajaxTotalSmsCount() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxTotalSmsCount' method");
		}
		try {
			if(getUserAcademicYearId() > 0){
				setCustomer(getCustomerByCustId());
				setSmsCnt(staffManager.getTotalSmsCount(getUserCustId(),getUserAcademicYearId()));
				List<Object[]> latestSmsCountList = staffManager.getLatestSmsCount(getUserCustId(),getUserAcademicYearId());
				List lst = new ArrayList();
				if (!ObjectFunctions.isNullOrEmpty(latestSmsCountList)) {
					for(Object[] obj:latestSmsCountList){
						messages = new Messages();
						messages.setSmsCount(Integer.valueOf(obj[0].toString()));
						messages.setMessageDescription(DateFormatter.formatDate(DateFormatter.ddMMMyyyy_PATTERN1,DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN, obj[1].toString())));
						messages.setStatus(obj[2].toString());
						lst.add(messages);
					}
					setTempList(lst);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetStudentSubCastDetailsByCast", results = { @Result(location = "admission/castSettings/ajaxGetSubCastListByCast.jsp", name = "success") }) })
	public String ajaxGetStudentSubCastDetailsByCast() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStudentSubCastDetailsByCast' method");
		}
		try {
			setCastSettings((CastSettings) staffManager.get(CastSettings.class,"id = " + getPerson().getCastId() + " and custId = "+ getUserCustId()));
			if (!ObjectFunctions.isNullOrEmpty(getCastSettings())) {
				if (ObjectFunctions.isNotNullOrEmpty(getCastSettings().getSubCastSettings()))
					setQuizList(ConvertUtil.convertSetToList(getCastSettings().getSubCastSettings()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxGetSubCastDetailsByCast", results = { @Result(location = "admission/castSettings/ajaxGetOnlineSubCastListByCastId.jsp", name = "success") })}) 
		public String ajaxGetOnlineStudentSubCastDetailsByCast() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetOnlineStudentSubCastDetailsByCast' method");
		}
		try {
			long castId =0;
			if(getTempId() > 0){
				castId = Long.valueOf(getTempId());
			}else{
				castId = getOnlineApplicationDetails().getCastId().getId();
			}
			String cause = "id = "+ castId +" and custId = " + getUserCustId();
			CastSettings castSettings = (CastSettings)staffManager.get(CastSettings.class, cause);
			 if(!ObjectFunctions.isNullOrEmpty(castSettings)){
				 setCastSettings(castSettings);
				 if(ObjectFunctions.isNotNullOrEmpty(getCastSettings().getSubCastSettings()))
					 setObjectList(ConvertUtil.convertSetToList(getCastSettings().getSubCastSettings()));
			 }
			 
			 if(!ObjectFunctions.isNullOrEmpty(getOnlineApplicationDetails().getId()))
			 {
				 setOnlineApplicationDetails((OnlineApplicationDetails)staffManager.get(OnlineApplicationDetails.class, "id="+getOnlineApplicationDetails().getId()));
			 }
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxViewWeekdayCalendar", results = { @Result(location = "event/viewWeekCalendar.jsp", name = "success") }) })
	public String ajaxViewWeekdayCalendar() throws URTUniversalException {
	    if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxViewWeekdayCalendar' method");
	    }
	    try {
                    Calendar calendar =Calendar.getInstance();
                    calendar.add(Calendar.DATE, 7);
                    setObjectList(adminManager.getEventsByDates(getUserCustId(),DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date()), DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, calendar.getTime())));
                    if (ObjectFunctions.isNotNullOrEmpty(getObjectList())) {
                        Collections.sort(getObjectList());
                    }
                    setHolidayBoardMessagesList(adminManager.getSchoolHolidaysListByDatesAndCustId(getUserCustId(),getAcademicYearId(),null,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date()),DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, calendar.getTime()),null,null,"H",0,"OrderByDate",null));
                    if (ObjectFunctions.isNotNullOrEmpty(getHolidayBoardMessagesList())) {
                        Collections.sort(getHolidayBoardMessagesList());
                    }
    		}
        catch (Exception ex) {
    	 	ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
    	 	JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
        }
        	return SUCCESS;
	}
	@Actions( { @Action(value = "doViewAllReports", results = { @Result(location = "reports/ajaxReportsLeftNav.jsp", name = "success") }) })
	public String ajaxDoViewAllReports() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoViewAllReports' method");
		}
		try {
			//setCustomer((Customer)adminManager.get(Customer.class, getUserCustId()));
			setCustomer(getCustomerByCustId());
			AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class ,getUserAcademicYearId());
			prepareSchoolFeeSettingList();
			if(!ObjectFunctions.isNullOrEmpty(academicYear))
					{
				    setAcademicYear(academicYear);
					}
			setLastName(getUser().getUserRoleDescription());
			 prepareSmsReportsMap();
		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
			@Action(value = "ajaxDoViewDownloadSheets", results = { @Result(location = "reports/ajaxDoViewDownloadSheets.jsp", name = "success") }),
			@Action(value = "ajaxFeeCollectionAndDues", results = { @Result(location = "reports/ajaxFeeCollectionAndDuesList.jsp", name = "success") }) })
	public String ajaxDoViewDownloadSheets() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoViewDownloadSheets' method");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getPlTitle())) {
				if (getPlTitle().equalsIgnoreCase("GenderwiseDetails") && StringFunctions.isNotNullOrEmpty(getTempString()) || getPlTitle().equalsIgnoreCase("TCGeneration") && StringFunctions.isNotNullOrEmpty(getTempString())) {
					setStudyClassList(adminManager.getAll(StudyClass.class, "custId=" + getUserCustId() + " and academicYearId=" + getUserAcademicYearId()));
				} else {
					if (!StringFunctions.isNullOrEmpty(getTempString()) && StringFunctions.isNotNullOrEmpty(getPlTitle())) {
						setTempString(getTempString());
						setPlTitle(getPlTitle());
						setClassList(adminManager.getAll(ClassName.class, " custId=" + getUserCustId() + " and academicYearId=" + getUserAcademicYearId()));
						setAcademicYear((AcademicYear) adminManager.get( AcademicYear.class, getUserAcademicYearId()));
					}
				}
			}
			if (!StringFunctions.isNullOrEmpty(getTitle())) {
				setPlTitle(getTitle());
				setCustomer(getCustomerByCustId());
				prepareSmsReportsMap();
				prepareFeeDuesList();
				if(getTempId()!=0)
				setSchoolTermsList(adminManager.getAll(SchoolTerms.class, " custId=" + getUserCustId() + " and academicYearId = " + String.valueOf(getUserAcademicYearId() + " and feeSettingId=" + getTempId())));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	
	// Sub Report example method
	// http://www.richardnichols.net/2010/02/simple-guide-to-sub-reports-in-jasperreports-ireport/
	// http://www.jasperassistant.com/forum/topic/823/simple_subreport_example_using_several?p3
	@Actions({
		@Action(value = "subreport", results = { @Result(location = "jasper/subreport/user.jasper",type="jasper", name = "success",params = {"dataSource", "objectList", "format", "PDF"}) })
		})
	public void  subreport() 
	{

		HashMap SIMPLE_DATA;
		JRDataSource simpleDS;
		JRMapCollectionDataSource subDS;
		JRMapCollectionDataSource subDS2;
		String path1=getSession().getServletContext().getRealPath("jasper/subreport/simpleMaster.jasper");
		try
		{
			List simpleSubMasterList = new ArrayList();
			Map simpleSubMasterMap = new HashMap();
			simpleSubMasterMap.put("subTitle", "This is the Subreport Title");
			simpleSubMasterList.add(simpleSubMasterMap);

			simpleSubMasterMap = new HashMap();
			simpleSubMasterMap.put("subTitle", "This is the Subreport Title2");
			simpleSubMasterList.add(simpleSubMasterMap);

			simpleSubMasterMap = new HashMap();
			simpleSubMasterMap.put("subTitle", "This is the Subreport Title3");
			simpleSubMasterList.add(simpleSubMasterMap);

			subDS = new JRMapCollectionDataSource(simpleSubMasterList);
			simpleSubMasterList = new ArrayList();
			simpleSubMasterMap = new HashMap();
			simpleSubMasterMap.put("subTitle", "This is the Subreport2 Title");
			simpleSubMasterList.add(simpleSubMasterMap);

			simpleSubMasterMap = new HashMap();
			simpleSubMasterMap.put("subTitle", "This is the Subreport2 Title2");
			simpleSubMasterList.add(simpleSubMasterMap);

			simpleSubMasterMap = new HashMap();
			simpleSubMasterMap.put("subTitle", "This is the Subreport2 Title3");
			simpleSubMasterList.add(simpleSubMasterMap);

			subDS2 = new JRMapCollectionDataSource(simpleSubMasterList);

			SIMPLE_DATA = new HashMap();
			SIMPLE_DATA.put("title", "SIMPLE_DATA TITLE");
			SIMPLE_DATA.put("subDS", subDS);
			SIMPLE_DATA.put("subDS2", subDS2);


			Map simpleMasterMap = new HashMap();
			simpleMasterMap.put("master", "This is the Master JRMapCollectionDataSource");
			simpleMasterMap.put("id", "subDS");
			simpleMasterMap.put("id2", "subDS2");
			List simpleMasterList = new ArrayList();
			simpleMasterList.add(simpleMasterMap);
			simpleDS = new JRMapCollectionDataSource(simpleMasterList);


			Map parameters = new HashMap();

			parameters.put("SIMPLE_DATA", SIMPLE_DATA);
			String htmFile = JasperRunManager.runReportToPdfFile(path1, parameters, simpleDS);
			log.debug("htmFile=" + htmFile);

			}
		catch (Exception ex)
		{
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		
		}
	}
		
	// Sub Report example method
	
	@Actions({
		@Action(value = "groupsPDFReport", results = { @Result(location = "jasper/subreport/user.jasper",type="jasper", name = "success",params = {"dataSource", "objectList", "format", "PDF"}) })
		})

		public String viewAllGroups() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'viewAllGroups' method");
		}

		try
		{
			String path1=getSession().getServletContext().getRealPath("jasper/subreport/user.jasper");
			log.debug(path1);
			subreport();
			String excel = "pdf";
			Date dateNow = new Date ();
	        SimpleDateFormat dateformatMMDDYYYY = new SimpleDateFormat("MMddyyyy");
	        StringBuilder nowMMDDYYYY = new StringBuilder( dateformatMMDDYYYY.format( dateNow ) );
			String date=nowMMDDYYYY.toString();
			
			JRBeanCollectionDataSource subDS = null;
			HashMap SIMPLE_DATA = new HashMap();
			SIMPLE_DATA.put("subDS", subDS);
			
			setObjectList(adminManager.getAll(ScrapMessage.class));
			if(!ObjectFunctions.isNullOrEmpty(getObjectList()))
			{
				Collections.sort(getObjectList());
				
			}
			List replyScrapList = adminManager.getAll(ReplyScrapMessage.class);
			subDS = new JRBeanCollectionDataSource(replyScrapList);
			
			setAbsentList(adminManager.getAll(User.class));
			if("excel".equalsIgnoreCase(excel))
			{
				String path=getSession().getServletContext().getRealPath("jasper/subreport/user.jrxml");
				File file=new File(path);
				if(file.exists()){
				InputStream input = new FileInputStream(file);
				JasperDesign design = JRXmlLoader.load(input); 		        	      
		        JasperReport report = JasperCompileManager.compileReport(design);
		        JRBeanCollectionDataSource jasperReports = new JRBeanCollectionDataSource(getObjectList());
		        JasperPrint print = JasperFillManager.fillReport(report, new HashMap(), jasperReports);
		        getResponse().setHeader("Content-Disposition","attachment; filename=groupsExcelReport"+date+".xls");
				OutputStream output=getResponse().getOutputStream();
		         JRXlsExporter exporterXLS = new JRXlsExporter();
		         exporterXLS.setParameter(JRExporterParameter.JASPER_PRINT,print);
		         exporterXLS.setParameter(JRExporterParameter.OUTPUT_STREAM, output);
		         exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
		         exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
		         exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
		         exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
		         exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_AUTO_DETECT_CELL_TYPE, Boolean.TRUE);
		         exporterXLS.setParameter(JRXlsAbstractExporterParameter.IS_COLLAPSE_ROW_SPAN, Boolean.TRUE);

		         exporterXLS.exportReport();	
				}
		         return null;
		    }
			else
		   if("pdf".equalsIgnoreCase(excel))
			{
			   Map simpleMasterMap = new HashMap();
			   simpleMasterMap.put("subReport1DS", subDS);
			   
			   List simpleMasterList = new ArrayList();
			   simpleMasterList.add(simpleMasterMap);
				getResponse().setHeader("Content-Disposition","attachment; filename=groupsPDFReport"+date+".pdf");
			}
			setCustId(getUserCustId());
		}
		catch(Exception ex)
		{
			log.error("Entering into 'catch block':"+ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
		@Actions( { @Action(value = "ajaxAddSections", results = { @Result(location = "academic/class/ajaxAddSection.jsp", name = "success") }) })
	public String addSections() throws URTUniversalException {
	
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxAddSections' method");
	}
	try {
		if(!StringFunctions.isNullOrEmptyNoTrim(getParamValue("classSections").trim())){
			String[] ids=getParamValue("classSections").split(",");
			if(!ObjectFunctions.isNullOrEmpty(ids)){
				if(ids.length>0){
					Section section=null;
					Section lsection=null;
					for (String token : ids) {
						if(!StringFunctions.isNullOrEmpty(token)){	
							lsection = adminManager.getSectionBySectionName(String.valueOf(token.trim()),getUserCustId()); 
							if(ObjectFunctions.isNullOrEmpty(lsection)){	
								section = new Section();
								section.setCustId(getUserCustId());
								section.setCreatedById(getUser().getId());
								section.setCreatedDate(new Date());
								section.setLastAccessDate(new Date());
								section.setLastUpdatedDate(new Date());
								section.setSection(token.trim().toUpperCase());
								adminManager.save(section);
							}else{
								super.addActionError(lsection.getSection()+" section already exist.");
								ajaxGetSections();
								return SUCCESS;
							}
							lsection=null;
							section = null;
						}
					}
				}
			}
			super.addActionMessage("Sections added successfully.");
		}
		ajaxGetSections();
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
/********************************************************************
   * Date              Name               Description
   * ============      =======		    ==================
   * August 26, 2013   Seshu		    Modified code of getting classNames list
  /********************************************************************/	
	@Actions( { @Action(value = "ajaxDoViewDownloadMarksSheets", results = { @Result(location = "reports/ajaxDownloadMarksSheetsByClassesAndExamTypes.jsp", name = "success") }) })
	public String ajaxDoViewDownloadMarksSheets() throws URTUniversalException {
	
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxDoViewDownloadMarksSheets' method");
	}
	try {
		if(getUserAcademicYearId() > 0){
			checkClassHavingStudentsOrNot(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
			setExamTypeList(adminManager.getAll(ExamTypes.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
			if(ObjectFunctions.isNotNullOrEmpty(getExamTypeList())){
				Collections.sort(getExamTypeList());
			}
		}
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	} 
	@Actions({ @Action(value = "ajaxDoHostelInformation", results = { @Result(location = "ajaxHostelInformation.jsp", name = "success") }) })
		public String ajaxDoHostelInformation() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoHostelInformation' method");
			}
			try {
			    List<Hostel> hostelList=adminManager.getAll(Hostel.class, "custId="+getUserCustId());
			    if(ObjectFunctions.isNotNullOrEmpty(hostelList))
				setHostel(hostelList.get(0));
				//setCustomer((Customer)adminManager.get(Customer.class, getUserCustId()));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
    @Actions( { @Action(value = "ajaxDoAddHostelDetails", results = { @Result(location = "ajaxHostelInformation.jsp", name = "success") }) })
    public String ajaxDoAddHostelDetails() throws URTUniversalException {
	if (log.isDebugEnabled()) {
	    log.debug("Entering 'ajaxDoAddHostelDetails' method");
	}
	try {
	    setHostel(null);
	    setAddress(null);
	    setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
	    if (getTempId() > 0) {
		setHostel((Hostel) adminManager.get(Hostel.class, getTempId()));
		if (!ObjectFunctions.isNullOrEmpty(getHostel())) {
		    if (getHostel().getAddressId() > 0) {
			setAddress((Address) adminManager.get(Address.class,getHostel().getAddressId()));
		    }
		}
	    }
	} catch (Exception ex) {
	    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
    }
	@Actions({ @Action(value = "ajaxUpdateHostelDetails", results = { @Result(location = "viewHostelDetails.jsp", name = "success") }) })
		public String ajaxUpdateHostelDetails() {
	    if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxUpdateHostelDetails' method");
	    	}
	    try {
		Hostel hostel=null;
		Address address=null;
		//AcademicYear year=null;
				if(getHostel().getId() > 0) {
		hostel=(Hostel)adminManager.get(Hostel.class, getHostel().getId());
		}else {
		    hostel=new Hostel();
		}
		if(getHostel().getAddressId() > 0) {
			address=(Address)adminManager.get(Address.class, getHostel().getAddressId());
			address.setLastUpdatedById(getUser().getId());
			address.setLastUpdatedDate(new Date());
		     }else {
			address=new Address();
			address.setCreatedById(getUser().getId());
			address.setCreatedDate(new Date());
		     }
		if(!ObjectFunctions.isNullOrEmpty(address)){
		    address.setCity(getAddress().getCity());
		    address.setStreetName(getAddress().getStreetName());
		    address.setPostalCode(getAddress().getPostalCode());
		    address.setState(getAddress().getState());
		    address.setLastAccessDate(new Date());
		    address=adminManager.saveAddress(address);
		}
		if(!ObjectFunctions.isNullOrEmpty(hostel)){
		    hostel.setAddressId(address.getId());
		    hostel.setStatus(Constants.YES_STRING);
		    hostel.setCustEmail(getHostel().getCustEmail());
		    hostel.setHostelName(getHostel().getHostelName());
		    hostel.setContactNumber(getHostel().getContactNumber());
		    hostel.setMobileNumber(getHostel().getMobileNumber());
		    hostel.setCustId(getUserCustId());
		    hostel.setCreatedById(getUser().getId());
		    hostel.setCreatedDate(new Date());
		    hostel.setLastAccessDate(new Date());
		   
		    adminManager.save(hostel);
		    setObjectList(adminManager.getAll(Hostel.class, "custId="+getUserCustId()));
		    if(getHostel().getId() > 0) 
			super.addActionMessage("Hostel details updated successfully.");
		    else
			super.addActionMessage("Hostel details added successfully.");
		}
			ajaxViewHostelDetails();
			
		} catch (Exception ex) {
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {@Action(value = "ajaxViewHostelDetails", results = { @Result(location = "viewHostelDetails.jsp", name = "success") }) })
		public String ajaxViewHostelDetails() throws URTUniversalException {
    		if (log.isDebugEnabled()) {
    		    log.debug("Entering 'ajaxViewHostelDetails' method");
    		}
    		try {
    		    setObjectList(adminManager.getAll(Hostel.class, "custId="+getUserCustId()));
    		} catch (Exception ex) {
    		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
    		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
    		}	
    	return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDeleteHostel", results = { @Result(location = "viewHostelDetails.jsp", name = "success") }) })
	    public String ajaxDeleteHostel() throws URTUniversalException {
		if (log.isDebugEnabled()) {
		    log.debug("Entering 'deleteHostel' method");
		}
		try {
		    if (getTempId() > 0) {
			     List<Object> messesList = adminManager.getAll("select * from messHostel where hostelId="+getTempId());
			     List<Building> buildingsList=adminManager.getAll(Building.class, "hostelId="+getTempId());
			    if(ObjectFunctions.isNullOrEmpty(messesList) && ObjectFunctions.isNullOrEmpty(buildingsList)) {
				    adminManager.remove("messHostel","hostelId=" + getTempId());
				    adminManager.remove(Hostel.class,getTempId());
				    super.addActionMessage("Hostel deleted successfully.");
			    }else{
			    	if(!ObjectFunctions.isNullOrEmpty(buildingsList))
			    		super.addActionError("Hostel contains buildings.You can't delete hostel.");
			    	else
			    		super.addActionError("Hostel contains mess.You can't delete hostel.");
			    }
		    }    
		    ajaxViewHostelDetails();
		} catch (Exception ex) {
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	    }

	
	
	@Actions( { @Action(value = "ajaxAddCreatedByAndLastUpdatedBydata", results = { @Result(location = "fee/ajaxSchoolFeeSettings.jsp", name = "success") }) })
	public void ajaxAddCreatedByAndLastUpdatedBydata() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddCreatedByAndLastUpdatedBydata' method");
		}
		try {
		List<AbstractEntityPersister> tableNames=adminManager.getAllTableNames();
		if(ObjectFunctions.isNotNullOrEmpty(tableNames)){
			ViewUserRoles masterAdmin=(ViewUserRoles)adminManager.get(ViewUserRoles.class, "roleName='ROLE_MASTERADMIN'");
			List<Object[]> userRoles=null;
			for(AbstractEntityPersister tableName:tableNames){
				String[] columnNames=tableName.getPropertyNames();
				if(!ObjectFunctions.isNullOrEmpty(columnNames)){
					log.debug("Table  :"+tableName.getTableName());
					for(String column:columnNames){
						if("createdBy".equalsIgnoreCase(column)){
							if(!ObjectFunctions.isNullOrEmpty(masterAdmin)){
								adminManager.updateCreatedByRecords(tableName.getTableName(),masterAdmin.getAcountId()+"","System");
							}
							userRoles=adminManager.getAllUsersByCretedBy(tableName.getTableName());
							if(ObjectFunctions.isNotNullOrEmpty(userRoles)){
									for(Object[] object : userRoles)
					                 {
										 if (!ObjectFunctions.isNullOrEmpty(object)) {
											 adminManager.updateCreatedByRecords(tableName.getTableName(),object[1].toString(),object[0].toString());
										 }
					                 }
									break;
							}
						}
						column=null;
				}
				for(String column:columnNames){
					if("lastUpdatedBy".equalsIgnoreCase(column)){
						if(!ObjectFunctions.isNullOrEmpty(masterAdmin)){
							adminManager.updateLastUpdatedByRecords(tableName.getTableName(),masterAdmin.getAcountId()+"","System");
						}
						userRoles=adminManager.getAllUsersByUpdatedBy(tableName.getTableName());
						if(ObjectFunctions.isNotNullOrEmpty(userRoles)){
								for(Object[] object : userRoles)
				                 {
									 if (!ObjectFunctions.isNullOrEmpty(object)) {
										 adminManager.updateLastUpdatedByRecords(tableName.getTableName(),object[1].toString(),object[0].toString());
									 }
				                 }
								break;
						}
					}
				}
					columnNames=null;
			}
				tableName=null;
			}
			tableNames=null;
		}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		} 
	}
	@Actions( { @Action(value = "ajaxRemoveCreatedByLastUpdatedByColumns", results = { @Result(location = "fee/ajaxSchoolFeeSettings.jsp", name = "success") }) })
	public void ajaxRemoveCreatedByLastUpdatedByColumns() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveCreatedByLastUpdatedByColumns' method");
		}
		try {
		List<AbstractEntityPersister> tableNames=adminManager.getAllTableNames();
		if(ObjectFunctions.isNotNullOrEmpty(tableNames)){
			for(AbstractEntityPersister tableName:tableNames){
				String[] columnNames=tableName.getPropertyNames();
				if(!ObjectFunctions.isNullOrEmpty(columnNames)){
					log.debug("Table  :"+tableName.getTableName());
					for(String column:columnNames){
						if("createdById".equalsIgnoreCase(column)){
							adminManager.removeLastUpdatedByAndCreatedByRecords(tableName.getTableName());
							break;
						}
					}
				}
					tableName=null;
			}
			tableNames=null;
		}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		} 
	}
	@Actions( { @Action(value = "ajaxAddCustomerImage", results = { @Result(location = "ajaxSchoolInformation.jsp", name = "success") })})
	public String addUserImage()throws URTUniversalException
	{
	if (log.isDebugEnabled()) {
		log.debug("Entering 'addUserImage' method");
	}
	try
	{
		setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
		setCountryList((List<Country>)SMSLookUpDataCache.lookUpDataMap.get(Constants.COUNTRY_LIST));
		Customer customer=(Customer)adminManager.get(Customer.class, getUserCustId());
		if(!ObjectFunctions.isNullOrEmpty(String.valueOf(customer))){
			long custImage = 0;
			if(!ObjectFunctions.isNullOrEmpty(customer.getCustomerOrgImage()))
				custImage = customer.getCustomerOrgImage().getId();
			if(getUploadFileName()!= null){
				UserImage attachment=null;
				try {
					attachment = profileImageUpload(Constants.FILE_TYPE_IMAGE,customer.getId(),getUserAcademicYearId(),custImage);
					if(!ObjectFunctions.isNullOrEmpty(attachment))
					{
						customer.setCustomerOrgImage(attachment);
					}
					adminManager.save(customer);
					getSession().removeAttribute("custImage");
					getSession().setAttribute("custImage",customer.getCustomerLogo());
					super.addActionMessage("School logo uploaded successfully.");
					//getResponse().sendRedirect(getRequest().getContextPath()+"/subscription/userAccess.do?requestURL="+getRequest().getContextPath()+"/admin/manageAcademics.do?id=dashboard");
					setCustomer(customer);
					attachment = null;
					customer = null;
				} catch (Throwable e) {
					e.printStackTrace();//RayGunException raygex = new RayGunException();raygex.sendRayGunException(e);raygex=null;
				}	
			}
		 }
		ajaxDoSchoolInformation();
	}catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxCropCustomerImage", results = { @Result(location = "ajaxSchoolInformation.jsp", name = "success") }) })
	public String cropCustomerImage()throws URTUniversalException
	{
		if (log.isDebugEnabled()) {
			log.debug("Entering 'cropCustomerImage' method");
		}
		try
		{
			CropImage cropImage=new CropImage();
			setCustomer(getCustomerByCustId());
			cropImage.cropImage(getSession().getServletContext().getRealPath(getCustomer().getCustomerOrgImage().getPath()+getCustomer().getCustomerOrgImage().getName()),getSession().getServletContext().getRealPath(getCustomer().getCustomerOrgImage().getPath()+getCustomer().getCustomerOrgImage().getThumbNail()),getX(),getY(),getW(),getH());
			ThumbNail thumbNail = new ThumbNail();
			thumbNail.createThumbNail(getSession().getServletContext().getRealPath(getCustomer().getCustomerOrgImage().getPath()+getCustomer().getCustomerOrgImage().getThumbNail()), getSession().getServletContext().getRealPath(getCustomer().getCustomerOrgImage().getPath()+"thumb_"+getCustomer().getCustomerOrgImage().getName()));
			ThumbNail stampThumbNail = new ThumbNail(37,37);
			stampThumbNail.createStamp(getSession().getServletContext().getRealPath(getCustomer().getCustomerOrgImage().getPath()+"thumb_"+getCustomer().getCustomerOrgImage().getName()), getSession().getServletContext().getRealPath(getCustomer().getCustomerOrgImage().getPath()+"custStamp_"+getCustomer().getCustomerOrgImage().getName()));
	   		 super.addActionMessage("School logo uploaded  successfully.");
 		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	@Actions( {
		@Action(value = "ajaxRemoveLeaveSetting", results = { @Result(location = "staff/leaves/ajaxViewManageLeavesList.jsp", name = "success") })})
		public String ajaxRemoveLeaveSetting() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveLeaveSetting' method");
			}
			try {
				if(getLeaveManagement().getId() > 0 && StringFunctions.isNotNullOrEmpty(getAnyId()) && StringFunctions.isNotNullOrEmpty(getAnyTitle())){
					int leavesCount=adminManager.getCount("vw_staffLeaveDetails", "leaveManagementId="+getLeaveManagement().getId()+" and roleName='"+getAnyTitle()+"' and permanentOrContract='"+getAnyId()+"' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by staffId,permanentOrContract");
					if(leavesCount > 0){
						super.addActionError("Leaves are already used for this role.You can't remove this leave setting.");
					}else{
						adminManager.remove("leaveManagement", "id="+getLeaveManagement().getId()+" and permanentOrContract='"+getAnyId()+"' ");
						super.addActionMessage("Leave setting removed successfully.");
					}
				}
				viewAllManageLeaves();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxManagePromoteStudents", results = { @Result(location = "academic/class/ajaxManagePromotionStudents.jsp", name = "success") }) })
	public String ajaxManagePromoteStudents() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxManagePromoteStudents' method");
		}
		try {
			if(getUserAcademicYearId() > 0){
				setTempList(adminManager.getAll(ViewPromotionClassDetails.class,"academicYearId="+getUserAcademicYearId()));
				if(ObjectFunctions.isNotNullOrEmpty(getTempList()))
					Collections.sort(getTempList());
				setStudyClassList(adminManager.getAll(StudyClass.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
				if(ObjectFunctions.isNotNullOrEmpty(getStudyClassList()))
					Collections.sort(getStudyClassList());
				setObjectList((List<Medium>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MEDIUM_LIST));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		} 
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxCreatePromoteClass", results = { @Result(location = "academic/class/ajaxPromotionClassSettings.jsp", name = "success") }) })
	public String ajaxCreatePromoteClass() throws URTUniversalException {
	
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCreatePromoteClass' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getTempString())){
					JSONArray promotedClassJsonArray=new JSONArray(getTempString());
					JSONObject promotionClassJson=null;
					String classSectionId=null;
					String promotedClass=null;
					long mediumId=0;
					String[] classAndSection=null;
					long promoteId=0;
					PromoteClass promoteClass=null;
					if(!ObjectFunctions.isNullOrEmpty(promotedClassJsonArray) && getUserAcademicYearId() > 0){
						AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class, getUserAcademicYearId());
						if(!ObjectFunctions.isNullOrEmpty(academicYear)){
							for(int i=0; i < promotedClassJsonArray.length();i++)
							{
								promotionClassJson=promotedClassJsonArray.getJSONObject(i);
								if(!ObjectFunctions.isNullOrEmpty(promotionClassJson))
								{
									classSectionId =(String) promotionClassJson.get("classSectionId");
									promotedClass =(String) promotionClassJson.get("promotedClass");
									promoteId=Long.valueOf((String) promotionClassJson.get("promotionId"));
									mediumId=Long.valueOf((String) promotionClassJson.get("mediumId"));
									if(promoteId > 0){ 
										if(!classSectionId.equalsIgnoreCase("0") && StringFunctions.isNullOrEmpty(promotedClass) || "- select class -".equalsIgnoreCase(promotedClass)){
											adminManager.remove(PromoteClass.class, promoteId);
											continue;
										}
										promoteClass=(PromoteClass)adminManager.get(PromoteClass.class, promoteId);
										promoteClass.setLastUpdatedById(getUser().getId());
									}
									else{
										if(!classSectionId.equalsIgnoreCase("0") && StringFunctions.isNotNullOrEmpty(promotedClass) && !"- select class -".equalsIgnoreCase(promotedClass)){
												promoteClass=new PromoteClass();
												promoteClass.setCreatedById(getUser().getId());
												promoteClass.setCreatedDate(new Date());
											}
										}
										if(!ObjectFunctions.isNullOrEmpty(promoteClass)){
											classAndSection=promotedClass.trim().split("-");
											if(!ObjectFunctions.isNullOrEmpty(classAndSection)){
												if(classAndSection.length <=2 ){
													if(StringFunctions.isNotNullOrEmpty(classAndSection[0])){
														promoteClass.setCurrentClassSectionId(Long.valueOf(classSectionId));
														promoteClass.setMediumId(mediumId);
														promoteClass.setAcademicYear(academicYear);
														promoteClass.setLastAccessDate(new Date());
														promoteClass.setLastUpdatedDate(new Date());
														promoteClass.setPromoteClassName(classAndSection[0].trim().toUpperCase());
														if(classAndSection.length == 2){
															if(StringFunctions.isNullOrEmpty(classAndSection[1]))
																promoteClass.setPromoteSectionName("");
															else
																promoteClass.setPromoteSectionName(classAndSection[1].trim().toUpperCase());
														}else
															promoteClass.setPromoteSectionName("");
														adminManager.save(promoteClass);
													}
												}
												classAndSection=null;
											}
											promoteClass=null;
										}
								}
						    }
							super.addActionMessage("You have successfully added Promotion class details.");
						}
					}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			ajaxManagePromoteStudents();
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoPromoteStudents", results = { @Result(location = "academic/class/ajaxPromoteStudents.jsp", name = "success") }) })
	public String ajaxDoPromoteStudents() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoPromoteStudents' method");
		}
		try {
			if(getUserAcademicYearId() > 0){
				setObjectList(null);
				setTempList(null);
				setChkBoxSelectedIds(null);
				setAnyId(null);//Ravi Theja Here i am change the code to separate the classes have promoted or not.
				setClassList(adminManager.getAll(ViewPromotionClassDetails.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and promotionId!=0 and promoteProcessCompleted='"+Constants.NO_STRING+"'"));
				setClassStudentsList(adminManager.getAll(ViewPromotionClassDetails.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and promotionId!=0 and promoteProcessCompleted='"+Constants.YES_STRING+"'"));
				setExamTypeList(adminManager.getAll(ExamTypes.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
				if(ObjectFunctions.isNotNullOrEmpty(getExamTypeList())){
					Collections.sort(getExamTypeList());
					getTeachingRoleMap().put("ES","Exam Marks");
				}
				getTeachingRoleMap().put("AD","Attendance");
				getTeachingRoleMap().put("SF","School Fee");
				Customer customer=(Customer)adminManager.get(Customer.class, getUserCustId());
				if(!ObjectFunctions.isNullOrEmpty(customer)){
					if(customer.isHostelModuleStatus())
						getTeachingRoleMap().put("HF","Hostel Fee");
					if(customer.isTransportModuleStatus())
						getTeachingRoleMap().put("TF","Transport Fee");
				}
				if(ObjectFunctions.isNotNullOrEmpty(getClassList())){
					Collections.sort(getClassList());
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		} 
		return SUCCESS;
	}
	/********************************************************************
	 * Date              	Name               Description
	 * ========          	============       ==================
	 * Sep 18th, 2013     	Seshu		       Code change for displying students having less attendance. 
	/********************************************************************/	
	@Action(value = "ajaxPromoteStudents", results = { @Result(location = "academic/class/ajaxPromotionClassDescription.jsp", name = "success") })
	public String ajaxPromoteStudents() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPromoteStudents' method");
		}
		try {
			if(getUserAcademicYearId() > 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())){
				List<Object[]> studentMarks=null;
				int feeCount=0;
				AcademicYear academicYear = null;
				setStudentsList(null);
				setObjectList(null);
				StringBuffer remarks = null;
				double totalWorkingDays=0;
				double absentiesCount=0;
				StringBuffer failurePromoteStudIds = new StringBuffer();
				boolean isAttendance,isSchoolFee,isHostelFee,isTransportFee ;
	        	isAttendance = isSchoolFee = isHostelFee = isTransportFee = false;
	        	String endDate = null;
	        	Object[] studAtt = null;
	        	StringBuffer query = null;
	        	query = new StringBuffer("classSectionId in").append(getSelectedId()).append(" and status='").append(Constants.YES_STRING).append("' and academicYearId=")
	        	.append(getUserAcademicYearId()).append(" order by classSectionId");
	        	log.debug(query.toString());
	        	List<Student> students=adminManager.getAll(Student.class,query.toString());
	        	if(ObjectFunctions.isNotNullOrEmpty(students)){
	        		setTempBoolean(true);
	        		academicYear = (AcademicYear)adminManager.get(AcademicYear.class, getUserAcademicYearId());
	        		if(!ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds())){
	        			for(String promotionSetting : getChkBoxSelectedIds()){
							if("AD".equalsIgnoreCase(promotionSetting)){
								if(DateFunctions.compare2Dates(new Date(),academicYear.getStartDate()) && DateFunctions.compare2Dates(academicYear.getEndDate(),new Date()))
									endDate = DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date());
		    					else if(new Date().after(academicYear.getEndDate()))
		    						endDate = DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, academicYear.getEndDate());
								if("D".equalsIgnoreCase(academicYear.getManageAttendanceBy())){
									totalWorkingDays = adminManager.fetchTotalWorkingDays(academicYear.getId(),endDate);
								}
								isAttendance = true;
							}else if("SF".equalsIgnoreCase(promotionSetting)){
								isSchoolFee = true;
							}else if("HF".equalsIgnoreCase(promotionSetting)){
								isHostelFee = true;
							}else if("TF".equalsIgnoreCase(promotionSetting)){
								isTransportFee = true;
							}
						}
	        		}
	        		failurePromoteStudIds.append("(");
	        		if(StringFunctions.isNullOrEmpty(getTitle()) && ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds())){
	        			//do nothing
	        		}else{
	        			query = new StringBuffer("SELECT studyClass.className, studyClass.section ,(select name from medium where id=studyClass.mediumId) as mediumName FROM (select className,section,mediumId as mediumId from studyClass As st where academicYearId="+getUserAcademicYearId()+" group by className,section union all select promoteClassName,promoteSectionName,promoteClassMediumId as mediumId from vw_promotionClassesDetails where academicYearId="+getUserAcademicYearId()+" and promoteClassName!='' group by promoteClassName,promoteSectionName) AS studyClass GROUP BY studyClass.className,studyClass.section");
	        			setTempList(adminManager.getAll(query.toString()));
						for(Student student : students){
							remarks=new StringBuffer();
							StringBuffer failureReason=new StringBuffer();
							//Checking whether students are passed in all exams or not.
							if(isSchoolFee){
								query = new StringBuffer("studentId=").append(student.getId()).append(" and settingName in ('Non Term Fee','Terms Fee') and paymentStatus='N'");
								feeCount = adminManager.getCount("vw_studentFeePaymentDetails", query.toString());
								if(feeCount > 0)
									//remarks.append("<h1>School Fee is not paid.</h1>");
									remarks.append("<a data-toggle='modal' href='#responsive' onclick='javascript:PopupTcDetials("+student.getId()+","+student.getClassNameId() +")';> School Fee balance </a>");
								failureReason.append("School Fee balance. ");
							}
							
							if(StringFunctions.isNotNullOrEmpty(getAnyId())){
								query=new StringBuffer("select marks.present,SUM(marks.obtainedMarks),marks.minMarks  FROM (select sm.present,sm.obtainedMarks,et.minMarks,et.id as examTypeId,es.classSubjectId from examSchedules es JOIN student s on (es.classSectionId = s.classSectionId and es.academicYearId=s.academicYearId) LEFT JOIN examTypes et on (et.id=es.examTypeId and et.academicYearId = es.academicYearId) LEFT JOIN studentMarks sm on (es.id=sm.examScheduleId and sm.studId=").append(student.getId()).append(") WHERE s.id=")
								.append(student.getId()).append(" and et.id in ").append(getAnyId()).append(" order by sm.present) as marks group by marks.examTypeId,marks.classSubjectId order by marks.present");
								studentMarks = adminManager.getAll(query.toString());
								//Need to check whether staff submitted marks or not
								if(ObjectFunctions.isNotNullOrEmpty(studentMarks))
								{
									for(Object[] studMarks:studentMarks){
										if(ObjectFunctions.isNullOrEmpty(studMarks[0])){
											remarks.append(" Marks not uploaded for this student.");
											failureReason.append("Marks not uploaded for this student. ");
											break;
										}
										else{
											if(studMarks[0].toString().equals("N")){
												remarks.append(" Absent in exams.");
												failureReason.append("Absent in exams. ");
												break;
											}else if(!ObjectFunctions.isNullOrEmpty(studMarks[1]) && !ObjectFunctions.isNullOrEmpty(studMarks[2])){
												if(Float.valueOf(studMarks[1].toString()) < Float.valueOf(studMarks[2].toString())){
													remarks.append(" Failed in exams.");
													failureReason.append("Failed in exams. ");
													break;
												}
											}
										}
										studMarks=null;
									}
									studentMarks=null;
								}
							}
							if(isAttendance){
								if("D".equalsIgnoreCase(academicYear.getManageAttendanceBy())){
									absentiesCount = adminManager.fetchStudentAbsentiesCount(student.getId(),endDate);
								}else{
									query = new StringBuffer("select IFNULL(sum(totalWorkingDays),0) as totalWorkingDays,IFNULL(sum(noOfPresentDays),0) as noOfPresentDays from studentMonthlyAttendance where studentId=")
									.append(student.getId());
									studAtt = adminManager.get(query.toString());
									if(!ObjectFunctions.isNullOrEmpty(studAtt)){
										if(!ObjectFunctions.isNullOrEmpty(studAtt[0]) && !ObjectFunctions.isNullOrEmpty(studAtt[1])){
											totalWorkingDays = Double.valueOf(studAtt[0].toString());
											absentiesCount = (totalWorkingDays - Double.valueOf(studAtt[1].toString()));
										}
									}
								}
								if(totalWorkingDays > 0){
									if((roundTwoDecimals(((totalWorkingDays - absentiesCount) / totalWorkingDays) * 100)) < academicYear.getAttendancePercentage())
									{
										remarks.append("Attendance is less.");
										failureReason.append("Attendance is less. ");
									}
								}
							}
							
							if(isTransportFee){
								if("T".equalsIgnoreCase(student.getTransportMode()) && !ObjectFunctions.isNullOrEmpty(student.getRouteBoardingPoints())){
									query = new StringBuffer("studentId=").append(student.getId()).append(" and settingName='Transport Fee' and paymentStatus='N'");
									feeCount = adminManager.getCount("vw_studentFeePaymentDetails", query.toString());
									//transportFee=adminManager.getAll(ViewStudentTransportFeePaymentDetails.class, "studentId="+student.getId()+" and paymentStatus='N'");
									if(feeCount > 0)
									{
										remarks.append(" Transport Fee is not paid.");
										failureReason.append("Transport Fee is not paid. ");
									}
										
								}
							}
							if(isHostelFee){
								if(!ObjectFunctions.isNullOrEmpty(student.getBed())){
									query = new StringBuffer("studentId=").append(student.getId()).append(" and settingName='Hostel Fee' and paymentStatus='N'");
									feeCount = adminManager.getCount("vw_studentFeePaymentDetails", query.toString());
									if(feeCount > 0)
									{
										remarks.append(" Hostel Fee is not paid.");
										failureReason.append("Hostel Fee is not paid. ");
									}
										
								}
							}
							//If user wants check promotable conditions and don't want to view all students and view only failure promotable students
			        		if(!ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds()) && StringFunctions.isNullOrEmpty(getTitle())){
			        			if(remarks.length() > 0){
									student.setTempString(remarks.toString());
									student.setErrorMsg(failureReason.toString());
									getStudentsList().add(student);
									failurePromoteStudIds.append(student.getId()+",");
								}
			        		}else if(StringFunctions.isNotNullOrEmpty(getTitle()) && !ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds()) || StringFunctions.isNotNullOrEmpty(getTitle()) && ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds())){
			        			//If user wants to check promotable conditions and user want to view all students.
			        			//If user wants to view all students and don't want to check all conditions.
			        			student.setTempString(remarks.toString());
			        			student.setErrorMsg(failureReason.toString());
								getStudentsList().add(student);
								failurePromoteStudIds.append(student.getId()+",");
			        		}
							remarks=null;
							student=null;
							absentiesCount = 0;
						}
	        		}
					failurePromoteStudIds.append("0)");
					setAnyTitle(failurePromoteStudIds.toString());
					academicYear = null;
					remarks = null;
					studentMarks=null;
					students=null;
				}else
					setTempBoolean(false);
	        	endDate = null;
	        	studAtt = null;
	        	query = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		} 
		return SUCCESS;
	}
/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * Jan 23, 2014		 Seshu				Add transport module future academic year data.
/********************************************************************/
	@Action(value = "ajaxPromoteStudentstoClasses", results = { @Result(location = "academic/class/ajaxPromoteStudents.jsp", name = "success") })
	public String ajaxPromoteStudentstoClasses() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPromoteStudentstoClasses' method");
		}
		try {
		//	StudyClass studyClass=null;
			SyllabusType syllabusType=null;
			JSONArray promoteStudentsJsonArray=null;
			JSONObject promoteStudentJson=null;
			
			JSONArray failureStudentsJsonArray=null;
			JSONObject failureStudentJson=null;
			
			long studId ;
			String promotableClassMedium = null;
			String[] classAndSection=null;
			String promotableClassName=null;
			String promotableSectionName=null;
			log.debug("getTempString:" + getTempString()); 
			log.debug("query String:" + getQueryString()); 
			ajaxAddNextYearSchoolInfo();
			if(StringFunctions.isNotNullOrEmpty(getSelectedId()) && !ObjectFunctions.isNullOrEmpty(getAcademicYear())){
				Customer customer=(Customer)adminManager.get(Customer.class, getUserCustId());
				if(!ObjectFunctions.isNullOrEmpty(customer)){
					if(ObjectFunctions.isNotNullOrEmpty(customer.getSyllabusType())){
						syllabusType = (SyllabusType)ConvertUtil.convertSetToList(customer.getSyllabusType()).get(0);
					}
				}
				List<ViewPromotionClassDetails> promotionClasses= adminManager.getAll(ViewPromotionClassDetails.class, "classSectionId in"+getSelectedId()+" and promotionId!=0");
				if(ObjectFunctions.isNotNullOrEmpty(promotionClasses)){
					HashSet<StudyClass> promotedStudyClasses=new HashSet<StudyClass>();//For updating student rollNumbers of all student
					HashMap<Long,ClassName> classNames=new HashMap<Long, ClassName>();//For reusing these objects to all class students
					HashMap<Long,StudyClass> studyClasses=new HashMap<Long, StudyClass>();//For reusing these objects to all class students
					HashMap<Long,Long> futureAcademicRoutes = new HashMap<Long, Long>();
					HashMap<Long,Long> futureAcademicVehicls = new HashMap<Long, Long>();
					for(ViewPromotionClassDetails promoteClass : promotionClasses){
						if(StringFunctions.isNotNullOrEmpty(promoteClass.getPromoteClassName())){
							promotableClassName = promoteClass.getPromoteClassName().trim().toUpperCase();
							promotableSectionName = promoteClass.getPromoteSectionName().trim().toUpperCase();
							promotableClassMedium=promoteClass.getPromoteClassMedium().trim();
							if("COURSE COMPLETED".equalsIgnoreCase(promotableClassName)){
								generatePromoteStudents(0,getAnyTitle(),promoteClass.getClassSectionId(),null,null,null,null,null,null);
							}else{
								generateFutureAcademicYearClasses(promoteClass.getClassId(),promoteClass.getClassSectionId(),promotableClassName,promotableSectionName,classNames,studyClasses,promotableClassMedium,syllabusType,promotedStudyClasses);
								generatePromoteStudents(0,getAnyTitle(),promoteClass.getClassSectionId(),classNames,studyClasses,null,null,futureAcademicRoutes,futureAcademicVehicls);
							}
							PromoteClass promClass=(PromoteClass)adminManager.get(PromoteClass.class, promoteClass.getPromotionId());
							if(!ObjectFunctions.isNullOrEmpty(promClass)){
								promClass.setPromoteProcessCompleted(true);
								adminManager.saveOrUpdateObject(promClass);
								promClass=null;
							}
							promotableClassName=null;
							promotableSectionName=null;
						}
					}
					
					//this if condition for updating the failure reasons for the student
					if(StringFunctions.isNotNullOrEmpty(getQueryString()))
					{
						log.debug("********* calling the failure reason if condition *************");
						failureStudentsJsonArray=new JSONArray(getQueryString());
						for(int i=0;i<failureStudentsJsonArray.length();i++)
						{
							failureStudentJson=failureStudentsJsonArray.getJSONObject(i);
							if(!ObjectFunctions.isNullOrEmpty(failureStudentJson))
							{
								studId = Long.valueOf((String)failureStudentJson.get("studId"));
								String failureReason =(String) failureStudentJson.get("failureReason");
								
								if(studId > 0){
									
									Student failurePromoteStudent=(Student)adminManager.get(Student.class, "id="+studId+" and custId="+getUserCustId());
									if(!ObjectFunctions.isNullOrEmpty(failurePromoteStudent))
									{
										failurePromoteStudent.setFailurePromotableResons(failureReason);
										adminManager.save(failurePromoteStudent);	
									}
									failurePromoteStudent = null;
								}
								failureStudentJson=null;
							}
						}
						failureStudentsJsonArray=null;
					}
					
					
					if(StringFunctions.isNotNullOrEmpty(getTempString())){
						promoteStudentsJsonArray=new JSONArray(getTempString());
						for(int i=0;i<promoteStudentsJsonArray.length();i++)
						{
							promoteStudentJson=promoteStudentsJsonArray.getJSONObject(i);
							if(!ObjectFunctions.isNullOrEmpty(promoteStudentJson))
							{
								studId = Long.valueOf((String)promoteStudentJson.get("studId"));
								promotableClassName =(String) promoteStudentJson.get("promotableClass");
								promotableClassMedium=(String) promoteStudentJson.get("promotableClassMedium");
								if(StringFunctions.isNotNullOrEmpty(promotableClassName) && studId > 0){
									if("COURSE COMPLETED".equalsIgnoreCase(promotableClassName)){
										generatePromoteStudents(studId,null,0,null,null,null,null,null,null);
									}else{
										classAndSection=promotableClassName.split("-");
										if(!ObjectFunctions.isNullOrEmpty(classAndSection)){
											if(classAndSection.length <=2 ){
												if(StringFunctions.isNotNullOrEmpty(classAndSection[0])){
													if(classAndSection.length == 2){
														if(StringFunctions.isNullOrEmpty(classAndSection[1])){
															//need to get mediumId
															generateFutureAcademicYearClasses(0,0,classAndSection[0].trim().toUpperCase(),"",null,null,promotableClassMedium.trim(),syllabusType,promotedStudyClasses);
															generatePromoteStudents(studId,null,0,null,null,classAndSection[0].trim().toUpperCase(),"",futureAcademicRoutes,futureAcademicVehicls);
														}
														else{
															generateFutureAcademicYearClasses(0,0,classAndSection[0].trim().toUpperCase(),classAndSection[1].trim().toUpperCase(),null,null,promotableClassMedium.trim(),syllabusType,promotedStudyClasses);
															generatePromoteStudents(studId,null,0,null,null,classAndSection[0].trim().toUpperCase(),classAndSection[1].trim().toUpperCase(),futureAcademicRoutes,futureAcademicVehicls);
														}
													}else{
														generateFutureAcademicYearClasses(0,0,classAndSection[0].trim().toUpperCase(),"",null,null,promotableClassMedium,syllabusType,promotedStudyClasses);
														generatePromoteStudents(studId,null,0,null,null,classAndSection[0].trim().toUpperCase(),"",futureAcademicRoutes,futureAcademicVehicls);
													}
												}
											}
											classAndSection=null;
										}
									}
								}
								promotableClassName=null;
								promoteStudentJson=null;
								promotableClassMedium=null;
							}
						}
						promoteStudentsJsonArray=null;
					}
					
					// Forword the pendding fee amount to future academic year of all students
					if(StringFunctions.isNotNullOrEmpty(getEmpId().toString())){
						String studentId[]=getEmpId().split(",");
						for(String studsId:studentId){
							if(Long.valueOf(studsId)!=0){
								Object[] partialPaidAmount = adminManager.get("select id,SUM(feeAmount),paymentStatus from vw_studentFeePaymentDetails where studentId="+studsId+ "  and paymentStatus='"+ Constants.NO_STRING + "'");
								if (!ObjectFunctions.isNullOrEmpty(partialPaidAmount) && !ObjectFunctions.isNullOrEmpty(partialPaidAmount[1]) && !ObjectFunctions.isNullOrEmpty(partialPaidAmount[2])) {
									StudentAcademicPendingFee partialUnPaidAmount=new StudentAcademicPendingFee();
									partialUnPaidAmount.setStudentId(Long.valueOf(studsId));
									partialUnPaidAmount.setCustId(getUserCustId());
									partialUnPaidAmount.setAcademicYear(getAcademicYear());
									partialUnPaidAmount.setPartialFeeAmount(Double.valueOf(partialPaidAmount[1].toString()));
									partialUnPaidAmount.setPaymentSattus(partialPaidAmount[2].toString());
									adminManager.save(partialUnPaidAmount);	
								}
							}
						}
					}
					//Need to implement rollNumber 
					if(ObjectFunctions.isNotNullOrEmpty(promotedStudyClasses)){
						Iterator<StudyClass> iterator=promotedStudyClasses.iterator();
						StudyClass clas=null;
 						 while(iterator.hasNext()){
 							 try{
 								 clas=iterator.next();
								 adminManager.updateStudentRollNumberByClassSectionId(clas.getId());
								 clas.setFilledSeats(studentManager.getClassStudentsCountByClassIdandStatus(clas.getId(), Constants.YES_STRING,getUserCustId()));
								 if(clas.getFilledSeats() > 0 && clas.getSectionCapacity() <= clas.getFilledSeats()){
									 clas.setSectionCapacity(clas.getFilledSeats());
									 //adminManager.saveOrUpdateObject(clas);
									 //Manually updating the class because column id not found for view object in class pojo
									 adminManager.updateQuery("update studyClass set filledSeats="+clas.getFilledSeats()+" and sectionCapacity="+clas.getSectionCapacity()+" where id = "+clas.getId());
								 }
								 clas=null;
 							 }
 							 catch(Exception e){
 								 e.printStackTrace();
 							 }
						 }
 						promotedStudyClasses=null;
					}
					futureAcademicRoutes = null;
					studyClasses=null;
					classNames=null;
				}
				customer=null;
			}
			super.addActionMessage("You have successfully promoted students.");
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		} 
		
		finally
		{
			List<StudyClass> studyClassList = adminManager.getAll(StudyClass.class, "custId=" + getUserCustId() + " and academicYearId="+getUserAcademicYearId());
			List<PromoteClass> promoteClassList = adminManager.getAll(PromoteClass.class, "academicYearId="+getUserAcademicYearId() + " and promoteProcessCompleted='"+Constants.YES_STRING+"'");
			if(!ObjectFunctions.isNullOrEmpty(studyClassList) && !ObjectFunctions.isNullOrEmpty(promoteClassList))
			{
				if(studyClassList.size() == promoteClassList.size())
				{
					setTempString("allPramoted");
				}
				studyClassList = null;
				promoteClassList = null;
			}
			log.debug(" ************ Method ajaxPromoteStudentstoClasses ends ************ ");
			ajaxDoPromoteStudents();
		}
		return SUCCESS;
	}
	public void generateFutureAcademicYearClasses(long classId,long classSectionId,String promotableClassName,String promotableSectionName,HashMap<Long,ClassName> classNames,HashMap<Long,StudyClass> studyClasses,String promoteClassMedium,SyllabusType syllabusType,HashSet<StudyClass> promotedStudyClasses){
		StudyClass futureStudyClass=null;
		ClassName futureClass=null;
		ClassName futureUpClass=null;
		Section secton=null;
		Medium medium=null;
		futureClass=(ClassName)adminManager.get(ClassName.class, "className='"+promotableClassName+"' and academicYearId="+getAcademicYear().getId());
		if(ObjectFunctions.isNullOrEmpty(futureClass)){
			futureClass = new ClassName();
			futureClass.setCreatedById(getUser().getId());
			futureClass.setCreatedDate(new Date());
			int maxSortingOrder = adminManager.getMaxOfClassNameSortingOrder(getAcademicYear().getId(), getUserCustId());
			futureClass.setSortingOrder(maxSortingOrder + 1);
			futureClass.setHigherStandard(false);
			futureClass.setClassName(promotableClassName);
			futureClass.setLastAccessDate(new Date());
			futureClass.setDescription(promotableClassName);
			futureClass.setCustId(getUserCustId());
			futureClass.setAcademicYear(getAcademicYear());
			futureUpClass = adminManager.saveClassName(futureClass);
		}else futureUpClass = futureClass;
		if(StringFunctions.isNotNullOrEmpty(promotableSectionName)){
			secton=(Section)adminManager.get(Section.class, "section='"+promotableSectionName+"' and custId="+getUserCustId());
			if(ObjectFunctions.isNullOrEmpty(secton)){
				secton = new Section();
				secton.setCreatedById(getUser().getId());
				secton.setCreatedDate(new Date());
				secton.setCustId(getUserCustId());
				secton.setLastAccessDate(new Date());
				secton.setLastUpdatedDate(new Date());
				secton.setSection(promotableSectionName);
				adminManager.saveOrUpdateObject(secton);
			}
		}
		futureStudyClass=(StudyClass)adminManager.get(StudyClass.class,"className='"+promotableClassName+"' and section='"+promotableSectionName+"' and academicYearId="+getAcademicYear().getId());
		if(ObjectFunctions.isNullOrEmpty(futureStudyClass)){
			futureStudyClass = new StudyClass();
			futureStudyClass.setAcademicYear(getAcademicYear());
			futureStudyClass.setClassName(promotableClassName);
			futureStudyClass.setClassNameClassId(futureUpClass);
			futureStudyClass.setCreatedById(getUser().getId());
			futureStudyClass.setCreatedDate(new Date());
			futureStudyClass.setCustId(getUserCustId());
			futureStudyClass.setLastAccessDate(new Date());
			futureStudyClass.setLastUpdatedDate(new Date());
			if(StringFunctions.isNotNullOrEmpty(promoteClassMedium))
				medium = (Medium)adminManager.get(Medium.class, "name='"+promoteClassMedium+"'");
			futureStudyClass.setMediumId(medium);
			futureStudyClass.setSection(promotableSectionName);
			futureStudyClass.setSectionCapacity(0);
			futureStudyClass.setSyllabusType(syllabusType);
			futureUpClass.setNoOfSections(futureUpClass.getNoOfSections()+1);
			//futureUpClass=(ClassName)adminManager.saveOrUpdateObject(futureUpClass);
			 //Manually updating the class because column id not found for view object in class pojo
			 adminManager.updateQuery("update class set noOfSections="+futureUpClass.getNoOfSections()+" where id = "+futureUpClass.getId());
			futureStudyClass=(StudyClass)adminManager.saveOrUpdateObject(futureStudyClass);
		}
			/** We need to add class,classSection objects to hashMap only if we promote students based on promotion classes settings.
			 *  If classId and classSectionId is not equal to '0' then it indicates promoting students based on promotion classes settings.
			 *  If these two values are zero then it indicates promotiong students based on student performance.
			*/
			if(!ObjectFunctions.isNullOrEmpty(futureUpClass) && classId > 0){
				classNames.put(classId, futureUpClass);
			}
			if(!ObjectFunctions.isNullOrEmpty(futureStudyClass) ){
				promotedStudyClasses.add(futureStudyClass);
				if(classSectionId > 0)
					studyClasses.put(classSectionId, futureStudyClass);
			}
			futureUpClass=null;
			medium=null;
			secton=null;
			futureStudyClass=null;
			syllabusType=null;
	}
	public void generatePromoteStudents(long studentId,String failurePromoteStudIds,long classSectionId,HashMap<Long,ClassName> classNames,HashMap<Long,StudyClass> studyClasses,String promoteClassName,String promoteSectionName,HashMap<Long,Long> futureAcademicRoutes,HashMap<Long,Long> futureAcademicVehicls){
			Student student=null;
			Student promotedStudent=null;
			List<Student> promoteStudents=null;
			StudyClass futureStudyClass=null;
			ClassName futureClass=null;
			if(!ObjectFunctions.isNullOrEmpty(getAcademicYear())){
				/*
				 * For updating course completed students records
				 */
				if(ObjectFunctions.isNullOrEmpty(classNames) && ObjectFunctions.isNullOrEmpty(studyClasses) && StringFunctions.isNullOrEmpty(promoteClassName)){
					if(studentId > 0){
						student=(Student)adminManager.get(Student.class, "id="+studentId+" and status='"+Constants.YES_STRING+"' and custId="+getUserCustId());
						if(!ObjectFunctions.isNullOrEmpty(student)){
							
							student.setStatus(Constants.NO_STRING);
							//student.setActiveStudent(false);
							
							student.setLastAccessDate(new Date());
							student.setLastUpdatedById(getUser().getId());
							student.setLastUpdatedDate(new Date());
							student.setFailurePromotableResons(null);
							student.getAccount().setAccountExpired(true);
							student.getAccount().setLastUpdatedDate(new Date());
							student.getAccount().setLastUpdatedById(getUser().getId());
							student.getAccount().setLastAccessDate(new Date());
							student.getAccount().setEnabled(false);
							adminManager.saveOrUpdateObject(student);
							student=null;
							//Need to change accountExpired value
						}
					}else if(classSectionId > 0){
						//Need to change accountExpired value
						adminManager.updateCourseCompletedStudents(classSectionId,failurePromoteStudIds,getUser().getId());
					}
				}else 
					/*
					 * For creating new student records based on promotion settings and individual student promotion class selection 
					 */
					if(studentId > 0){
						student=(Student)adminManager.get(Student.class, "id="+studentId+" and status='"+Constants.YES_STRING+"' and custId="+getUserCustId());
						futureClass=(ClassName)adminManager.get(ClassName.class, "className='"+promoteClassName+"' and academicYearId="+getAcademicYear().getId());
						futureStudyClass=(StudyClass)adminManager.get(StudyClass.class,"className='"+promoteClassName+"' and section='"+promoteSectionName+"' and academicYearId="+getAcademicYear().getId());
						if(!ObjectFunctions.isNullOrEmpty(student) && !ObjectFunctions.isNullOrEmpty(futureClass) && !ObjectFunctions.isNullOrEmpty(futureStudyClass)){
							promotedStudent=new Student();
							promotedStudent.copyFrom(student);
							promotedStudent.setAcademicYear(getAcademicYear());
							
							promotedStudent.setStatus(Constants.YES_STRING);
							//promotedStudent.setActiveStudent(true);
							
							promotedStudent.setClassNameClassId(futureClass);
							promotedStudent.setClassSection(futureStudyClass);
							promotedStudent.setCreatedById(getUser().getId());
							promotedStudent.setCreatedDate(new Date());
							promotedStudent.setLastAccessDate(new Date());
							promotedStudent.setRollNumber("0");
							promotedStudent.setProfileImage(student.getProfileImage()); //add imageId in promotostudent lastyear academicyearId by cvs on 26-6-2014
							if( "T".equals(student.getTransportMode()) && !ObjectFunctions.isNullOrEmpty(student.getRouteBoardingPoints()) && !ObjectFunctions.isNullOrEmpty(student.getVehicleAcademicDetailsId())){
								promotedStudent = assignStudentBoardingPointAndVehicleAcademicDetails(promotedStudent,student,futureAcademicRoutes,futureAcademicVehicls);
							}
							promotedStudent = (Student)adminManager.saveOrUpdateObject(promotedStudent);
							updateStudentFeeConfiguredStatus(promotedStudent);
							
							student.setStatus(Constants.NO_STRING);
							//student.setActiveStudent(false);
							
							student.setLastAccessDate(new Date());
							student.setLastUpdatedById(getUser().getId());
							student.setLastUpdatedDate(new Date());
							adminManager.saveOrUpdateObject(student);
							if(!ObjectFunctions.isNullOrEmpty(student.getFutureAcademicClassSecId()) && student.getFutureAcademicClassSecId() == promotedStudent.getClassSectionId()){
								updateStudentFutureAcademicFeePayments(student,promotedStudent);
							}
							updateStudentFeeConfiguredStatus(promotedStudent);
							student=null;
							promotedStudent=null;
							futureStudyClass=null;
							futureClass=null;
						}
					}else if(classSectionId > 0){
						if(StringFunctions.isNullOrEmpty(failurePromoteStudIds))
							promoteStudents=adminManager.getAll(Student.class,"classSectionId="+classSectionId+" and status='"+Constants.YES_STRING+"' and custId="+getUserCustId());
						else
							promoteStudents=adminManager.getAll(Student.class,"classSectionId="+classSectionId+" and status='"+Constants.YES_STRING+"' and id not in"+failurePromoteStudIds+" and custId="+getUserCustId());
						if(ObjectFunctions.isNotNullOrEmpty(promoteStudents)){
							if(!ObjectFunctions.isNullOrEmpty(classNames) && !ObjectFunctions.isNullOrEmpty(studyClasses)){
								for(Student stud:promoteStudents){
									promotedStudent = new Student();
									promotedStudent.copyFrom(stud);
									promotedStudent.setAcademicYear(getAcademicYear());
									
									promotedStudent.setStatus(Constants.YES_STRING);
									//promotedStudent.setActiveStudent(true);
									
									promotedStudent.setClassNameClassId(classNames.get(stud.getClassNameClassId().getId()));
									promotedStudent.setClassSection(studyClasses.get(stud.getClassSection().getId()));
									promotedStudent.setCreatedById(getUser().getId());
									promotedStudent.setCreatedDate(new Date());
									promotedStudent.setLastAccessDate(new Date());
									promotedStudent.setRollNumber("0");
									promotedStudent.setProfileImage(stud.getProfileImage()); //add imageId in promotostudent lastyear academicyearId by cvs on 26-6-2014
									if( "T".equals(stud.getTransportMode()) && !ObjectFunctions.isNullOrEmpty(stud.getRouteBoardingPoints()) && !ObjectFunctions.isNullOrEmpty(stud.getVehicleAcademicDetailsId())){
										promotedStudent = assignStudentBoardingPointAndVehicleAcademicDetails(promotedStudent,stud,futureAcademicRoutes,futureAcademicVehicls);
									}
									if(StringFunctions.isNullOrEmpty(stud.getHostelMode())){
										promotedStudent.setHostelMode("D");
									}
									promotedStudent = (Student)adminManager.saveOrUpdateObject(promotedStudent);
									promotedStudent = updateStudentFeeConfiguredStatus(promotedStudent);
									
									stud.setStatus(Constants.NO_STRING);
									//stud.setActiveStudent(false);
									
									stud.setLastAccessDate(new Date());
									stud.setLastUpdatedById(getUser().getId());
									stud.setLastUpdatedDate(new Date());
									adminManager.saveOrUpdateObject(stud);
									if(!ObjectFunctions.isNullOrEmpty(stud.getFutureAcademicClassSecId()) && stud.getFutureAcademicClassSecId() == promotedStudent.getClassSectionId()){
										updateStudentFutureAcademicFeePayments(stud,promotedStudent);
									}
									updateStudentFeeConfiguredStatus(promotedStudent);
									stud=null;
									promotedStudent=null;
								}
							}
						}
					}
			}
	}
	public Student updateStudentFeeConfiguredStatus(Student student){
		Fee fee =(Fee)adminManager.get(Fee.class, "classId="+student.getClassNameClassId().getId()+" and categoryId="+student.getCategoryId()+" and feeAmount != 0");
		if(!ObjectFunctions.isNullOrEmpty(fee))
			student.setFeeConfigured(Constants.YES_STRING);
		else
			student.setFeeConfigured(Constants.NO_STRING);
		student = (Student)adminManager.saveOrUpdateObject(student);
		if(!ObjectFunctions.isNullOrEmpty(fee))
	    	adminManager.checkStudentFeePaidStatus(student.getAcademicYearId(),student.getCustId(),student);
		return student;
	}
	public void updateStudentFutureAcademicFeePayments(Student currentAcademicStud,Student futureAcademicStud){
		try{
			List<StudentPayment> futureAcademicFee = adminManager.getAll(StudentPayment.class, "studentId="+currentAcademicStud.getId()+" and academicYearId="+futureAcademicStud.getAcademicYearId());
			if(!ObjectFunctions.isNullOrEmpty(futureAcademicFee)){
				Set<StudentFeePaidDetails> feePaidDetails = null;
				for(StudentPayment studPayment: futureAcademicFee){
					studPayment.setStudent(futureAcademicStud);
					feePaidDetails = studPayment.getStudentFeePaidDetails();
					if(!ObjectFunctions.isNullOrEmpty(feePaidDetails)){
						for(StudentFeePaidDetails studentFeePaidInfo : feePaidDetails){
							studentFeePaidInfo.setStudentId(futureAcademicStud.getId());
						}
					}
					adminManager.save(studPayment);
					studPayment = null;
				}
				feePaidDetails = null;
			}
			futureAcademicFee = null;
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	 public Student assignStudentBoardingPointAndVehicleAcademicDetails(Student promotedStudent,Student student,HashMap<Long,Long> futureAcademicRoutes,HashMap<Long,Long> futureAcademicVehicls){
		 try{
			 StringBuffer query = null;
			 VehiclesAcademicDetails vehiclesAcademicDetail = null;
			 List<VehiclesAcademicDetails> vehicleAcademicDetailList = null;
			 if(!ObjectFunctions.isNullOrEmpty(student.getRouteBoardingPoints()) && !ObjectFunctions.isNullOrEmpty(student.getRouteBoardingPoints().getRoute())){
				 	Route route = student.getRouteBoardingPoints().getRoute();
					if(ObjectFunctions.isNullOrEmpty(futureAcademicRoutes.get(route.getId()))){
						query = new StringBuffer("select id,routeName from route where routeName='").append(route.getRouteName()).append("' and academicYearId=").append(getAcademicYear().getId());
						Object[] routeIds = adminManager.get(query.toString());
						if(!ObjectFunctions.isNullOrEmpty(routeIds) && !ObjectFunctions.isNullOrEmpty(routeIds[0])){
							futureAcademicRoutes.put(route.getId(), Long.valueOf(routeIds[0].toString()));
						}
					}
					Long routeId = futureAcademicRoutes.get(route.getId());
					if(!ObjectFunctions.isNullOrEmpty(routeId)){
						query = new StringBuffer("boardingPointName='").append(student.getRouteBoardingPoints().getBoardingPointName()).append("' and routeId=")
						.append(routeId);
						RouteBoardingPoints boardingPoints = (RouteBoardingPoints)adminManager.get(RouteBoardingPoints.class,query.toString());
						if(!ObjectFunctions.isNullOrEmpty(boardingPoints)){
							promotedStudent.setRouteBoardingPoints(boardingPoints);
						}
						boardingPoints = null;
					}
					 route = null;
					 routeId = null;
				}
			 	if(!ObjectFunctions.isNullOrEmpty(student.getVehicleAcademicDetailsId())){
			 		Long vehiclesAcademicId = futureAcademicVehicls.get(student.getVehicleAcademicDetailsId());
			 		if(ObjectFunctions.isNullOrEmpty(vehiclesAcademicId)){
			 			vehiclesAcademicDetail = (VehiclesAcademicDetails)adminManager.get(VehiclesAcademicDetails.class, student.getVehicleAcademicDetailsId());
			 			if(!ObjectFunctions.isNullOrEmpty(vehiclesAcademicDetail)){
			 				query = new StringBuffer("FROM VehiclesAcademicDetails vehicleAcademic WHERE vehicleAcademic.vehicle.vehicleNumber='").append(vehiclesAcademicDetail.getVehicle().getVehicleNumber())
							.append("' and vehicleAcademic.name='").append(vehiclesAcademicDetail.getName()).append("' and vehicleAcademic.academicYearId=").append(getAcademicYear().getId());
							vehicleAcademicDetailList = adminManager.getAllHqlQuery(query.toString());
							if(ObjectFunctions.isNotNullOrEmpty(vehicleAcademicDetailList)){
								vehiclesAcademicId = vehicleAcademicDetailList.get(0).getId();
								futureAcademicVehicls.put(student.getVehicleAcademicDetailsId(), vehiclesAcademicId);
							}
							vehicleAcademicDetailList = null;
			 			}
			 			vehiclesAcademicDetail = null;
			 		}
			 		if(!ObjectFunctions.isNullOrEmpty(vehiclesAcademicId)){
			 			promotedStudent.setVehicleAcademicDetailsId(vehiclesAcademicId);
			 		}
			 		vehiclesAcademicId = null;
			 	}
			 query = null;
			 vehicleAcademicDetailList = null;
			 vehiclesAcademicDetail = null;
		 }catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		 return promotedStudent;
	 }
	
	
	@Actions( { @Action(value = "ajaxCheckStudySubject", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "autoCheck" }) }) })
	public String ajaxCheckStudySubject() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckStudySubject' method");
		}
		try {
			String subjectName = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(subjectName)) {
				int subjectCount = adminManager.getCount("studySubject", "name like '" + subjectName.trim() + "' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
				if (subjectCount > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
	 
	@Actions( {
		@Action(value = "ajaxChangeAcademicYearStatus", results = { @Result(location = "academic/ajaxCreateSchoolSettings.jsp", name = "success") }) })
	public String ajaxChangeAcademicYearStatus()throws URTUniversalException
	{
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxChangeAcademicYearStatus' method");
		}
		try
		{
			AcademicYear currentYear=(AcademicYear) adminManager.get(AcademicYear.class, "custId="+getUserCustId()+" and status='Y'");
			if(!ObjectFunctions.isNullOrEmpty(currentYear)){
				String futureYear = (Long.valueOf(currentYear.getAcademicYear().split("-")[0])+1)+"-"+(Long.valueOf(currentYear.getAcademicYear().split("-")[1])+1);
				AcademicYear futureAcademicYear=adminManager.getAcademicYearByAcademicYear(futureYear,getUserCustId());
				if(!ObjectFunctions.isNullOrEmpty(futureAcademicYear)){
					int smsAllotedCount = ((int) currentYear.getAllotedsms()+(int)currentYear.getPaidSms());
					int usedSmscount = (staffManager.getTotalSmsCount(getUserCustId(),currentYear.getId()));
					if(usedSmscount < (int) currentYear.getAllotedsms()){
						futureAcademicYear.setPaidSms((int)currentYear.getPaidSms());
						currentYear.setPaidSms(0);
					}else{
						/*here we are added SmsCount carryForward to next year for  paid sms only */
						int forwordPaidSmsCount =  usedSmscount - (int) currentYear.getAllotedsms();
						int carryForwardSmsCount = ((int)currentYear.getPaidSms()-forwordPaidSmsCount);
						futureAcademicYear.setPaidSms(carryForwardSmsCount);
						currentYear.setPaidSms(forwordPaidSmsCount);
						carryForwardSmsCount=0;
						forwordPaidSmsCount=0;
					}
					futureAcademicYear.setAllotedsms(0);//studentscount*30
					
					if(!ObjectFunctions.isNullOrEmpty(getAcademicYearVo().getAcademicStartDate()))
						futureAcademicYear.setStartDate(getAcademicYearVo().getAcademicStartDate());
					
					if(!ObjectFunctions.isNullOrEmpty(getAcademicYearVo().getAcademicEndDate()))
						futureAcademicYear.setEndDate(getAcademicYearVo().getAcademicEndDate());
					
					currentYear.setStatus(Constants.NO_STRING);
					futureAcademicYear.setStatus(Constants.YES_STRING);					
					futureAcademicYear.setSendStaffBirthdayAlerts(currentYear.isSendStaffBirthdayAlerts());
					futureAcademicYear.setSendBirthdayAlerts(currentYear.isSendBirthdayAlerts());
					futureAcademicYear.setHolidayStatus(currentYear.getHolidayStatus());
					futureAcademicYear.setTransportFeeByBoardingPoint(currentYear.isTransportFeeByBoardingPoint());
					futureAcademicYear.setAssignmentSMSLoginUser(currentYear.isAssignmentSMSLoginUser());
					/*@Ganesh - Below mesthod we will check If any student will have pending fee or not based on check if any student will have pending fee we will update status as Y in customer table setShowPreviousYearPendingFee column while switch to future academic year. So next time on ward we will enable previous student payment  link in current academic year.*/
					previousFeeValidationCheckingAndSaveStatus(currentYear,getCustomerByCustId());
					adminManager.save(currentYear);
					futureAcademicYear = (AcademicYear) adminManager.save(futureAcademicYear);
					setAcademicYear(futureAcademicYear);
					setTempString("swithch");
					currentYear=null;
					super.addActionMessage("Successfully updated academic details, Please log out and login once again.");
					List<AcademicYear> academicYearList=null;
					if(futureAcademicYear.getId()!=0){
						academicYearList=adminManager.getPastAcademicYears(futureAcademicYear.getId(),getUserCustId());
					}else{
						academicYearList=studentManager.getAllAcademicYearsBycustId(getUserCustId());
					}
					if(ObjectFunctions.isNullOrEmpty(academicYearList))
						getSession().removeAttribute("academicYearList");
					else
					getSession().setAttribute("academicYearList",academicYearList);
					getSession().removeAttribute("currentAcademicYearId");
					getSession().removeAttribute("academicYear");
					getSession().removeAttribute("academicYearName");
					getSession().setAttribute("currentAcademicYearId", futureAcademicYear.getId());
					getSession().setAttribute("academicYear", String.valueOf(futureAcademicYear.getId()));
					getSession().setAttribute("academicYearName",futureAcademicYear.getAcademicYear());
					futureAcademicYear = null;
				}
			}
 		}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally
		{
			ajaxAcademicSchoolSettings();
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxgetAcademicYearInfo", results = { @Result(type = "json", name = "success", params = {"includeProperties", "admissionSettings.*" }) }) })
	public String ajaxgetAcademicYearInfo() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxgetAcademicYearInfo' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getParamValue("newAcademicYear"))) {
				setAcademicYear((AcademicYear)adminManager.get(AcademicYear.class, " custId="+getUserCustId()+" and academicYear='"+getParamValue("newAcademicYear")+"'"));
				if(!ObjectFunctions.isNullOrEmpty(getAcademicYear())){
					setAdmissionSettings((AdmissionSettings)adminManager.get(AdmissionSettings.class, " custId="+getUserCustId()+" and academicYearId="+getAcademicYear().getId()));
				}
				if (!ObjectFunctions.isNullOrEmpty(getAdmissionSettings())) {
					getJsonResult().put("admissionSettings",getAdmissionSettings());
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
	
   @Actions( { @Action(value = "uploadExamSchedule", results = { @Result(location = "../common/ajaxViewExamScheduleInformation.jsp", name = "success") }) })
    public String ajaxUploadExamSchedule() throws URTUniversalException {
	if (log.isDebugEnabled()) {
	    log.debug("Entering 'ajaxUploadExamSchedule' method");
	}
	try {
		List studyClassList=null;
		if(!ObjectFunctions.isNullOrEmpty(getUser().getId())){
			setStaff(adminManager.getStaffByAcountId(getUser().getId(),Constants.YES_STRING));
			if(getUser().isOnlySchoolAdmin()){ 
				studyClassList=adminManager.getAll(StudyClass.class, "academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId());
			}else if (getUser().isOnlySchoolTeacher()){
				studyClassList=adminManager.getAll(ViewStaffSubjectsDetails.class,"staffid="+getStaff().getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and classTeacher='"+Constants.NO_STRING+"' group By studyClassId ");
			}else{
				studyClassList=adminManager.getAll(ViewStaffSubjectsDetails.class,"staffid="+getStaff().getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and classTeacher='"+Constants.YES_STRING+"' group By studyClassId ");
				setPlTitle("isClassTeacher"); //here set the string for find class Teacher
			}
			if(ObjectFunctions.isNotNullOrEmpty(studyClassList)){
				getStudyClassList().addAll(studyClassList);
				//setStudyClassList(ConvertUtil.convertSetToList(studyClassList));
				Collections.sort(getStudyClassList());
			}
		}
	    setAnyTitle("examScheduleDiv");
	} catch (Exception ex) {
	    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
    }
  
   @Actions( { @Action(value = "ajaxEditViewExamSchedules", results = { @Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }) }) })
	public String ajaxEditStaffHostelFeeDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditClassHostelFeeDetails' method");
		}
		try {
			if (!StringFunctions.isNullOrEmpty(getClassId()) && !StringFunctions.isNullOrEmpty(getExamType())) {
				setObjectList(adminManager.getAll(ViewStudentMarksDetails.class,"custId="+getUserCustId()+" and examTypeId="+Long.valueOf(getExamType())+" and classSectionId="+Long.valueOf(getClassId())));
				 
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions({ @Action(value = "ajaxUploadClassExamScheduleMarks", results = { @Result(location = "../common/ajaxViewExamScheduleInformation.jsp", name = "success") }) })
	public String ajaxUploadClassExamScheduleMarks() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUploadClassExamScheduleMarks' method");
		}
		try {
			  if (getUserAcademicYearId() > 0) {
			    JSONArray examSchedulesJsonArray=new JSONArray(getTempString());
			    
			    long scheduleId = 0;
			    long studentId = 0;
			    long obtainedMarks = 0;
			    long moderationMarks = 0;
			    
			    ExamSchedules scheule=null;
	   	      	Student student=null;
	   	      	StudentMarks studentMarks=null;
			    JSONObject examScheduleJson = null;
			    List<Object[]> totalSubMarksObtained=null;
				   
			    HashMap<Integer, String> response = new HashMap<Integer, String>();			
				
	            HashMap<Long, ExamSchedules> schedulesMap = new HashMap<Long, ExamSchedules>();
	            
	            String isPresent="P";
			    	for (int i = 0; i < examSchedulesJsonArray.length(); i++) {
			    	examScheduleJson = examSchedulesJsonArray.getJSONObject(i);
			    	if (!ObjectFunctions.isNullOrEmpty(examScheduleJson)) {
			    		if (!ObjectFunctions.isNullOrEmpty(examScheduleJson.get("scheduleId"))) {
					    	scheduleId = Long.valueOf((String) examScheduleJson.get("scheduleId"));
			    		}
			    		if (!ObjectFunctions.isNullOrEmpty(examScheduleJson.get("studentId"))) {
					    	studentId = Long.valueOf((String) examScheduleJson.get("studentId"));
					    }
					    if (!ObjectFunctions.isNullOrEmpty(examScheduleJson.get("moderationMarks"))) {
					    	moderationMarks = Long.valueOf((String) examScheduleJson.get("moderationMarks"));
					    }
					    if (!ObjectFunctions.isNullOrEmpty(examScheduleJson.get("obtainedMarks"))) {
					    	obtainedMarks = Long.valueOf((String)examScheduleJson.get("obtainedMarks"));
					    	if(ObjectFunctions.isNullOrEmpty(obtainedMarks))
							 isPresent ="A";
								 
					    }
					    if(studentId!=0){
		   	    		student=adminManager.getStudentByCustIdAndStudentIdAndStatus(Long.valueOf(studentId),getUserCustId(),Constants.YES_STRING,getUserAcademicYearId());
		   	    		if(!ObjectFunctions.isNullOrEmpty(student)){
		   	    		   if(scheduleId!=0){
		   	    					student = adminManager.upadateStudentMarksFromSMSAppAndWeb(student, scheduleId, obtainedMarks, getUser().getId(), new String[]{"0"}, isPresent, response,schedulesMap);
		   	    					
		   	    					scheule=null;
		   	    				scheduleId=0;
		   	    			}
		   	    		}
		   	    		student=adminManager.saveStudentDetails(student);
		   	    		studentId=0;
					    }
					    student=null;
			    	}
			     }
			    	adminManager.sendNotificationForStudentMarks(getUserCustId());
			    super.addActionMessage("Student Marks submitted successfully.");
	   		  }
	   		ajaxUploadExamSchedule();
		} catch(Exception ex)
		{
			log.error("Entering into 'catch block':"+ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
   }
   @Actions( { @Action(value = "ajaxDogetBuildingFloorsForExams", results = { @Result(location = "exam/ajaxDoCreateExamRoomCapacity.jsp", name = "success") }) })
	   public String ajaxDogetBuildingFloorsForExams() {
	   if (log.isDebugEnabled()) {
		   log.debug("Entering 'ajaxDogetBuildingFloorsForExams' method");
	   }
	   try {
		   Building building =null;
		   JSONObject floorsJson=null;
		   JSONArray totalFloorsJsonArray=null;
		   AcademicYear academicYear = null;
		   String floorName = null;
		   long noOfRooms =0;
		   Room room = null;
		   Floor floor = null;
		   String clauses = null;
		   String clause = "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and buildingName='"+getBuilding().getBuildingName()+"'";
		   Building existedbuilding =(Building)adminManager.get(Building.class,clause);
		   if(!ObjectFunctions.isNullOrEmpty(existedbuilding)){
			   if(existedbuilding.getId()!=0){
					setTempList(adminManager.getAll(Floor.class,"buildingId="+existedbuilding.getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()));
				}
		   }else{
			   if(StringFunctions.isNotNullOrEmpty(getBuilding().getBuildingName()) && StringFunctions.isNotNullOrEmpty(getBuilding().getContactNumber())){
				   academicYear = adminManager.getCurrentAcademicYear(Constants.YES_STRING, getUserCustId());
				   building = new Building();
				   building.setCustId(getUserCustId());
				   building.setAcademicYear(academicYear);
				   building.setAllocatedFor("EXAMHALL");
				   building.setBuildingName(getBuilding().getBuildingName().toUpperCase());
				   building.setContactNumber(getBuilding().getContactNumber());
				   building.setCreatedById(getUser().getId());
				   building.setCreatedDate(new Date());
				   building.setLastUpdatedById(getUser().getId());
				   building.setLastAccessDate(new Date());
				   adminManager.save(building);
				   Building building2 =(Building)adminManager.get(Building.class,clause);
						if(!ObjectFunctions.isNullOrEmpty(building2) && StringFunctions.isNotNullOrEmpty(getParamValue("hidInput"))){
							totalFloorsJsonArray=new JSONArray(getParamValue("hidInput"));
							for(int i=0;i<totalFloorsJsonArray.length();i++)
							{
		    					floorsJson=totalFloorsJsonArray.getJSONObject(i);
								if(!ObjectFunctions.isNullOrEmpty(floorsJson))
								{
									floor =new Floor();
									floorName =(String) floorsJson.get("floorName");
									String allRooms =(String) floorsJson.get("NoOfRooms");
									noOfRooms =Long.valueOf(allRooms);
									floor.setFloorName(floorName.toUpperCase());
									floor.setBuildingId(building2.getId());
									floor.setCreatedById(getUser().getId());
									floor.setCreatedDate(new Date());
									floor.setLastUpdatedById(getUser().getId());
									floor.setLastAccessDate(new Date());
									floor.setCustId(getUserCustId());
									floor.setAcademicYear(academicYear);
									adminManager.save(floor);
									clauses = "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and floorName='"+floorName+"'";
									Floor floor1 = (Floor)adminManager.get(Floor.class,clauses);
									if(!ObjectFunctions.isNullOrEmpty(floor1)){
										for(int j=0;j<noOfRooms;j++){
											room = new Room();
											room.setFloorId(floor1.getId());
											room.setCreatedById(getUser().getId());
											room.setCreatedDate(new Date());
											room.setLastUpdatedById(getUser().getId());
											room.setLastAccessDate(new Date());
											room.setCustId(getUserCustId());
											room.setAcademicYear(academicYear);
											adminManager.save(room);
											room = null;
										}
										floor = null;
									}
								}
							}
						}
			   		}
		   }
		   
		   
	   } catch (Exception ex) {
		   ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		   JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	   } 
	   return SUCCESS;
   }
   @Actions({ @Action(value = "ajaxGetNoOfExaminationRooms", results = { @Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }),
			                                                             @Result(location = "exam/ajaxDoUpdateExamRoomDetails.jsp", name = "buildingFloors")}) })
  public String ajaxGetNoOfExaminationRooms() {
	   if (log.isDebugEnabled()) {
		   log.debug("Entering 'ajaxGetNoOfExaminationRooms' method");
	   }
	   try {
		   setObjectList(null);
		   if(getTempId()>0 || getTempId2()>0){
			   if(getTempId()>0)
			   setObjectList(adminManager.getAll(Room.class,"floorId="+getTempId())); 
			   else{
				   if(getTempId2()>0)
				   setObjectList(adminManager.getAll(ViewRoomDetails.class,"custId="+getUserCustId()+" and allocatedFor='EXAMHALL'"+" and academicYearId="+getUserAcademicYearId()+" and buildingId="+getTempId2()));
			   }
		   }else{
			   setObjectList(adminManager.getAll(ViewRoomDetails.class,"custId="+getUserCustId()+" and allocatedFor='EXAMHALL'"+" and academicYearId="+getUserAcademicYearId()+" group by floorId"));
			   return "buildingFloors";
		   }
	   } catch (Exception ex) {
		   ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		   JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	   } 
	   return SUCCESS;
  }
   @Actions( { @Action(value = "ajaxDoGetExamBuildingDetails", results = { @Result(location = "exam/ajaxDoCreateExamRoomCapacity.jsp", name = "success"),
		                                                                   @Result(location = "exam/ajaxDoUpdateExamRoomDetails.jsp", name = "update")}) })
   public String ajaxDoGetExamBuildingDetails() {
	   if (log.isDebugEnabled()) {
		   log.debug("Entering 'ajaxDoGetExamBuildingDetails' method");
	   }
	   try {
		   JSONObject roomJson=null;
		   JSONArray totalFloorsJsonArray=null;
		   String roomNo = null;
		   String noOfSeets =null;
		   Room room = null;
		   String clauses = null;
		   if(StringFunctions.isNotNullOrEmpty(getParamValue("hidInput"))){
			   academicYear = adminManager.getCurrentAcademicYear(Constants.YES_STRING, getUserCustId());
			   totalFloorsJsonArray=new JSONArray(getParamValue("hidInput"));
				for(int i=0;i<totalFloorsJsonArray.length();i++)
				{
					roomJson=totalFloorsJsonArray.getJSONObject(i);
					if(!ObjectFunctions.isNullOrEmpty(roomJson))
					{
						if(StringFunctions.isNotNullOrEmpty((String) roomJson.get("roomNo")) || StringFunctions.isNotNullOrEmpty((String) roomJson.get("noOfSeets"))){
							clauses = "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+(String) roomJson.get("roomId");
							room = (Room)adminManager.get(Room.class,clauses);
							if(!ObjectFunctions.isNullOrEmpty(room)){
								roomNo =(String) roomJson.get("roomNo");
								noOfSeets =(String) roomJson.get("noOfSeets");
								room.setRoomNumber(Long.valueOf(roomNo.trim()));
								room.setCapacity(noOfSeets);
								room.setAllocatedFor("EXAMHALL");
								adminManager.save(room);
							}
						}
					}
				}
				super.addActionMessage("Room capacity added successfully.");
		   }if(getParamValue("update").equals("update")){
			   setObjectList(adminManager.getAll(ViewRoomDetails.class,"custId="+getUserCustId()+" and allocatedFor='EXAMHALL'"+" and academicYearId="+getUserAcademicYearId()+" group by floorId"));
			   return "update";
		   }else{
			   String clause = "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+room.getFloorId();
			   Floor existedFloor =(Floor)adminManager.get(Floor.class,clause);
			   if(!ObjectFunctions.isNullOrEmpty(existedFloor)){
				   if(existedFloor.getId()!=0){
						setTempList(adminManager.getAll(Floor.class,"buildingId="+existedFloor.getBuildingId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()));
					}
			   }
		   }
	   } catch (Exception ex) {
		   ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		   JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	   } 
	   return SUCCESS;
   }
   @Actions( { @Action(value = "ajaxDoViewExamBuildingDetails", results = { @Result(location = "exam/ajaxViewAllExaminationBuildingDetails.jsp", name = "success")}) })
   public String ajaxDoViewExamBuildingDetails() {
	   if (log.isDebugEnabled()) {
		   log.debug("Entering 'ajaxDoViewExamBuildingDetails' method");
	   }
	   try {
		   JSONObject roomJson=null;
		   JSONArray totalFloorsJsonArray=null;
		   String roomNo = null;
		   String capacity =null;
		   Room room = null;
		   String clauses = null;
		   if(StringFunctions.isNotNullOrEmpty(getParamValue("hidInput"))){
			   academicYear = adminManager.getCurrentAcademicYear(Constants.YES_STRING, getUserCustId());
			   totalFloorsJsonArray=new JSONArray(getParamValue("hidInput"));
				for(int i=0;i<totalFloorsJsonArray.length();i++)
				{
					roomJson=totalFloorsJsonArray.getJSONObject(i);
					if(!ObjectFunctions.isNullOrEmpty(roomJson))
					{
						clauses = "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+(String) roomJson.get("roomId");
						room = (Room)adminManager.get(Room.class,clauses);
						if(!ObjectFunctions.isNullOrEmpty(room)){
							roomNo =(String) roomJson.get("roomNo");
							capacity =(String) roomJson.get("noOfSeets");
							room.setRoomNumber(Long.valueOf(roomNo.trim()));
							room.setCapacity(capacity);
							room.setAllocatedFor("EXAMHALL");
							adminManager.save(room);
						}
					}
				}
				super.addActionMessage("Room details updated successfully.");
		   }
		   setObjectList(adminManager.getAll(ViewRoomDetails.class,"custId="+getUserCustId()+" and allocatedFor='EXAMHALL'"+" and academicYearId="+getUserAcademicYearId()+" group by floorId"));
	   } catch (Exception ex) {
		   ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		   JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	   } 
	   return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAllotStudentsToRooms", results = {@Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }),
			                                                             @Result(location = "exam/ajaxViewAllExaminationBuildingDetails.jsp", name = "buildingFloors") }) })
	public String ajaxDoAllotStudentsToRooms() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAllotStudentsToRooms' method");
		}
		try {
			if (getTempId() > 0) {
				setObjectList(adminManager.getAll(Room.class, "floorId="+ getTempId()));
			} else {
				setObjectList(adminManager.getAll(ViewRoomDetails.class, "custId="+ getUserCustId()+ " and allocatedFor='EXAMHALL'"+ " and academicYearId="+ getUserAcademicYearId() + " group by floorId"));
				setTempList1(adminManager.getAll(ViewRoomDetails.class, "custId="+ getUserCustId()+ " and allocatedFor='EXAMHALL'"+ " and academicYearId="+ getUserAcademicYearId() + " group by buildingId"));
				return "buildingFloors";
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoGetAllocationRoomDetails", results = {@Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }),
			@Result(location = "exam/ajaxViewAllExaminationBuildingDetails.jsp", name = "buildingFloors") }) })
			public String ajaxDoGetAllocationRoomDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetAllocationRoomDetails' method");
		}
		try {
			   JSONArray totalFloorsJsonArray=null;
			   String total = getParamValue("totalCap");
			   StringBuffer stringBuffer =null;
			 		String clause ="custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and startDate>='"+DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,new Date())+" 00:00:00'"+" group by classSectionId";
					setExamScheduleList(adminManager.getAll(ViewClassExamDetails.class, clause));
					if(!ObjectFunctions.isNullOrEmpty(getExamScheduleList())){
						stringBuffer = new StringBuffer();
						stringBuffer.append("(");
						for(Object obje:getExamScheduleList()){
							ViewClassExamDetails examSchedules =(ViewClassExamDetails)obje;
							if(!ObjectFunctions.isNullOrEmpty(examSchedules)){
								stringBuffer.append(examSchedules.getClassSectionId()+",");
							}
						}
						stringBuffer.append("0)");
						int totalStudentsInClasses = adminManager.getCount("student", "classSectionId in"+stringBuffer.toString()+" and status='Y'");
						if(totalStudentsInClasses<=Long.valueOf(total)){
							if(StringFunctions.isNotNullOrEmpty(getParamValue("hidInput"))){
								   academicYear = adminManager.getCurrentAcademicYear(Constants.YES_STRING, getUserCustId());
								   totalFloorsJsonArray=new JSONArray(getParamValue("hidInput"));
								   String[] ids = stringBuffer.toString().split(",");
								   for (String classSectionId : ids) {
										if (!StringFunctions.isNullOrEmpty(classSectionId)) {	
											List classStudents=studentManager.getAll("select registerNumber from vw_studentClassDetails where classSectionId="+classSectionId.replace("(", "").replace(")", "")+" and status='Y'"+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId());
											if(!ObjectFunctions.isNullOrEmpty(classStudents)){
												int totalRooms = totalFloorsJsonArray.length();// total rooms
												int studsize= classStudents.size();// each class size
												double studentsPerRoom = (double)studsize/totalRooms;
												log.debug(studentsPerRoom);
											}
										}
								   }
								   
							}
						}else{
							super.addActionMessage("Room capacity is low.");
						}
					}
					
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCheckBuildingName", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "autoCheck" }) }) })
			public String ajaxCheckBuildingName() throws URTUniversalException {
		
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckBuildingName' method");
		}
		try {
			String buildingName = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(buildingName)) {
				List buildingNameList = adminManager.checkBuildingId(buildingName.trim(),getUserCustId(), getUserAcademicYearId());
				if (ObjectFunctions.isNullOrEmpty(buildingNameList)) {
					setAutoCheck("0");
				} else if (buildingNameList.size() > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxCheckSubjectNumber", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "autoCheck" }) }) })
	public String ajaxCheckSubjectNumber() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckSubjectNumber' method");
		}
		try {
			String subjectNumber = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(subjectNumber)) {
				int subjectCount = adminManager.getCount("studySubject", "subjectNumber like '" +subjectNumber.trim() + "' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
				if (subjectCount > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoAddStatutoryToStaff", results = { @Result(location = "staff/ajaxAddStaffStatutoryDetails.jsp", name = "success") })
	})
	public String ajaxDoAddStatutoryToStaff() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddStatutoryToStaff' method");
		}
		try 
		{
			String staffId = getParamValue("tempId");
			if(StringFunctions.isNullOrEmpty(staffId))
			{
				staffId = String.valueOf(getTempId());
			}
			if(!StringFunctions.isNullOrEmpty(staffId))
			{
				String sqlQuery = "staffId = " + staffId + " and custId = " + getUserCustId() + " ORDER BY id DESC LIMIT 1";
				log.debug("sqlQuery :: " + sqlQuery); 
				List<StaffStatutory> statutoryList = adminManager.getAll(StaffStatutory.class,sqlQuery);
				if(!ObjectFunctions.isNullOrEmpty(statutoryList))
				{
					setStaffStatutory(statutoryList.get(0));
				}
				setTempId(Long.valueOf(staffId));
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxAddStaffStatutoryInfo", results = { @Result(location = "staff/ajaxAddStaffStatutoryDetails.jsp", name = "success") })
	})
	public String ajaxAddStaffStatutoryInfo() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddStaffStatutoryInfo' method");
		}
		try 
		{
			String staffId = getParamValue("tempId");
			
			if(!StringFunctions.isNullOrEmpty(staffId))
			{
				setTempId(Long.valueOf(staffId));
				Staff staff = (Staff)adminManager.get(Staff.class, Long.valueOf(staffId));
				if(!ObjectFunctions.isNullOrEmpty(staff) && !ObjectFunctions.isNullOrEmpty(getStaffStatutory()))
				{
					getStaffStatutory().setCustId(getUserCustId());
					getStaffStatutory().setCreatedDate(new Date());
					getStaffStatutory().setLastAccessDate(new Date());
					getStaffStatutory().setLastUpdatedDate(new Date());
					getStaffStatutory().setCreatedById(getUser().getId());
					getStaffStatutory().setLastUpdatedById(getUser().getId());
					staff.addStaffStatutory(getStaffStatutory());
					adminManager.save(staff);
					super.addActionMessage("Statutory updated successfully.");
				}
				
			}
			//ajaxDoAddStatutoryToStaff();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	
	//Payroll Requirement --- By Narahari
	
	@Actions( { @Action(value = "ajaxDoAddSalaryToStaff", results = { @Result(location = "staff/ajaxAddStaffSalaryDetails.jsp", name = "success") })
	})
	public String ajaxDoAddSalaryToStaff() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddSalaryToStaff' method");
		}
		try 
		{
			//getBaseStaffAttendanceDetails();
			
			String staffId = getParamValue("tempId");
			if(StringFunctions.isNullOrEmpty(staffId))
			{
				staffId = String.valueOf(getTempId());
			}
			if(!StringFunctions.isNullOrEmpty(staffId))
			{
				String sqlQuery = "staffId = " + staffId + " and custId = " + getUserCustId() + " ORDER BY id DESC LIMIT 1";
				log.debug("sqlQuery :: " + sqlQuery); 
				List<Salary> salaryList = adminManager.getAll(Salary.class,sqlQuery);
				if(!ObjectFunctions.isNullOrEmpty(salaryList))
				{
					log.debug("salaryList.get(0) :::"  + salaryList.get(0));
					setSalary(salaryList.get(0));
				}
				setTempId(Long.valueOf(staffId));
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxAddStaffSalaryIfo", results = { @Result(location = "staff/ajaxAddStaffSalaryDetails.jsp", name = "success") })
	})
	public String ajaxAddStaffSalaryIfo() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddSalaryToStaff' method");
		}
		try 
		{
			//getBaseStaffAttendanceDetails();
			
			String staffId = getParamValue("tempId");
			
			if(!StringFunctions.isNullOrEmpty(staffId))
			{
				setTempId(Long.valueOf(staffId));
				Salary salary = new Salary();
				Staff staff = (Staff)adminManager.get(Staff.class, Long.valueOf(staffId));
				if(!ObjectFunctions.isNullOrEmpty(staff))
				{
					
					salary.setSalary(getSalary().getSalary());
					salary.setCreatedDate(new Date());
					salary.setCustId(getUserCustId());
					salary.setLastAccessDate(new Date());
					salary.setLastUpdatedDate(new Date());
					
					salary.setCreatedById(getUser().getId());
					salary.setLastUpdatedById(getUser().getId());
					
					String monthName = new SimpleDateFormat("MMM").format(new Date());
					int monthNum = Integer.valueOf(new SimpleDateFormat("MM").format(new Date()));
					SimpleDateFormat simpleDateformat = new SimpleDateFormat("yyyy");
					int year = Integer.valueOf(simpleDateformat.format(new Date()));
					
					log.debug(" Month Name :: " + monthName);
					log.debug(" monthNum :: " + monthNum);
					log.debug(" year :: " + year);
					salary.setMonth(monthNum);
					salary.setYear(year);
					
				}
				staff.addSalaryDetailsSettings(salary);
				
				adminManager.save(staff);
				super.addActionMessage("Salary updated successfully.");
			}
			ajaxDoAddSalaryToStaff();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions({ @Action(value = "ajaxGetSchoolPeriods", results = { @Result(location = "academic/timeTable/ajaxViewManagePeriods.jsp", name = "success") }) })
	public String ajaxGetSchoolPeriods() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetSchoolPeriods' method");
		}
		try {
			Object[] classTeacherStatus = adminManager.get("select id,classTeacherHandleFirstPeriod from academicYear where id="+ getUserAcademicYearId());
			if (!ObjectFunctions.isNullOrEmpty(classTeacherStatus[1])) {
				setStatus(classTeacherStatus[1].toString());
			}
			ajaxGetClassHavingPeriodsOrNot();
			setSmsCnt(adminManager.getCount("timeTable", "academicYearId="+ getUserAcademicYearId()));
			setNumberOfDays(adminManager.getCount("workingDays","academicYearId=" + getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			RayGunException raygex = new RayGunException();
			raygex.sendRayGunException(ex);
			raygex = null;
		}
		return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxDoAddSclPeriod", results = { @Result(location = "academic/timeTable/ajaxAddPeriods.jsp", name = "success") }), 
	     @Action(value = "ajaxDoAddPeriod", results = { @Result(location = "academic/timeTable/ajaxAddClassPeriods.jsp", name = "success") })})
		public String ajaxDoAddSclPeriod() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAddSclPeriod' method");
			}
			try {
					if(getUserAcademicYearId() > 0){
						
						if(!ObjectFunctions.isNullOrEmpty(getStudyClassId())){
							setStudyClass((StudyClass) adminManager.get(StudyClass.class,"id="+getStudyClassId()));
						}else{
							ajaxGetClassHavingPeriodsOrNot();
						}
						List<Object[]> workingDays = adminManager.getAll("select id,dayId from workingDays where academicYearId="+getUserAcademicYearId());
						if(ObjectFunctions.isNotNullOrEmpty(workingDays)){
							StringBuffer dayIds = new StringBuffer();
							dayIds.append("(");
							for(Object[] workingDay : workingDays){
								dayIds.append(workingDay[1].toString()+",");
							}
							dayIds.append("0)");
							setObjectList(adminManager.getAll(WeekDays.class, "id in "+dayIds.toString()));
							dayIds = null;
							workingDays = null;
						}
						List<BigInteger> timetableIds = adminManager.getAll("select classSectionId from timeTable where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by classSectionId");
						String timetableIdsString=null;
						if (ObjectFunctions.isNotNullOrEmpty(timetableIds)) 
							timetableIdsString = StringFunctions.convertListToCommaDelimitedString(timetableIds);
						else
							timetableIdsString="0";
						setAnyTitle(timetableIdsString);
						List<BigInteger> subjectsIds = adminManager.getAll("select dayId from timeTable where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and (subjectId !=null or subjectId > 0 ) group by dayId");
						String subjectsIdsString=null;
						if (ObjectFunctions.isNotNullOrEmpty(subjectsIds)) 
							subjectsIdsString = StringFunctions.convertListToCommaDelimitedString(subjectsIds);
						else
							subjectsIdsString="0";
						setAnyTitle(subjectsIdsString);

					}
				} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
   @Actions( { @Action(value = "ajaxSaveClassWisePeriods", results = { @Result(location = "academic/timeTable/ajaxViewManagePeriods.jsp", name = "success") }) })
	public String ajaxSaveClassWisePeriods() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSaveClassWisePeriods' method");
		}
		try {
			StudyClass classSection=null;
			if(ObjectFunctions.isNotNullOrEmpty(getChkBoxSelectedIds()) && ObjectFunctions.isNotNullOrEmpty(getSelectBoxIdList()) && (getTempId1() > 0 || getTempId2() > 0) && getUserAcademicYearId() > 0){
				long maxPeriods=0;
				for(String  classSectonId: getChkBoxSelectedIds()){
					classSection=(StudyClass)adminManager.get(StudyClass.class, "id="+classSectonId);
					if(!ObjectFunctions.isNullOrEmpty(classSection)){
						for(String dayId : getSelectBoxIdList()){
							maxPeriods=adminManager.getMaxPeriodsByClassSectionIdAndDaydId(classSectonId,dayId,"M"); //add multiple class have periods before get the  maxPeriods in that particular class 
							for(int i=1;i<=getTempId1();i++){
								createTimeTable(classSection,dayId,'M',maxPeriods);
							}
							maxPeriods=adminManager.getMaxPeriodsByClassSectionIdAndDaydId(classSectonId,dayId,"A"); //add multiple class have periods before get the  maxPeriods in that particular class
							for(int i=1;i<=getTempId2();i++){
								createTimeTable(classSection,dayId,'A',maxPeriods);
							}
							dayId=null;
						}
					}
					classSection=null;
					classSectonId=null;	
				}
				super.addActionMessage("You have successfully created periods.");
			}
			ajaxGetSchoolPeriods();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 //@Description 12 JUly 2016 RaviTeja: single class  added the periods.if morning or afternoon section any class generate the timetable not remove the class periods other wise update the class Periods count
   @Actions( { @Action(value = "ajaxSaveSingleClassWisePeriods", results = { @Result(location = "academic/timeTable/ajaxViewManagePeriods.jsp", name = "success") }) })
	public String ajaxSaveSingleClassWisePeriods() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSaveSingleClassWisePeriods' method");
		}
		try {
			StudyClass classSection=null;
			if(!ObjectFunctions.isNullOrEmpty(getTempString()) && ObjectFunctions.isNotNullOrEmpty(getSelectBoxIdList()) && (getTempId1() > 0 || getTempId2() > 0) && getUserAcademicYearId() > 0){
				long maxPeriods=0;
					classSection=(StudyClass)adminManager.get(StudyClass.class, "id="+getTempString());
					if(!ObjectFunctions.isNullOrEmpty(classSection)){
						for(String dayId : getSelectBoxIdList()){
							long morningPeriodsCount=adminManager.getCount("timeTable", "classSectionId="+getTempString()+" and custId="+getUserCustId()+" and dayId="+dayId+ " and periodType='M' and (subjectId !=null or subjectId > 0)");
							if(morningPeriodsCount == 0){
								adminManager.remove("timeTable", "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and dayId="+dayId+" and classSectionId="+getTempString()+" and periodType='M'");
								//maxPeriods=adminManager.getMaxPeriodsByClassSectionIdAndDaydId(getTempString(),dayId,"M"); // In single class added period if not need the maxPeriods count because remove the maxPeriod count  
								for(int i=1;i<=getTempId1();i++){
									createTimeTable(classSection,dayId,'M',getTempId1());
								}
							}
							long afterNoonPeriodCount=adminManager.getCount("timeTable", "classSectionId="+getTempString()+" and custId="+getUserCustId()+" and dayId="+dayId+ " and periodType='A' and (subjectId !=null or subjectId > 0)");
							if(afterNoonPeriodCount == 0){
								adminManager.remove("timeTable", "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and dayId="+dayId+" and classSectionId="+getTempString()+" and periodType='A'");
								for(int i=1;i<=getTempId2();i++){
									createTimeTable(classSection,dayId,'A',getTempId2());
								}
							}
							dayId=null;
						}
					}
					classSection=null;
				super.addActionMessage("You have successfully created periods.");
			}
			ajaxGetSchoolPeriods();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   public void createTimeTable(StudyClass classSection, String dayId, char periodType, long maxPeriods){
	    
	    TimeTable timeTable = new TimeTable();
		timeTable.setClassSection(classSection);
		timeTable.setDayId(Integer.valueOf(dayId));
		timeTable.setPeriodType(periodType);
		timeTable.setPeriodName((++maxPeriods)+"");
		createPeriods(timeTable);
		adminManager.save(timeTable);
   }
   public void createPeriods(TimeTable timeTable){
	   	timeTable.setAcademicYearId(getUserAcademicYearId());
		timeTable.setCustId(getUserCustId());
		timeTable.setSubject(null);
		timeTable.setTeachers(null);
		timeTable.setCreatedById(getUser().getId());
		timeTable.setCreatedDate(new Date());
		timeTable.setLastAccessDate(new Date());
		timeTable.setLastUpdatedById(getUser().getId());
		timeTable.setLastUpdatedDate(new Date());
   }
   @Actions( {
		@Action(value = "ajaxGetTimeTableClassSubjectsSettings", results = { @Result(location = "academic/timeTable/ajaxViewManageTimeTableSubjects.jsp", name = "success") })
		})
		public String ajaxGetTimeTableClassSubjectsSettings() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetTimeTableClassSubjectsSettings' method");
			}
			try {
				setStudyClassList(adminManager.getAll(StudyClass.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
				if(ObjectFunctions.isNotNullOrEmpty(getStudyClassList()))
					Collections.sort(getStudyClassList());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxGetClassSubjectsDetails", results = { @Result(location = "academic/timeTable/ajaxViewClasswiseSubjects.jsp", name = "success") })
		})
		public String ajaxGetClassSubjectsDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetClassSubjectsDetails' method");
			}
			try {
				if(StringFunctions.isNotNullOrEmpty(getClassId()) && getUserAcademicYearId() > 0){
					setNumberOfDays(adminManager.getCount("timeTable", "classSectionId="+getClassId()+" and custId="+getUserCustId()));
					Object[] maxPeriods= adminManager.get("select IFNULL(max(periodName),0) as maxPeriods,classSectionId from timeTable where classSectionId="+getClassId());
					if(!ObjectFunctions.isNullOrEmpty(maxPeriods))
						setCurrentYear(Integer.valueOf(maxPeriods[0].toString()));
					prepareTimeTablePriorityDetails();
					ajaxGetClassSubjectsSettings(Long.valueOf(getClassId()));
					if(ObjectFunctions.isNotNullOrEmpty(getViewClassSubjectsSettings())){
						List<ClassTeacher> classTeachers  = null;
						StringBuffer staffDetails = null;
						for(ViewClassSubjectsSettings classSubject : getViewClassSubjectsSettings()){
							if(!ObjectFunctions.isNullOrEmpty(classSubject)){
								classTeachers=adminManager.getAll(ClassTeacher.class,"studyClassId="+classSubject.getClassSectionId()+" and studySubjectId="+classSubject.getSubjectId()+" and academicYearId="+classSubject.getAcademicYearId());
								staffDetails = new StringBuffer();
								if(ObjectFunctions.isNotNullOrEmpty(classTeachers)){
									for(ClassTeacher teacher : classTeachers){
										staffDetails.append(teacher.getFullPersonName()+ " : "+teacher.getPeriodsCount()+", ");
									}
								}
								if(staffDetails.length() > 0)
									staffDetails.delete(staffDetails.lastIndexOf(","), staffDetails.length());
								else
									staffDetails.append("No staff defined for this subject.");
								classSubject.setStaffHandlePeriodsDetails(staffDetails.toString());
								staffDetails = null;
								classTeachers = null;
								classSubject=null;
							}
						}
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
   @Actions( { @Action(value = "ajaxAddClassSubjectsSettings", results = { @Result(location = "academic/timeTable/ajaxViewManageTimeTableSubjects.jsp", name = "success") }) })
	public String ajaxAddClassSubjectsSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddClassSubjectsSettings' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassId()) && StringFunctions.isNotNullOrEmpty(getTempString())){
				JSONArray formData=new JSONArray(getTempString());
				JSONObject data = null;
//				String subjectSettingId = null;
 				long subjectId;
 				String periodsCount= null;
 				int priority;
 				Integer classPeriodsCount = 0;
 				StudySubject studySubject=null;
 				String combinedPeriods = null;
 				ClassSubjectsSettings subjectSettings= null;
 				List<StudyClass> studyClassList = null;
 				int classSubjCount=0;
 				int subPeriodsPerWeek = 0;
 				Object[] classWisePeriodsDetails = null;
 				Object[] assignedSubjConutDetails = null;
 				HashMap<Long, Integer> classWisePeriods = new HashMap<Long, Integer>();
 				StudyClass classSection=(StudyClass)adminManager.get(StudyClass.class, "id="+getClassId());
 				if(!ObjectFunctions.isNullOrEmpty(classSection)){
 					if("on".equalsIgnoreCase(getStatus()))
 						studyClassList=adminManager.getAll(StudyClass.class," classNameClassId="+classSection.getClassId());
 					else{
 						studyClassList=new ArrayList<StudyClass>();
 						studyClassList.add(classSection);
 					}
 				}
	 			if(ObjectFunctions.isNotNullOrEmpty(studyClassList)){
	 				for(StudyClass studyClass: studyClassList){
	 					classWisePeriodsDetails = adminManager.get("select sum(periodsCount),classSectionId from vw_classWisePeriodsCountDetails where classSectionId="+studyClass.getId());
	 					if(!ObjectFunctions.isNullOrEmpty(classWisePeriodsDetails) && !ObjectFunctions.isNullOrEmpty(classWisePeriodsDetails[0])){
	 						classWisePeriods.put(studyClass.getId(),Integer.valueOf(classWisePeriodsDetails[0].toString()) );
	 					}
	 				}
	 				for (int i = 0; i < formData.length(); i++) {
	 					data=formData.getJSONObject(i);
	 			//		subjectSettingId = (String)data.get("subjectSettingId");
						subjectId =Long.valueOf((String) data.get("subjectId"));
						periodsCount =(String) data.get("periodsCount");
						priority = Integer.valueOf((String) data.get("priority"));
						combinedPeriods =(String) data.get("combinedPeriods");
						studySubject=(StudySubject)adminManager.get(StudySubject.class, subjectId);
						if(!ObjectFunctions.isNullOrEmpty(studySubject)){
							for(StudyClass studyClass: studyClassList){
								//For checking whether this subject is available in this class or not.
								classSubjCount=adminManager.getCount("vw_studyClassSubjectDetails", "studyClassId="+studyClass.getId()+" and subjectId="+subjectId);
								assignedSubjConutDetails = adminManager.get("select sum(periodsPerWeek),classSectionId from classSubjectsSettings where classSectionId="+studyClass.getId()+" and custId="+getUserCustId());
								classPeriodsCount = classWisePeriods.get(studyClass.getId());
								if(StringFunctions.isNullOrEmpty(periodsCount))
									subPeriodsPerWeek = 0;
								else
									subPeriodsPerWeek = Integer.valueOf(periodsCount);
								if(classSubjCount > 0 && !ObjectFunctions.isNullOrEmpty(classPeriodsCount) && classPeriodsCount >= subPeriodsPerWeek){
									subjectSettings =(ClassSubjectsSettings)adminManager.get(ClassSubjectsSettings.class,"classSectionId="+studyClass.getId()+" and studySubjectId="+subjectId+" and custId="+getUserCustId());
									if(ObjectFunctions.isNullOrEmpty(subjectSettings)){
										subjectSettings = new ClassSubjectsSettings();
										subjectSettings.setCreatedById(getUser().getId());
										subjectSettings.setCreatedDate(new Date());
									}
									if(!ObjectFunctions.isNullOrEmpty(assignedSubjConutDetails) && !ObjectFunctions.isNullOrEmpty(assignedSubjConutDetails[0])){
										if(classPeriodsCount < ((Integer.valueOf(assignedSubjConutDetails[0].toString()) - subjectSettings.getPeriodsPerWeek())+subPeriodsPerWeek))
											subPeriodsPerWeek = 0;
									}
									subjectSettings.setClassSection(studyClass);
									if(StringFunctions.isNullOrEmpty(combinedPeriods))
										subjectSettings.setContinuousPeriodsCount(0);
									else
										subjectSettings.setContinuousPeriodsCount(Integer.valueOf(combinedPeriods));
									subjectSettings.setPeriodsPerWeek(subPeriodsPerWeek);
									subjectSettings.setCustId(getUserCustId());
									subjectSettings.setLastAccessDate(new Date());
									subjectSettings.setLastUpdatedById(getUser().getId());
									subjectSettings.setLastUpdatedDate(new Date());
									subjectSettings.setStudySubject(studySubject);
									subjectSettings.setSubjectPriority(priority);
									adminManager.save(subjectSettings);
									subjectSettings = null;
									
									updateClassTeachersTimeTablePeriodsCount(studyClass.getId(),subjectId,subPeriodsPerWeek);
								}
								studyClass = null;
							}
							studySubject = null;
						}
	 				}
	 				super.addActionMessage("You have successfully added subject details.");
	 			}
 				ajaxGetTimeTableClassSubjectsSettings();
 				ajaxGetClassSubjectsDetails();
 				classSection = null;
 				studySubject = null;
 				studyClassList = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxViewTeacherSubjects", results = { @Result(location = "academic/timeTable/ajaxViewManageStaffClassSubjects.jsp", name = "success") })
		})
		public String ajaxViewTeacherSubjects() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewTeacherSubjects' method");
			}
			try {
				ajaxGetClassesHandleteachers();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxGetStaffSubjectsDetails", results = { @Result(location = "academic/timeTable/ajaxViewStaffSubjects.jsp", name = "success") })
		})
		public String ajaxGetStaffSubjectsDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetStaffSubjectsDetails' method");
			}
			try {
				if(getTempId() > 0)
					setObjectList(adminManager.getAll(ViewStaffSubjectsDetails.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and staffId="+getTempId()));
					if(ObjectFunctions.isNotNullOrEmpty(getObjectList()))
						Collections.sort(getObjectList());
					setNumberOfDays(adminManager.getCountForGroupByClause("timeTable", "academicYearId="+getUserAcademicYearId()+" and classSectionId in(select studyClassId from classTeacher where teacherId="+getTempId()+") group by dayId,periodName,periodType"));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxAddStaffHandledPeriodsCount", results = { @Result(location = "academic/timeTable/ajaxViewManageStaffClassSubjects.jsp", name = "success") }) })
	public String ajaxAddStaffHandledPeriodsCount() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddStaffHandledPeriodsCount' method");
		}
		try {
			if(getTempId() > 0 && StringFunctions.isNotNullOrEmpty(getTempString())){
				JSONArray formData=new JSONArray(getTempString());
				JSONObject data = null;
				long classTeacherId;
				String periodsHandled;
				ClassTeacher cteacher=null;
				for (int i = 0; i < formData.length(); i++) {
					data=formData.getJSONObject(i);
					classTeacherId = Long.valueOf((String)data.get("classTeacherId"));
					periodsHandled =(String) data.get("periodsHandled");
					if(classTeacherId > 0){
						cteacher =(ClassTeacher) adminManager.get(ClassTeacher.class, classTeacherId);
						if(!ObjectFunctions.isNullOrEmpty(cteacher)){
							if(StringFunctions.isNullOrEmpty(periodsHandled))
								cteacher.setPeriodsCount(0);
							else
								cteacher.setPeriodsCount(Integer.valueOf(periodsHandled));
							cteacher.setLastAccessDate(new Date());
							cteacher.setLastUpdatedById(getUser().getId());
							cteacher.setLastUpdatedDate(new Date());
							adminManager.save(cteacher);
							cteacher=null;
						}
					}
				}
				super.addActionMessage("You have successfully added staff subject details.");
				ajaxViewTeacherSubjects();
				ajaxGetStaffSubjectsDetails();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxRemoveDayWiseClassPeriods", results = { @Result(location = "academic/timeTable/ajaxViewManagePeriods.jsp", name = "success") }) })
	public String ajaxRemoveDayWiseClassPeriods() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveDayWiseClassPeriods' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassSectionId()) && StringFunctions.isNotNullOrEmpty(getAnyId())){
				adminManager.remove("staffTimeTablePeriods","timeTableId in (select id" +
	    	   		" from timeTable where classSectionId="+getClassSectionId()+" and dayId="+getAnyId()+")");
				adminManager.remove("timeTable", "classSectionId="+getClassSectionId()+" and dayId="+getAnyId());
				adminManager.updateClassSubjectsPeriodsCount(Long.valueOf(getClassSectionId()));
				adminManager.updateClassTeacherHandlePeriodsCount(Long.valueOf(getClassSectionId()));
				super.addActionMessage("You have successfully removed periods.");
			}
			ajaxGetSchoolPeriods();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxRemoveClassWisePeriods", results = { @Result(location = "academic/timeTable/ajaxViewManagePeriods.jsp", name = "success") }) })
	public String ajaxRemoveClassWisePeriods() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveClassWisePeriods' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassSectionId())){
				adminManager.remove("staffTimeTablePeriods","timeTableId in (select id" +
		    	   		" from timeTable where classSectionId="+getClassSectionId()+")");
				adminManager.remove("timeTable", "classSectionId="+getClassSectionId());
				adminManager.updateClassSubjectsPeriodsCount(Long.valueOf(getClassSectionId()));
				adminManager.updateClassTeacherHandlePeriodsCount(Long.valueOf(getClassSectionId()));
				super.addActionMessage("You have successfully removed periods.");
			}
			ajaxGetSchoolPeriods();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxViewManageTimeTable", results = { @Result(location = "academic/timeTable/ajaxViewManageTimeTable.jsp", name = "success") })
		})
		public String ajaxViewManageTimeTable() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewManageTimeTable' method");
			}
			try {
				setSmsCnt(adminManager.getCount("timeTable", "academicYearId="+getUserAcademicYearId()));
				setNumberOfDays(adminManager.getAssignedTimeTableSubjectsSettingsCount(getUserAcademicYearId()));
				if(getSmsCnt() > 0 && getNumberOfDays() > 0){
					setStudyClassList(adminManager.getAll(StudyClass.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
					if(ObjectFunctions.isNotNullOrEmpty(getStudyClassList()))
						Collections.sort(getStudyClassList());
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxGenerateTimeTable", results = { @Result(location = "academic/timeTable/ajaxViewManageTimeTable.jsp", name = "success") })
		})
		public String ajaxGenerateTimeTable() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGenerateTimeTable' method");
			}
		try {
			
			if(getUserAcademicYearId() > 0){
				List<ViewStaffSubjectsDetails> staffSubjects = null;
				StudyClass studyClass = null;
				Staff staff= null;
				boolean classTeacherHandleFirstPeriod = false;
				// Update subjectId,teacherId to null in timeTable table by passing academicYearId
				adminManager.updateTimeTableTeacherIdandSubjectIdsByAcademicYearId(getUserAcademicYearId());
				Object[] classTeacherStatus=adminManager.get("select id,classTeacherHandleFirstPeriod from academicYear where id="+getUserAcademicYearId());
				if(!ObjectFunctions.isNullOrEmpty(classTeacherStatus[1])){
					if("Y".equalsIgnoreCase(classTeacherStatus[1].toString()))
						classTeacherHandleFirstPeriod = true;
				}
				//Assigning class teachers to first period of their classes. 
				if(classTeacherHandleFirstPeriod){
					List<Object[]> classTeacherClasses = adminManager.getAll("select staffId,studyClassId from vw_staffSubjectsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and status='Y' and classTeacher='Y'");
					if(ObjectFunctions.isNotNullOrEmpty(classTeacherClasses)){
						for(Object[] classTeacher: classTeacherClasses){
							if(!ObjectFunctions.isNullOrEmpty(classTeacher)){
								if(!ObjectFunctions.isNullOrEmpty(classTeacher[0]) && !ObjectFunctions.isNullOrEmpty(classTeacher[1])){
									studyClass = (StudyClass)adminManager.get(StudyClass.class, "id="+classTeacher[1].toString());
									staff = (Staff)adminManager.get(Staff.class,"id="+classTeacher[0].toString());
									staffSubjects = adminManager.getAll(ViewStaffSubjectsDetails.class,"studyClassId="+classTeacher[1].toString()+" and staffId="+classTeacher[0].toString()+" and subjectPriority in(1,2,0,3,4) order by FIELD(subjectPriority,1,2,0,3,4)");
									if(ObjectFunctions.isNotNullOrEmpty(staffSubjects) && !ObjectFunctions.isNullOrEmpty(studyClass) && !ObjectFunctions.isNullOrEmpty(staff)){
										assignClassTeacherPeriods(staffSubjects,studyClass,staff);
									}
									staff = null;
									staffSubjects = null;
									studyClass = null;
								}
							}
						}
						classTeacherClasses = null;
					}
				}
				//Assigning comblined class subject details
				assignCombinedClassSubjectsDetailsPeriod();
				//Assigning all class subjects based on subjects priority 
				List<ViewClassSubjectsSettings> classSubjectSettings= adminManager.getAllClassWiseSubjects("custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and periodsPerWeek > 0 order by FIELD(subjectPriority,1,3,2,4,0),continuousPeriodsCount DESC");
				if(ObjectFunctions.isNotNullOrEmpty(classSubjectSettings)){
					checkTimeTableClassSubjectsAndPeriodsAllotment(classSubjectSettings,classTeacherHandleFirstPeriod);
					classSubjectSettings = null;
				}
				//Assign Non assigned Class Subjects Periods
				ajaxGenerateTimeTableForNonAssignedClassSubjects();
				staffSubjects = null;
				classTeacherStatus = null;
				//availablePeriods = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			finally{
				ajaxViewManageTimeTable();
			}	
			return SUCCESS;
	}
   
   public void assignCombinedClassSubjectsDetailsPeriod(){
	   List<ViewClassWisePeriodsCountDetails> classWiseWorkingDays = null;
	   Object[] subPeriodsCountDetails = null;
	   StringBuffer classSectionIds = null;
	   int subTotalPeriods=0;
	   int staffTotalPeriodsCount = 0;
	   int remainingHandlePeriodsCount = 0;
	   int staffHandlePeriodsCount = 0;
	   int remainingStaffHandlePeriodsCount = 0;
	   int handlePeriodsCount=0;
	   int classWiseWorkingDaysCount=0;
	   int periodsPerDay=0;
	   int subPriority=0;
	   int subContinuousPeriodsCout=0;
	   StringBuffer teacherIds = null;
	   Object[] staffAssignedPeriods = null;
	   List<Object[]> availablePeriods=null;
	   double perDayCount=0,perDayPrecisionValue=0,perDayDecimalCount=0;
	   StringBuffer orderClause = null;
	   List<TimeTable> periods = null;
	   List<CombinedClassSubjects> combinedClassSubjects= adminManager.getAll(CombinedClassSubjects.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
	   if(ObjectFunctions.isNotNullOrEmpty(combinedClassSubjects)){
		   Collections.sort(combinedClassSubjects);
		   for(CombinedClassSubjects combinedClassSub :  combinedClassSubjects){
			   if(ObjectFunctions.isNotNullOrEmpty(combinedClassSub.getClassSections())){
				   classSectionIds = new StringBuffer();
				   for(StudyClass studyClas : combinedClassSub.getClassSections()){
					   if(classSectionIds.length() > 0)
						   classSectionIds.append(","+studyClas.getId());
					   else
						   classSectionIds.append(studyClas.getId());
				   }
				   classWiseWorkingDays = adminManager.getAll(ViewClassWisePeriodsCountDetails.class, "classSectionId in ("+classSectionIds.toString()+") group by dayId having count(*) >= "+combinedClassSub.getClassSections().size());
				   subPeriodsCountDetails = adminManager.get("select min(periodsPerWeek),assignedPeriodsCount from vw_subjectWisePeriodsDetails where classSectionId in("+classSectionIds.toString()+") and subjectId="+combinedClassSub.getStudySubject().getId());
				   if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails) && !ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[0])){
						subTotalPeriods = Integer.valueOf(subPeriodsCountDetails[0].toString());
				   }
				   if(ObjectFunctions.isNotNullOrEmpty(combinedClassSub.getTeachers())){
					   teacherIds = new StringBuffer();
					   for(Staff staff : combinedClassSub.getTeachers()){
						   if(teacherIds.length() > 0)
							   teacherIds.append(","+staff.getId());
						   else
							   teacherIds.append(staff.getId());
					   }
					   if(ObjectFunctions.isNotNullOrEmpty(classWiseWorkingDays)){
							if(subTotalPeriods > 0){
								subPeriodsCountDetails = adminManager.get("select teacherId,min(periodsCount) from classTeacher where studyClassId in("+classSectionIds.toString()+") and studySubjectId="+combinedClassSub.getStudySubject().getId()+" and teacherId in("+teacherIds.toString()+")");
								if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails)&& !ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[1])){
									staffTotalPeriodsCount = Integer.valueOf(subPeriodsCountDetails[1].toString());
									classWiseWorkingDaysCount = classWiseWorkingDays.size();
									for(ViewClassWisePeriodsCountDetails day: classWiseWorkingDays){
										subPeriodsCountDetails = adminManager.get("select periodsPerWeek,max(assignedPeriodsCount) from vw_subjectWisePeriodsDetails where classSectionId in("+classSectionIds.toString()+") and subjectId="+combinedClassSub.getStudySubject().getId());
										if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails) && !ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[1])){
											remainingHandlePeriodsCount =subTotalPeriods - Integer.valueOf(subPeriodsCountDetails[1].toString());
											if(remainingHandlePeriodsCount > 0 &&  subTotalPeriods >= remainingHandlePeriodsCount){
												staffHandlePeriodsCount = adminManager.getCountForGroupByClause("vw_timeTableDetails","classSectionId in("+classSectionIds.toString()+") and subjectId="+combinedClassSub.getStudySubject().getId()+" and teacherId in("+teacherIds.toString()+") group by dayId,periodType,periodName");
												remainingStaffHandlePeriodsCount = staffTotalPeriodsCount - staffHandlePeriodsCount;
												if(remainingStaffHandlePeriodsCount > 0 && staffTotalPeriodsCount >= remainingStaffHandlePeriodsCount){
													if(remainingStaffHandlePeriodsCount > remainingHandlePeriodsCount)
														handlePeriodsCount = remainingHandlePeriodsCount;
													else
														handlePeriodsCount = remainingStaffHandlePeriodsCount;
													perDayCount = (double)handlePeriodsCount/classWiseWorkingDaysCount;
													perDayPrecisionValue = perDayCount - Math.floor(perDayCount);
										        	perDayDecimalCount = perDayCount - perDayPrecisionValue;
										        	if(perDayPrecisionValue > 0)
										        		periodsPerDay = (int)perDayDecimalCount+1;
										        	else
										        		periodsPerDay = (int)perDayDecimalCount;
										        	if(periodsPerDay > 0){
														subPeriodsCountDetails = adminManager.get("select max(subjectPriority),max(continuousPeriodsCount) from classSubjectsSettings where classSectionId in("+classSectionIds.toString()+") and studySubjectId="+combinedClassSub.getStudySubject().getId());
														if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[0])){
															subPriority = Integer.valueOf(subPeriodsCountDetails[0].toString());
														}
														if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[1])){
															subContinuousPeriodsCout = Integer.valueOf(subPeriodsCountDetails[1].toString());
														}
														staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId in("+teacherIds.toString()+") and academicYearId="+getUserAcademicYearId()+" and dayId="+day.getDayId());
														if(subPriority == 2)
															orderClause = new StringBuffer(" order by periodType,periodName");
														else if(subPriority == 3)
															orderClause = new StringBuffer(" order by periodType DESC,periodName DESC");
														else if(subPriority == 4)
															orderClause = new StringBuffer(" order by periodType,PeriodName DESC");
														else
															orderClause = new StringBuffer(" order by periodType DESC,periodName");
							                    	   if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0])){
							                    		   availablePeriods = adminManager.getAll("select dayId,periodName,periodType,CONVERT(group_concat(id), CHAR) from timeTable where classSectionId in("+classSectionIds.toString()+") and (dayId,periodName,periodType) not in("+staffAssignedPeriods[0].toString()+") and academicYearId="+getUserAcademicYearId()+" and subjectId is null and dayId="+day.getDayId()+" group by dayId,periodName,periodType having count(*) >= "+combinedClassSub.getClassSections().size()+orderClause);
							                    	   }										                    		   
							                    	   else{
							                    		   availablePeriods = adminManager.getAll("select dayId,periodName,periodType,CONVERT(group_concat(id), CHAR) from timeTable where classSectionId in("+classSectionIds.toString()+") and academicYearId="+getUserAcademicYearId()+" and subjectId is null and dayId="+day.getDayId()+" group by dayId,periodName,periodType having count(*) >= "+combinedClassSub.getClassSections().size()+orderClause);
							                    	   }
							                    	   if(ObjectFunctions.isNotNullOrEmpty(availablePeriods)){
							                    		   int continuousPeriodsCount = periodsPerDay+subContinuousPeriodsCout;
															if(subContinuousPeriodsCout > 0 && remainingHandlePeriodsCount >= continuousPeriodsCount && remainingStaffHandlePeriodsCount >= continuousPeriodsCount && availablePeriods.size() >= continuousPeriodsCount){
																periodsPerDay = continuousPeriodsCount;
															}
															for(Object[] period: availablePeriods){
																if(periodsPerDay > 0){
																	periods=adminManager.getAll(ViewTimeTableDetails.class, "teacherId in("+teacherIds.toString()+") and periodType='"+period[2].toString()+"' and periodName='"+period[1].toString()+"' and dayId="+period[0].toString()+" and academicYearId="+getUserAcademicYearId());
																	if(ObjectFunctions.isNullOrEmpty(periods)){
																		periods = adminManager.getAll(TimeTable.class,"id in("+period[3].toString()+")");
																		if(ObjectFunctions.isNotNullOrEmpty(periods)){
																			for(TimeTable timeTablePeriod: periods){
																				timeTablePeriod.setLastAccessDate(new Date());
																				timeTablePeriod.setLastUpdatedById(getUser().getId());
																				timeTablePeriod.setLastUpdatedDate(new Date());
																				timeTablePeriod.setSubject(combinedClassSub.getStudySubject());
																				timeTablePeriod.setTeachers(ConvertUtil.convertListToSet(combinedClassSub.getTeachers()));
																				timeTablePeriod.setCombinedPeriod(true);
																				timeTablePeriod.setPrioritiesBasedPeriod(true);
																				adminManager.save(timeTablePeriod);
																				timeTablePeriod = null;
																			}
																			periods = null;
																		}
																		periodsPerDay--;
																		period = null;
																	}
																}else{
																	break;
																}
																periods = null;
															}
															availablePeriods = null;
							                    	   }
										        	}
												}else{
													break;
												}
											}else{
												break;
											}
										}
										classWiseWorkingDaysCount --;
										day = null;
									}
								}
								//Assign Non assigned combined class Subjects
								subPeriodsCountDetails = adminManager.get("select periodsPerWeek,max(assignedPeriodsCount) from vw_subjectWisePeriodsDetails where classSectionId in("+classSectionIds.toString()+") and subjectId="+combinedClassSub.getStudySubject().getId());
								if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails) && !ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[1])){
									remainingHandlePeriodsCount =subTotalPeriods - Integer.valueOf(subPeriodsCountDetails[1].toString());
									if(remainingHandlePeriodsCount > 0 &&  subTotalPeriods >= remainingHandlePeriodsCount){
										staffHandlePeriodsCount = adminManager.getCountForGroupByClause("vw_timeTableDetails","classSectionId in("+classSectionIds.toString()+") and subjectId="+combinedClassSub.getStudySubject().getId()+" and teacherId in("+teacherIds.toString()+") group by dayId,periodType,periodName");
										remainingStaffHandlePeriodsCount = staffTotalPeriodsCount - staffHandlePeriodsCount;
										if(remainingStaffHandlePeriodsCount > 0 && staffTotalPeriodsCount >= remainingStaffHandlePeriodsCount){
											if(remainingStaffHandlePeriodsCount > remainingHandlePeriodsCount)
												handlePeriodsCount = remainingHandlePeriodsCount;
											else
												handlePeriodsCount = remainingStaffHandlePeriodsCount;
											subPeriodsCountDetails = adminManager.get("select max(subjectPriority),max(continuousPeriodsCount) from classSubjectsSettings where classSectionId in("+classSectionIds.toString()+") and studySubjectId="+combinedClassSub.getStudySubject().getId());
											if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[0])){
												subPriority = Integer.valueOf(subPeriodsCountDetails[0].toString());
											}
											staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId in("+teacherIds.toString()+") and academicYearId="+getUserAcademicYearId());
											if(subPriority == 2)
												orderClause = new StringBuffer(" order by periodType,periodName");
											else if(subPriority == 3)
												orderClause = new StringBuffer(" order by periodType DESC,periodName DESC");
											else if(subPriority == 4)
												orderClause = new StringBuffer(" order by periodType,PeriodName DESC");
											else
												orderClause = new StringBuffer(" order by periodType DESC,periodName");
				                    	   if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0])){
				                    		   availablePeriods = adminManager.getAll("select dayId,periodName,periodType,group_concat(CONVERT(id, CHAR)) from timeTable where classSectionId in("+classSectionIds.toString()+") and (dayId,periodName,periodType) not in("+staffAssignedPeriods[0].toString()+") and academicYearId="+getUserAcademicYearId()+" and subjectId is null group by dayId,periodName,periodType having count(*) >= "+combinedClassSub.getClassSections().size()+orderClause);
				                    	   }										                    		   
				                    	   else{
				                    		   availablePeriods = adminManager.getAll("select dayId,periodName,periodType,group_concat(CONVERT(id, CHAR)) from timeTable where classSectionId in("+classSectionIds.toString()+") and academicYearId="+getUserAcademicYearId()+" and subjectId is null group by dayId,periodName,periodType having count(*) >= "+combinedClassSub.getClassSections().size()+orderClause);
				                    	   }
				                    	   if(ObjectFunctions.isNotNullOrEmpty(availablePeriods)){
												for(Object[] period: availablePeriods){
													if(handlePeriodsCount > 0){
														periods=adminManager.getAll(ViewTimeTableDetails.class, "teacherId in("+teacherIds.toString()+") and periodType='"+period[2].toString()+"' and periodName='"+period[1].toString()+"' and dayId="+period[0].toString()+" and academicYearId="+getUserAcademicYearId());
														if(ObjectFunctions.isNullOrEmpty(periods)){
															periods = adminManager.getAll(TimeTable.class,"id in("+period[3].toString()+")");
															if(ObjectFunctions.isNotNullOrEmpty(periods)){
																for(TimeTable timeTablePeriod: periods){
																	timeTablePeriod.setLastAccessDate(new Date());
																	timeTablePeriod.setLastUpdatedById(getUser().getId());
																	timeTablePeriod.setLastUpdatedDate(new Date());
																	timeTablePeriod.setSubject(combinedClassSub.getStudySubject());
																	timeTablePeriod.setTeachers(ConvertUtil.convertListToSet(combinedClassSub.getTeachers()));
																	timeTablePeriod.setCombinedPeriod(true);
																	timeTablePeriod.setPrioritiesBasedPeriod(true);
																	adminManager.save(timeTablePeriod);
																	timeTablePeriod = null;
																}
																periods = null;
															}
															handlePeriodsCount--;
															period = null;
														}
													}else{
														break;
													}
													periods = null;
												}
												availablePeriods = null;
				                    	   }
										}
									}
								}
							}
					   }
				   }else{
					   //TODO : If staff not available for subjects
					   if(ObjectFunctions.isNotNullOrEmpty(classWiseWorkingDays)){
							if(subTotalPeriods > 0){
								classWiseWorkingDaysCount = classWiseWorkingDays.size();
								for(ViewClassWisePeriodsCountDetails day: classWiseWorkingDays){
									subPeriodsCountDetails = adminManager.get("select periodsPerWeek,max(assignedPeriodsCount) from vw_subjectWisePeriodsDetails where classSectionId in("+classSectionIds.toString()+") and subjectId="+combinedClassSub.getStudySubject().getId());
									if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails) && !ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[1])){
										remainingHandlePeriodsCount =subTotalPeriods - Integer.valueOf(subPeriodsCountDetails[1].toString());
										if(remainingHandlePeriodsCount > 0 &&  subTotalPeriods >= remainingHandlePeriodsCount){
											perDayCount = (double)remainingHandlePeriodsCount/classWiseWorkingDaysCount;
											perDayPrecisionValue = perDayCount - Math.floor(perDayCount);
								        	perDayDecimalCount = perDayCount - perDayPrecisionValue;
								        	if(perDayPrecisionValue > 0)
								        		periodsPerDay = (int)perDayDecimalCount+1;
								        	else
								        		periodsPerDay = (int)perDayDecimalCount;
								        	if(periodsPerDay > 0){
												subPeriodsCountDetails = adminManager.get("select max(subjectPriority),max(continuousPeriodsCount) from classSubjectsSettings where classSectionId in("+classSectionIds.toString()+") and studySubjectId="+combinedClassSub.getStudySubject().getId());
												if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[0])){
													subPriority = Integer.valueOf(subPeriodsCountDetails[0].toString());
												}
												if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[1])){
													subContinuousPeriodsCout = Integer.valueOf(subPeriodsCountDetails[1].toString());
												}
												if(subPriority == 2)
													orderClause = new StringBuffer(" order by periodType,periodName");
												else if(subPriority == 3)
													orderClause = new StringBuffer(" order by periodType DESC,periodName DESC");
												else if(subPriority == 4)
													orderClause = new StringBuffer(" order by periodType,PeriodName DESC");
												else
													orderClause = new StringBuffer(" order by periodType DESC,periodName");
			                    			   availablePeriods = adminManager.getAll("select dayId,periodName,periodType,CONVERT(group_concat(id), CHAR) from timeTable where classSectionId in("+classSectionIds.toString()+") and academicYearId="+getUserAcademicYearId()+" and subjectId is null and dayId="+day.getDayId()+" group by dayId,periodName,periodType having count(*) >= "+combinedClassSub.getClassSections().size()+orderClause);
					                    	   if(ObjectFunctions.isNotNullOrEmpty(availablePeriods)){
					                    		   int continuousPeriodsCount = periodsPerDay+subContinuousPeriodsCout;
													if(subContinuousPeriodsCout > 0 && remainingHandlePeriodsCount >= continuousPeriodsCount && availablePeriods.size() >= continuousPeriodsCount){
														periodsPerDay = continuousPeriodsCount;
													}
													for(Object[] period: availablePeriods){
														if(periodsPerDay > 0){
															periods = adminManager.getAll(TimeTable.class,"id in("+period[3].toString()+")");
															if(ObjectFunctions.isNotNullOrEmpty(periods)){
																for(TimeTable timeTablePeriod: periods){
																	timeTablePeriod.setLastAccessDate(new Date());
																	timeTablePeriod.setLastUpdatedById(getUser().getId());
																	timeTablePeriod.setLastUpdatedDate(new Date());
																	timeTablePeriod.setSubject(combinedClassSub.getStudySubject());
																	timeTablePeriod.setTeachers(null);
																	timeTablePeriod.setCombinedPeriod(true);
																	timeTablePeriod.setPrioritiesBasedPeriod(true);
																	adminManager.save(timeTablePeriod);
																	timeTablePeriod = null;
																}
																periods = null;
															}
															periodsPerDay--;
															period = null;
														}else{
															break;
														}
														periods = null;
													}
													availablePeriods = null;
					                    	   }
								        	}
									}else{
										break;
									}
									}
									classWiseWorkingDaysCount --;
									day = null;
								}
								//Assign non assigned class subjects periods
								subPeriodsCountDetails = adminManager.get("select periodsPerWeek,max(assignedPeriodsCount) from vw_subjectWisePeriodsDetails where classSectionId in("+classSectionIds.toString()+") and subjectId="+combinedClassSub.getStudySubject().getId());
								if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails) && !ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[1])){
									remainingHandlePeriodsCount =subTotalPeriods - Integer.valueOf(subPeriodsCountDetails[1].toString());
									if(remainingHandlePeriodsCount > 0 &&  subTotalPeriods >= remainingHandlePeriodsCount){
										subPeriodsCountDetails = adminManager.get("select max(subjectPriority),max(continuousPeriodsCount) from classSubjectsSettings where classSectionId in("+classSectionIds.toString()+") and studySubjectId="+combinedClassSub.getStudySubject().getId());
										if(!ObjectFunctions.isNullOrEmpty(subPeriodsCountDetails[0])){
											subPriority = Integer.valueOf(subPeriodsCountDetails[0].toString());
										}
										if(subPriority == 2)
											orderClause = new StringBuffer(" order by periodType,periodName");
										else if(subPriority == 3)
											orderClause = new StringBuffer(" order by periodType DESC,periodName DESC");
										else if(subPriority == 4)
											orderClause = new StringBuffer(" order by periodType,PeriodName DESC");
										else
											orderClause = new StringBuffer(" order by periodType DESC,periodName");
	                    			   availablePeriods = adminManager.getAll("select dayId,periodName,periodType,CONVERT(group_concat(id), CHAR) from timeTable where classSectionId in("+classSectionIds.toString()+") and academicYearId="+getUserAcademicYearId()+" and subjectId is null group by dayId,periodName,periodType having count(*) >= "+combinedClassSub.getClassSections().size()+orderClause);
			                    	   if(ObjectFunctions.isNotNullOrEmpty(availablePeriods)){
			                    		   for(Object[] period: availablePeriods){
												if(remainingHandlePeriodsCount > 0){
													periods = adminManager.getAll(TimeTable.class,"id in("+period[3].toString()+")");
													if(ObjectFunctions.isNotNullOrEmpty(periods)){
														for(TimeTable timeTablePeriod: periods){
															timeTablePeriod.setLastAccessDate(new Date());
															timeTablePeriod.setLastUpdatedById(getUser().getId());
															timeTablePeriod.setLastUpdatedDate(new Date());
															timeTablePeriod.setSubject(combinedClassSub.getStudySubject());
															timeTablePeriod.setTeachers(null);
															timeTablePeriod.setCombinedPeriod(true);
															timeTablePeriod.setPrioritiesBasedPeriod(true);
															adminManager.save(timeTablePeriod);
															timeTablePeriod = null;
														}
														periods = null;
													}
													remainingHandlePeriodsCount--;
													period = null;
												}else{
													break;
												}
												periods = null;
											}
											availablePeriods = null;
			                    	   }
									}
								}
								
							}
					   }
				   }
			   }
			   classSectionIds = null;
			   teacherIds = null;
			   classWiseWorkingDays = null;
			   subPeriodsCountDetails = null;
			   combinedClassSub = null;
		   }
	   }
	   combinedClassSubjects = null;
   }
   public void checkTimeTableClassSubjectsAndPeriodsAllotment(List<ViewClassSubjectsSettings> classSubjectSettings,boolean classTeacherHandleFirstPeriod){
	   List<ViewClassWisePeriodsCountDetails> classWiseWorkingDays = null;
	   List<ClassTeacher> classTeachers=null;
	   int classWiseWorkingDaysCount=0;
	   int assignedPeriodsCount =0 ;
	   int staffHandledSubCount=0;
	   int remainingHandlePeriodsCount = 0;
	   int remainingStaffHandlePeriodsCount = 0;
//	   double decimalVal;
//	   double precisionVal;
	   int periodsPerDay = 0;
	   double perDayCount = 0;
   	   double perDayPrecisionValue = 0;
   	   double perDayDecimalCount = 0;
   	   int handlePeriodsCount =0 ;
   	   StudySubject subject = null;
	   List<TimeTable> availablePeriods=null;
	   for(ViewClassSubjectsSettings classSubject : classSubjectSettings){
		   assignedPeriodsCount = adminManager.getCount("timeTable", "classSectionId="+classSubject.getClassSectionId()+" and subjectId="+classSubject.getSubjectId());
		   remainingHandlePeriodsCount =classSubject.getPeriodsPerWeek() - assignedPeriodsCount;
			if(remainingHandlePeriodsCount > 0){
				classWiseWorkingDays=adminManager.getAll(ViewClassWisePeriodsCountDetails.class, "classSectionId="+classSubject.getClassSectionId());
				if(ObjectFunctions.isNotNullOrEmpty(classWiseWorkingDays)){
					subject = (StudySubject)adminManager.get(StudySubject.class, "id="+classSubject.getSubjectId());
					classTeachers=adminManager.getAll(ClassTeacher.class, "studyClassId="+classSubject.getClassSectionId()+" and studySubjectId="+classSubject.getSubjectId());
					if(ObjectFunctions.isNotNullOrEmpty(classTeachers)){
						for(ClassTeacher teacher: classTeachers){
							if("Y".equalsIgnoreCase(teacher.getStaff().getStatus())){
								classWiseWorkingDaysCount = classWiseWorkingDays.size();
								for(ViewClassWisePeriodsCountDetails day: classWiseWorkingDays){
									assignedPeriodsCount = adminManager.getCount("timeTable", "classSectionId="+classSubject.getClassSectionId()+" and subjectId="+classSubject.getSubjectId());
									remainingHandlePeriodsCount =classSubject.getPeriodsPerWeek() - assignedPeriodsCount;
									staffHandledSubCount = adminManager.getCount("vw_timeTableDetails", "classSectionId="+classSubject.getClassSectionId()+" and subjectId="+classSubject.getSubjectId()+" and teacherId="+teacher.getStaff().getId());
									remainingStaffHandlePeriodsCount = teacher.getPeriodsCount() - staffHandledSubCount;
									if(remainingStaffHandlePeriodsCount > 0 && remainingHandlePeriodsCount > 0){
										if(remainingStaffHandlePeriodsCount > remainingHandlePeriodsCount)
											handlePeriodsCount = remainingHandlePeriodsCount;
										else
											handlePeriodsCount = remainingStaffHandlePeriodsCount;
										perDayCount = (double)handlePeriodsCount/classWiseWorkingDaysCount;
										//log.debug("perDayCount : "+perDayCount);
							        	perDayPrecisionValue = perDayCount - Math.floor(perDayCount);
							        	perDayDecimalCount = perDayCount - perDayPrecisionValue;
							        	if(perDayPrecisionValue > 0)
							        		periodsPerDay = (int)perDayDecimalCount+1;
							        	else
							        		periodsPerDay = (int)perDayDecimalCount;
										if(periodsPerDay > 0){
											if(classSubject.getSubjectPriority() == 4){
												if(classSubject.getContinuousPeriodsCount() > 0){
													availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='A' and dayId="+day.getDayId()+" order by periodName DESC");
												}else{
													availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='A' and dayId="+day.getDayId()+" order by periodName DESC LIMIT 1");
												}
											}else if(classSubject.getSubjectPriority() == 3){
												if(classSubject.getContinuousPeriodsCount() > 0){
													availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='M' and dayId="+day.getDayId()+" order by periodName DESC");
												}else{
													availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='M' and dayId="+day.getDayId()+" order by periodName DESC LIMIT 1");
												}
											}else if(classSubject.getSubjectPriority() == 2){
												availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='A' and dayId="+day.getDayId()+" order by periodName");
											}else if(classSubject.getSubjectPriority() == 1){
												availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='M' and dayId="+day.getDayId()+" order by periodName");
											}else{
												availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and dayId="+day.getDayId()+" order by periodType DESC,periodName");
											}
											assignClassSubjectsToPeriods(availablePeriods,classSubject,teacher,periodsPerDay,handlePeriodsCount,subject);
										}
									}else{
											break;
									}
									classWiseWorkingDaysCount--;
									day = null;
								}
								//Assigning Non assigned class subjects.
								assignedPeriodsCount = adminManager.getCount("timeTable", "classSectionId="+classSubject.getClassSectionId()+" and subjectId="+classSubject.getSubjectId());
								remainingHandlePeriodsCount =classSubject.getPeriodsPerWeek() - assignedPeriodsCount;
								staffHandledSubCount = adminManager.getCount("vw_timeTableDetails", "classSectionId="+classSubject.getClassSectionId()+" and subjectId="+classSubject.getSubjectId()+" and teacherId="+teacher.getStaff().getId());
								remainingStaffHandlePeriodsCount = teacher.getPeriodsCount() - staffHandledSubCount;
								if(remainingStaffHandlePeriodsCount > 0 && remainingHandlePeriodsCount > 0){
									if(classSubject.getSubjectPriority() == 4){
							               availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSubject.getClassSectionId()+" and subjectId is null order by periodType,periodName Desc");
						            }else if(classSubject.getSubjectPriority() == 3)
						               availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSubject.getClassSectionId()+" and subjectId is null order by periodType DESC,periodName Desc");
						            else if(classSubject.getSubjectPriority() == 2)
						               availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSubject.getClassSectionId()+" and subjectId is null order by periodType,periodName");
						            else {
						                availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSubject.getClassSectionId()+" and subjectId is null order by periodType DESC,periodName");
						            }
									if(ObjectFunctions.isNullOrEmpty(availablePeriods)){
							               break;
									}else{
							        	  assignNonAssignedClassSubjects(classSubject,availablePeriods,teacher,remainingStaffHandlePeriodsCount,remainingHandlePeriodsCount,subject);
									}
								}
							 }
							teacher=null;
						}
						classWiseWorkingDays=null;
						classTeachers=null;
					}else{
						classWiseWorkingDaysCount = classWiseWorkingDays.size();
						for(ViewClassWisePeriodsCountDetails day: classWiseWorkingDays){
							assignedPeriodsCount = adminManager.getCount("timeTable", "classSectionId="+classSubject.getClassSectionId()+" and subjectId="+classSubject.getSubjectId());
							remainingHandlePeriodsCount =classSubject.getPeriodsPerWeek() - assignedPeriodsCount;
							if(remainingHandlePeriodsCount > 0){
								perDayCount = (double)remainingHandlePeriodsCount/classWiseWorkingDaysCount;
					        	perDayPrecisionValue = perDayCount - Math.floor(perDayCount);
					        	perDayDecimalCount = perDayCount - perDayPrecisionValue;
					        	if(perDayPrecisionValue > 0)
					        		periodsPerDay = (int)perDayDecimalCount+1;
					        	else
					        		periodsPerDay = (int)perDayDecimalCount;
								if(periodsPerDay > 0){
									if(classSubject.getSubjectPriority() == 4){
										if(classSubject.getContinuousPeriodsCount() > 0){
											availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='A' and dayId="+day.getDayId()+" order by periodName DESC");
										}else{
											availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='A' and dayId="+day.getDayId()+" order by periodName DESC LIMIT 1");
										}
									}else if(classSubject.getSubjectPriority() == 3){
										if(classSubject.getContinuousPeriodsCount() > 0){
											availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='M' and dayId="+day.getDayId()+" order by periodName DESC");
										}else{
											availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='M' and dayId="+day.getDayId()+" order by periodName DESC LIMIT 1");
										}
									}else if(classSubject.getSubjectPriority() == 2){
										availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='A' and dayId="+day.getDayId()+" order by periodName");
									}else if(classSubject.getSubjectPriority() == 1){
										availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and periodType='M' and dayId="+day.getDayId()+" order by periodName");
									}else{
										availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+classSubject.getClassSectionId()+" and subjectId is null and dayId="+day.getDayId()+" order by periodType DESC,periodName");
									}
									assignClassSubjectsToPeriods(availablePeriods,classSubject,null,periodsPerDay,periodsPerDay,subject);
								}
							}else{
									break;
							}
							classWiseWorkingDaysCount--;
							day = null;
						}
						assignedPeriodsCount = adminManager.getCount("timeTable", "classSectionId="+classSubject.getClassSectionId()+" and subjectId="+classSubject.getSubjectId());
						remainingHandlePeriodsCount =classSubject.getPeriodsPerWeek() - assignedPeriodsCount;
						if(remainingHandlePeriodsCount > 0){
							assignNonStaffClassSubjectPeriods(classSubject.getSubjectPriority(), classSubject.getClassSectionId(), remainingHandlePeriodsCount, subject);
						}
					}
				}
			}
			classSubject= null;
		}
	   availablePeriods = null;
	   classSubjectSettings = null;
	   classWiseWorkingDays= null;
	   classTeachers = null;
   }
   
   public void assignNonAssignedClassSubjects(ViewClassSubjectsSettings classSubject,List<TimeTable> availablePeriods,ClassTeacher teacher,int remainingStaffHandlePeriodsCount,int remainingHandlePeriodsCount,StudySubject subject){
	   List<ViewTimeTableDetails> assignedAnotherClassPeriods = null;
	   StudySubject assignedStaffSubject = null;
	   Staff updatableStaff = null;
	   List<TimeTable> availableStaffPeriods = null;
	   Object[] staffAssignedPeriods = null;
	   StringBuffer orderClause= null;
	   int handlePeriodsCount = 0;
	   if(remainingStaffHandlePeriodsCount > remainingHandlePeriodsCount)
			handlePeriodsCount = remainingHandlePeriodsCount;
		else
			handlePeriodsCount = remainingStaffHandlePeriodsCount;
	   for(TimeTable period: availablePeriods){
		  if(handlePeriodsCount > 0 ){
			  assignedAnotherClassPeriods=adminManager.getAll(ViewTimeTableDetails.class, "teacherId="+teacher.getStaff().getId()+" and periodType='"+period.getPeriodType()+"' and periodName='"+period.getPeriodName()+"' and dayId="+period.getDayId()+" and academicYearId="+getUserAcademicYearId());
			  if(ObjectFunctions.isNullOrEmpty(assignedAnotherClassPeriods)){
				  handlePeriodsCount = createTimeTable(period,handlePeriodsCount,teacher,false);
			  }else{
			  /*select dayId,periodName,periodType,classAndSection,subjectName,prioritiesBasedPeriod from vw_timeTableDetails where classSectionId=334 and prioritiesBasedPeriod='N' and 
			   (dayId,periodName,periodType) not in(select dayId,periodName,periodType from vw_timeTableDetails where teacherId=363 and academicYearId=11) order by dayId,periodType desc,periodName ;*/
			   staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId="+teacher.getStaff().getId()+" and academicYearId="+getUserAcademicYearId());
			   if(classSubject.getSubjectPriority() == 4)
				   orderClause = new StringBuffer(" order by periodType,PeriodName DESC");
			   else if(classSubject.getSubjectPriority() == 3)
				   orderClause = new StringBuffer(" order by periodType DESC,periodName DESC");
				else if(classSubject.getSubjectPriority() == 2)
					orderClause = new StringBuffer(" order by periodType,periodName");
				else 
					orderClause = new StringBuffer(" order by periodType DESC,periodName");
			   if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0])){
				   availableStaffPeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSubject.getClassSectionId()+" and (dayId,periodName,periodType) not in("+staffAssignedPeriods[0].toString()+") and academicYearId="+getUserAcademicYearId()+" and prioritiesBasedPeriod='N'"+orderClause);
			   }else
				   availableStaffPeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSubject.getClassSectionId()+" and academicYearId="+getUserAcademicYearId()+" and prioritiesBasedPeriod='N'"+orderClause);
			   if(ObjectFunctions.isNotNullOrEmpty(availableStaffPeriods)){
				   for(TimeTable availableStaffPeriod : availableStaffPeriods){
					   if(ObjectFunctions.isNullOrEmpty(availableStaffPeriod.getTeachers())){
						   assignedAnotherClassPeriods = null;
						   updatableStaff = null;
						   assignedStaffSubject = availableStaffPeriod.getSubject();
					   }else{
						   for(Staff staff : availableStaffPeriod.getTeachers()){
							   assignedAnotherClassPeriods=adminManager.getAll(ViewTimeTableDetails.class, "teacherId="+staff.getId()+" and periodType='"+period.getPeriodType()+"' and periodName='"+period.getPeriodName()+"' and dayId="+period.getDayId()+" and academicYearId="+getUserAcademicYearId());
							   if(ObjectFunctions.isNullOrEmpty(assignedAnotherClassPeriods)){
								   assignedStaffSubject = availableStaffPeriod.getSubject();
								   updatableStaff = staff;
								   break;
							   }
						   }
					   }
					   if(ObjectFunctions.isNullOrEmpty(assignedAnotherClassPeriods)){
						   availableStaffPeriod.setTeachers(null);
						   availableStaffPeriod.addTeacher(teacher.getStaff());
						   availableStaffPeriod.setSubject(subject);
						   availableStaffPeriod.setCombinedPeriod(false);
						   availableStaffPeriod.setPrioritiesBasedPeriod(false);
						   availableStaffPeriod.setLastAccessDate(new Date());
						   availableStaffPeriod.setLastUpdatedById(getUser().getId());
						   availableStaffPeriod.setLastUpdatedDate(new Date());
						   adminManager.save(availableStaffPeriod);
						   period.setTeachers(null);
						   period.addTeacher(updatableStaff);
						   period.setSubject(assignedStaffSubject);
						   period.setCombinedPeriod(false);
						   period.setPrioritiesBasedPeriod(false);
						   period.setLastAccessDate(new Date());
						   period.setLastUpdatedById(getUser().getId());
						   period.setLastUpdatedDate(new Date());
						   adminManager.save(period);
						   availableStaffPeriod = null;
						   period = null;
						   availableStaffPeriod = null;
						   assignedStaffSubject = null;
						   updatableStaff = null;
						   handlePeriodsCount--;
						   remainingStaffHandlePeriodsCount--;
						   break;
					   }
				   }
			   }else
				   break;
			  
			  }
			  
       }else{
           break;
       }
	   }
   }
   public void assignClassSubjectsToPeriods(List<TimeTable> availablePeriods,ViewClassSubjectsSettings classSubject,ClassTeacher teacher,int periodsPerDay,int handlePeriodsCount,StudySubject subject){
	   List<TimeTable> assignedAnotherClassPeriods = null;
//	   Staff assignedStaff = null;
	   boolean isContinuousPeriodsAvailable = false;
	   if(ObjectFunctions.isNotNullOrEmpty(availablePeriods)){
			int combinedPeriodsCount = periodsPerDay+classSubject.getContinuousPeriodsCount();
			if(classSubject.getContinuousPeriodsCount() > 0 && handlePeriodsCount >= combinedPeriodsCount && availablePeriods.size() >= combinedPeriodsCount){
				periodsPerDay = combinedPeriodsCount;
				isContinuousPeriodsAvailable = true;
			}
			if(classSubject.getSubjectPriority() > 0)
					isContinuousPeriodsAvailable = true;
			for(TimeTable period: availablePeriods){
				if(periodsPerDay > 0){
					if(ObjectFunctions.isNullOrEmpty(teacher)){
						period.setLastAccessDate(new Date());
						period.setLastUpdatedById(getUser().getId());
						period.setLastUpdatedDate(new Date());
						period.setSubject(subject);
						period.setTeachers(null);
						period.setPrioritiesBasedPeriod(isContinuousPeriodsAvailable);
						adminManager.save(period);
						periodsPerDay--;
					}else{
						assignedAnotherClassPeriods=adminManager.getAll(ViewTimeTableDetails.class, "teacherId="+teacher.getStaff().getId()+" and periodType='"+period.getPeriodType()+"' and periodName='"+period.getPeriodName()+"' and dayId="+period.getDayId()+" and academicYearId="+getUserAcademicYearId());
						if(ObjectFunctions.isNullOrEmpty(assignedAnotherClassPeriods)){
							periodsPerDay = createTimeTable(period,periodsPerDay,teacher,isContinuousPeriodsAvailable);
						}
					}
				}else{
					break;
				}
				assignedAnotherClassPeriods = null;
			}
		}
	   subject = null;
 	   //updatableStaffPeriods =null;
	  // assinedStaffsPeriodsList= null;
	   assignedAnotherClassPeriods = null;
	   availablePeriods=null;
	   classSubject=null;
	   teacher=null;
   }
   
   public int createTimeTable(TimeTable period,int periodsPerDay,ClassTeacher teacher,boolean priorityBasedPeriod){
	   if(periodsPerDay > 0 ){
			period.setLastAccessDate(new Date());
			period.setLastUpdatedById(getUser().getId());
			period.setLastUpdatedDate(new Date());
			period.setSubject(teacher.getStudySubject());
			period.setTeachers(null);
			period.addTeacher(teacher.getStaff());
			period.setPrioritiesBasedPeriod(priorityBasedPeriod);
			adminManager.save(period);
			periodsPerDay--;
	   }
	   	period = null;
		teacher = null;
		return periodsPerDay;
   }
   public void assignClassTeacherPeriods(List<ViewStaffSubjectsDetails> staffSubjects,StudyClass studyClass,Staff staff){
	   StudySubject subject = null;
	   List<TimeTable> availablePeriods = null;
	   int assignedPeriodsCount = 0;
	   int remainingHandlePeriodsCount=0;
	   int staffHandledSubCount = 0;
	   int remainingStaffHandlePeriodsCount = 0;
	   Object[] staffAssignedPeriods = null;
	   List<ViewTimeTableDetails> periods = null;
	   int combinedPeriods = 0;
	   for(ViewStaffSubjectsDetails staffSubject : staffSubjects){
		   combinedPeriods = adminManager.getCount("vw_combinedClassSubjectDetails", "classSectionId="+staffSubject.getStudyClassId()+" and studySubjectId="+staffSubject.getStudySubjectId()+" and academicYearId="+getUserAcademicYearId());
		   if(combinedPeriods <= 0){
			   assignedPeriodsCount = adminManager.getCount("timeTable", "classSectionId="+studyClass.getId()+" and subjectId="+staffSubject.getClassSubjectId());
			   remainingHandlePeriodsCount =staffSubject.getPeriodsPerWeek() - assignedPeriodsCount;
			   staffHandledSubCount = adminManager.getCount("vw_timeTableDetails", "classSectionId="+studyClass.getId()+" and subjectId="+staffSubject.getClassSubjectId()+" and teacherId="+staff.getId());
			   remainingStaffHandlePeriodsCount = staffSubject.getPeriodsHandleCount() - staffHandledSubCount;
			   if(remainingHandlePeriodsCount > 0 && remainingStaffHandlePeriodsCount > 0 ){
				   staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId ="+staff.getId()+" and academicYearId="+getUserAcademicYearId());
				   if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0])){
					   availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+studyClass.getId()+" and (dayId,periodName,periodType) not in("+staffAssignedPeriods[0].toString()+") and subjectId is null and periodName='1' and periodType='M' order by dayId");
				   }else{
					   availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+studyClass.getId()+" and subjectId is null and periodName='1' and periodType='M' order by dayId");
				   }
				   if(ObjectFunctions.isNullOrEmpty(availablePeriods)){
					   break;
				   }else{
					   subject = (StudySubject)adminManager.get(StudySubject.class, "id="+staffSubject.getClassSubjectId());
						for(TimeTable period : availablePeriods){
							periods=adminManager.getAll(ViewTimeTableDetails.class, "teacherId ="+staff.getId()+" and periodType='"+period.getPeriodType()+"' and periodName='"+period.getPeriodName()+"' and dayId="+period.getDayId()+" and academicYearId="+getUserAcademicYearId());
							if(ObjectFunctions.isNullOrEmpty(periods)){
								if(remainingHandlePeriodsCount > 0 && remainingStaffHandlePeriodsCount > 0){
									period.setClassSection(studyClass);
									period.setLastAccessDate(new Date());
									period.setLastUpdatedById(getUser().getId());
									period.setLastUpdatedDate(new Date());
									period.setSubject(subject);
									period.setTeachers(null);
									period.addTeacher(staff);
									period.setPrioritiesBasedPeriod(true);
									adminManager.save(period);
									remainingHandlePeriodsCount--;
									remainingStaffHandlePeriodsCount--;
									period = null;
								}else
									break;
							}
							periods = null;
						}
						subject = null;
				   }
			   }
		   }
		   staffSubject = null;
		   availablePeriods = null;
		}
	   staff=null;
	   staffSubjects = null;
	   studyClass=null;
   }
   @Actions( {
		@Action(value = "ajaxDoViewStaffTimeTable", results = { @Result(location = "academic/timeTable/ajaxManageStaffwiseTimetable.jsp", name = "success") })
		})
		public String ajaxDoViewStaffTimeTable() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoViewStaffTimeTable' method");
			}
			try {
				ajaxViewTeacherSubjects();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions({ @Action(value = "ajaxChangeClassTeacherPeriodStatus", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "status" }) }) })
	public String ajaxChangeClassTeacherPeriodStatus() {
	if (log.isDebugEnabled()) {
	log.debug("Entering 'ajaxChangeClassTeacherPeriodStatus' method");
	}
	try {
		AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class, getUserAcademicYearId());
		if(!ObjectFunctions.isNullOrEmpty(academicYear)){
			if(academicYear.isClassTeacherHandleFirstPeriod()){
				academicYear.setClassTeacherHandleFirstPeriod(false);
			}else
				academicYear.setClassTeacherHandleFirstPeriod(true);
				academicYear=adminManager.saveAcademicYear(academicYear);
		}
		setStatus(String.valueOf(academicYear.isClassTeacherHandleFirstPeriod()));
		academicYear = null;
	} catch (Exception ex) {
	ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxViewCombinedClassSubjects", results = { @Result(location = "academic/timeTable/ajaxViewManageCombinedClassSubjects.jsp", name = "success") }) })
	public String ajaxViewCombinedClassSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewCombinedClassSubjects' method");
		}
		try {
			setObjectList(adminManager.getAll(CombinedClassSubjects.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
			if(ObjectFunctions.isNotNullOrEmpty(getObjectList()))
				Collections.sort(getObjectList());
			 
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( {
	@Action(value = "ajaxDoAddCombinedClassSubjects", results = { @Result(location = "academic/timeTable/ajaxAddCombinedClassSubjects.jsp", name = "success") }) })
	public String ajaxDoAddCombinedClassSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddCombinedClassSubjects' method");
		}
		try {
				
				if(getUserAcademicYearId() > 0){
					setStudySubjectList(adminManager.getAll(StudySubject.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
					if(ObjectFunctions.isNotNullOrEmpty(getStudySubjectList()))
						Collections.sort(getStudySubjectList());
					if(getTempId() > 0){
						CombinedClassSubjects combinedClassSub= (CombinedClassSubjects)adminManager.get(CombinedClassSubjects.class, "id="+getTempId());
						if(!ObjectFunctions.isNullOrEmpty(combinedClassSub)){
							setSubjectId(String.valueOf(combinedClassSub.getStudySubject().getId()));
							setClassSectionId(combinedClassSub.getCombinedClassSectionIds());
							setTempString(combinedClassSub.getCombinedClassStaffIds());
						}
					}
						
				}
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxGetAssignedClassSectionsBySubjectId", results = { @Result(location = "academic/timeTable/ajaxClassSectionsList.jsp", name = "success") }) })
	public String ajaxGetAssignedClassSectionsBySubjectId() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetAssignedClassSectionsBySubjectId' method");
		}
		try {
			
			if(StringFunctions.isNotNullOrEmpty(getSubjectId()) && getUserAcademicYearId() >0){
				setObjectList(adminManager.getAllStudyClassSubjects("subjectId="+getSubjectId()+" and academicYearId="+getUserAcademicYearId()));
				if(StringFunctions.isNotNullOrEmpty(getClassSectionId()))
					setChkBoxSelectedIds(adminManager.getAll("select CONVERT(concat(id,'_',classNameClassId),CHAR) from studyClass where id in("+getClassSectionId()+")"));
				if(ObjectFunctions.isNotNullOrEmpty(getObjectList()))
					Collections.sort(getObjectList());
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxGetStaffDetailsByClassSectionIdAndSubjectId", results = { @Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }) }) })
	public String ajaxGetStaffDetailsByClassSectionIdAndSubjectId() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStaffDetailsByClassSectionIdAndSubjectId' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassId()) && StringFunctions.isNotNullOrEmpty(getSubjectId()) ){
				setObjectList(adminManager.getAllHqlQuery("select cteacher.staff.id,cteacher.staff.account.person.firstName,cteacher.staff.account.person.lastName from ClassTeacher cteacher where cteacher.studyClass in"+getClassId()+" and cteacher.studySubject="+getSubjectId()+" and cteacher.staff.status='Y' order by cteacher.staff"));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxSaveCombinedClassDetails", results = { @Result(location = "academic/timeTable/ajaxViewManageCombinedClassSubjects.jsp", name = "success") }) })
	public String ajaxSaveCombinedClassDetails() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSaveCombinedClassDetails' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getSubjectId()) && !ObjectFunctions.isNullOrEmpty(getAnyTitle())){
				List<StudyClass> studyClassList = adminManager.getAll(StudyClass.class, "id in"+getAnyTitle());
				List<Staff> staffList = null;
				if(StringFunctions.isNotNullOrEmpty(getAnyId()))
					staffList = adminManager.getAll(Staff.class,"id in"+getAnyId());
				StudySubject studySubject =(StudySubject)adminManager.get(StudySubject.class,"id="+getSubjectId());
				
				if(ObjectFunctions.isNotNullOrEmpty(studyClassList)){
					CombinedClassSubjects combinedSubject = null;
//					StudyClass studyClass = null;
					if(getTempId() > 0)
						combinedSubject = (CombinedClassSubjects)adminManager.get(CombinedClassSubjects.class, getTempId());
					else
						combinedSubject = new CombinedClassSubjects();
					if(!ObjectFunctions.isNullOrEmpty(combinedSubject)){
						combinedSubject.setCreatedById(getUser().getId());
						combinedSubject.setCreatedDate(new Date());
						combinedSubject.setCustId(getUserCustId());
						combinedSubject.setLastAccessDate(new Date());
						combinedSubject.setLastUpdatedById(getUser().getId());
						combinedSubject.setLastUpdatedDate(new Date());
						combinedSubject.setStudySubject(studySubject);
						combinedSubject.setClassSections(studyClassList);
						combinedSubject.setTeachers(staffList);
						combinedSubject.setAcademicYearId(getUserAcademicYearId());
						adminManager.save(combinedSubject);
						combinedSubject = null;
						if(getTempId() > 0)
							super.addActionMessage("You have successfully updated combined classes details.");
						else
							super.addActionMessage("You have successfully created combined classes details.");
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			ajaxViewCombinedClassSubjects();
		}
		return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxRemoveCombinedPeriods", results = { @Result(location = "academic/timeTable/ajaxViewCombinedClassSubjects.jsp", name = "success") }) })
	public String ajaxRemoveCombinedPeriods() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveCombinedPeriods' method");
		}
		try {
			if(getTempId() > 0){
				adminManager.remove(CombinedClassSubjects.class, getTempId());
				super.addActionMessage("Combined class subject details removed successfully.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			ajaxViewCombinedClassSubjects();
		}
		return SUCCESS;
	}
   @Actions( { @Action(value = "ajaxGetClassTimeTable", results = { @Result(type = "json", name = "success", params = {"includeProperties", "objectList.*" }) }) })
	public String ajaxGetClassTimeTable() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetClassTimeTable' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassSectionId())){
				setObjectList(adminManager.getAll(ViewTimeTableDetails.class, "classSectionId="+getClassSectionId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxViewNonAssignedSubjects", results = { @Result(location = "academic/timeTable/ajaxViewNonAssignedSubjects.jsp", name = "success") })
		})
		public String ajaxViewNonAssignedSubjects() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewNonAssignedSubjects' method");
			}
			try {
				
				setObjectList(adminManager.getAll("select classAndSection,subjectName,periodsPerWeek,assignedPeriodsCount,classSectionId,subjectId  from vw_subjectWisePeriodsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and periodsPerWeek != 0 and periodsPerWeek > assignedPeriodsCount"));
				/*Below code is for checking staffs have available periods for handling non assigned subjects. If staffs have available periods we will provide link for 
				assigning only non assigned classsubjects.*/
				setTempBoolean(false);
				if(ObjectFunctions.isNotNullOrEmpty(getObjectList())){
					List<ClassTeacher> classTeachers = null;
					int allotedPeriodsCount = 0;
					Object[] nonAssignedClassSubject = null;
					int totalPeriods = 0;
					for(Object obj: getObjectList()){
						nonAssignedClassSubject = (Object[])obj;
						classTeachers=adminManager.getAll(ClassTeacher.class, "studyClassId="+nonAssignedClassSubject[4].toString()+" and studySubjectId="+nonAssignedClassSubject[5].toString());
						if(ObjectFunctions.isNotNullOrEmpty(classTeachers)){
							for(ClassTeacher teacher : classTeachers){
								totalPeriods = adminManager.getCountForGroupByClause("timeTable", "academicYearId="+getUserAcademicYearId()+" and classSectionId in(select studyClassId from classTeacher where teacherId="+teacher.getStaff().getId()+") group by dayId,periodName,periodType");
								allotedPeriodsCount = adminManager.getCountForGroupByClause("vw_timeTableDetails", "academicYearId="+getUserAcademicYearId()+" and classSectionId in(select studyClassId from classTeacher where teacherId="+teacher.getStaff().getId()+") and teacherId="+teacher.getStaff().getId()+" group by dayId,periodName,periodType");
								if(totalPeriods > allotedPeriodsCount){
									setTempBoolean(true);
									break;
								}
								teacher = null;
							}
							classTeachers = null;
						}
						if(isTempBoolean())
							break;
						obj = null;
						nonAssignedClassSubject = null;
					}
					classTeachers = null;
					nonAssignedClassSubject = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	} 
   
   @Actions( { @Action(value = "ajaxCheckSubjectShortName", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "autoCheck" }) }) })
	public String ajaxCheckSubjectShortName() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckSubjectShortName' method");
		}
		try {
			
			String subjectShortName = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(subjectShortName)) {
				int subjectCount = adminManager.getCount("studySubject", "description like '"+subjectShortName.trim()+"' and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
				if (subjectCount > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
   @Actions({
		@Action(value = "ajaxDoEditSchoolPeriods", results = { @Result(location = "academic/timeTable/ajaxEditPeriods.jsp", name = "success" )})
	})
		public String ajaxDoEditSchoolPeriods() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoEditSchoolPeriods' method");
			}
			try
			{
				List<Object[]> periods = null;
				if(StringFunctions.isNotNullOrEmpty(getStudyClassId()) && StringFunctions.isNotNullOrEmpty(getAnyId()) && getAcademicYearId() > 0 && StringFunctions.isNotNullOrEmpty(getTempString())){
					periods = adminManager.getAll("select count(*),periodType from timeTable where academicYearId="+getAcademicYearId()+" and custId="+getUserCustId()+" and dayId="+getAnyId()+" and classSectionId="+getStudyClassId()+" group by periodType DESC");
					if(ObjectFunctions.isNotNullOrEmpty(periods)){
						for(Object[] period : periods){
							if("M".equalsIgnoreCase(period[1].toString())){
								setTempId1(Long.valueOf(period[0].toString()));
							}else if("A".equalsIgnoreCase(period[1].toString())){
								setTempId2(Long.valueOf(period[0].toString()));
							}
						}
					}
					List<Object[]> workingDays = adminManager.getAll("select id,dayId from workingDays where academicYearId="+getAcademicYearId());
					if(ObjectFunctions.isNotNullOrEmpty(workingDays)){
						StringBuffer dayIds = new StringBuffer();
						dayIds.append("(");
						for(Object[] workingDay : workingDays){
							dayIds.append(workingDay[1].toString()+",");
						}
						dayIds.append("0)");
						setObjectList(adminManager.getAll(WeekDays.class, "id in "+dayIds.toString()));
						dayIds = null;
						workingDays = null;
					}
				}
			}
			catch(Exception ex)
			{
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
 		}
   @Actions({
		@Action(value = "ajaxAddPeriodsToWorkingDay", results = { @Result(location = "academic/timeTable/ajaxEditPeriods.jsp", name = "success" )})
	})
		public String ajaxAddPeriodsToWorkingDay() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAddPeriodsToWorkingDay' method");
			}
			try
			{
//				List<Object[]> periods = null;
				
				if(StringFunctions.isNotNullOrEmpty(getStudyClassId()) && StringFunctions.isNotNullOrEmpty(getAnyId()) && StringFunctions.isNotNullOrEmpty(getTempString())){
					setTempId1(0);
					setTempId2(0);
					List<Object[]> workingDays = adminManager.getAll("select id,dayId from workingDays where academicYearId="+getUserAcademicYearId()+" and dayId not in"+getAnyId());
					if(ObjectFunctions.isNotNullOrEmpty(workingDays)){
						StringBuffer dayIds = new StringBuffer();
						dayIds.append("(");
						for(Object[] workingDay : workingDays){
							dayIds.append(workingDay[1].toString()+",");
						}
						dayIds.append("0)");
						setObjectList(adminManager.getAll(WeekDays.class, "id in "+dayIds.toString()));
						dayIds = null;
						workingDays = null;
					}
				}
			}
			catch(Exception ex)
			{
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
   
   @Actions( {
		@Action(value = "ajaxGetTimitableMrngAndAfterNoonPeriodsCount", results = { @Result(type = "json", name = "success",params = {"includeProperties","thresholdMonths,classTeacherStatus"}) }) })
	public String ajaxGetTimitableMrngAndAfterNoonPeriodsCount() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetTimitableMrngAndAfterNoonPeriodsCount' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getStudyClassId()) && StringFunctions.isNotNullOrEmpty(getAnyId())){
				
				JSONObject timeTablePeriodsCount =new JSONObject();
				List<Object[]> periods = null;
					periods = adminManager.getAll("select count(*),periodType from timeTable where academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" and dayId="+getAnyId()+" and classSectionId="+getStudyClassId()+" group by periodType DESC");
					if(ObjectFunctions.isNotNullOrEmpty(periods)){
						for(Object[] period : periods){
							if("M".equalsIgnoreCase(period[1].toString())){
								timeTablePeriodsCount.put("mrngPeriodsCount", period[0].toString());
							}else if("A".equalsIgnoreCase(period[1].toString())){
								timeTablePeriodsCount.put("afterNoonPeriodsCount", period[0].toString());
							}
						}
					}
					getResponse().getOutputStream().print(timeTablePeriodsCount.toString());
					
			}
			} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
   @Actions( { @Action(value = "ajaxUpdateClassWisePeriods", results = { @Result(location = "academic/timeTable/ajaxViewManagePeriods.jsp", name = "success") }) })
	public String ajaxUpdateClassWisePeriods() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUpdateClassWisePeriods' method");
		}
		try {
				if(StringFunctions.isNotNullOrEmpty(getStudyClassId()) && StringFunctions.isNotNullOrEmpty(getAnyId())){
					
					List<Object[]> workingDays = null;
					StudyClass classSection = (StudyClass)adminManager.get(StudyClass.class,"id="+getStudyClassId());
					if("on".equalsIgnoreCase(getStatus())){
						workingDays = adminManager.getAll("select id,dayId from workingDays where academicYearId="+getUserAcademicYearId());
						if(ObjectFunctions.isNotNullOrEmpty(workingDays)){
							for(Object[] workingDay : workingDays){
								updateTimeTablePeriods(classSection,workingDay[1].toString());
							}
							workingDays = null;
						}
					}else{
						updateTimeTablePeriods(classSection,getAnyId());
					}
					classSection = null;
					super.addActionMessage("You have successfully updated periods.");
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			finally{
				ajaxGetSchoolPeriods();
			}
		return SUCCESS;
   }
   public void updateTimeTablePeriods(StudyClass classSection,String dayId){
	   int maxPeriods = 0;
//			classSection=(StudyClass)adminManager.get(StudyClass.class, "id="+getTempString());
			if(!ObjectFunctions.isNullOrEmpty(classSection)){
					long morningPeriodsCount=adminManager.getCount("timeTable", "classSectionId="+String.valueOf(classSection.getId())+" and custId="+getUserCustId()+" and dayId="+dayId+ " and periodType='M' and (subjectId !=null or subjectId > 0)");
					if(morningPeriodsCount == 0){
						adminManager.remove("timeTable", "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and dayId="+dayId+" and classSectionId="+String.valueOf(classSection.getId())+" and periodType='M'");
						adminManager.updateClassSubjectsPeriodsCount(classSection.getId());
						adminManager.updateClassTeacherHandlePeriodsCount(classSection.getId());
						//maxPeriods=adminManager.getMaxPeriodsByClassSectionIdAndDaydId(getTempString(),dayId,"M"); // In single class added period if not need the maxPeriods count because remove the maxPeriod count  
						for(int i=1;i<=getTempId1();i++){
							createTimeTable(classSection,dayId,'M',getTempId1());
						}
					}
					long afterNoonPeriodCount=adminManager.getCount("timeTable", "classSectionId="+String.valueOf(classSection.getId())+" and custId="+getUserCustId()+" and dayId="+dayId+ " and periodType='A' and (subjectId !=null or subjectId > 0)");
					if(afterNoonPeriodCount == 0){
						adminManager.remove("timeTable", "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and dayId="+dayId+" and classSectionId="+String.valueOf(classSection.getId())+" and periodType='A'");
						adminManager.updateClassSubjectsPeriodsCount(classSection.getId());
						adminManager.updateClassTeacherHandlePeriodsCount(classSection.getId());
						for(int i=1;i<=getTempId2();i++){
							createTimeTable(classSection,dayId,'A',getTempId2());
						}
					}
			}
			classSection=null;
	   
   }
   public void updateClassTeachersTimeTablePeriodsCount(long classSectionId,long subjectId,int periodsCount){
	   try{
		   List<ClassTeacher> teachers = adminManager.getAll(ClassTeacher.class, "studyClassId="+classSectionId+" and studySubjectId="+subjectId);
		   if(ObjectFunctions.isNotNullOrEmpty(teachers)){
			   Object[] totalTeachersHandlePeriods = adminManager.get("select IFNULL(sum(periodsCount),0),studyClassId from classTeacher where studyClassId="+classSectionId+" and studySubjectId="+subjectId);
			   if(periodsCount == 0){
				   for(ClassTeacher teacher : teachers){
					   if("Y".equalsIgnoreCase(teacher.getStaff().getStatus())){
							   teacher.setPeriodsCount(periodsCount);
							   adminManager.save(teacher);
							   teacher = null;
					   }
					   teacher = null;
				   }
			   }else{
				   if(Integer.valueOf(totalTeachersHandlePeriods[0].toString()) <= 0){
					   for(ClassTeacher teacher : teachers){
						   if("Y".equalsIgnoreCase(teacher.getStaff().getStatus())){
							   if(teacher.getPeriodsCount() <=0){
								   teacher.setPeriodsCount(Integer.valueOf(periodsCount));
								   adminManager.save(teacher);
								   teacher = null;
								   break;
							   }
						   }
						   teacher = null;
					   }
				   }
			   }
		   }
		   teachers = null;
	   }catch (Exception ex) {
		   ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		   JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		// TODO: handle exception
	}
   }
   
   @Actions( { 
	   @Action(value = "ajaxStudentSubCastDetailsByCast", results = { @Result(location = "student/ajaxStudentSubCastListByCast.jsp", name = "success") }),
	   @Action(value = "ajaxStudentSubCastDetailsByCastDetails", results = { @Result(location = "student/ajaxEditAdmittedStudentSubCastListByCast.jsp", name = "success") }),
	   @Action(value = "ajaxOnlineAdmisisonsSubCastDetailsByCastDetails", results = { @Result(location = "student/ajaxEditAdmittedStudentSubCastListByCast.jsp", name = "success") })
   })
	public String ajaxStudentSubCastDetailsByCast() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxStudentSubCastDetailsByCast' method");
		}
		try {
			if(getPersonVo().getCastId() > 0)
				setCastSettings((CastSettings) staffManager.get(CastSettings.class,getPersonVo().getCastId()));
			else
				setCastSettings((CastSettings) staffManager.get(CastSettings.class,getPerson().getCastId()));
			if (!ObjectFunctions.isNullOrEmpty(getCastSettings())) {
				if (ObjectFunctions.isNotNullOrEmpty(getCastSettings().getSubCastSettings()))
					setObjectList(ConvertUtil.convertSetToList(getCastSettings().getSubCastSettings()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxRemoveStaffClassSubjectDetails", results = { @Result(location = "academic/timeTable/ajaxViewStaffSubjects.jsp", name = "success") })
		})
		public String ajaxRemoveStaffClassSubjectDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveStaffClassSubjectDetails' method");
			}
			try {
				ajaxDeleteTeacherSubject();
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxDoAssignClassSubjectsToStaff", results = { @Result(location = "academic/class/ajaxAssignClassSubjects.jsp", name = "success") })
		})
		public String ajaxDoAssignClassSubjectsToStaff() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAssignClassSubjectsToStaff' method");
			}
			try {
				setStudyClassList(null);
				if(getTempId() > 0){
					
					setStudyClassList(adminManager.getAll(StudyClass.class,"academicYearId="+getUserAcademicYearId()));
					if(ObjectFunctions.isNotNullOrEmpty(getStudyClassList())){
						Collections.sort(getStudyClassList());
					}
				}else{
					setStudyClassList(adminManager.getAll(StudyClass.class,"academicYearId="+getUserAcademicYearId()));
					if(ObjectFunctions.isNotNullOrEmpty(getStudyClassList())){
						Collections.sort(getStudyClassList());
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxGetStaffClassSubjects", results = { @Result(location = "academic/class/ajaxClassSectionSubjects.jsp", name = "success") })
		})
		public String ajaxGetStaffClassSubjects() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetStaffClassSubjects' method");
			}
			try {
				
				ajaxStaffSubjects();
				} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
   @Actions( {
		@Action(value = "ajaxAssignClassSubjects", results = { @Result(location = "academic/timeTable/ajaxViewManageStaffClassSubjects.jsp", name = "success") })
		})
		public String ajaxAssignClassSubjects() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAssignClassSubjects' method");
			}
			try {
				adminManager.assignClassSubjects(getUserCustId(), getUser().getId(), getUserAcademicYearId(),  getTempId(), getClassSectionId(), getChkBoxSelectedIds());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}finally{
				ajaxViewTeacherSubjects();
			}
			return SUCCESS;
	}
   
	@Actions({
		@Action(value = "ajaxViewAllSubCaste", results = { @Result(location = "admission/castSettings/ajaxViewAllSubCastes.jsp", name = "success") }) })
		public String ajaxViewAllSubCaste() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewAllSubCaste' method");  
		}
		try
		{
			 
			if(getQuizId() > 0) {
				String sql = " castId = '"+getQuizId()+"' and custId="+ getUserCustId();
				setTempList(adminManager.getAll(SubCastSettings.class, sql));
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({
		@Action(value = "ajaxDoAddNewSubCasteType", results = { @Result(location = "admission/castSettings/ajaxAddSubCastDetails.jsp", name = "success") }) })
		public String doAddNewSubCasteType() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'doAddNewActivityType' method");
		}
		try
		{
			if(getSubCastSettings().getId() > 0 ){
				setSubCastSettings((SubCastSettings)adminManager.get(SubCastSettings.class, getSubCastSettings().getId()));
			}else
				setSubCastSettings(null);
			 
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({
		@Action(value = "ajaxAddSubCaste", results = { @Result(location = "admission/castSettings/ajaxViewAllSubCastes.jsp", name = "success") }) })
		public String addSubCaste() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddSubCaste' method");
		}
		try
		{	
			SubCastSettings subCastSettings = null;
			SubCastSettings subCastName = null;
			long castId = getQuizId();
			if(castId > 0)
			{
				String subCast = getSubCastSettings().getSubCastName().toUpperCase().trim().replace("'", "''");
				
				CastSettings castSettings = (CastSettings) adminManager.get(CastSettings.class,castId);
				if(getSubCastSettings().getId()!= 0){
					if (StringFunctions.isNotNullOrEmpty(getSubCastSettings().getSubCastName().trim())) {
						subCastSettings = (SubCastSettings)adminManager.get(SubCastSettings.class,"subCastName='"+subCast+"' and custId="+getUserCustId()+" and id !="+getSubCastSettings().getId()+" and castId="+ castId);
					}
					if(!ObjectFunctions.isNullOrEmpty(subCastSettings)){
						super.addActionError(getSubCastSettings().getSubCastName().toUpperCase().trim()+" caste name already exist. Please provide another community name .");
					}else{
					subCastName = (SubCastSettings) adminManager.get(SubCastSettings.class, Long.valueOf(getSubCastSettings().getId()));
					if (!ObjectFunctions.isNullOrEmpty(subCastName)) {
						
						subCastName.setSubCastName(getSubCastSettings().getSubCastName().toUpperCase().trim());
						subCastName.setCustId(getUserCustId());
						subCastName.setCreatedById(getUser().getId());
						subCastName.setCreatedDate(new Date());
						subCastName.setLastAccessDate(new Date());
						//castSettings.addSubCast(subCastName);
						adminManager.merge(subCastName);
						//castSettings = (CastSettings) adminManager.merge(castSettings);
						super.addActionMessage(getSubCastSettings().getSubCastName().toUpperCase().trim()+" caste updated successfully.");
					}
				  }
				} 
				else{
					
					if (StringFunctions.isNotNullOrEmpty(getSubCastSettings().getSubCastName().toUpperCase().trim())) {
						subCastSettings = (SubCastSettings)adminManager.get(SubCastSettings.class,"subCastName='"+subCast+"' and custId="+getUserCustId()+" and castId="+ castId);
					}
					if(!ObjectFunctions.isNullOrEmpty(subCastSettings)){
						super.addActionError(getSubCastSettings().getSubCastName().toUpperCase().trim()+" caste name already exist. Please provide another caste name.");
					} 
					else{
					SubCastSettings newSubCastSettings = new SubCastSettings();
					
					newSubCastSettings.setSubCastName(getSubCastSettings().getSubCastName().toUpperCase().trim());
					newSubCastSettings.setCreatedById(getUser().getId());
					newSubCastSettings.setLastAccessDate(new Date());
					newSubCastSettings.setLastUpdatedDate(new Date());
					newSubCastSettings.setCustId(getUserCustId());
					castSettings.addSubCast(newSubCastSettings);
					//adminManager.save(castSettings);
					castSettings = (CastSettings) adminManager.merge(castSettings);
					super.addActionMessage(getSubCastSettings().getSubCastName().toUpperCase().trim()+" caste created successfully.");
				 }
				}
				castSettings = null;
				subCastName=null;
				subCastSettings=null;
				ajaxViewAllSubCaste();
			}
		}catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
   @Actions( {
	   @Action(value = "ajaxGenerateTimeTableForNonAssignedClassSubjects", results = { @Result(location = "academic/timeTable/ajaxViewNonAssignedSubjects.jsp", name = "success") })
		})
	public String ajaxGenerateTimeTableForNonAssignedClassSubjects() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateTimeTableForNonAssignedClassSubjects' method");
		}
		try {
		List<ViewTimeTableDetails> assignedAnotherClassPeriods = null;
//		StudySubject assignedStaffSubject = null;
//		Staff updatableStaff = null;
		List<TimeTable> availableStaffPeriods = null;
		List<TimeTable> avaialablePeriodsForAllotedPeriodStaff = null;
		List<TimeTable> exchangableStaffPeriods = null;
		Object[] staffAssignedPeriods = null;
		Object[] classAvailablePeriods = null;
		StringBuffer orderClause= null;
		int handlePeriodsCount = 0;
		int remainingHandlePeriodsCount = 0;
		int remainingStaffHandlePeriodsCount = 0;
		List<ClassTeacher> classTeachers = null;
		int staffHandledSubCount = 0;
		StudySubject subject = null;
		List<TimeTable> availablePeriods = null;
		int subjectPriority = 0;
		boolean isPeriodAssigned = false;
		List<Object[]> nonAssignedClassSubjects = adminManager.getAll("select academicYearId,classSectionId,subjectId,periodsPerWeek,assignedPeriodsCount,subjectPriority from vw_subjectWisePeriodsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  periodsPerWeek != 0 and periodsPerWeek > assignedPeriodsCount");
		if(ObjectFunctions.isNotNullOrEmpty(nonAssignedClassSubjects)){
			for(Object[] nonAssignedClassSubject: nonAssignedClassSubjects){
				if(!ObjectFunctions.isNullOrEmpty(nonAssignedClassSubject)){
					if(!ObjectFunctions.isNullOrEmpty(nonAssignedClassSubject[1]) && !ObjectFunctions.isNullOrEmpty(nonAssignedClassSubject[2]) &&
							!ObjectFunctions.isNullOrEmpty(nonAssignedClassSubject[3]) && !ObjectFunctions.isNullOrEmpty(nonAssignedClassSubject[4]) && !ObjectFunctions.isNullOrEmpty(nonAssignedClassSubject[5])){
						subjectPriority = Integer.valueOf(nonAssignedClassSubject[5].toString());
						remainingHandlePeriodsCount = Integer.valueOf(nonAssignedClassSubject[3].toString()) - Integer.valueOf(nonAssignedClassSubject[4].toString());
						classTeachers=adminManager.getAll(ClassTeacher.class, "studyClassId="+nonAssignedClassSubject[1].toString()+" and studySubjectId="+nonAssignedClassSubject[2].toString());
						subject = (StudySubject)adminManager.get(StudySubject.class, "id="+nonAssignedClassSubject[2].toString());
						if(ObjectFunctions.isNotNullOrEmpty(classTeachers)){
							for(ClassTeacher teacher: classTeachers){
								if("Y".equalsIgnoreCase(teacher.getStaff().getStatus())){
									staffHandledSubCount = adminManager.getCount("vw_timeTableDetails", "classSectionId="+nonAssignedClassSubject[1].toString()+" and subjectId="+nonAssignedClassSubject[2].toString()+" and teacherId="+teacher.getStaff().getId());
									remainingStaffHandlePeriodsCount = teacher.getPeriodsCount() - staffHandledSubCount;
									if(remainingHandlePeriodsCount > 0 && remainingStaffHandlePeriodsCount > 0){
										if(remainingStaffHandlePeriodsCount > remainingHandlePeriodsCount)
											handlePeriodsCount = remainingHandlePeriodsCount;
										else
											handlePeriodsCount = remainingStaffHandlePeriodsCount;
										if(handlePeriodsCount > 0){
											classAvailablePeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),count(*) from vw_timeTableDetails where classSectionId="+nonAssignedClassSubject[1].toString()+" and academicYearId="+getUserAcademicYearId()+" and subjectId=0");
											staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId="+teacher.getStaff().getId()+" and academicYearId="+getUserAcademicYearId());
											if(!ObjectFunctions.isNullOrEmpty(classAvailablePeriods) && !ObjectFunctions.isNullOrEmpty(classAvailablePeriods[0])){
												if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0])){
													availablePeriods = adminManager.getAll(TimeTable.class,"(dayId,periodName,periodType) not in ("+staffAssignedPeriods[0].toString()+") and (dayId,periodName,periodType) in("+classAvailablePeriods[0].toString()+") and classSectionId="+nonAssignedClassSubject[1].toString());
												}else{
													availablePeriods = adminManager.getAll(TimeTable.class,"classSectionId="+nonAssignedClassSubject[1].toString()+" and academicYearId="+getUserAcademicYearId()+" and subjectId=0");
												}
												if(ObjectFunctions.isNotNullOrEmpty(availablePeriods)){
													for(TimeTable availablePeriod : availablePeriods){
														if(handlePeriodsCount > 0){
															assignedAnotherClassPeriods=adminManager.getAll(ViewTimeTableDetails.class, "teacherId="+teacher.getStaff().getId()+" and periodType='"+availablePeriod.getPeriodType()+"' and periodName='"+availablePeriod.getPeriodName()+"' and dayId="+availablePeriod.getDayId()+" and academicYearId="+getUserAcademicYearId());
															if(ObjectFunctions.isNullOrEmpty(assignedAnotherClassPeriods)){
																handlePeriodsCount = createTimeTable(availablePeriod,handlePeriodsCount,teacher,false);
															}
														}else
															break;
													}
												}
												if(handlePeriodsCount > 0){
													staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId="+teacher.getStaff().getId()+" and academicYearId="+getUserAcademicYearId());
													if(subjectPriority == 4)
														   orderClause = new StringBuffer(" order by periodType,PeriodName DESC");
													   else if(subjectPriority == 3)
														   orderClause = new StringBuffer(" order by periodType DESC,periodName DESC");
														else if(subjectPriority == 2)
															orderClause = new StringBuffer(" order by periodType,periodName");
														else 
															orderClause = new StringBuffer(" order by periodType DESC,periodName");
													   if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0])){
														   availableStaffPeriods = adminManager.getAll(TimeTable.class, "classSectionId="+nonAssignedClassSubject[1].toString()+" and (dayId,periodName,periodType) not in("+staffAssignedPeriods[0].toString()+") and academicYearId="+getUserAcademicYearId()+" and prioritiesBasedPeriod='N'"+orderClause);
													   }else
														   availableStaffPeriods = adminManager.getAll(TimeTable.class, "classSectionId="+nonAssignedClassSubject[1].toString()+" and academicYearId="+getUserAcademicYearId()+" and prioritiesBasedPeriod='N'"+orderClause);
													   if(ObjectFunctions.isNotNullOrEmpty(availableStaffPeriods)){
														   for(TimeTable availableStaffPeriod : availableStaffPeriods){
															 if(handlePeriodsCount > 0){
															   isPeriodAssigned= false;
															   if(ObjectFunctions.isNullOrEmpty(availableStaffPeriod.getTeachers())){
																   /*assignedAnotherClassPeriods = null;
																   updatableStaff = null;
																   assignedStaffSubject = availableStaffPeriod.getSubject();*/
																   TimeTable avaialblePeriod=(TimeTable)adminManager.get(TimeTable.class,"classSectionId="+nonAssignedClassSubject[1].toString()+" and subjectId=0");
																   if(!ObjectFunctions.isNullOrEmpty(avaialblePeriod)){
																	   avaialblePeriod.setLastAccessDate(new Date());
																	   avaialblePeriod.setLastUpdatedById(getUser().getId());
																	   avaialblePeriod.setLastUpdatedDate(new Date());
																	   avaialblePeriod.setSubject(availableStaffPeriod.getSubject());
																	   avaialblePeriod.setTeachers(availableStaffPeriod.getTeachers());
																	   avaialblePeriod.setPrioritiesBasedPeriod(false);
																	   adminManager.save(avaialblePeriod);
																	   availableStaffPeriod.setLastAccessDate(new Date());
																	   availableStaffPeriod.setLastUpdatedById(getUser().getId());
																	   availableStaffPeriod.setLastUpdatedDate(new Date());
																	   availableStaffPeriod.setSubject(teacher.getStudySubject());
																	   availableStaffPeriod.setTeachers(null);
																	   availableStaffPeriod.addTeacher(teacher.getStaff());
																	   availableStaffPeriod.setPrioritiesBasedPeriod(false);
																	   adminManager.save(availableStaffPeriod);
																	   availableStaffPeriod = null;
																	   handlePeriodsCount --;
																	   avaialblePeriod = null;
																   }
																   //Need to assigne this subject to available periods of class.
															   }else{
																   /*Another teacher(x) is assigned during avaialbleStaffPeriod. So for unreferencing availableStaffPeriod we need to get
																    * x teacher availablePeriods and those perids teachers should be free during available periods of current classSection.
																    */
																   for(Staff staff : availableStaffPeriod.getTeachers()){
																	   staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId="+staff.getId()+" and academicYearId="+getUserAcademicYearId());
																	   if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0])){
																		   avaialablePeriodsForAllotedPeriodStaff = adminManager.getAll(TimeTable.class, "classSectionId="+nonAssignedClassSubject[1].toString()+" and (dayId,periodName,periodType) not in("+staffAssignedPeriods[0].toString()+") and academicYearId="+getUserAcademicYearId()+" and prioritiesBasedPeriod='N'");
																	   }else
																		   avaialablePeriodsForAllotedPeriodStaff = adminManager.getAll(TimeTable.class, "classSectionId="+nonAssignedClassSubject[1].toString()+" and academicYearId="+getUserAcademicYearId()+" and prioritiesBasedPeriod='N'"+orderClause);
																	   // reAssignableStaffPeriods list contains x teacher available periods.
																	   if(ObjectFunctions.isNotNullOrEmpty(avaialablePeriodsForAllotedPeriodStaff)){
																		   for(TimeTable allotedStaffAvailablePeriod : avaialablePeriodsForAllotedPeriodStaff){
																			   if(ObjectFunctions.isNullOrEmpty(allotedStaffAvailablePeriod.getTeachers())){
																				   TimeTable avaialblePeriod=(TimeTable)adminManager.get(TimeTable.class,"classSectionId="+nonAssignedClassSubject[1].toString()+" and subjectId=0");
																				   if(!ObjectFunctions.isNullOrEmpty(avaialblePeriod)){
																					   avaialblePeriod.setLastAccessDate(new Date());
																					   avaialblePeriod.setLastUpdatedById(getUser().getId());
																					   avaialblePeriod.setLastUpdatedDate(new Date());
																					   avaialblePeriod.setSubject(allotedStaffAvailablePeriod.getSubject());
																					   avaialblePeriod.setTeachers(allotedStaffAvailablePeriod.getTeachers());
																					   avaialblePeriod.setPrioritiesBasedPeriod(false);
																					   adminManager.save(avaialblePeriod);
																					   allotedStaffAvailablePeriod.setLastAccessDate(new Date());
																					   allotedStaffAvailablePeriod.setLastUpdatedById(getUser().getId());
																					   allotedStaffAvailablePeriod.setLastUpdatedDate(new Date());
																					   allotedStaffAvailablePeriod.setSubject(availableStaffPeriod.getSubject());
																					   allotedStaffAvailablePeriod.setTeachers(null);
																					   allotedStaffAvailablePeriod.addTeacher(staff);
																					   allotedStaffAvailablePeriod.setPrioritiesBasedPeriod(false);
																					   adminManager.save(allotedStaffAvailablePeriod);
																					   availableStaffPeriod.setLastAccessDate(new Date());
																					   availableStaffPeriod.setLastUpdatedById(getUser().getId());
																					   availableStaffPeriod.setLastUpdatedDate(new Date());
																					   availableStaffPeriod.setSubject(teacher.getStudySubject());
																					   availableStaffPeriod.setTeachers(null);
																					   availableStaffPeriod.addTeacher(teacher.getStaff());
																					   availableStaffPeriod.setPrioritiesBasedPeriod(false);
																					   adminManager.save(availableStaffPeriod);
																					   handlePeriodsCount--;
																					   allotedStaffAvailablePeriod = null;
																					   avaialblePeriod = null;
																				   }
																			   }else{
																				   for(Staff exchangablePeriodStaff : allotedStaffAvailablePeriod.getTeachers()){
																					   if(handlePeriodsCount > 0){
																						   classAvailablePeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),count(*) from vw_timeTableDetails where classSectionId="+nonAssignedClassSubject[1].toString()+" and academicYearId="+getUserAcademicYearId()+" and subjectId=0");
																						   staffAssignedPeriods = adminManager.get("select group_concat('(',CONVERT(dayId,CHAR),',',CONVERT(periodName,CHAR),',''',periodType,''')'),teacherId from vw_timeTableDetails where teacherId="+exchangablePeriodStaff.getId()+" and academicYearId="+getUserAcademicYearId());
																						   if(!ObjectFunctions.isNullOrEmpty(staffAssignedPeriods) && !ObjectFunctions.isNullOrEmpty(staffAssignedPeriods[0]) && !ObjectFunctions.isNullOrEmpty(classAvailablePeriods) && !ObjectFunctions.isNullOrEmpty(classAvailablePeriods[0])){
																							   exchangableStaffPeriods = adminManager.getAll(TimeTable.class, "(dayId,periodName,periodType) not in ("+staffAssignedPeriods[0].toString()+") and (dayId,periodName,periodType) in("+classAvailablePeriods[0].toString()+") and classSectionId="+nonAssignedClassSubject[1].toString());
																						   }else
																							   exchangableStaffPeriods = adminManager.getAll(TimeTable.class, "classSectionId="+nonAssignedClassSubject[1].toString()+" and academicYearId="+getUserAcademicYearId()+" and subjectId=0");
																						   if(ObjectFunctions.isNotNullOrEmpty(exchangableStaffPeriods)){
																							   for(TimeTable exchangablePeriod: exchangableStaffPeriods){
																								   if(ObjectFunctions.isNullOrEmpty(exchangablePeriod.getSubject())){
																									   exchangablePeriod.setLastAccessDate(new Date());
																									   exchangablePeriod.setLastUpdatedById(getUser().getId());
																									   exchangablePeriod.setLastUpdatedDate(new Date());
																									   exchangablePeriod.setSubject(allotedStaffAvailablePeriod.getSubject());
																									   exchangablePeriod.setTeachers(null);
																									   exchangablePeriod.addTeacher(exchangablePeriodStaff);
																									   exchangablePeriod.setPrioritiesBasedPeriod(false);
																									   adminManager.save(exchangablePeriod);
																									   allotedStaffAvailablePeriod.setLastAccessDate(new Date());
																									   allotedStaffAvailablePeriod.setLastUpdatedById(getUser().getId());
																									   allotedStaffAvailablePeriod.setLastUpdatedDate(new Date());
																									   allotedStaffAvailablePeriod.setSubject(availableStaffPeriod.getSubject());
																									   allotedStaffAvailablePeriod.setTeachers(null);
																									   allotedStaffAvailablePeriod.addTeacher(staff);
																									   allotedStaffAvailablePeriod.setPrioritiesBasedPeriod(false);
																									   adminManager.save(allotedStaffAvailablePeriod);
																									   staff = null;
																									   availableStaffPeriod.setLastAccessDate(new Date());
																									   availableStaffPeriod.setLastUpdatedById(getUser().getId());
																									   availableStaffPeriod.setLastUpdatedDate(new Date());
																									   availableStaffPeriod.setSubject(teacher.getStudySubject());
																									   availableStaffPeriod.setTeachers(null);
																									   availableStaffPeriod.addTeacher(teacher.getStaff());
																									   availableStaffPeriod.setPrioritiesBasedPeriod(false);
																									   adminManager.save(availableStaffPeriod);
																									   handlePeriodsCount--;
																									   availableStaffPeriod = null;
																									   allotedStaffAvailablePeriod = null;
																									   exchangablePeriod = null;
																									   isPeriodAssigned = true;
																									   break;
																								   }
																							   }
																						   }
																						   if(isPeriodAssigned)
																							   break;
																					   }
																				  }
																			   }
																			   if(isPeriodAssigned)
																				   break;
																		   }
																	   }
																	   if(isPeriodAssigned)
																		   break;
																   }
															   }
														   }else
															   break;
														   }
													   }
												}
											}else
												break;
											
										}
									}
								}
							}
						}else{
							assignNonStaffClassSubjectPeriods(subjectPriority,Long.valueOf(nonAssignedClassSubject[1].toString()),remainingHandlePeriodsCount,subject);
							}
						}
					}
			}
		}
		nonAssignedClassSubjects = null;	
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			ajaxViewNonAssignedSubjects();
		}
		return SUCCESS;
	}
   public void assignNonStaffClassSubjectPeriods(int subjectPriority,long classSectionId,int handlePeriodsCount,StudySubject subject){
	   List<TimeTable> availablePeriods = null;
	   if(subjectPriority == 4){
	        availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSectionId+" and subjectId is null order by periodType,periodName Desc");
       }else if(subjectPriority == 3)
          availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSectionId+" and subjectId is null order by periodType DESC,periodName Desc");
       else if(subjectPriority == 2)
          availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSectionId+" and subjectId is null order by periodType,periodName");
       else {
           availablePeriods = adminManager.getAll(TimeTable.class, "classSectionId="+classSectionId+" and subjectId is null order by periodType DESC,periodName");
       }
		if(ObjectFunctions.isNotNullOrEmpty(availablePeriods)){
			for(TimeTable period: availablePeriods){
				  if(handlePeriodsCount > 0){
					  	period.setLastAccessDate(new Date());
						period.setLastUpdatedById(getUser().getId());
						period.setLastUpdatedDate(new Date());
						period.setSubject(subject);
						period.setTeachers(null);
						period.setPrioritiesBasedPeriod(false);
						adminManager.save(period);
						handlePeriodsCount--;
				  	}
			  	}
		  }
		subject = null;
		availablePeriods = null;
   }

	@Actions( { @Action(value = "ajaxCheckFeeCategoryType", results = { @Result(type = "json", name = "success", params = {"includeProperties", "autoCheck" }) }) })
	public String ajaxCheckHostelFeeCategoryType() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckHostelFeeCategoryType' method");
		}
		try {
			List categoryNameList = null;
			 String text=getParamValue("schoolCategoryId").replace(",","0");			
			 String desc=text.replace("?",",");
			 if(!StringFunctions.isNullOrEmpty(desc)){
				 String[] keyWordAndId=desc.split(",");	
					String categoryName=keyWordAndId[1].replace("keyWord=","");			
					String schoolCategoryId=keyWordAndId[0].trim();
					if(!StringFunctions.isNullOrEmpty(schoolCategoryId)){
						categoryNameList = adminManager.getAll(SchoolCategory.class, " custId=" + getUserCustId()+ " and categoryName like '" + categoryName.trim()+ "' and id !="+schoolCategoryId);
				    }
					else{	    		
						categoryNameList = adminManager.getAll(SchoolCategory.class, " custId=" + getUserCustId()+ " and categoryName like '" + categoryName.trim()+ "'");
				    }
					if (ObjectFunctions.isNullOrEmpty(categoryNameList)) {
						setAutoCheck("0");
					} else if (categoryNameList.size() > 0) {
						setAutoCheck("1");
					} else {
						setAutoCheck("0");
					}
					
			 }
			 
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCheckFeeParticularType", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
	 public String ajaxCheckHostelFeeParticularType() throws URTUniversalException {
		if (log.isDebugEnabled()) {
		    log.debug("Entering 'ajaxCheckFeeParticularType' method");
		}
		try { 
			List feeTypeNameList = null;
			long feeTypeId;
			if(!StringFunctions.isNullOrEmpty(getAnyId())){
				String paramValues = getAnyId().replace("?keyWord=","-");
				String[] perticularDetails = paramValues.split("-");
				if(StringFunctions.isNullOrEmpty(perticularDetails[0]))
					 feeTypeId = 0;
				else
					feeTypeId = Long.valueOf(perticularDetails[0]);
				String priorityPosition = perticularDetails[1];
				if(feeTypeId !=0){
					if (StringFunctions.isNotNullOrEmpty(priorityPosition)) {
						 feeTypeNameList = adminManager.getAll(FeeType.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and priorityPosition ="+priorityPosition+" and committedFeeStatus ='"+Constants.YES_STRING+"' and id not in ("+feeTypeId+") ");
					}
					
				}else{
					if (StringFunctions.isNotNullOrEmpty(priorityPosition)) {
						 feeTypeNameList = adminManager.getAll(FeeType.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and priorityPosition ="+priorityPosition+" and committedFeeStatus ='"+Constants.YES_STRING+"' ");
					}
				}
					
			}else{
			    String feeType = getParamValue("keyWord");
			    if (StringFunctions.isNotNullOrEmpty(feeType)) {
			    	 feeTypeNameList = adminManager.getAll(FeeType.class, " custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and feeType like '"+feeType.trim()+"'");
		    }
		   
		}
		 if (ObjectFunctions.isNullOrEmpty(feeTypeNameList)) {
			    setAutoCheck("0");
			} else if (feeTypeNameList.size() > 0) {
			    setAutoCheck("1");
			} else {
			    setAutoCheck("0");
			}
		}  catch (Exception ex) {
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	    }

	@Actions( { @Action(value = "updateStudentFeeDetails", results = { @Result(type = "json", name = "success", params = {
			"includeProperties", "myStudents" }) }) })
	public String updateStudentFeeDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'updateStudentFeeDetails' method");
		}
		try {
			JSONObject studentDetailsJson = null;
			JSONArray totalFloorsJsonArray = null;
			StudentPayment studentPayment = null;
			StudentFeePaidDetails studentFeePaidDetails = null;
//			Student student = null;
			BankMaster bankMaster = null;
			Fee fee = null;
			AcademicYear academicYear = null;
			
			 JSONObject ja = new JSONObject();
			 JSONArray cata = new JSONArray();
			 
			if (StringFunctions.isNotNullOrEmpty(getAnyTitle())) {
				totalFloorsJsonArray = new JSONArray(getParamValue("anyTitle"));
				for (int i = 0; i < totalFloorsJsonArray.length(); i++) {
					long studentId = (Integer) studentDetailsJson.get("StudentId");
					log.debug("totalFloorsJsonArray.length()  "+ totalFloorsJsonArray.length());
					studentDetailsJson = totalFloorsJsonArray.getJSONObject(i);
					if (!ObjectFunctions.isNullOrEmpty(studentDetailsJson)) {
						studentPayment = (StudentPayment) adminManager.get(StudentPayment.class, "paymentDetailsId='"+ studentDetailsJson.get("StudentPaymentId")+ "' and studentId=" + studentId);
						if (ObjectFunctions.isNullOrEmpty(studentPayment)) {
							studentPayment = new StudentPayment();
							studentPayment.setDpPaymentDetailsId((Integer) studentDetailsJson.get("StudentPaymentId"));
						}
						if (!ObjectFunctions.isNullOrEmpty(studentPayment)) {
							studentPayment.setDpPaymentDetailsId((Integer) studentDetailsJson.get("StudentPaymentId"));
							String paymentDate = (String) studentDetailsJson.get("PaymentDate");
							log.debug("paymentDate   "+ paymentDate.replace("T", " ").replace("+05:30", ""));
							String pDate = paymentDate.replace("T", " ").replace("+05:30", "");
							Date date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(pDate);
							if (!ObjectFunctions.isNullOrEmpty(date)) {
								studentPayment.setPaymentDate(date);
							}
							studentPayment.setChequeNumber((String) studentDetailsJson.get("ChequeNumber"));
							// chequeIssuedDate
							String chequeIssuedDate = (String) studentDetailsJson.get("ChequeIssuedDate");
							studentPayment.setChequeIssuedDate(DateFormatter.parseString(DateFormatter.DDMMCCYY_PATTERN,chequeIssuedDate.replace("T", " ").replace("+05:30", "")));
							studentPayment.setDdNumber((String) studentDetailsJson.get("DDNumber"));
							// ddDrawnDate
							String ddDrawnDate = (String) studentDetailsJson.get("DDDrawnDate");
							studentPayment.setDdDrawnDate(DateFormatter.parseString(DateFormatter.DDMMCCYY_PATTERN,ddDrawnDate.replace("T00:00:00+05:30", " ")));
							studentPayment.setDiscountAmount((Double) studentDetailsJson.get("DiscountAmount"));
							studentPayment.setInvoiceNumber((Integer) studentDetailsJson.get("InvoiceNumber"));
							studentPayment.setPaidAmount((Double) studentDetailsJson.get("PaidAmount"));
							studentPayment.setPaymentType((String) studentDetailsJson.get("PaymentType"));
							studentPayment.setDeleteStatus((String) studentDetailsJson.get("DeleteStatus"));
							studentPayment.setCustId(getCustId());
							academicYear = (AcademicYear) adminManager.get(AcademicYear.class, "id="+ studentDetailsJson.get("AcademicYearId"));
							if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
								studentPayment.setAcademicYear(academicYear);
							}
							bankMaster = (BankMaster) adminManager.get(BankMaster.class, "id='"+ studentDetailsJson.get("BankId")+"'");
							if (!ObjectFunctions.isNullOrEmpty(bankMaster)) {
								studentPayment.setBankMaster(bankMaster);
							}
							studentFeePaidDetails = (StudentFeePaidDetails) adminManager.get(StudentFeePaidDetails.class,"feePaidDetailsId="+ studentDetailsJson.get("StudentFeePaidDetailsId")+ " and studentId="+ studentId);
							if (ObjectFunctions.isNullOrEmpty(studentFeePaidDetails)) {
								studentFeePaidDetails = new StudentFeePaidDetails();
								studentFeePaidDetails.setFeePaidDetailsId((Integer) studentDetailsJson.get("StudentFeePaidDetailsId"));
								// studentPayment.setStudent(student);
							}
							if (!ObjectFunctions.isNullOrEmpty(studentFeePaidDetails)) {
								studentFeePaidDetails.setPaymentAmount((Double) studentDetailsJson.get("PaymentAmount"));

								fee = (Fee) adminManager.get(Fee.class, "id='"+ studentDetailsJson.get("ClassFeeId") +"'");
								if (!ObjectFunctions.isNullOrEmpty(fee)) {
									studentFeePaidDetails.setFee(fee);
								}
								studentFeePaidDetails.setPaymentStatus((String) studentDetailsJson.get("PaymentStatus"));
								if (studentDetailsJson.get("DeleteStatus").equals("Y"))
									studentFeePaidDetails.setDeleteStatus(Constants.YES_STRING);
								if (studentDetailsJson.get("DeleteStatus").equals("N"))
									studentFeePaidDetails.setDeleteStatus(Constants.NO_STRING);
								studentFeePaidDetails.setStudentId(studentId);
								studentFeePaidDetails.setCustId(getCustId());
								// studentFeePaidDetails.setStudentPaymentId(studentPayment.getId());
								studentPayment.addStudentFeeDetails(studentFeePaidDetails);
								adminManager.save(studentPayment);
								cata.put("true");
							}
						}
						ja.put("categories", cata);
						bankMaster = null;
					    fee = null;
					    studentFeePaidDetails = null;
					    studentPayment = null;
						student=null;
						academicYear = null;
						studentDetailsJson = null;
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}  
	@Actions({ @Action(value = "ajaxGetSettingsSteps", results = { @Result(location = "admission/ajaxAdmissionSettingsStep3.jsp", name = "success") }) })
	public String ajaxGetSettingsSteps() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetSettingsSteps' method");
			}
			try {
					setSchoolCategoriesList(adminManager.getAllByCustId("SchoolCategory", getUserCustId(),0));
			} catch (Exception ex) {
	    		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	    	return SUCCESS;
	}
	
	@Actions( {
		@Action(value = "ajaxAddAdmissionClassDetails", results = { @Result(location = "admission/ajaxAdmissionSettingsStep3.jsp", name = "success"),
				 @Result(location = "admission/ajaxManageClassesDetails.jsp", name = "classNameChk")
				})})
		public String ajaxAddAdmissionClassDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAddAdmissionClassDetails' method");
			}
			try {
				if(StringFunctions.isNotNullOrEmpty(getTempString())){
					JSONArray classAdmissionsJSONArray=new JSONArray(getTempString());
					JSONObject admissionsJson=null;
					long classId=0;
					String extendableClassCapacity = null;
					boolean admissionsOpen = false;
					ClassName clasName= null;
					String className = null;
					String sectionNames = null;
					boolean classExist = false;
					for(int i=0;i<classAdmissionsJSONArray.length();i++)
					{
						admissionsJson=classAdmissionsJSONArray.getJSONObject(i);
						if(!ObjectFunctions.isNullOrEmpty(admissionsJson))
						{
							extendableClassCapacity =(String) admissionsJson.get("extendableClassCapacity");
							if(ObjectFunctions.isNullOrEmpty(admissionsJson.get("admissionsOpen")))
								admissionsOpen = false;
							else if("checked".equalsIgnoreCase((String)admissionsJson.get("admissionsOpen")))
								admissionsOpen = true;
							else
								admissionsOpen = false;
							className = (String) admissionsJson.get("className");
							sectionNames = (String) admissionsJson.get("sectionNames");
							if(StringFunctions.isNotNullOrEmpty((String)admissionsJson.get("classId")) && Long.valueOf((String)admissionsJson.get("classId")) > 0){
								classId = Long.valueOf((String)admissionsJson.get("classId"));
								clasName =(ClassName)adminManager.get(ClassName.class,"id="+classId);
								if(!ObjectFunctions.isNullOrEmpty(clasName)){
									if(StringFunctions.isNullOrEmpty(extendableClassCapacity))
										clasName.setExtendableClassCapacity(0);
									else
										clasName.setExtendableClassCapacity(Integer.valueOf(extendableClassCapacity));
									clasName.setAdmissionsOpen(admissionsOpen);
									clasName.setLastAccessDate(new Date());
									clasName.setLastUpdatedById(getUser().getId());
									clasName.setLastUpdatedDate(new Date());
									adminManager.save(clasName);
									clasName= null;
								}
							}else if(StringFunctions.isNotNullOrEmpty(className) && StringFunctions.isNotNullOrEmpty(extendableClassCapacity) && 
									!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("admissionAcademicYearId"))){
								if("classExist".equalsIgnoreCase(ajaxAddClassForAdmissions(className,sectionNames,Integer.valueOf(extendableClassCapacity),(Long)getSession().getAttribute("admissionAcademicYearId"),admissionsOpen))){
									classExist = true;
								}
							}
						}
					}
					if(classExist){
						ajaxGetAdmissionClassDetails();
						super.addActionError("Class Name already taken!!!.Please change class name.");
						return "classNameChk";
					}
				}
				ajaxGetSettingsSteps();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	}
	@Actions({@Action(value = "ajaxGetAdmissionsOpendClasses", results = { @Result(location = "admission/ajaxClassList.jsp", name = "success") })})
	public String ajaxGetAdmissionsOpendClasses() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetAdmissionsOpendClasses' method");
		}
		try {
			if(getAcademicYearId()  > 0){
				setClassList(adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),getAcademicYearId(),"Y",null,true));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
		
	public String ajaxAddClassForAdmissions(String className,String sectionNames,int classCapacity,long academicYearId,boolean admissionsOpen){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddClassForAdmissions' method");
		}
		try {
			StudyClass studyClass = null;
			List<ClassName> classNameList = null;
			AcademicYear academicYear =null;
			Section newSection = null;
			ClassName classNameObj = null;
			academicYear = (AcademicYear)adminManager.get(AcademicYear.class,"id="+academicYearId);
			if (!ObjectFunctions.isNullOrEmpty(academicYear)) {
				classNameList=adminManager.getAll(ClassName.class,"custId="+getUserCustId()+" and className='"+className.trim()+"' and academicYearId="+academicYearId);
					if(ObjectFunctions.isNullOrEmpty(classNameList)){
						classNameObj = new ClassName();
						classNameObj.setClassName(className.toUpperCase());
						classNameObj.setDescription(className);
						classNameObj.setCreatedById(getUser().getId());
						classNameObj.setLastAccessDate(new Date());
						classNameObj.setCreatedDate(new Date());
						classNameObj.setLastUpdatedDate(new Date());
						classNameObj.setCustId(getUserCustId());
						classNameObj.setAcademicYear(academicYear);
						classNameObj.setAdmissionsOpen(admissionsOpen);
						ClassName classNameObjReq = adminManager.saveClassName(classNameObj);
						if (StringFunctions.isNotNullOrEmpty(sectionNames)) {
							String sNames[] = sectionNames.split(",");
							if(!ObjectFunctions.isNullOrEmpty(sNames)){
								Arrays.sort(sNames);
								for (String sectionName : sNames) {
									if (StringFunctions.isNotNullOrEmpty(sectionName)) {
										String sql = " section = '" + sectionName.trim()+ "' and custId = " + getUserCustId();
										newSection = (Section) adminManager.get(Section.class,sql);
										if (ObjectFunctions.isNullOrEmpty(newSection)) {
											newSection = new Section();
											newSection.setSection(sectionName.trim().toUpperCase());
											newSection.setCustId(getUserCustId());
											newSection.setCreatedById(getUser().getId());
											newSection.setCreatedDate(new Date());
											newSection.setLastAccessDate(new Date());
											newSection.setLastUpdatedDate(new Date());
											newSection = (Section) adminManager.save(newSection);
										}
										studyClass = adminManager.getclassByClassAndsection(className.toUpperCase(),newSection.getSection().trim(),getUserCustId(), academicYear.getId());
										if(ObjectFunctions.isNullOrEmpty(studyClass))
										{
											studyClass = new StudyClass();
											studyClass.setCreatedById(getUser().getId());
											studyClass.setCreatedDate(new Date());
											studyClass.setLastAccessDate(new Date());
											studyClass.setLastUpdatedDate(new Date());
											studyClass.setClassName(className.toUpperCase());
											studyClass.setSectionCapacity(classCapacity);
											studyClass.setClassNameClassId(classNameObjReq);
											studyClass.setCustId(getUserCustId());
											studyClass.setSection(newSection.getSection().toUpperCase());
											studyClass.setAcademicYear(academicYear);
											studyClass.setSubjects(null);
											studyClass.setLastUpdatedById(getUser().getId());
											studyClass.setLastUpdatedDate(new Date());
											studyClass.setLastAccessDate(new Date());
											adminManager.save(studyClass);
											studyClass = null;
											newSection = null;
										}
									}
								}
							}
						} else {
							studyClass = new StudyClass();
							studyClass.setCreatedById(getUser().getId());
							studyClass.setCreatedDate(new Date());
							studyClass.setLastAccessDate(new Date());
							studyClass.setLastUpdatedDate(new Date());
							studyClass.setClassName(className.toUpperCase());
							studyClass.setSectionCapacity(classCapacity);
							studyClass.setClassNameClassId(classNameObjReq);
							studyClass.setCustId(getUserCustId());
							studyClass.setSection("");
							studyClass.setAcademicYear(academicYear);
							studyClass.setSubjects(null);
							studyClass.setLastUpdatedById(getUser().getId());
							studyClass.setLastUpdatedDate(new Date());
							studyClass.setLastAccessDate(new Date());
							adminManager.save(studyClass);
							studyClass = null;
							newSection = null;
						}
						setStudyClassList(studentManager.getStudyClassesByClassNameClassId(classNameObjReq.getId(), getUserCustId(),academicYear.getId()));			
						if (!ObjectFunctions.isNullOrEmpty(getStudyClassList())) {
							classNameObjReq = (ClassName) adminManager.get(ClassName.class, classNameObjReq.getId());
							classNameObjReq.setNoOfSections(getStudyClassList().size());
							int maxSortingOrder = adminManager.getMaxOfClassNameSortingOrder(classNameObjReq.getAcademicYearId(), classNameObjReq.getCustId());
							classNameObjReq.setSortingOrder(maxSortingOrder + 1);
							classNameObjReq = adminManager.saveClassName(classNameObjReq);
						}
					}else{
						return "classExist" ;
					}
			}
		} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
		}
	
	@Actions( { @Action(value = "ajaxRemoveClassesByClassNameId", results = { @Result(location = "admission/ajaxManageClassesDetails.jsp", name = "success") }) })
	public String ajaxRemoveClassesByClassNameId() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxRemoveClassesByClassNameId' method");
	}
	try {
		if(StringFunctions.isNotNullOrEmpty(getClassId())){
			List studentsList=null;
			List examSchedules=null;
			long studyClassId= 0;
			boolean isClassesRemoved = true;
			StringBuffer errorMsg = new StringBuffer();
			List<Object[]> studyClassList =adminManager.getAll("select id,CONCAT(IF(className IS NULL,'',className), IF(section IS NULL || section  <=> '','',CONCAT(' - ',section))) as classAndSection from studyClass where classNameClassId="+getClassId()+" and custId="+getUserCustId());
			if(ObjectFunctions.isNotNullOrEmpty(studyClassList)){
				for(Object[] studyClass : studyClassList){
					if(!ObjectFunctions.isNullOrEmpty(studyClass) && !ObjectFunctions.isNullOrEmpty(studyClass[0])  && !ObjectFunctions.isNullOrEmpty(studyClass[1])){
						studyClassId = Long.valueOf(studyClass[0].toString());
						studentsList = adminManager.getAll(Student.class," classSectionId="+studyClassId);
						if(ObjectFunctions.isNullOrEmpty(studentsList)){
							examSchedules=adminManager.getAll(ExamSchedules.class,"classSectionId="+studyClassId);
							if(ObjectFunctions.isNullOrEmpty(examSchedules)){
								adminManager.removeClassTeachersByStudyClassIdCustId(studyClassId,getUserCustId());
								adminManager.removeClassEventsByClassSectionId(studyClassId);
								adminManager.removeExamSchedulesByClassSectionId(studyClassId);
								adminManager.removeKbanksByClassSectionId(studyClassId);
								adminManager.removeClassSubjectsByClassSectionId(studyClassId);
								adminManager.removeClassSubjectsSettingsByClassSectionId(studyClassId);
								adminManager.remove("staffTimeTablePeriods", "timeTableId in(select id from timeTable where classSectionId="+studyClassId+" and custId="+getUserCustId()+")");
								adminManager.removeTimeTablePeriodsByClassSectionId(studyClassId);
								adminManager.remove(StudyClass.class, studyClassId);
							}else{
								errorMsg.append(studyClass[1].toString()+" class contains exam schedules.You can't remove this class.");
								isClassesRemoved = false;
							}
						}else{
							errorMsg.append(studyClass[1].toString()+" class contains students.You can't remove this class.");
							isClassesRemoved = false;
						}
					}
				}
			}
			ClassName clasName=(ClassName)adminManager.get(ClassName.class, "id="+getClassId());
			if(isClassesRemoved){
				List<Fee> fees=adminManager.getAll(Fee.class, "classId="+getClassId());
				if(!ObjectFunctions.isNullOrEmpty(fees)){
					for(Fee fee:fees){
						fee.setAcademicYear(null);
						fee.setFeeType(null);
						fee.setSchoolTerms(null);
						adminManager.save(fee);
						fee=null;
					}
					adminManager.remove("Fee","classId="+getClassId());
					fees=null;
				}
				adminManager.remove("studyBookSettingsClasses", "classId="+getClassId());
				adminManager.remove("onlineApplicationDetails", "classId="+getClassId());
				adminManager.save(clasName);
			    adminManager.remove(ClassName.class,Long.valueOf(getClassId()));
			    super.addActionMessage("Class removed successfully.");
			}else{
				int classSectionsCount = adminManager.getCount("studyClass", "classNameClassId="+getClassId());
				clasName.setNoOfSections(classSectionsCount);
				adminManager.save(clasName);
				clasName=null;
				super.addActionError(errorMsg.toString());
			}
		}
		} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
		finally{
			ajaxGetAdmissionClassDetails();
		}
	return SUCCESS;
	}
	
	
	
	@Actions( { @Action(value = "ajaxCheckStudentAdmissionNumber", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
	public String ajaxCheckStudentAdmissionNumber() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckStudentAdmissionNumber' method");
		}
		try {
			
			String admissionNumber = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(admissionNumber)) {
				int admissionsAvailableCount=adminManager.getCount("Account", "custId="+getUserCustId()+" and admissionNumber='"+admissionNumber+"'");
				if (admissionsAvailableCount > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}

		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCheckStudentReceiptNumber", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
	public String ajaxCheckStudentReceiptNumber() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckStudentReceiptNumber' method");
		}
		try {
			AcademicYear academicYear = getCurrentAcademicYear();
			if(!ObjectFunctions.isNullOrEmpty(academicYear)){
				String receiptNumber = getParamValue("keyWord");
				Customer customer = getCustomerByCustId();
				if (StringFunctions.isNotNullOrEmpty(receiptNumber)) {
					int receiptAvailableCount = 0 ;
					if(customer.isAcademicWiseFeeReceipt()){
						if(academicYear.getReceiptGenerationType().equalsIgnoreCase("M"))
							receiptAvailableCount = adminManager.getCount("studentPayment", "custId=" + getUserCustId()+ " and ( invoiceString like '" + receiptNumber.trim() + "' or invoiceNumber like '" + receiptNumber.trim() + "' ) and academicYearId="+getUserAcademicYearId());
						else
							receiptAvailableCount = adminManager.getCount("studentPayment", "custId=" + getUserCustId()+ " and invoiceNumber='" + receiptNumber + "' and academicYearId="+getUserAcademicYearId());
					}else{
						if(academicYear.getReceiptGenerationType().equalsIgnoreCase("M"))
							receiptAvailableCount = adminManager.getCount("studentPayment", "custId=" + getUserCustId()+ " and ( invoiceString like '" + receiptNumber.trim() + "' or invoiceNumber like '" + receiptNumber.trim() + "')");
						else
							receiptAvailableCount = adminManager.getCount("studentPayment", "custId=" + getUserCustId()+ " and invoiceNumber like '" + receiptNumber.trim() + "'");
					}if (receiptAvailableCount > 0) {
						setAutoCheck("1");
					} else {
						setAutoCheck("0");
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
 * Date              	Name               Description
 * ========          	============       ==================
 * Jan 28th, 2014     	Seshu		       For displaying admissions opened academic year.  
 * 										   (Admissions -> Admitted Students.)	
/********************************************************************/	
	@Action(value = "ajaxViewAdmittedStudents", results = { @Result(location = "admission/admittedStudentHome.jsp", name = "success") })
	public String ajaxViewAdmittedAdmiddions() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewAdmittedStudents' method");
		}
		try {
			getSmsCount();
			 onlineApplicationDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
 * Date              	Name               Description
 * ========          	============       ==================
 * Jan 28th, 2014     	Seshu		       For displaying academic year wise admitted students through Admissions module.
 * 										   (Admissions -> Admitted Students -> Select Academic year)	
/********************************************************************/	
	@Action(value = "ajaxAdmittedStudents", results = { @Result(location = "admission/ajaxViewAdmittedStudents.jsp", name = "success") })
	public String ajaxAdmittedStudents() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAdmittedStudents' method");
		}
		try {
			if (getAcademicYearId() > 0) {
				setAdmissionSettings((AdmissionSettings) adminManager.get(AdmissionSettings.class, "academicYearId="+ getAcademicYearId()));
				if (!ObjectFunctions.isNullOrEmpty(getAdmissionSettings())) {
					setTempId2(getAcademicYearId());
					List classList = adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),getAcademicYearId(),Constants.YES_STRING,null,true);
					if(!ObjectFunctions.isNullOrEmpty(classList))
						setClassList(classList);
					if(!StringFunctions.isNullOrEmpty(getAnyTitle()) || !StringFunctions.isNullOrEmpty(getSelectedId()) || !StringFunctions.isNullOrEmpty(getClassId())){
						if(!StringFunctions.isNullOrEmpty(getAnyTitle())){
							setStudentsList(adminManager.getAll(ViewStudentClassDetails.class,"joinedThroughAdmissions='"+ Constants.YES_STRING+ "' and custId=" + getUserCustId()+ " and (firstName like '%"+ getAnyTitle() + "%' or lastName like '%"+ getAnyTitle()+ "%') and academicYearId="+ getAcademicYearId()+ " and studDiscontinueDesc is null order by classId"));
						}else if(!StringFunctions.isNullOrEmpty(getSelectedId())){
							setStudentsList(adminManager.getAll(ViewStudentClassDetails.class,"joinedThroughAdmissions='"+ Constants.YES_STRING+ "' and custId=" + getUserCustId()+ " and (admissionNumber like '%"+ getSelectedId().trim()+ "%') and academicYearId="+ getAcademicYearId()+ " and studDiscontinueDesc is null order by classId,firstName"));
						}else{
							setStudentsList(adminManager.getAll(ViewStudentClassDetails.class,"joinedThroughAdmissions='"+ Constants.YES_STRING+ "' and custId=" + getUserCustId()+ " and classId="+Long.valueOf(getClassId())+" and academicYearId="+ getAcademicYearId()+ " and studDiscontinueDesc is null order by classId,firstName"));
						}
					}else{
						setStudentsList(adminManager.getAll(ViewStudentClassDetails.class,"joinedThroughAdmissions='"+ Constants.YES_STRING+ "' and custId=" + getUserCustId()+ " and academicYearId="+ getAcademicYearId()+ " and studDiscontinueDesc is null order by classId"));
					}
					//prepareStudentsFeeListBysearch(getStudentsList(),getAcademicYearId());
				}
				onlineApplicationDetails();
				getSmsCount();
			}
		} catch (Exception ex) { 
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * Dec 27, 2013		 Seshu				Code Refactor.
/********************************************************************/
 	@Action(value = "ajaxGetBoardingPointsByRoute", results = { @Result(location = "student/ajaxBoardingPointsByRoute.jsp", name = "success") })
	public String ajaxGetBoardingPointsByRoute() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetBoardingPointsByRoute' method");
		}
		try {
			setTempList1(adminManager.getAll(RouteBoardingPoints.class,"routeId ="+getStudent().getCategoryId()));
			if (getStudent().getId() > 0) {
				Student student = (Student)adminManager.get(Student.class,"id="+getStudent().getId());
				if (!ObjectFunctions.isNullOrEmpty(student)) 
				{
					if (!ObjectFunctions.isNullOrEmpty(student.getRouteBoardingPoints())) 
					{
						setAnyId(String.valueOf(student.getRouteBoardingPoints().getId()));
					}
				}
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
/********************************************************************
 * Date              Name               Description
 * ========          ============       ==================
 * Dec 30, 2013		 Seshu				Code Refactor.
 * Jan 7th			 Seshu				Used new View 
/********************************************************************/
   @Action(value = "ajaxGetVehicleByBoardingId", results = { @Result(location = "student/ajaxVehiclesByBoardingPointId.jsp", name = "success") })
	public String ajaxGetVehicleByBoardingId() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetVehicleByBoardingId' method");
		}
		try {
			StringBuffer query = new StringBuffer("boardingPointId=").append(getStudent().getCategoryId());
			setTempList(adminManager.getAllViewAssignedVehiclestoRoutesWithBoardingPoints(query.toString()));
			query = null;
			if (getStudent().getId() > 0) {
				Student student = (Student)adminManager.get(Student.class,"id="+getStudent().getId());
				if (!ObjectFunctions.isNullOrEmpty(student)) 
				{
					setEventId(String.valueOf(student.getVehicleAcademicDetailsId()));
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   
   
   @Actions( {@Action(value = "ajaxTcSettings", results = {@Result(location = "academic/tcGeneration/ajaxTcUploadSettings.jsp", name = "success") }),
	   @Action(value = "ajaxDoTCTemplateAndBookSettings", results = {@Result(location = "academic/tcGeneration/ajaxAddTcSettings.jsp", name = "success")}),
	   @Action(value = "ajaxDoLCTemplateAndBookSettings", results = {@Result(location = "academic/tcGeneration/ajaxAddLcSettings.jsp", name = "success")}),
	   @Action(value = "ajaxStudyAndBonafiedSettings", results = {@Result(location = "academic/studyAndBonafied/ajaxStudyBonafiedUploadSettings.jsp", name = "success")}),
	   @Action(value = "ajaxDoStudyAndBonafiedSettings", results = {@Result(location = "academic/studyAndBonafied/ajaxAddStudyAndBonafiedSettings.jsp", name = "success")})
	   })
	public String ajaxTcSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxTcSettings' method");
		}
		try {
//			String bookSettingsClassIds = null;
			setClassList(adminManager.getAllClassNames(getUserCustId(),getUserAcademicYearId()));
			setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(),null));
			StringBuffer query = new StringBuffer("custId=").append(getUserCustId());
			if("templateSettings".equalsIgnoreCase(getTempString()))
				setObjectList(adminManager.getAll(TcSettings.class,query.toString()+" and type='"+getTempString()+"'"));
			else if("bookSettings".equalsIgnoreCase(getTempString())){
				setTempList(adminManager.getAll(TcBookSettings.class,query.toString()+" and academicYearId="+getUserAcademicYearId()+ " and type='"+getTempString()+"'"));
				setAnyTitle(adminManager.getBookSettingsCreatedClassIdsByAcademicYearId(getUserAcademicYearId(),getTempString()));
			}
			else if("LC".equalsIgnoreCase(getTempString())){
				setObjectList(adminManager.getAll(TcSettings.class,query.toString()+" and type='"+getTempString()+"'"));
			}
			else if("lcbookSettings".equalsIgnoreCase(getTempString())){
				setTempList(adminManager.getAll(TcBookSettings.class,query.toString()+" and academicYearId="+getUserAcademicYearId()+ " and type='"+getTempString()+"'"));
				setAnyTitle(adminManager.getBookSettingsCreatedClassIdsByAcademicYearId(getUserAcademicYearId(),getTempString()));
			}
			else if("studyBookSettings".equalsIgnoreCase(getTempString())){
				query.append(" and academicYearId=").append(getUserAcademicYearId());
				setTempList(adminManager.getAll(StudyCertificateBookSettings.class,query.toString()));
				setAnyTitle(adminManager.getStudyCertificateBookSettingsCreatedClassIdsByAcademicYearId(getUserAcademicYearId()));
			}else if("studyCertificate".equalsIgnoreCase(getTempString()) || "bonafiedCertificate".equalsIgnoreCase(getTempString()) || "noDuesCertificate".equalsIgnoreCase(getTempString()) || "feeCertificate".equalsIgnoreCase(getTempString())){
				if("studyCertificate".equalsIgnoreCase(getTempString()))
					setObjectList(adminManager.getAll("select studyAndBonafiedId,studyClassId,fileName,classAndSection from vw_studyAndBonafiedCertificates where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and certificateType='SC'"));
				else if("bonafiedCertificate".equalsIgnoreCase(getTempString()))
					setObjectList(adminManager.getAll("select studyAndBonafiedId,studyClassId,fileName,classAndSection from vw_studyAndBonafiedCertificates where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and certificateType='BC'"));
				else if("noDuesCertificate".equalsIgnoreCase(getTempString()))
					setObjectList(adminManager.getAll("select studyAndBonafiedId,studyClassId,fileName,classAndSection from vw_studyAndBonafiedCertificates where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and certificateType='ND'"));
				else
					setObjectList(adminManager.getAll("select studyAndBonafiedId,studyClassId,fileName,classAndSection from vw_studyAndBonafiedCertificates where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and certificateType='FC'"));
			}
			query = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
   @Actions( {@Action(value = "ajaxAddTcSettings", results = {@Result(location = "academic/tcGeneration/ajaxTcUploadSettings.jsp", name = "success") }),
		  @Action(value = "ajaxAddLcSettings", results = {@Result(location = "academic/tcGeneration/ajaxAddLcSettings.jsp", name = "success")})
		 })
		public String tcSettings() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'tcSettings' method");
			}
			try {
				if (StringFunctions.isNotNullOrEmpty(getAnyId())) {
					TcSettings tcSettings = null;
					List<String> classNamesList = Arrays.asList(getAnyId().split(","));  
					Customer customer = (Customer)adminManager.get(Customer.class, getUserCustId());
					AcademicYear academicYear = getCurrentAcademicYear();
					if(!ObjectFunctions.isNullOrEmpty(customer) && StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName())){
						if (getUserAcademicYearId() != 0) {
							MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) ServletActionContext.getRequest();
							String filePath = null;
							Enumeration fileParaNames = multiWrapper.getFileParameterNames();
							while (fileParaNames.hasMoreElements()) {
								String key = (String) fileParaNames.nextElement();
								File[] fileObject = multiWrapper.getFiles(key);
								String[] localSysfileNames = multiWrapper.getFileNames(key);
								setUploadFileName(StringFunctions.stripSymbols(localSysfileNames[0]));
								if(getUploadFileName().contains(".ttf") || getUploadFileName().contains(".TTF")) {
								}
								filePath = adminManager.getUploadTemplates(fileObject[0], academicYear.getAcademicYear(), getUploadFileName());
							}
							
							for(String className : classNamesList){
								tcSettings = (TcSettings)adminManager.get(TcSettings.class, "custId="+getUserCustId()+" and classNames='"+className+"' and type='"+getTempString()+"'");
								if(ObjectFunctions.isNullOrEmpty(tcSettings))
									tcSettings = new TcSettings();
								else
		 						{/*
		 							S3Wrapper s3Wrapper = new S3Wrapper();
		 							URL url = new URL(tcSettings.getFilePath());
		 							s3Wrapper.delete(url);
		 						*/}
								
								tcSettings.setFileName(getUploadFileName());
								tcSettings.setFilePath(filePath);
								tcSettings.setType(getTempString());
								tcSettings.setCustId(getUserCustId());
								tcSettings.setCreatedById(getUser().getId());
								tcSettings.setLastUpdatedById(getUser().getId());
								tcSettings.setClassNames(className);
								adminManager.save(tcSettings);
							}
							if("templateSettings".equalsIgnoreCase(getTempString()))
								super.addActionMessage("Successfully created TC settings.");
							else
								super.addActionMessage("Successfully created LC settings.");
						}
						//pathName = null;
					}
					customer = null;
					tcSettings = null;
					//tcTemplateFonts = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}finally{
				ajaxTcSettings();
			}
			return SUCCESS;
		}
	 @Actions( {@Action(value = "ajaxAddTcBookSettings", results = {@Result(location = "academic/tcGeneration/ajaxTcUploadSettings.jsp", name = "success") }),
			@Action(value = "ajaxAddLcBookSettings", results = {@Result(location = "academic/tcGeneration/ajaxAddLcSettings.jsp", name = "success") })
		})
	public String tcSettingsHeaders() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxTcSettings' method");
		}
		try {
			int bookSettingsCount = 0;
			TcBookSettings tcBookSettings = null;
			List<ClassName> classesList = null;
			if(StringFunctions.isNotNullOrEmpty(getAnyId())){
				bookSettingsCount = adminManager.getCount("tcBookSettings", "custId="+getUserCustId()+" and tcBookNumber="+getTempId()+" and academicYearId="+getUserAcademicYearId()+ " and type='"+getTempString()+"'");
				if(bookSettingsCount == 0){
					 classesList = adminManager.getAll(ClassName.class, "id in("+getAnyId()+")");
					 tcBookSettings = new TcBookSettings();
					 tcBookSettings.setTcBookNumber((int)getTempId());
					 tcBookSettings.setTcStartingNumber((int)getTempId1());
					 tcBookSettings.setType(getTempString());
					 tcBookSettings.setTcEndingNumber((int)getTempId2());
					 tcBookSettings.setCustId(getUserCustId());
					 tcBookSettings.setAcademicYearId(getUserAcademicYearId());
					 tcBookSettings.setClasses(ConvertUtil.convertListToSet(classesList));
					 tcBookSettings.setCreatedById(getUser().getId());
					 tcBookSettings.setLastUpdatedById(getUser().getId());
					 adminManager.save(tcBookSettings);
					 if("bookSettings".equalsIgnoreCase(getTempString()))
						 super.addActionMessage("Successfully created TC book settings.");
					 else
						 super.addActionMessage("Successfully created LC book settings.");
				}else{
					super.addActionError("Book number already exist. Please change book number.");
				}
			}
			 ajaxTcSettings();
			 setTempId(0);
			 setTempId1(0);
			 setTempId2(0);
			 setChkBoxSelectedIds(null);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 @Actions( {@Action(value = "ajaxDeleteTcTemplate", results = {@Result(location = "academic/tcGeneration/ajaxTcUploadSettings.jsp", name = "success") }),
		 @Action(value = "ajaxDeleteLcTemplate", results = {@Result(location = "academic/tcGeneration/ajaxAddLcSettings.jsp", name = "success")})
		 })
	public String ajaxDeleteTcTemplate() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxTcGeneration' method");
		}
		try {
			if (getTempId() > 0) {
				File templateFile = null;
				StringBuffer tcCustomerPath = null;
				TcSettings tcSetting = null;
				Customer customer = getCustomerByCustId();
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
						tcSetting = (TcSettings) adminManager.get(TcSettings.class, getTempId());
						if (!ObjectFunctions.isNullOrEmpty(tcSetting)) 
						{
							
							List<TcSettings> tcSettingsList = adminManager.getAll(TcSettings.class, "custId="+tcSetting.getCustId()+" AND filePath='"+tcSetting.getFilePath()+"'");
							if (ObjectFunctions.isNullOrEmpty(tcSetting)) 
							{/*
								S3Wrapper s3Wrapper = new S3Wrapper();
								URL url = new URL(tcSetting.getFilePath());
								s3Wrapper.delete(url);
							*/}
							tcSettingsList = null;
						}
						adminManager.remove(TcSettings.class, getTempId());
						if("templateSettings".equalsIgnoreCase(getTempString()))
							super.addActionMessage("Successfully deleted TC settings.");
						else
							super.addActionMessage("Successfully deleted LC settings.");
				}
				tcSetting = null;
				customer = null;
				templateFile = null;
				tcCustomerPath = null;
				ajaxTcSettings();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 /********************************************************************
  * Date              	Name               Description
  * ========          	============       ==================
  * Dec 4th, 2013     	Seshu		       For removing study, bonafied and nodue templates.
 /********************************************************************/	
 @Actions( {@Action(value = "ajaxDeleteStudyBonafiedAndNoDueTemplate", results = {@Result(location = "academic/studyAndBonafied/ajaxAddStudyAndBonafiedSettings.jsp", name = "success")})})
	public String ajaxDeleteStudyBonafiedAndNoDueTemplate() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDeleteStudyBonafiedAndNoDueTemplate' method");
		}
		try {
			if (getTempId() > 0) {
				File templateFile = null;
				StringBuffer studyAndBonafiedCustomerPath = null;
				StudyAndBonafiedSettings studyAndBonafiedSettings = null;
				Customer customer = getCustomerByCustId();
				StringBuffer query = null;
				int count = 0;
				if (!ObjectFunctions.isNullOrEmpty(customer)) {
					if ("studyCertificate".equalsIgnoreCase(getTempString()) || "bonafiedCertificate".equalsIgnoreCase(getTempString()) || "noDuesCertificate".equalsIgnoreCase(getTempString()) || "feeCertificate".equalsIgnoreCase(getTempString())) {
						studyAndBonafiedSettings = (StudyAndBonafiedSettings) adminManager.get(StudyAndBonafiedSettings.class,getTempId());
						if (!ObjectFunctions.isNullOrEmpty(studyAndBonafiedSettings)) {
							
							
							try {
								List<TcSettings> studyAndBonafiedSettingsList = adminManager.getAll(StudyAndBonafiedSettings.class, "custId="+studyAndBonafiedSettings.getCustId()+" AND filePath='"+studyAndBonafiedSettings.getFilePath()+"'");
								studyAndBonafiedSettingsList = null;
							} catch (Exception e) {
								e.printStackTrace();
							}
							adminManager.remove(StudyAndBonafiedSettings.class,studyAndBonafiedSettings.getId());
							if("studyCertificate".equalsIgnoreCase(getTempString()))
							super.addActionMessage("Study certificate deleted successfully");
							else if("bonafiedCertificate".equalsIgnoreCase(getTempString()))
							super.addActionMessage("Bonafied certificate deleted successfully");
							else if("noDuesCertificate".equalsIgnoreCase(getTempString()))
							super.addActionMessage("No Dues certificate deleted successfully");
							else if("feeCertificate".equalsIgnoreCase(getTempString()))
							super.addActionMessage("Fee certificate deleted successfully");
						}
						studyAndBonafiedSettings = null;
						templateFile = null;
						studyAndBonafiedCustomerPath = null;
					} else if ("studyBookSettings".equalsIgnoreCase(getTempString())) {
						adminManager.remove("studyBookSettingsClasses","studyBookId=" + getTempId());
						adminManager.remove("studyCertificate", "bookSettingId="+getTempId());
						adminManager.remove(StudyCertificateBookSettings.class,getTempId());
						super.addActionMessage("Successfully deleted study certificate book settings.");
					}
				}
				customer = null;
				templateFile = null;
				ajaxTcSettings();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	 @Actions( {
		 @Action(value = "ajaxDoGetTcGeneration", results = {@Result(location = "academic/tcGeneration/ajaxTcGenerationSettings.jsp", name = "success")}),
				 @Action(value = "ajaxDoGetLcGeneration", results = { @Result(location = "academic/tcGeneration/ajaxLcGenerationSettings.jsp", name = "success")})
			})
		public String ajaxTcGeneration() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxTcGeneration' method");
			}
			try {
				ajaxGetAllClassesAndTCSettings();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}

	 @Actions( {
			@Action(value = "ajaxGetStudentPendingDues", results = {@Result(location = "academic/tcGeneration/ajaxViewStudentPendingDues.jsp", name = "tcSuccess"),
																	@Result(location = "academic/tcGeneration/ajaxViewLcStudentPendingDues.jsp", name = "lcSuccess"),
																	@Result(location = "academic/hallticket/ajaxViewStudentPendingDues.jsp", name = "hallticket") }),
			@Action(value = "ajaxGetPendingDuesSBGeneration", results = { @Result(location = "academic/studyAndBonafied/ajaxViewPendingDuesSBGeneration.jsp", name = "success") }) })
	public String ajaxGetStudentPendingDues() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStudentPendingDues' method");
		}
		try {
			// For getting className we can use tempString variable.
			List<ViewStudentFeePaidAndNotPaidDetails> studentsList = null;
			Date newDate = new Date();
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			String today = formatter.format(newDate);
			StringBuffer sqlQuery = null;
			setTempId(getTempId());
			ClassName className = null;
			if(StringFunctions.isNotNullOrEmpty(getStudyClassId()) || StringFunctions.isNotNullOrEmpty(getClassId())){
				sqlQuery = new StringBuffer("select  vf.className,vf.section,vf.admissionNumber,vf.firstName,vf.lastName,vf.paymentStatus," +
						"vf.studId,vf.classId,vf.feeId,vf.studDiscontinueDesc from (select  vsf.className,vsf.section,vsf.admissionNumber," +
						"vsf.firstName,vsf.lastName,vsf.paymentStatus,vsf.studId,vsf.classId,vsf.feeId,vsf.registerNumber,vsf.studDiscontinueDesc " +
						"from vw_studyCertificateForStudentFeePaidAndNotPaidDetails as vsf ").append(" where vsf.custId=").append(getUserCustId())
						.append(" and (vsf.feeType!='N' or vsf.feeType is NULL)");
				if(StringFunctions.isNotNullOrEmpty(getStudyClassId()) && !StringFunctions.isNullOrEmpty(getPlTitle())){
					String clsName = getTempString().replace("$", "&").trim();
					sqlQuery.append(" and vsf.classSectionId =").append(getStudyClassId()).append(" and academicYearId=").append(getUserAcademicYearId())
					.append(" order by vsf.paymentStatus) as vf group by vf.studId order by IF((registerNumber IS NULL or registerNumber = ''),firstName,registerNumber)");
					log.debug(sqlQuery.toString());
					log.debug("custId=" + getUserCustId()+ " and classNames like"+clsName+" ");
					studentsList = adminManager.getAll(sqlQuery.toString());
					if ("TC".equalsIgnoreCase(getPlTitle().trim())) {
						setTcSettings((TcSettings) adminManager.get(TcSettings.class, "custId=" + getUserCustId()+ " and classNames like"+clsName+" "));
						if (!ObjectFunctions.isNullOrEmpty(getTcSettings())) {
							setTempString(clsName); //used to get tc generation when seletct class by cvs 26-3-2014.
							setStudentsList(studentsList);
						} else {
							super.addActionError("Tc template is not uploaded. Please upload the file and generate the tc.");
						}
						return "tcSuccess";
					}
					else if("LC".equalsIgnoreCase(getPlTitle().trim())){
						setTcSettings((TcSettings) adminManager.get(TcSettings.class, "custId=" + getUserCustId()+ " and classNames like'"+ clsName + "'"));
						if (!ObjectFunctions.isNullOrEmpty(getTcSettings())) {
							setTempString("'"+clsName+"'"); //used to get tc generation when seletct class by cvs 26-3-2014.
							setStudentsList(studentsList);
						} else {
							super.addActionError("Lc template is not uploaded. Please upload the file and generate the lc.");
						}
						return "lcSuccess";
					}else if ("studyCertificate".equalsIgnoreCase(getPlTitle().trim())) {
						setStudyAndBonafiedSettings((StudyAndBonafiedSettings) adminManager.get(StudyAndBonafiedSettings.class, "custId="+ getUserCustId() + " and studyClassId ='"+ getStudyClassId().trim() + "'"));
						if (!ObjectFunctions.isNullOrEmpty(getStudyAndBonafiedSettings())) {
							setStudentsList(studentsList);
						} else {
							super.addActionError("Study certificate template is not uploaded. Please upload the file and generate the certificate.");
						}
					} else if ("bonafiedCertificate".equalsIgnoreCase(getPlTitle().trim())) {
						setStudyAndBonafiedSettings((StudyAndBonafiedSettings) adminManager.get(StudyAndBonafiedSettings.class, "custId="+ getUserCustId() + " and studyClassId ='"+ getStudyClassId().trim() + "'"));
						if (!ObjectFunctions.isNullOrEmpty(getStudyAndBonafiedSettings())) {
							setStudentsList(studentsList);
						} else {
							super.addActionError("Bonafied certificate template is not uploaded. Please upload the file and generate the certificate.");
						}
					}else if ("noDuesCertificate".equalsIgnoreCase(getPlTitle().trim())) {
						setStudyAndBonafiedSettings((StudyAndBonafiedSettings) adminManager.get(StudyAndBonafiedSettings.class, "custId="+ getUserCustId() + " and studyClassId ='"+ getStudyClassId().trim() + "'"));
						if (!ObjectFunctions.isNullOrEmpty(getStudyAndBonafiedSettings())) {
							setStudentsList(studentsList);
						} else {
							super.addActionError("No dues certificate template is not uploaded. Please upload the file and generate the certificate.");
						}
					}else if ("feeCertificate".equalsIgnoreCase(getPlTitle().trim())) {
						setStudyAndBonafiedSettings((StudyAndBonafiedSettings) adminManager.get(StudyAndBonafiedSettings.class, "custId="+ getUserCustId() + " and studyClassId ='"+ getStudyClassId().trim() + "'"));
						if (!ObjectFunctions.isNullOrEmpty(getStudyAndBonafiedSettings())) {
							setStudentsList(studentsList);
						} else {
							super.addActionError("Fee certificate template is not uploaded. Please upload the file and generate the certificate.");
						}
					  }
				}else if (StringFunctions.isNotNullOrEmpty(getClassId())) {
					className = (ClassName) adminManager.get(ClassName.class, Long.valueOf(getClassId()));
					if (!ObjectFunctions.isNullOrEmpty(className)) {
						sqlQuery.append(" and (vsf.feeType!='N' or vsf.feeType is NULL)").append(" and vsf.classId =").append(getClassId())
								.append(" and academicYearId=").append(getUserAcademicYearId()).append(" and vsf.studDiscontinueDesc is NULL")
								.append(" order by vsf.paymentStatus) as vf group by vf.studId order by IF((registerNumber IS NULL or registerNumber = ''),firstName,registerNumber)");
						log.debug(sqlQuery.toString());
						studentsList = adminManager.getAll(sqlQuery.toString());
						if(!StringFunctions.isNullOrEmpty(getPlTitle())){
							if ("HT".equalsIgnoreCase(getPlTitle().trim())) {
								setHallTicketSettings(((HallTicketSettings) adminManager.get(HallTicketSettings.class, "custId="+ getUserCustId() + " and classNames='"+ className.getClassName()+ "'")));
								if (!ObjectFunctions.isNullOrEmpty(getHallTicketSettings())) {
									setViewClassExamDetails(adminManager.getAll(ViewClassExamDetails.class, "custId="+ getUserCustId() + " and academicYearId="+ getUserAcademicYearId() + " and classId="+ getClassId() + " and examDate>='" + today+ " 00:00:00' group by examType"));
									if (!ObjectFunctions.isNullOrEmpty(getViewClassExamDetails())) {
										setStudentsList(studentsList);
									}
								} else {
									super.addActionError("Hallticket template is not uploaded. Please upload the file and generate the hallticket.");
								}
								return "hallticket";
							}  
						}	
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	 @Actions( {
			@Action(value = "ajaxGetSearchStudentPendingDues", results = { @Result(location = "academic/tcGeneration/ajaxViewSearchStudentsForTC.jsp", name = "success") }),
			@Action(value = "ajaxGetSearchLCStudentPendingDues", results = { @Result(location = "academic/tcGeneration/ajaxViewSearchStudentsForLC.jsp", name = "success") }),
			@Action(value = "ajaxGetSearchStudentPendingSB", results = { @Result(location = "academic/studyAndBonafied/ajaxViewSearchStudentsForSB.jsp", name = "success") }),
			@Action(value = "ajaxDoGetSearchStudentPendingDues", results = { @Result(location = "academic/hallticket/ajaxViewSearchStudentsForHallTicket.jsp", name = "success") })
	})
	public String ajaxGetSearchStudentPendingDues() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetSearchStudentPendingDues' method");
		}
		try {
         StringBuffer sqlQuery = null;
         if(StringFunctions.isNotNullOrEmpty(getSelectedId())){
          	sqlQuery = new StringBuffer("select  vf.className,vf.section,vf.admissionNumber,vf.firstName,vf.lastName,vf.paymentStatus,vf.studId,vf.classId,vf.feeId,vf.studDiscontinueDesc,vf.classSectionId from (select  vsf.className,vsf.section,vsf.admissionNumber,vsf.firstName,vsf.lastName,vsf.paymentStatus,vsf.studId,vsf.classId,vsf.feeId,vsf.studDiscontinueDesc,vsf.classSectionId from vw_studyCertificateForStudentFeePaidAndNotPaidDetails as vsf ").
          	append(" where vsf.custId=").append(getUserCustId()).append(" and (vsf.feeType!='N' or vsf.feeType is NULL)").append(" and (vsf.firstName like '%").append(getSelectedId()).append("%' or lastName like '%").append(getSelectedId()).append("%') and academicYearId=").append(getUserAcademicYearId()).append(" order by vsf.paymentStatus) as vf group by vf.studId");
          	setStudentsList(adminManager.getAll(sqlQuery.toString()));
          }
         sqlQuery = null;
        } catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
        }
		return SUCCESS;
	}
 @Actions( {@Action(value = "ajaxViewFeeDetails", results = {@Result(location = "academic/tcGeneration/ajaxViewPendingFee.jsp", name = "success") })})
	public String ajaxViewFeeDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewFeeDetails' method");
		}
		try {
			setObjectList(adminManager.getAll("select categoryName,feeType,termName,feeAmount,paidAmount from vw_studentFeePaidAndNotPaidDetails where classId="+getClassId()+" and custId="+getUserCustId()+" and studId="+getAnyId()+" and paymentStatus='"+Constants.NO_STRING+"' and (feeType!='N' or feeType is NULL) and academicYearId="+getUserAcademicYearId()+" ") );
			//setObjectList(adminManager.getAll(ViewStudentClassFeePaymentDetails.class,"classId="+getClassId()+" and custId="+getUserCustId()+" and studentId="+getAnyId()+" and paymentStatus='"+Constants.NO_STRING+"' and (feeType!='N' or feeType is NULL) and academicYearId="+getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/*
	Changed by seshu on 4th april code refactor
	 */
 @Actions( { @Action(value = "ajaxGenerateTc", results = { @Result(location = "academic/tcGeneration/ajaxDoTcGeneration.jsp", name = "success") }), 
     @Action(value = "ajaxGenerateLc", results = { @Result(location = "academic/tcGeneration/ajaxDoLcGeneration.jsp", name = "success") }) })
	public String ajaxGenerateTc() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateTc' method");
		}
//		TcSettings tcSettings = null;
		StringBuffer query = null;
		InputStream templateFile= null;
 		IXDocReport report = null;
 		IContext context = null;
		TcBookSettings tcBookSettings = null;
		StringBuffer studentDOCXFilePath = null;
		List<ViewStudentsTCDetails> vwStudentList = null;
		OutputStream out = null;
		TransferCertificate transferCertificate = null;
		LeavingCertificate leavingCertificate = null;
		File directory = null;
        List<String> educationTypeSubjects = null; 
        HashMap<Long, String> educationSubjectsMap = new HashMap<Long, String>();
        List<TcBookSettings> tcBookSettingsList = null;
        List<TcSettings> tcSettingsList = null;
        HashMap<String, IXDocReport> tcSettingsMap = new HashMap<String, IXDocReport>();
        HashMap<Long, TcBookSettings> tcBookSettingsMap = new HashMap<Long, TcBookSettings>();
        StringBuffer studentsListQuery = null;
        StringBuffer bookSettingsQuery = null;
        StringBuffer tcTemplateFilePath = null;
        TcHistory tcHistory = null;
		try {
			Customer customer = getCustomerByCustId();
			if(!ObjectFunctions.isNullOrEmpty(customer) && StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName())){
				ZipOutputStream zipOutStream = new ZipOutputStream(getResponse().getOutputStream());
				getResponse().setContentType("application/zip");
				if("templateSettings".equalsIgnoreCase(getSelectedId())){
					getResponse().addHeader("Content-Disposition", "attachment; filename=TRANSEFER_CERTIFICATES.zip");
				 	tcTemplateFilePath = new StringBuffer("userFiles/TCTemplate/").append(customer.getCustomerShortName()).append("/");
				} else {
					getResponse().addHeader("Content-Disposition", "attachment; filename=LEAVING_CERTIFICATES.zip");
					 tcTemplateFilePath = new StringBuffer("userFiles/LCTemplate/").append(customer.getCustomerShortName()).append("/");
				}
				
				StringBuffer generatedTCsFilePath = new StringBuffer(tcTemplateFilePath).append("temp/");
				File outFile = new File(getSession().getServletContext().getRealPath(generatedTCsFilePath.toString())); 
				if(outFile.exists())
				FileUtils.deleteDirectory(outFile);// Removes existing files
				outFile.mkdirs(); // If directories are not available it creates directories
				if(StringFunctions.isNotNullOrEmpty(getStudentNumber()) && StringFunctions.isNotNullOrEmpty(getTempString())){
					 query = new StringBuffer("classNames in (").append(getTempString()).append(") and custId=").append(getUserCustId()).append(" and type='").append(getSelectedId()).append("'");
					 studentsListQuery = new StringBuffer("custId=").append(getUserCustId()).append(" and academicYearId=").append(getUserAcademicYearId()).append(" and studId in").append(getStudentNumber())
					.append(" order by IF(registerNumber IS NULL,fullName,registerNumber)");
					 bookSettingsQuery = new StringBuffer("custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()).append(" and type='").append(getAnyTitle()).append("'");
				}
				if(!ObjectFunctions.isNullOrEmpty(query)){
					tcSettingsList = adminManager.getAll(TcSettings.class,query.toString());
					if(!ObjectFunctions.isNullOrEmpty(tcSettingsList)){
						for(TcSettings tcSetting:tcSettingsList)
						{
							if(!ObjectFunctions.isNullOrEmpty(tcSetting) && StringFunctions.isNotNullOrEmpty(tcSetting.getFileName()))
							{
								URL url = new URL(tcSetting.getFilePath());
								URLConnection conn = url.openConnection();
								InputStream is = conn.getInputStream();
								
								directory = File.createTempFile(tcSetting.getFileName(), null);
								directory.deleteOnExit();
								FileUtils.copyInputStreamToFile(is, directory);
								
								if(directory.exists()){
								templateFile= new FileInputStream(directory);
								if(!ObjectFunctions.isNullOrEmpty(templateFile)){
									report = XDocReportRegistry.getRegistry().loadReport( templateFile, TemplateEngineKind.Velocity );
									tcSettingsMap.put(tcSetting.getClassNames(), report);
								}
								}	
							}
						}
					}
				}
				if(!ObjectFunctions.isNullOrEmpty(studentsListQuery))
					vwStudentList = adminManager.getAll(ViewStudentsTCDetails.class, studentsListQuery.toString());
				if(!ObjectFunctions.isNullOrEmpty(bookSettingsQuery)){
					tcBookSettingsList = adminManager.getAll(TcBookSettings.class, bookSettingsQuery.toString());
					if(ObjectFunctions.isNotNullOrEmpty(tcBookSettingsList)){
						for(TcBookSettings tcBookSetting: tcBookSettingsList){
							if(ObjectFunctions.isNotNullOrEmpty(tcBookSetting.getClasses())){
								for(ClassName clas : tcBookSetting.getClasses()){
									tcBookSettingsMap.put(clas.getId(), tcBookSetting);
								}
							}
						}
					}
				}
				if (ObjectFunctions.isNullOrEmpty(vwStudentList) || ObjectFunctions.isNullOrEmpty(tcSettingsMap) || ObjectFunctions.isNullOrEmpty(tcBookSettingsMap)) {
					if(ObjectFunctions.isNullOrEmpty(tcSettingsMap)){
						if("templateSettings".equalsIgnoreCase(getSelectedId())){
							if(!"bookSettings".equalsIgnoreCase(getAnyTitle()) && "templateSettings".equalsIgnoreCase(getSelectedId()))
								adminManager.writeToFile("TC settings are not available. Please add TC settings.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
							else
								adminManager.writeToFile("TC settings are not available. Please add TC settings.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
						}else if("LC".equalsIgnoreCase(getSelectedId())){
							adminManager.writeToFile("LC settings are not available. Please add LC settings.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
						}
					}
					if(ObjectFunctions.isNullOrEmpty(vwStudentList)){
						if("templateSettings".equalsIgnoreCase(getSelectedId())){
							adminManager.writeToFile("Students are not avilable for generating TC.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
						}else if("LC".equalsIgnoreCase(getSelectedId())) {
							adminManager.writeToFile("Students are not avilable for generating LC.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
						}
					}
					if(ObjectFunctions.isNullOrEmpty(tcBookSettingsMap)){
						if("bookSettings".equalsIgnoreCase(getAnyTitle())){
							adminManager.writeToFile("Please create TC book settings.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
						}else{
							if(ObjectFunctions.isNullOrEmpty(tcSettingsMap) && ObjectFunctions.isNullOrEmpty(tcBookSettingsMap)){
								adminManager.writeToFile("LC settings are not available. Please add LC settings.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
							}else
							 adminManager.writeToFile("Please create LC book settings.",getSession().getServletContext().getRealPath(new StringBuffer(generatedTCsFilePath).append("readMe.doc").toString()));
						}
					}
				}else{
					Collections.sort(vwStudentList);
					educationTypeSubjects = adminManager.getAll("select CAST(CONCAT(studyClassId,':',group_concat(CONVERT(subjectName, CHAR) order by sortingOrder)) AS CHAR) from vw_studyClassSubjectDetails where academicYearId="+getUserAcademicYearId()+" and educationType is not null and language='N' group by studyClassId");
					if(ObjectFunctions.isNotNullOrEmpty(educationTypeSubjects)){
						for(String educationSubtyp : educationTypeSubjects){
							educationSubjectsMap.put(Long.valueOf(educationSubtyp.split(":")[0]),educationSubtyp.split(":")[1]);
						}
					}
			 		try{
			 			Object[] studAtt = null;
			 			Object[] lastpaidDeuDate = null;
			 			int totalWorkingDays=0;
			 			String endDate = null;
			 			AcademicYear academicYear= (AcademicYear)adminManager.get(AcademicYear.class,getUserAcademicYearId());
						if(!ObjectFunctions.isNullOrEmpty(academicYear)){
							if(DateFunctions.compare2Dates(new Date(),academicYear.getStartDate()) && DateFunctions.compare2Dates(academicYear.getEndDate(),new Date()))
								endDate = DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date());
	    					else if(new Date().after(academicYear.getEndDate()))
	    						endDate = DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, academicYear.getEndDate());
						if("D".equalsIgnoreCase(academicYear.getManageAttendanceBy())){
							totalWorkingDays = adminManager.fetchTotalWorkingDays(academicYear.getId(),endDate);
						}
						for(ViewStudentsTCDetails viewStudentPersonAccountDetails:vwStudentList){
							report = tcSettingsMap.get(viewStudentPersonAccountDetails.getClassName());
							tcBookSettings = tcBookSettingsMap.get(viewStudentPersonAccountDetails.getClassId());
							StudyClass studyClass=null;
							if(ObjectFunctions.isNullOrEmpty(report) || ObjectFunctions.isNullOrEmpty(tcBookSettings)){
								studentDOCXFilePath = new StringBuffer(generatedTCsFilePath).append("readMe").append(viewStudentPersonAccountDetails.getClassAndSection()).
								append("_").append(viewStudentPersonAccountDetails.getPersonFullName()).append("_").append(viewStudentPersonAccountDetails.getAdmissionNumber().replaceAll("/", "")).append(".doc");
								if(ObjectFunctions.isNullOrEmpty(report)){
									if("templateSettings".equalsIgnoreCase(getSelectedId())){
										adminManager.writeToFile("Please create TC settings.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
									}else{
										adminManager.writeToFile("Please create LC settings.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
									}
								}
								if(ObjectFunctions.isNullOrEmpty(tcBookSettings)){
									if("bookSettings".equalsIgnoreCase(getAnyTitle())){
										if(ObjectFunctions.isNullOrEmpty(report) && ObjectFunctions.isNullOrEmpty(tcBookSettings)){
											adminManager.writeToFile("Please create TC settings.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
										}else
											adminManager.writeToFile("Please create TC Book settings.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
											continue;
									}else{
										if(ObjectFunctions.isNullOrEmpty(report) && ObjectFunctions.isNullOrEmpty(tcBookSettings)){
											adminManager.writeToFile("Please create LC settings.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
										}else
											adminManager.writeToFile("Please create LC Book settings.",getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
										continue;
									}
								}
							}else{
								if("templateSettings".equalsIgnoreCase(getSelectedId()) && "bookSettings".equalsIgnoreCase(getAnyTitle())){
									studentDOCXFilePath = new StringBuffer(generatedTCsFilePath).append("TC_").append(viewStudentPersonAccountDetails.getClassAndSection()).
									append("_").append(viewStudentPersonAccountDetails.getPersonFullName()).append("_").append(viewStudentPersonAccountDetails.getAdmissionNumber().replaceAll("/", "")).append(".doc");
								}
								else{
									studentDOCXFilePath = new StringBuffer(generatedTCsFilePath).append("LC_").append(viewStudentPersonAccountDetails.getClassAndSection()).
									append("_").append(viewStudentPersonAccountDetails.getPersonFullName()).append("_").append(viewStudentPersonAccountDetails.getAdmissionNumber().replaceAll("/", "")).append(".doc");
								}
								if(viewStudentPersonAccountDetails.getSerialNumber() == 0 && "bookSettings".equalsIgnoreCase(getAnyTitle())){
									int startingSerialNo = tcBookSettings.getTcStartingNumber();
									transferCertificate=new TransferCertificate(); 
									transferCertificate.setBookSetting(tcBookSettings);
					                transferCertificate.setCustId(getUserCustId());
					                transferCertificate.setAccountId(viewStudentPersonAccountDetails.getAccountId());
					                transferCertificate.setCreatedById(getUser().getId());
					                transferCertificate.setCreatedDate(new Date());
					                transferCertificate.setSerialNumber(startingSerialNo++);
					                transferCertificate.setLastAccessDate(new Date());
					                transferCertificate.setLastUpdatedDate(new Date());
					                transferCertificate.setAdmissionNumber(viewStudentPersonAccountDetails.getAdmissionNumber());
					                transferCertificate.setClassName(viewStudentPersonAccountDetails.getClassName());
					                transferCertificate.setPersonName(viewStudentPersonAccountDetails.getFullName());
					                transferCertificate.setAcademicYearId(getUserAcademicYearId());
					                adminManager.save(transferCertificate);
					                viewStudentPersonAccountDetails.setTcSerialNumber(transferCertificate.getSerialNumber());
					                tcBookSettings.setTcStartingNumber(startingSerialNo);
					                tcBookSettings = (TcBookSettings)adminManager.saveOrUpdateObject(tcBookSettings);
					                tcBookSettingsMap.put(viewStudentPersonAccountDetails.getClassId(), tcBookSettings);
					                
								}
								else if(viewStudentPersonAccountDetails.getSerialNumber() == 0 && "lcbookSettings".equalsIgnoreCase(getAnyTitle())){
									int startingSerialNo = tcBookSettings.getTcStartingNumber();
									leavingCertificate=new LeavingCertificate(); 
									leavingCertificate.setBookSetting(tcBookSettings);
									leavingCertificate.setCustId(getUserCustId());
									leavingCertificate.setAccountId(viewStudentPersonAccountDetails.getAccountId());
									leavingCertificate.setCreatedById(getUser().getId());
									leavingCertificate.setCreatedDate(new Date());
					                leavingCertificate.setSerialNumber(startingSerialNo++);
					                leavingCertificate.setLastAccessDate(new Date());
					                leavingCertificate.setLastUpdatedDate(new Date());
					                adminManager.save(leavingCertificate);
					                viewStudentPersonAccountDetails.setTcSerialNumber(leavingCertificate.getSerialNumber());
					                tcBookSettings.setTcStartingNumber(startingSerialNo);
					                tcBookSettings = (TcBookSettings)adminManager.saveOrUpdateObject(tcBookSettings);
					                tcBookSettingsMap.put(viewStudentPersonAccountDetails.getClassId(), tcBookSettings);
								}
								if(StringFunctions.isNotNullOrEmpty(viewStudentPersonAccountDetails.getEducationType()) &&
										StringFunctions.isNotNullOrEmpty(educationSubjectsMap.get(viewStudentPersonAccountDetails.getClassSectionId()))){
								if("General Education".equalsIgnoreCase(viewStudentPersonAccountDetails.getEducationType())){
									viewStudentPersonAccountDetails.setGeneralEducationSubjects(educationSubjectsMap.get(viewStudentPersonAccountDetails.getClassSectionId()));								
								}else
									viewStudentPersonAccountDetails.setVocationalEducationSubjects(educationSubjectsMap.get(viewStudentPersonAccountDetails.getClassSectionId()));
								}
								
								if("D".equalsIgnoreCase(academicYear.getManageAttendanceBy())){
									if(totalWorkingDays >0 ){
										viewStudentPersonAccountDetails.setTotalWorkingDaysCount(totalWorkingDays);
										viewStudentPersonAccountDetails.setPresentDaysCount(totalWorkingDays - adminManager.fetchStudentAbsentiesCount(viewStudentPersonAccountDetails.getStudId(),endDate));
									}
								}else{
									studAtt = adminManager.get("select IFNULL(sum(totalWorkingDays),0) as totalWorkingDays,IFNULL(sum(noOfPresentDays),0) as noOfPresentDays from studentMonthlyAttendance where studentId="+viewStudentPersonAccountDetails.getStudId());
									if(!ObjectFunctions.isNullOrEmpty(studAtt)){
										if(!ObjectFunctions.isNullOrEmpty(studAtt[0]) && !ObjectFunctions.isNullOrEmpty(studAtt[1])){
										// for showing totalworkingdays is bedId and present days is classId with out decimal values -----Sunanda
											viewStudentPersonAccountDetails.setTotalWorkingDaysCount(((Double)studAtt[0]).intValue());
											viewStudentPersonAccountDetails.setPresentDaysCount(((Double)studAtt[1]).intValue());
											
										}studAtt=null;
									}
								}
								lastpaidDeuDate = adminManager.get("select id,paymentDate,paymentStatus from vw_studentFeePaymentDetails where studentId="+viewStudentPersonAccountDetails.getStudId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId()+" order by id DESC limit 1");
								if(!ObjectFunctions.isNullOrEmpty(lastpaidDeuDate)){
									Date feeDueDate=null;
									if(lastpaidDeuDate[1] !=null){
										feeDueDate= new SimpleDateFormat("yyyy-MM-dd").parse(lastpaidDeuDate[1].toString());
										viewStudentPersonAccountDetails.setFeeDueMonthAndYear(new SimpleDateFormat("MMM - yyyy").format(feeDueDate));
									}else{
										viewStudentPersonAccountDetails.setFeeDueMonthAndYear("");
									}
									lastpaidDeuDate=null;
								}
								try{
									context = report.createContext();
								   	context.put( "student", viewStudentPersonAccountDetails );
								   	String subjectNames=null;
								   	Properties prop=getResouceBundleURLConfiguraionPropertiesFileDetails();
									String[] custIds=prop.get("s.tcSubject.customerId").toString().split(",");
									for(String custId : custIds){
										if(Long.valueOf(custId)==getUserCustId()){
											studyClass=(StudyClass)adminManager.get(StudyClass.class, viewStudentPersonAccountDetails.getClassSectionId());
											log.debug("Subject Names :"+studyClass.getSubjectNames());
											subjectNames=studyClass.getSubjectNames();
											break;
										}
									}
									if(!StringFunctions.isNullOrEmpty(subjectNames))
										context.put( "subjNames", studyClass.getSubjectNames());
									else
										context.put( "subjNames", " ");
					            	out = new FileOutputStream(new File(getSession().getServletContext().getRealPath(studentDOCXFilePath.toString())));
					                report.process(context, out);
				            	}catch (Exception ex) {
				            		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				            		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
								}finally{
									out.close();
								}
				            	studentDOCXFilePath = null;
							}
							if("bookSettings".equalsIgnoreCase(getAnyTitle())){
								tcHistory=new TcHistory();
								tcHistory.setType(getAnyTitle());
								tcHistory.setIssuedDate(new Date());
								tcHistory.setAccountId(viewStudentPersonAccountDetails.getAccountId());
								tcHistory.setCreatedById(getUser().getId());
								ViewUserRoles chUser = (ViewUserRoles) adminManager.get(ViewUserRoles.class,"accountId="+getUser().getId());
								if(!ObjectFunctions.isNullOrEmpty(chUser)){
									tcHistory.setGeneratedBy(chUser.getRoleDescription());
								}
								tcHistory.setCreatedDate(new Date());
								tcHistory.setLastAccessDate(new Date());
								tcHistory.setLastUpdatedDate(new Date());
				                adminManager.save(tcHistory);
							}
							viewStudentPersonAccountDetails = null;
						 }
						}
						// Selected student(s) status from Active to Inactive
						if(StringFunctions.isNotNullOrEmpty(getEmpId())){
							String studentId[]=getEmpId().split(",");
							for(String studsId:studentId){
								if(Long.valueOf(studsId)!=0){
									Student student=(Student)adminManager.get(Student.class, Long.valueOf(studsId));
									if(!ObjectFunctions.isNullOrEmpty(student)){
										TransferCertificate transCerObj=(TransferCertificate) adminManager.get(TransferCertificate.class,"accountId="+student.getAccount().getId());
											if(!ObjectFunctions.isNullOrEmpty(transCerObj)){
												User user = student.getAccount();
												if(!ObjectFunctions.isNullOrEmpty(user)){
													user.setAccountExpired(true);
													user.setLastUpdatedDate(new Date());
													user.setLastUpdatedById(getUser().getId());
													user.setLastAccessDate(new Date());
													user.setEnabled(false);		
													student.setDescription("TC generated on "+DateFormatter.formatDate(DateFormatter.DDMMCCYY_PATTERN,new Date()));
													
													student.setStatus(Constants.NO_STRING);
													student.setAccount(user);
													student.setLastUpdatedById(getUser().getId());
													student.setCreatedDate(new Date());
													adminManager.save(student);
													adminManager.updateClassAndSectionCapacity(getUserCustId(),getUserAcademicYearId(),student.getClassNameId(),0);
													
											}user=null;
										}transCerObj=null;
									}student=null;
								}
							}
						}
	 				}catch (Exception ex) {
	 					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	 					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
					}
				}
				//For generating zip file 
				directory = new File(getSession().getServletContext().getRealPath(generatedTCsFilePath.toString()));
				StringFunctions.zipFiles(directory,zipOutStream);
				FileUtils.deleteDirectory(directory);
				zipOutStream = null;
				customer = null;
				tcTemplateFilePath = null;
		 		generatedTCsFilePath = null;
		}
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}finally{
			studentsListQuery = null;
	        bookSettingsQuery = null;
	        tcBookSettingsList = null;
	        tcSettingsList = null;
	        tcSettingsMap = null;
	        tcBookSettingsMap = null;
			educationSubjectsMap = null;
			educationTypeSubjects = null; 
			directory = null;
			tcSettings = null;
			query = null;
			templateFile= null;
	 		report = null;
	 		context = null;
			tcBookSettings = null;
			studentDOCXFilePath = null;
			vwStudentList = null;
		}
		return null;
	}
 @Action(value = "ajaxDoGetTcHistoryGeneration", results = { @Result(location = "academic/tcGeneration/ajaxViewTcHistoryLists.jsp", name = "success") })
	public String ajaxDoGetTcHistoryGeneration() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetTcHistoryGeneration' method");
		}
		try {
			List<TransferCertificate> objectList= null;
			List<TcHistory> tempList = null;
			objectList = adminManager.getAll(TransferCertificate.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
			if(!ObjectFunctions.isNullOrEmpty(objectList))
			{
				for(TransferCertificate accountId : objectList){
					if(!ObjectFunctions.isNullOrEmpty(accountId)){
						tempList =  adminManager.getAll(TcHistory.class, "accountId="+accountId.getAccountId());
						if(!ObjectFunctions.isNullOrEmpty(tempList)){
							getTempList().addAll(tempList);
						}
					}
				}
				setTempList(getTempList());
				setObjectList(objectList);
			}
			objectList = null;
			
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
 }
 @Actions( { @Action(value = "ajaxCheckStudySubjectValuesAvailableOrNot", results = { @Result(type = "json", name = "success", params = {
		    "includeProperties", "autoCheck" }) }) })
	    public String ajaxCheckStudySubjectValuesAvailableOrNot() throws URTUniversalException {
			if (log.isDebugEnabled()) {
			    log.debug("Entering 'ajaxCheckStudySubjectValuesAvailableOrNot' method");
			}
		try {
			 List studySubjectNameList=null;
			 String text=getSelectedId().replace(",","0");			
			 String desc=text.replace("?",",");
			 if(!StringFunctions.isNullOrEmpty(desc)){
				String[] keyWordAndId=desc.split(",");	
				String str=keyWordAndId[1].replace("keyWord=","");			
				String sdk=str.replace("0",",");
				if(Long.valueOf(keyWordAndId[0].toString()) > 0){
					studySubjectNameList = adminManager.getAll(StudySubject.class," custId="+getUserCustId()+" and id !="+Long.valueOf(keyWordAndId[0].toString())+" and academicYearId="+ getUserAcademicYearId() + " and name ='"+sdk.trim()+"'");
			    }
				else{	    		
			    	studySubjectNameList = adminManager.getAll(StudySubject.class," custId="+getUserCustId()+" and academicYearId="+ getUserAcademicYearId() + " and name ='"+sdk.trim()+"'");
			    }
				if (studySubjectNameList.size() > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
		    }
		} catch (Exception ex) {
		    log.error("Entering into 'catch block':" + ex.getMessage());
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
    @Actions( { @Action(value = "ajaxCheckStudyNumnerValuesAvailableOrNot", results = { @Result(type = "json", name = "success", params = {
		    "includeProperties", "autoCheck" }) }) })
	    public String ajaxCheckStudyNumnerValuesAvailableOrNot() throws URTUniversalException {
			if (log.isDebugEnabled()) {
			    log.debug("Entering 'ajaxCheckStudyNumnerValuesAvailableOrNot' method");
			}
		try {
			List studySubjectNameList=null;
			String text=getSelectedId().replace("?keyWord=", ",");
      if(!StringFunctions.isNullOrEmpty(text)){
      	String[] keyWordAndId=text.split(",");
      	if (!StringFunctions.isNullOrEmpty(keyWordAndId[1].toString())) {
	      		if(Long.valueOf(keyWordAndId[0].toString()) > 0){
		    		studySubjectNameList = adminManager.getAll(StudySubject.class," custId="+getUserCustId()+" and id !="+Long.valueOf(keyWordAndId[0].toString())+" and academicYearId="+ getUserAcademicYearId() + " and subjectNumber like '%"+keyWordAndId[1].toString().trim()+"'");
		    	}else{
		    		studySubjectNameList = adminManager.getAll(StudySubject.class," custId="+getUserCustId()+" and academicYearId="+ getUserAcademicYearId() + " and subjectNumber like '%"+keyWordAndId[1].toString().trim()+"'");
		    	}
				if (studySubjectNameList.size() > 0) {
				    setAutoCheck("1");
				} else {
				    setAutoCheck("0");
				}
		    }
      }
		} catch (Exception ex) {
		    log.error("Entering into 'catch block':" + ex.getMessage());
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	    }
 @Actions( { @Action(value = "ajaxCheckStudyDescriptionValuesAvailableOrNot", results = { @Result(type = "json", name = "success", params = {
		    "includeProperties", "autoCheck" }) }) })
	    public String ajaxCheckStudyDescriptionValuesAvailableOrNot() throws URTUniversalException {
			if (log.isDebugEnabled()) {
			    log.debug("Entering 'ajaxCheckStudyDescriptionValuesAvailableOrNot' method");
			}
		try {
			List studySubjectNameList=null;
			String text=getSelectedId().replace("?keyWord=", ",");
      if(!StringFunctions.isNullOrEmpty(text)){
      	String[] keyWordAndId=text.split(",");
      	if (!StringFunctions.isNullOrEmpty(keyWordAndId[1].toString())) {
		    	if(Long.valueOf(keyWordAndId[0].toString()) > 0){
		    		studySubjectNameList = adminManager.getAll(StudySubject.class," custId="+getUserCustId()+" and id !="+Long.valueOf(keyWordAndId[0].toString())+" and academicYearId="+ getUserAcademicYearId() + " and description like '%"+keyWordAndId[1].toString().trim()+"'");
		    	}else{
		    		studySubjectNameList = adminManager.getAll(StudySubject.class," custId="+getUserCustId()+" and academicYearId="+ getUserAcademicYearId() + " and description like '%"+keyWordAndId[1].toString().trim()+"'");
		    	}
				if (studySubjectNameList.size() > 0) {
				    setAutoCheck("1");
				} else {
				    setAutoCheck("0");
				}
		    }
      }
		} catch (Exception ex) {
		    log.error("Entering into 'catch block':" + ex.getMessage());
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	    }
 	@Action(value = "ajaxDoEditAdmittedStudents", results = { @Result(location = "admission/ajaxEditAdmittedStudentDetails.jsp", name = "success") })
	public String ajaxDoEditAdmittedStudents() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditAdmittedStudents' method");
		}
		try {
			setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
			setCastSettingList(adminManager.getAll(CastSettings.class, "custId="+getUserCustId()));
			setPresentList(adminManager.getAll(CommonType.class, "custId="+getUserCustId()+" and type='RELIGION'"));
			setTempList2((List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST));
			setSchoolCategoriesList(adminManager.getAll(SchoolCategory.class, "custId="+getUserCustId()));
			if(!StringFunctions.isNullOrEmpty(getAnyId())){
				setNewUser((User)adminManager.get(User.class,Long.valueOf(getAnyId())));
				setObjectList(adminManager.getSubcastSettingsByCastIdAndCustId(getNewUser().getPerson().getCastId(),getUserCustId()));
				/**   * @Description 3rd Apr cvs: Modularization sorting subject order */
				setCustomer(getCustomerByCustId());
				setStudent((Student)adminManager.get(Student.class,"custId="+getUserCustId()+" and  accountId="+getNewUser().getId()+" and description is null"));
				setClassList(adminManager.getAll(ClassName.class,"custId="+getUserCustId()+" and (admissionsOpen='"+Constants.YES_STRING+"' or id="+getStudent().getClassNameId()+") and academicYearId="+getStudent().getAcademicYearId()));
				if(ObjectFunctions.isNotNullOrEmpty(getClassList())){
					Collections.sort(getClassList());
				}
				if(!ObjectFunctions.isNullOrEmpty(getCustomer()) && getCustomer().isTransportModuleStatus()){
					setCastSettings((CastSettings)adminManager.get(CastSettings.class,"id =" + getNewUser().getPerson().getCastId() + " and custId = "+ getUserCustId()));
					if(!ObjectFunctions.isNullOrEmpty(getStudent()) && getStudent().getId() > 0)
					{
						setTempId(getStudent().getId());	
						setAcademicYearId(getStudent().getAcademicYearId());
					}							
					ajaxViewVehicleInfo();
				}
				if(getStudent().getAccount().getPerson().isPhId())
				{
					setTempList(null);
					StringBuffer pathName = new StringBuffer(generateStudentDisabilityUploadFilepath(getCustomerByCustId(),getStudent().getAccount().getPerson().getFirstName().replaceAll(" ", "_"),0,getStudent().getAccount().getId()));
					if(StringFunctions.isNotNullOrEmpty(pathName.toString()))
					{
				    	File destFile = new File(getSession().getServletContext().getRealPath(pathName.toString()));
				    	String[] children = destFile.list();
						if(!ObjectFunctions.isNullOrEmpty(children))
						{
							log.debug(children.length);
							Attachment attachment = new Attachment();
					    	for (int i=0; i<children.length; i++) {
				            	attachment = new Attachment();
				                String filename = children[i];
				                attachment.setFileName(filename);
				                getTempList().add(attachment);
				            }
					    	attachment = null;
						}
				    }
				}
			
		}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 	@Actions( { @Action(value = "ajaxUpdateAdmittedStudentDetails", results = { @Result(location = "admission/ajaxViewStudentsAcademicSearch.jsp", name = "success"),
 																				@Result(location = "admission/ajaxEditAdmittedStudentDetails.jsp", name = "committedFeeError"),
 																				@Result(location = "admission/ajaxViewAdmittedStudents.jsp", name = "searchResult")}) })
	public String ajaxUpdateAdmittedStudentDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUpdateAdmittedStudentDetails' method");
		}
		try {
			User user= (User)adminManager.get(User.class,getNewUser().getId());
	        if(!ObjectFunctions.isNullOrEmpty(user)){
	        	Customer customer = getCustomerByCustId();
	        	ViewStudentPersonAccountDetails stdClass = (ViewStudentPersonAccountDetails)adminManager.get(ViewStudentPersonAccountDetails.class,"accountId="+user.getId()+" ");
				if(!ObjectFunctions.isNullOrEmpty(stdClass)){
					long studImage = 0;
					if(!ObjectFunctions.isNullOrEmpty(stdClass.getImageId()))
						studImage = Long.valueOf(stdClass.getImageId());
					UserImage attachment;
					if (getUploadFileName() != null) {
						try {
							attachment = profileImageUpload(Constants.FILE_TYPE_IMAGE,customer.getId(),getUserAcademicYearId(),studImage);
							if (!ObjectFunctions.isNullOrEmpty(attachment)) {
								user.setProfileImage(attachment);
							}
						} catch (Throwable e) {
							e.printStackTrace();//RayGunException raygex = new RayGunException();raygex.sendRayGunException(e);raygex=null;
						}
					}
					else if(!StringFunctions.isNullOrEmpty(getParamValue("customerImage"))){
						try {
								attachment = captureStudentImage(getParamValue("customerImage"),Constants.FILE_TYPE_IMAGE,customer);					
								if (!ObjectFunctions.isNullOrEmpty(attachment)) {
									user.setProfileImage(attachment);
								}
						}
						catch (Throwable e) {
								e.printStackTrace();//RayGunException raygex = new RayGunException();raygex.sendRayGunException(e);raygex=null;
							}
						
					}
					attachment =null;
				}				
	            Person person= user.getPerson();
	            Address pAddress= user.getPrimaryAddress();
	            Address tAddress= user.getTempararyAddress();
	            Student student= (Student)adminManager.get(Student.class, "accountId="+user.getId()+" and custId="+getUserCustId());
	            if(!ObjectFunctions.isNullOrEmpty(student)){
	            	if(getStudent().getCommittedFee()!=0){
						prepareStudentSchoolFeeSettingList(student);
						addCommittedFeeActionMessages(studentManager.validateCommittedFeeConstrains(getUserCustId(),getStudent().getAcademicYear().getId(),getStudent().getCommittedFee(),getStudent().getClassNameClassId().getId(),getStudent().getClassSection().getId(),getStudent().getCategoryId(),getTempString()));
						if(!ObjectFunctions.isNullOrEmpty(getCollectionAndFeeDuesList())){
							setAnyId(String.valueOf(user.getId()));
							setAcademicYearId(getStudent().getAcademicYear().getId());
							ajaxDoEditAdmittedStudents();
							return "committedFeeError";
						}
					}
	            	student.setTransportMode(getAlertSendType());
	            	if("T".equals(getAlertSendType())){
	            		if(StringFunctions.isNotNullOrEmpty(getAnyId()))
		                {
		                    RouteBoardingPoints boardingPoint = (RouteBoardingPoints) adminManager.get(RouteBoardingPoints.class, "id=" +getAnyId());
		                    if(!ObjectFunctions.isNullOrEmpty(boardingPoint))
		                    {
		                        student.setRouteBoardingPoints(boardingPoint);
		                    }
		                }else{
		                	student.setRouteBoardingPoints(null);
		                }
		                if(!StringFunctions.isNullOrEmpty(getEventId())){
		            	   student.setVehicleAcademicDetailsId(Long.valueOf(getEventId()));
		                }else{
		                	student.setVehicleAcademicDetailsId(null);
		                }
	            	}else{
	            		student.setRouteBoardingPoints(null);
	            		student.setVehicleAcademicDetailsId(null);
	            	}
	            	if(!StringFunctions.isNullOrEmpty(getStudent().getHostelMode()))
	            	student.setHostelMode(getStudent().getHostelMode());
	            	else
	            	student.setHostelMode("D");
	            	
	            	if(!StringFunctions.isNullOrEmpty(getStudent().getBplStatus()))
		            	student.setBplStatus(getStudent().getBplStatus());
		            else
		            	student.setBplStatus("N");
	            	if(!StringFunctions.isNullOrEmpty(getStudent().getRteStatus()))
		            	student.setRteStatus(getStudent().getRteStatus());
		            else
		            	student.setRteStatus("N");
	            	if("true".equalsIgnoreCase(getPlTitle()))
	            		getNewUser().getPerson().setPhId(true);
	            	else
	            		getNewUser().getPerson().setPhId(false);
	                person.copyFrom(getNewUser().getPerson());
	                StringBuffer pathNames = new StringBuffer(generateStudentDisabilityUploadFilepath(getCustomerByCustId(),getNewUser().getPerson().getFirstName().replaceAll(" ", "_"),0,student.getAccount().getId()));
					if(!StringFunctions.isNullOrEmpty(pathNames.toString())){
						if(getFileUpload().size()!=0){
					    	for(int i=0;i<getFileUpload().size();i++){
					    		 File file = getFileUpload().get(i);
					    		 if(!ObjectFunctions.isNullOrEmpty(file)){
					    			 String fileName = getFileUploadFileName().get(i);
						    		 File destDir = new File(getSession().getServletContext().getRealPath(pathNames+fileName));
									 FileUtils.copyFile(file, destDir);	 
					    		 }
					    	}
					    }
					}
	                user.setPerson(person);
		            if(!ObjectFunctions.isNullOrEmpty(getNewUser().getPrimaryAddress().getStreetName()) || !ObjectFunctions.isNullOrEmpty(getNewUser().getPrimaryAddress().getPostalCode()) || !ObjectFunctions.isNullOrEmpty(getNewUser().getPrimaryAddress().getCity()) || !ObjectFunctions.isNullOrEmpty(getNewUser().getPrimaryAddress().getState())){
		            	if(!StringFunctions.isNullOrEmpty(getNewUser().getPrimaryAddress().getState())){
		            		Object[] stateId = adminManager.get("select id,stateCode from State where stateCode='"+getNewUser().getPrimaryAddress().getState()+"'");
		            		if(!ObjectFunctions.isNullOrEmpty(stateId))
		            			getNewUser().getPrimaryAddress().setStateId(Long.valueOf(stateId[0].toString()));
		            	}
		                if(ObjectFunctions.isNullOrEmpty(pAddress))
		                    pAddress= new Address();
	                    pAddress.copyFrom(getNewUser().getPrimaryAddress());
	                    user.setPrimaryAddress(pAddress);
		            }else{
		            	user.setPrimaryAddress(null);
		            }
		            if(!ObjectFunctions.isNullOrEmpty(getNewUser().getTempararyAddress().getStreetName()) || !ObjectFunctions.isNullOrEmpty(getNewUser().getTempararyAddress().getPostalCode()) || !ObjectFunctions.isNullOrEmpty(getNewUser().getTempararyAddress().getCity()) || !ObjectFunctions.isNullOrEmpty(getNewUser().getTempararyAddress().getState())){
		                if(ObjectFunctions.isNullOrEmpty(tAddress))
		                    tAddress= new Address();
		                tAddress.copyFrom(getNewUser().getTempararyAddress());
		                user.setTempararyAddress(tAddress);
		            }else
		            	user.setTempararyAddress(null);
		            //Siva: 01 JUL 2016 - Saving the account object individually
		            adminManager.save(user);
			        student.setAccount(user);
			        student.setProfileImage(user.getProfileImage());
			        student.setOutSideSchoolDuty(getStudent().getOutSideSchoolDuty());
			        student.setGoals(getStudent().getGoals());
			        student.setStrengths(getStudent().getStrengths());
			        student.setInterestsAndHobbies(getStudent().getInterestsAndHobbies());
			        student.setResponsibilities(getStudent().getResponsibilities());
			        student.setAchievements(getStudent().getAchievements());
			        student.setRemarks(getStudent().getRemarks());
			        student.setLastUpdatedDate(new Date());
			        setAcademicYearId(student.getAcademicYearId());
			        adminManager.save(student);
					if(!StringFunctions.isNullOrEmpty(getAnyTitle()) || !StringFunctions.isNullOrEmpty(getSelectedId()) || !StringFunctions.isNullOrEmpty(getClassId())){
						ajaxAdmittedStudents();
						 return "searchResult";
					}
					onlineApplicationDetails(); 
					ajaxViewAdmittedAdmiddions();
			        super.addActionMessage("Student details updated successfully.");
	            }
	     }
        } catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 	@Actions( {@Action(value = "ajaxDeleteTCBookSettings", results = {@Result(location = "academic/tcGeneration/ajaxTcUploadSettings.jsp", name = "success") }),
 		@Action(value = "ajaxDeleteLCBookSettings", results = {@Result(location = "academic/tcGeneration/ajaxAddLcSettings.jsp", name = "success")})
 		})
 	public String ajaxDeleteTCBookSettings() throws URTUniversalException {
 		if (log.isDebugEnabled()) {
 			log.debug("Entering 'ajaxDeleteTCBookSettings' method");
 		}
 		try {
 			if(getTempId()>0){
				adminManager.remove("tcBookSettingsClasses", "tcBookId="+getTempId());
				if("bookSettings".equalsIgnoreCase(getTempString())){
					adminManager.remove("transferCertificate","bookSettingId="+getTempId());
				}else
				adminManager.remove("leavingCertificate","bookSettingId="+getTempId());
				adminManager.remove(TcBookSettings.class, getTempId());
				super.addActionMessage("Successfully deleted TC book settings.");
 			}
 		} catch (Exception ex) {
 			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
 			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
 		}finally{
 			ajaxTcSettings();
 		}
 		return SUCCESS;
 	}
 	
 
 /** Removed PrepareAcademicYearId() and used getUserAcademicYearId()  -- Prasad 17th Apr 13 */
 
 /**  * @Description 10rd Apr 13 cvs: Modularization  new requirement for appaly leaves */
 @Actions( { @Action(value = "ajaxDoApplyStaffLeave", results = { @Result(location = "staff/leaves/ajaxAppalyLeaves.jsp", name = "success") }) })
	public String ajaxDoApplyStaffLeave() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoApplyStaffLeave' method");
		}
		try {
			 setTempId1(getTempId());
			 setLeave(null);
			 loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			if(!ObjectFunctions.isNullOrEmpty(getAcademicYear())){
				ViewUserRoles userRoles=adminManager.getViewUserRolesByUserIdAndCustId(getTempId(),getUserCustId(),Constants.NO_STRING);
				if(!ObjectFunctions.isNullOrEmpty(userRoles) && !ObjectFunctions.isNullOrEmpty(userRoles.getRoleId())){
					setLeaveManagement(adminManager.getLeaveManagementByRoleName(userRoles.getRoleId(), getUserCustId(),getUserAcademicYearId()));
				}
				if(!ObjectFunctions.isNullOrEmpty(getLeaveManagement())){
					if(getLeaveManagement().getCasualLeaves() == 0 && getLeaveManagement().getSickLeaves() == 0 && getLeaveManagement().getEarnedLeaves() == 0) {
						setTempString("LNA"); //Ravi Theja Here set tempString LNA, LNA means Leaves count not assign to particualr UserRoles.
					}
				}
				userRoles= null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 /** Removed PrepareAcademicYearId() and used GetCurrentAcademicYear() to set academicYear value -- Prasad 17th Apr 13 */
 /** Change the code for attendancd by venkatesh on 09/12/2013 */
 @Actions( { @Action(value = "ajaxAddApplyStaffLeave", results = { @Result(location = "leave/ajaxViewStaffLeaveDetailsForAdmin.jsp", name = "success") }) })
	public String AddApplyStaffLeave() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'AddApplyStaffLeave' method");
		}
		try {
			if (!ObjectFunctions.isNullOrEmpty(getCurrentAcademicYear())){
				User user = (User) adminManager.get(User.class, getTempId1());
				getLeave().setUser(user);
				getLeave().setAcademicYear(getCurrentAcademicYear());
				getLeave().setLastUpdatedDate(new Date());
				getLeave().setLastAccessDate(new Date());
				getLeave().setLeaveStatus("A");
				getLeave().setCustId(getUserCustId());
				getLeave().setSupervisorId(user.getId());
				if(getLeave().isHalfDay()){
					if(!ObjectFunctions.isNullOrEmpty(getLeave().getSessionType())){
						getLeave().setSessionType(getLeave().getSessionType());
					}else
						getLeave().setSessionType("M");
					getLeave().setHalfDay(Boolean.TRUE);
				}else
					getLeave().setSessionType(null);
				
				setLeave((Leave) adminManager.save(getLeave()));
				if(!ObjectFunctions.isNullOrEmpty(getLeave().getUser().getPerson().getMobileNumber())){
					setAnyTitle("approve");
					getMobileNumbersSet().add(getLeave().getUser().getPerson().getMobileNumber());
					int sentSmsCount=staffManager.getTotalSmsCount(getUserCustId(),getUserAcademicYearId());
					int allottedSmsCount = (int) getCurrentAcademicYear().getAllotedsms()+(int) getCurrentAcademicYear().getPaidSms();
					if(!ObjectFunctions.isNullOrEmpty(getMobileNumbersSet()) && (allottedSmsCount!=0 && allottedSmsCount > sentSmsCount))
					communicationManager.SendSmsToAdminAndStaff(getAnyTitle(),getMobileNumbersSet(),getLeave().getCustId(),getUser(),getLeave().getAcademicYear(),getLeave());
				}
				Calendar cal=Calendar.getInstance();
				cal.setTime(getLeave().getStartDate());
				SchoolHolidays holiday=null;
				long i = 0;
				for(Calendar startDate=cal;DateFunctions.compare2Dates(getLeave().getEndDate(), startDate.getTime());startDate.add(Calendar.DATE, 1)){
					holiday=adminManager.getHolidayByCustIdAndAcademicYearId(getUserCustId(),getUserAcademicYearId(),DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, startDate.getTime()),0,null,null,"holidayDateLike");
					StaffDailyAttendance attendance=null;
					if(ObjectFunctions.isNullOrEmpty(holiday)){
						attendance=(StaffDailyAttendance) staffManager.get(StaffDailyAttendance.class, "accountId = "+getLeave().getAccountId()+" and attendanceDate='"+DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, startDate.getTime())+"'");
						if(ObjectFunctions.isNullOrEmpty(attendance)){
							attendance=new StaffDailyAttendance();
							attendance.setCreatedById(getUser().getId());
						}else
						attendance.setLastUpdatedById(getUser().getId());
						attendance.setAccountId(getLeave().getAccountId());
						attendance.setAttendanceDate(startDate.getTime());
						attendance.setCreatedDate(new Date());
						attendance.setLastAccessDate(new Date());
						attendance.setLastUpdatedDate(new Date());
						attendance.setCustId(getUserCustId());
						attendance.setLeaveRequest('A');
						attendance.setLeaveType(getLeave().getLeaveType());
						if(getLeave().isHalfDay()){
							if(getLeave().getLeavesCount()==0.5 || i!=0){
								if("M".equalsIgnoreCase(getLeave().getSessionType())){
									attendance.setPresent(Boolean.FALSE);
								    attendance.setAfternoonSession(Boolean.TRUE);
								    attendance.setLeaveSessionType("M");
								}else{
								    attendance.setAfternoonSession(Boolean.FALSE);
									attendance.setPresent(Boolean.TRUE);
									attendance.setLeaveSessionType("A");
								}
							}else{
								if(i==0){
									attendance.setPresent(Boolean.FALSE);
								    attendance.setAfternoonSession(Boolean.FALSE);
								    attendance.setLeaveSessionType(null);
								}
							}
						}else{
							attendance.setPresent(Boolean.FALSE);
						    attendance.setAfternoonSession(Boolean.FALSE);
						    attendance.setLeaveSessionType(attendance.getLeaveSessionType());
						}
						attendance.setAcademicYearId(getLeave().getAcademicYearId());
						//attendance.setPresent(Boolean.FALSE);
						adminManager.save(attendance);
						i=getLeave().getId();
						attendance=null;
					}
				}
				super.addActionMessage("Leave approved successfully");
				user=null;
			}
			ajaxViewStaffLeaveDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 @Actions( { @Action(value = "ajaxCheckskillTypeNames", results = { @Result(type = "json", name = "success", params = {"includeProperties", "autoCheck" }) }) })
	public String ajaxCheckskillTypeNames() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckskillTypeNames' method");
		}
		try {
			String skillName = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(skillName)) {
				List skillTypeList = adminManager.getAll(CommonType.class, " custId=" + getUserCustId()+ " and skillTypeName like '" + skillName.trim()+ "' and type='SKILLTYPE'");
				if (ObjectFunctions.isNullOrEmpty(skillTypeList)) {
					setAutoCheck("0");
				} else if (skillTypeList.size() > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
 	/*
	* Removed prepareAcademicYearId and used getUserAcademicYearId() done by venkatesh - 04-19-2013
	*/
	@Actions( { @Action(value = "adminManageStaffAndStudent", results = { @Result(location = "../admin/staff/staffHome.jsp", name = "success") }) })
	public String adminManageStaffAndStudent() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'adminManageStaffAndStudent' method");
		}
		try {
			getCustomerAndStudyClassAndAcademicYear();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	/**  * @Description 25th Apr 13 Ganesh: to show the admission academic planner in header */
	@Actions({ @Action(value = "manageAdmissionSettings", results = { @Result(location = "admission/manageAdmissionSettings.jsp", name = "success") }) })
	public String manageAdmissionSettings()throws URTUniversalException{
		if(log.isDebugEnabled()){
			log.debug("Entering 'manageAdmissionSettings' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getAnyId()))
			 setAdmissionSettings((AdmissionSettings)adminManager.get(AdmissionSettings.class, Long.valueOf(getAnyId())));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxCheckAdmissionNumberAvailableOrNot", results = { @Result(type = "json", name = "success", params = { "includeProperties", "autoCheck" }) }) })
	public String ajaxCheckAdmissionNumberAvailableOrNot() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckAdmissionNumberAvailableOrNot' method");
		}
		try {
			List admissionNumberList = null;
			String admissionNumber = null;
			if(!StringFunctions.isNullOrEmpty(getAnyId())){
				String selectedId = getAnyId().replace("?keyWord=","-");
					String[] AdminNumber = selectedId.split("-");
					String accountId = AdminNumber[0];
					 admissionNumber =AdminNumber[1];
					if (StringFunctions.isNotNullOrEmpty(admissionNumber)) {
						 admissionNumberList = adminManager.getAll(User.class," custId="+getUserCustId()+" and admissionNumber like '"+admissionNumber.trim()+"' and id not in("+accountId+")");
					}
					
					if (admissionNumberList.size() > 0) {
					    setAutoCheck("1");
					} else {
					    setAutoCheck("0");
					}
			}
			else{
				 String text=getSelectedId().replace(",","0");			
				 String desc=text.replace("?",",");
				 if(!StringFunctions.isNullOrEmpty(desc)){
					String[] keyWordAndId=desc.split(",");	
					String str=keyWordAndId[1].replace("keyWord=","");			
					String sdk=str;//.replace("0",",") /*@Ganesh - I removed replace command because if I put this one when I give admission number with "0" like 1270 it is replacing like 127, this is wrong but some other scenario we added 0 but that one is not coming as of now. */
					if(getCustomerByCustId().isAddStudentsSameAdmissionNumber())
					{
						StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, "id="+keyWordAndId[0].toString());
						List<ViewStudentClassDetails> viewStudentClassDetailsList = studentManager.getAll(ViewStudentClassDetails.class,"custId ="+getUserCustId()+" and classId ="+ studyClass.getClassNameClassId().getId()+ " and accountExpired!='"+Constants.YES_STRING+"' and admissionNumber='"+sdk.trim()+"'");
						studyClass = null;
						if(!ObjectFunctions.isNullOrEmpty(viewStudentClassDetailsList))
						{
							if (viewStudentClassDetailsList.size() > 0) {
								setAutoCheck("1");
							} else {
								setAutoCheck("0");
							}
						}
						else {
							setAutoCheck("0");
						}
						viewStudentClassDetailsList = null;
					}
					else
					{
						List<User> userDetailsList = studentManager.getAll(User.class,"custId ="+getUserCustId()+" and accountExpired!='"+Constants.YES_STRING+"' and admissionNumber='"+sdk.trim()+"'");
						if(!ObjectFunctions.isNullOrEmpty(userDetailsList))
						{
							if (userDetailsList.size() > 0) {
								setAutoCheck("1");
							} else {
								setAutoCheck("0");
							}
						}
						else {
							setAutoCheck("0");
						}
					}
			    }
			}
			
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {
		@Action(value = "ajaxViewAllClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxViewClassAssignmentList.jsp", name = "success") }),
		@Action(value = "ajaxViewStaffClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxViewStaffClassAssignmentList.jsp", name = "success") })

	})
	public String doViewAllClassAssignment() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewAllClassAssignment' method");
		}
		try {
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			// If Admin get all the classes for his/her school
			if (!StringFunctions.isNullOrEmpty(getClassId())) {
				setStudyClass((StudyClass)adminManager.get(StudyClass.class, Long.valueOf(getClassId())));
			}
			if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) {
				setClassNameList(adminManager.GetAllStudyClasses(getUserCustId(),getAcademicYearId(),null));
				checkStudyClassHavingStudentsOrNot();
				setObjectList(getTempList2());
			} 
			else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole())  ||  "ROLE_HOD".equalsIgnoreCase(getUser().getUserRole()) || getUser().isSchoolAsstStaff())
			{
				List<ViewStaffSubjectsDetails> staffClassList =  adminManager.getAll(ViewStaffSubjectsDetails.class,"custId ="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" group by studyClassId");
				 if (!ObjectFunctions.isNullOrEmpty(staffClassList)){ 
					for (ViewStaffSubjectsDetails viewStaffSubjectsDetails : staffClassList) 
					{
						 long studentsCount = studentManager.getClassStudentsCountByClassId(viewStaffSubjectsDetails.getStudyClassId(),getUserCustId());
						 if(studentsCount > 0 )
							 getObjectList().add(viewStaffSubjectsDetails);
					}
				 }
			}else if( "ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole()))
			{
				Staff staff = (Staff)adminManager.get(Staff.class,"accountId="+getUser().getId());
				List<StudyClass> studyClassList = getAdminCoordinatorStudyClassesList(staff.getId(),getUserAcademicYearId());
				if (ObjectFunctions.isNotNullOrEmpty(studyClassList)) 
				{
					int studentsCount=0;
					ViewStaffSubjectsDetails viewStaffSubjectsDetails  = null;
					for (StudyClass studyClass : studyClassList) 
					{
						 studentsCount = studentManager.getClassStudentsCountByClassId(studyClass.getId(),getUserCustId());
						 if(studentsCount > 0 ){
							 viewStaffSubjectsDetails = new ViewStaffSubjectsDetails();
							 viewStaffSubjectsDetails.setAcademicYearId(studyClass.getAcademicYearId());
							 viewStaffSubjectsDetails.setClassId(studyClass.getClassId());
							 viewStaffSubjectsDetails.setStudyClassId(studyClass.getId());
							 viewStaffSubjectsDetails.setClassName(studyClass.getClassName());
							 viewStaffSubjectsDetails.setCustId(studyClass.getCustId());
							 viewStaffSubjectsDetails.setSection(studyClass.getSection());
							 getObjectList().add(viewStaffSubjectsDetails);
							if(ObjectFunctions.isNullOrEmpty(this.classNameList))
								{
									this.classNameList = new ArrayList();
								}
							 getClassNameList().add(studyClass);
							 viewStaffSubjectsDetails = null;
						 }
					}
				}
			}
			if(ObjectFunctions.isNullOrEmpty(getStudyClass()))
			{
				if(!ObjectFunctions.isNullOrEmpty(getClassNameList()))
				{
					setStudyClass((StudyClass)getClassNameList().get(0));
					setClassId(getStudyClass().getStrId());
				}
			} 
			prepareClassAssignmentDetailsList();
			if(StringFunctions.isNotNullOrEmpty(getClassId())){
				setSubjectsList(adminManager.getAll(ViewClassAssignmentDetails.class,"custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and classSectionId="+getClassId()+" group by subjectId"));
			}
		} catch (Exception ex) {
			log.error("Entering into 'catch block':" + ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}	
	@Actions( {
		@Action(value = "ajaxViewAssignmentByClass", results = { @Result(location = "../common/classAssignment/ajaxViewAssignmentByClass.jsp", name = "success") }),
		@Action(value = "ajaxViewAssignmentByStaffClass", results = { @Result(location = "../common/classAssignment/ajaxViewAssignmentByStaffClass.jsp", name = "success") })

	})
		public String ajaxViewAssignmentByClass() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewAssignmentByClass' method");
			}
			try {
				loadAcademicYearStartDateAndDates(getUserAcademicYearId());
				 setPlTitle(DateUtil.getDateTime(DateFormatter.MMDDYYYY_PATTERN,DateFunctions.add(academicYear.getEndDate(), 2)));
				setClassId(getClassSectionId());
				setSubjectId(getSubjectId());
				prepareClassAssignmentDetailsList();
			  
			} catch (Exception ex) {
				log.error("Entering into 'catch block':" + ex.getMessage());
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	@Actions( { @Action(value = "ajaxDoAddAssignment", results = { @Result(location = "../common/classAssignment/ajaxCreateClassAssignment.jsp", name = "success")}),
		 @Action(value = "ajaxDoAddStaffAssignment", results = { @Result(location = "../common/classAssignment/ajaxCreateStaffClassAssignment.jsp", name = "success")})
	 })
	 public String doAddClassAssignment() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAddAssignment' method");
			}
			try {
				if(!ObjectFunctions.isNullOrEmpty(getUserAcademicYearId()))
				{ 
					getSmsCount();
					setClassId(null);
					setCustomer(getCustomerByCustId());
					setClassAssignment(null);
					loadAcademicYearStartDateAndDates(getUserAcademicYearId());
					 setPlTitle(DateUtil.getDateTime(DateFormatter.MMDDYYYY_PATTERN,DateFunctions.add(academicYear.getEndDate(), 2)));
					 
					 if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) { //requirement changed for select the subject then show the respeced classes
						 checkStudyClassHavingStudentsOrNot();
					} 
					 
					else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_HOD".equalsIgnoreCase(getUser().getUserRole()) || getUser().isSchoolAsstStaff())
					{
						List<ViewStaffSubjectsDetails> staffClassList =  adminManager.getAll(ViewStaffSubjectsDetails.class,"custId ="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" group by studyClassId");
						 if (!ObjectFunctions.isNullOrEmpty(staffClassList)){ 
							for (ViewStaffSubjectsDetails viewStaffSubjectsDetails : staffClassList) 
							{
								 long studentsCount = studentManager.getClassStudentsCountByClassId(viewStaffSubjectsDetails.getStudyClassId(),getUserCustId());
								 if(studentsCount > 0 )
									 getObjectList().add(viewStaffSubjectsDetails);
							}
						 }
					}else if("ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())){
						List<BigInteger> studyClassIdsList = null;
						Object[] staff = adminManager.get("select id,description from staff where accountId="+getUser().getId()+" and  status='Y'");
						Long staffId = null;
						if(!ObjectFunctions.isNullOrEmpty(staff))
						{
							if(!ObjectFunctions.isNullOrEmpty(staff[0]))
							{
								staffId = Long.valueOf(staff[0].toString());
							}
						}
						if(!ObjectFunctions.isNullOrEmpty(staffId)){
							StringBuffer query = new StringBuffer("select studyClassId from classTeacher where teacherId in(").append(staffId+")");
							List<BigInteger> studyClassIds = adminManager.getAll(query.toString());
							StringBuffer sqlQuery = new StringBuffer("select st.id  from staffMultipleStudyClasses sm LEFT JOIN studyClass st  on (st.id=sm.studyClassId)") 
							.append(" where st.custId=").append(getUserCustId()).append(" and st.academicYearId="+getUserAcademicYearId()).append(" and sm.staffId=").append(staffId);

							List<BigInteger> coOrdinatorStudyClassIds = adminManager.getAll(sqlQuery.toString());
							if (ObjectFunctions.isNotNullOrEmpty(studyClassIds) && ObjectFunctions.isNotNullOrEmpty(coOrdinatorStudyClassIds)) {
								for(BigInteger obj:coOrdinatorStudyClassIds){
									if(!studyClassIds.contains(obj)){
										studyClassIds.add(obj);
									}
								}
								studyClassIdsList = studyClassIds;
							}else if (ObjectFunctions.isNotNullOrEmpty(studyClassIds)) {
								studyClassIdsList = studyClassIds;
							}else if (ObjectFunctions.isNotNullOrEmpty(coOrdinatorStudyClassIds)) {
								studyClassIdsList = coOrdinatorStudyClassIds;
							} 
							if (ObjectFunctions.isNotNullOrEmpty(studyClassIdsList)) 
							{
								String classSectionIdsString = StringFunctions.convertListToCommaDelimitedString(studyClassIdsList);
								List<StudyClass> studyClassList = adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(),classSectionIdsString);
								if (ObjectFunctions.isNotNullOrEmpty(studyClassList)) 
								{
									 int studentsCount=0;
									for (StudyClass studyClass : studyClassList) 
									{
										 studentsCount = studentManager.getClassStudentsCountByClassId(studyClass.getId(),getUserCustId());
										 if(studentsCount > 0 )
										  getStudyClassList().add(studyClass);
									     else
										  getTempList2().add(studyClass);
									}
								}
							}
						}
					}
				}
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	@Actions( { @Action(value = "ajaxGetClassSubjects", results = { @Result(location = "../common/classAssignment/ajaxGetStudyClassSubjects.jsp", name = "success") }) })
	public String ajaxGetStudClassSubjects() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStudClassSubjects' method");
		}
		try {
			int studentsCount=0;
			List<ViewStaffSubjectsDetails> staffClassList = null;
			if(getTempId2()>0){   // requirement changed for select the subject then show the respeced classes
				if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole())  
						|| "ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) {
						
						ajaxGetClassSubjectsSettings(getTempId2());
				} else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_HOD".equalsIgnoreCase(getUser().getUserRole()) || getUser().isSchoolAsstStaff()){
					Staff staff = (Staff) staffManager.get(Staff.class, " accountId = " + getUser().getId() + " and status = '" + Constants.YES_STRING+"'");
					if (!ObjectFunctions.isNullOrEmpty(staff)) {
						setTempList1(staffManager.getAll(ClassTeacher.class,"studyClassId="+getTempId2()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and teacherId="+staff.getId()+ " group by studySubjectId "));
						staff = null;
					}
				}
				//Siva: This is for showing class assignment in the subjects dropdown if they want to have assignment for multiple subjects
				if(!StringFunctions.isNullOrEmpty(getTempString()) && "Y".equalsIgnoreCase(getTempString())){
					if(!ObjectFunctions.isNullOrEmpty(getViewClassSubjectsSettings())){
						getViewClassSubjectsSettings().add(new ViewClassSubjectsSettings(0,"Assignment"));
					}
					if(!ObjectFunctions.isNullOrEmpty(getTempList1())){
						ClassTeacher clteacher = new ClassTeacher();
						clteacher.setStudySubject(new StudySubject());
						clteacher.getStudySubject().setId(0);
						clteacher.getStudySubject().setName("Assignment");
						getTempList1().add(clteacher);
					}
				}
				//End
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	
		@Actions( { @Action(value = "ajaxAddClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxViewClassAssignmentList.jsp", name = "success") ,
				 @Result(location = "../common/classAssignment/ajaxViewStaffClassAssignmentList.jsp", name = "staffAssignmentView") }),
			@Action(value = "ajaxAddStaffClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxViewStaffClassAssignmentList.jsp", name = "success") })})
		
			public String ajaxAddClassAssignment(){
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAddClassAssignment' method");
			}
			try {
				boolean newAssignmentOrNot=false;
				ClassAssignment classAssignment = null;
				List<String> classIds = new ArrayList<String>();
				if(!(ObjectFunctions.isNullOrEmpty(getClassAssignment()) && getClassAssignment().getSubjectId()>0))
				{
					AcademicYear academicYear = getCurrentAcademicYear();
					if(!ObjectFunctions.isNullOrEmpty(getClassAssignment().getId()))
					{
						classAssignment =	(ClassAssignment) adminManager.get(ClassAssignment.class,getClassAssignment().getId());
					}
					if(!ObjectFunctions.isNullOrEmpty(classAssignment))
					{
						classAssignment.setAssignmentDate(getClassAssignment().getAssignmentDate());
						classAssignment.setDescription(getClassAssignment().getDescription());
						setClassId(String.valueOf(classAssignment.getClassSectionId()));
						setSubjectId(Long.toString(classAssignment.getSubjectId()));
						setAttendanceDate(DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, classAssignment.getAssignmentDate()));
						classAssignment.setLastUpdatedById(getUser().getId());
						classAssignment.setLastUpdatedDate(new Date());
						classAssignment.setLastAccessDate(new Date());
					}
					else
					{
						newAssignmentOrNot=true;
						classAssignment = new ClassAssignment();
						classAssignment.setCreatedById(getUser().getId());
						classAssignment.setCreatedDate(new Date());
						classAssignment.setCustId(getUserCustId());
						classAssignment.setAssignmentDate(getClassAssignment().getAssignmentDate());
						classAssignment.setClassSectionId(getClassAssignment().getClassSectionId());
						classAssignment.setSubjectId(getClassAssignment().getSubjectId());
						classAssignment.setDescription(getClassAssignment().getDescription());
						classAssignment.setStatus(Constants.PENDING_STATUS);
						classAssignment.setIsDocsUpload(Constants.NO_STRING);
						setClassId(String.valueOf(getClassAssignment().getClassSectionId()));
						setSubjectId(Long.toString(getClassAssignment().getSubjectId()));
						setAttendanceDate(DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, getClassAssignment().getAssignmentDate()));
					}
					
					StudySubject studySubject = (StudySubject)adminManager.get(StudySubject.class,"custId ="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+getClassAssignment().getSubjectId());
					if(!ObjectFunctions.isNullOrEmpty(studySubject))
						 classAssignment.setSubjectName(studySubject.getName());
					
					classAssignment = (ClassAssignment) adminManager.merge(classAssignment);
					classIds.add(String.valueOf(classAssignment.getClassSectionId()));
					if(!ObjectFunctions.isNullOrEmpty(classAssignment))
					{
					    if(!ObjectFunctions.isNullOrEmpty(getFileUpload()))
					    {
					    	 Attachment attachment = null;
					    	 if(getFileUpload().size()!=0)
					    	 {
						    	  for(int i=0;i<getFileUpload().size();i++){
						    		 if(!ObjectFunctions.isNullOrEmpty(getFileUpload().get(i))){
						    			 classAssignment.setIsDocsUpload(Constants.YES_STRING);
							    		 File file = getFileUpload().get(i);
							    		 String fileName = getFileUploadFileName().get(i);
							    		 String filePath = adminManager.getUploadDocuments(file, academicYear.getAcademicYear(), fileName);
							    		 try {
							    			 	attachment = new Attachment();
												attachment.setFilePath(filePath.toString());
												attachment.setFileName(fileName);
												if(!ObjectFunctions.isNullOrEmpty(attachment)) {
													classAssignment.addAttachmentFiles(attachment);
									            }
												attachment = null;
											} catch (Throwable e) {
												e.printStackTrace();
											}
						    	  }
						        }
					      }
						}
					    
					  } 
					   
						classAssignment = (ClassAssignment) adminManager.merge(classAssignment);
						if("SMS".equalsIgnoreCase(getBalance())){
							ajaxDoSendClassAssignment(newAssignmentOrNot);
						}
						
						if(classAssignment.getId() >0){
							Customer customer = getCustomerByCustId();
							if(customer.isCheckEmailService())
							{
								List studentsContactDetails =null;
								StringBuffer query = new StringBuffer("select fatherName,fullName,rollNumber,parentEmail,className,section from vw_studentClassDetails where academicYearId=").append(getUserAcademicYearId()).append(" and status='Y' and (parentEmail!='' AND parentEmail is not null)")
								.append(" and classSectionId=").append(Long.valueOf(getClassId()));
								studentsContactDetails=adminManager.getAll(query.toString());
									String[] fileUploadStr = null;
									int i=0;
									if(!ObjectFunctions.isNullOrEmpty(classAssignment)){
										if(!ObjectFunctions.isNullOrEmpty(classAssignment.getAttachmentList()))
										{
											File directory = Files.createTempDirectory("Assignment").toFile();
											
											fileUploadStr = new String[classAssignment.getAttachmentList().size()];
								    	    for(Attachment attachmentObj: classAssignment.getAttachmentList())
								    	    {
								    		   if(!ObjectFunctions.isNullOrEmpty(attachmentObj))
								    		   {
								    			   URL url = new URL(attachmentObj.getFilePath());
													URLConnection conn = url.openConnection();
													InputStream is = conn.getInputStream();
													File file = new File(directory,attachmentObj.getFileName());
													FileUtils.copyInputStreamToFile(is, file);
								    			   
								    			   fileUploadStr[i] = file.getPath();
								    			   attachmentObj=null;
								    			   i++;
								    		   }
								    	    }
										}
							       }
									if(getUserCustId() != 291){
										SendAssignmentEmailThread R1 = new SendAssignmentEmailThread(studentsContactDetails , customer, classAssignment,fileUploadStr);
									    R1.start();
									}
									studentsContactDetails=null;
									query=null;
							}
						}
					if(newAssignmentOrNot && !"SMS".equalsIgnoreCase(getBalance()))
						super.addActionMessage("Assignment created  successfully.");
					else if(!"SMS".equalsIgnoreCase(getBalance()))
						super.addActionMessage("Assignment updated  successfully.");
					log.debug("callling sendNotificationForClassAssignments");
					adminManager.sendNotificationForClassAssignments(classIds,classAssignment,newAssignmentOrNot);
					classAssignment=null;
				}
				

			} catch (Exception ex) {
				ex.printStackTrace();
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			finally
			{
				doViewAllClassAssignment();
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoSendClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxViewClassAssignmentList.jsp", name = "success") }) })
		public String ajaxDoSendClassAssignment(boolean newAssignmentOrNot) throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoSendClassAssignment' method");
			}
			try {
				Customer customer = getCustomerByCustId();
				if (customer.isCheckMobileService()) {
					SMSServiceProviders smsServiceProvider = (SMSServiceProviders)adminManager.getSMSServiceProviderByCustId(customer.getSmsServiceProviderId());
					SendCreateAssignmentSMSThread R1 = new SendCreateAssignmentSMSThread(customer,getCurrentAcademicYear(),getClassId(),getSubjectId(),getClassAssignment().getAssignmentDate(),getUser().getId(),smsServiceProvider,getClassAssignment().getDescription());
				    R1.start();
					if(newAssignmentOrNot)
						super.addActionMessage("Assignment is Added and Message has been delivered successfully.");
					else
						super.addActionMessage("Assignment is Updated and Message has been delivered successfully.");
				} else {
					super.addActionError("SMS service disabled, enable service.");
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoGetStudentDetails", results = { @Result(location = "../common/classAssignment/ajaxEditStudentAssignment.jsp", name = "success")}),
			 @Action(value = "ajaxGetStudentAssInfoDetails", results = { @Result(location = "../common/classAssignment/ajaxEditStudentSubjectAssignment.jsp", name = "success")})
		 })
		 public String ajaxDoGetStudentDetails() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxDoGetStudentDetails' method");
				}
				try {
					if(!ObjectFunctions.isNullOrEmpty(getClassId()))
					{ 
						getSmsCount();
						Customer customer = getCustomerByCustId();
						setCustomer(customer);
						setEventId(getEventId());
						getStudentsClassAssignmentList();
					}
				}catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			} 
		// Admin Attendance Req
			@Actions({
					@Action(value = "ajaxEditStudentAssignment", results = {
							@Result(location = "../common/classAssignment/ajaxEditStudentAssignment.jsp", name = "success"),
							@Result(location = "AttendanceList.jsp", name = "Failure") }) })
			public String ajaxEditStudentAssignment() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxEditStudentAssignment' method in Admin Action");
				}
				try {
					if (!StringFunctions.isNullOrEmpty(getAnyTitle())) {
						// this is for to find Add attendance or Update Attendance
						if (!StringFunctions.isNullOrEmpty(getParamValue("attendanceType"))) {
							log.debug(getParamValue("attendanceType"));
							setAttendanceType(getParamValue("attendanceType"));
						}
						log.debug("*******************:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, new Date()));
						addOrUpdateStudentAssignment();
						log.debug("*******************:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN, new Date()));
					}
					super.addActionMessage("Student Assignment is recorded successfully.");
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				finally
				{
					ajaxDoGetStudentDetails();
				}
				return SUCCESS;
			}
			
			@Actions( { @Action(value = "ajaxDoEditStaffClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxCreateStaffClassAssignment.jsp", name = "success")})})
			public String ajaxDoEditStaffClassAssignment() throws URTUniversalException {
					if (log.isDebugEnabled()) {
						log.debug("Entering 'ajaxDoEditStaffClassAssignment' method");
					}
					try {
						loadAcademicYearStartDateAndDates(getUserAcademicYearId());
						ajaxDoEditClassAssignment();
					}catch (Exception ex) {
						ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
						JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
					}
					return SUCCESS;
				} 
		/********************************************************************
		 * Date              Name               Description
		 * ========          ============       ==================
		 * July 8, 2013      Rama		        Bydefaultly we need to show the avalable class&sections so thats y studyclasses was setted. 
		 * 
		/********************************************************************/
			
			@Actions( { @Action(value = "ajaxIDCardsGenerations", results = { @Result(location = "idCards/ajaxDoIdCardGenerations.jsp", name = "success") }) })
			public String ajaxIDCardsGenerations() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxIDCardsGenerations' method");
				}
				try {
					//setCustomer((Customer) adminManager.get(Customer.class,getUserCustId()));
					setCustomer(getCustomerByCustId());
					checkStudyClassHavingStudentsOrNot();
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			}
			@Actions( {	@Action(value = "ajaxStaffIdCardsGenerations", results = { @Result(location = "idCards/ajaxStaffIdCardGenerations.jsp", name = "success") }) })
			public String ajaxStaffIdCardsGenerations() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxIDCardsGenerations' method");
				}
				try {
					setCustomer(getCustomerByCustId());
					setObjectList(adminManager.getAll(ViewAllUsers.class, " custId="+getUserCustId()+" and accountExpired = 'N' and roleName!='ROLE_STUDENT' and roleName!='ROLE_PARENT' and roleName!='ROLE_ADMIN' group by rolename"));
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			}
			@Actions( {@Action(value = "ajaxDoEditClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxCreateClassAssignment.jsp", name = "success")})})
				public String ajaxDoEditClassAssignment() throws URTUniversalException {

					if (log.isDebugEnabled()) {
						log.debug("Entering 'ajaxDoEditClassAssignment' method");
					}
					try {
						if(!ObjectFunctions.isNullOrEmpty(getUserAcademicYearId()))
						{ 
							getSmsCount();
							setCustomer(getCustomerByCustId());
							loadAcademicYearStartDateAndDates(getUserAcademicYearId());
							 ClassAssignment classAssignment = (ClassAssignment) adminManager.get(ClassAssignment.class,getTempId());
							 if(!ObjectFunctions.isNullOrEmpty(classAssignment))
							 {
								setClassAssignment(classAssignment);
								if(classAssignment.getSubjectId() == 0){
									getClassAssignment().setSubjectName("Assignment");
								}
								setObjectList(adminManager.getAll(Attachment.class,"classAssignmentId="+getClassAssignment().getId()));
								setClassSectionId(getClassSectionId());
							
								setViewClassAssignmentDetails((ViewClassAssignmentDetails)adminManager.get(ViewClassAssignmentDetails.class,"assignmentId="+classAssignment.getId()));
								//setPlTitle(getPlTitle());
							 }
						}
					}catch (Exception ex) {
						ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
						JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
					}
					return SUCCESS;
				} 
			@Actions( {@Action(value = "ajaxDeleteAssignment", results = { @Result(location = "../common/classAssignment/ajaxViewAssignmentByClass.jsp", name = "success") }),
				@Action(value = "ajaxDeleteClassAssignment", results = { @Result(location = "../common/classAssignment/ajaxViewAssignmentByStaffClass.jsp", name = "success") })})
			public String ajaxDeleteAssignment() throws URTUniversalException {

				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxDeleteAssignment' method");
				}
				try {
					List<String> classIds = new ArrayList<String>();
					List<String> assignmentIds = new ArrayList<String>();
					if(!ObjectFunctions.isNullOrEmpty(getUserAcademicYearId()))
					{ 
						  ClassAssignment classAssignment = (ClassAssignment) adminManager.get(ClassAssignment.class,getTempId());
						 if(!ObjectFunctions.isNullOrEmpty(classAssignment))
						 {
							 setAttendanceDate(DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, classAssignment.getAssignmentDate()));
							 setClassId(getClassId());
							  classIds.add(String.valueOf(classAssignment.getClassSectionId()));
							  assignmentIds.add(String.valueOf(classAssignment.getId()));
							 List<StudentClassAssignment> studentAssignment = adminManager.getAll(StudentClassAssignment.class,"assignmentId="+getTempId());
							 if(ObjectFunctions.isNotNullOrEmpty(studentAssignment))
							 {
								 for(StudentClassAssignment studentClassAssignment:studentAssignment)
								 {
									 adminManager.remove(StudentClassAssignment.class, studentClassAssignment.getId());
								 }								
							 }
							 adminManager.remove(ClassAssignment.class,getTempId());
						 }
					super.addActionMessage("Class Assignment removed successfully.");
					log.debug("Sending Notification to Mobile App on Assignment Deletion.");;
					adminManager.sendNotificationForDeleteClassAssignment(classIds,assignmentIds);
					doViewAllClassAssignment();
					}
				}catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			} 
			
	 @Action(value = "ajaxDoGetStudyAndBonafiedGeneration", results = {@Result(location = "academic/studyAndBonafied/ajaxStudyAndBonafiedGeneration.jsp", name = "success") })
		public String ajaxDoGetStudyAndBonafiedGeneration() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoGetStudyAndBonafiedGeneration' method");
			}
			try {
				ajaxGetAllClassesStudyAndBonafiedSettings();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}	
			 
			 
		 @Actions( {@Action(value = "ajaxAddStudyAndBonafiedSettings", results = {@Result(location = "academic/studyAndBonafied/ajaxStudyBonafiedUploadSettings.jsp", name = "success") })})
			public String ajaxAddStudyAndBonafiedSettings() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxAddStudyAndBonafiedSettings' method");
				}
				try {
					if (ObjectFunctions.isNotNullOrEmpty(getChkBoxSelectedIds())) {
						StudyAndBonafiedSettings studyBonafiedSettings = null;
						log.debug(getChkBoxSelectedIds());
						Customer customer = (Customer)adminManager.get(Customer.class, getUserCustId());
						if(!ObjectFunctions.isNullOrEmpty(customer) && StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName()) && StringFunctions.isNotNullOrEmpty(getTempString())){
							StringBuffer pathName = new StringBuffer("userFiles/StudyAndBonafiedTemplate/").append(customer.getCustomerShortName()).append("/");
							if (getUserAcademicYearId() != 0) {
								MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) ServletActionContext.getRequest();
								AcademicYear academicYear = getCurrentAcademicYear();
								String fileName=null;
								String filePath = null;
								Enumeration fileParaNames = multiWrapper.getFileParameterNames();
								while (fileParaNames.hasMoreElements()) {
									String key = (String) fileParaNames.nextElement();
									File[] fileObject = multiWrapper.getFiles(key);
									String[] localSysfileNames = multiWrapper.getFileNames(key);
									fileName = StringFunctions.stripSymbols(localSysfileNames[0]);
									filePath = adminManager.getUploadTemplates(fileObject[0], academicYear.getAcademicYear(), fileName);
								}
								for(String studyClassId : getChkBoxSelectedIds()){
									if("studyCertificate".equals(getTempString())){
									setTempString1("SC");
									}else if("bonafiedCertificate".equals(getTempString())){
										setTempString1("BC");
									}else if("noDuesCertificate".equals(getTempString())){
										setTempString1("ND");
									}else if("feeCertificate".equals(getTempString())){
										setTempString1("FC");
									}
									studyBonafiedSettings = (StudyAndBonafiedSettings)adminManager.get(StudyAndBonafiedSettings.class, "custId="+getUserCustId()+" and certificateType='"+getTempString1()+"' and studyClassId="+studyClassId);
									if(ObjectFunctions.isNullOrEmpty(studyBonafiedSettings))
										studyBonafiedSettings = new StudyAndBonafiedSettings();
									if("studyCertificate".equals(getTempString())){
										studyBonafiedSettings.setCertificateType("SC");
										}else if("bonafiedCertificate".equals(getTempString())){
										studyBonafiedSettings.setCertificateType("BC");
										}else if("noDuesCertificate".equals(getTempString())){
										studyBonafiedSettings.setCertificateType("ND");
										}else if("feeCertificate".equals(getTempString())){
										studyBonafiedSettings.setCertificateType("FC");
										}
									studyBonafiedSettings.setFileName(fileName);
									studyBonafiedSettings.setFilePath(filePath);
									studyBonafiedSettings.setCustId(getUserCustId());
									studyBonafiedSettings.setCreatedById(getUser().getId());
									studyBonafiedSettings.setLastUpdatedById(getUser().getId());
									studyBonafiedSettings.setStudyClassId(Long.valueOf(studyClassId));
									adminManager.save(studyBonafiedSettings);
								}
								if("studyCertificate".equals(getTempString()))
								super.addActionMessage("Study certificate uploaded successfully ");
								else if("bonafiedCertificate".equals(getTempString()))
								super.addActionMessage("Bonafied certificate uploaded successfully ");
								else if("noDuesCertificate".equals(getTempString()))
								super.addActionMessage("No Dues certificate uploaded successfully ");
								else if("feeCertificate".equals(getTempString()))
								super.addActionMessage("Fee certificate uploaded successfully ");
								academicYear = null;
							}
							pathName = null;
						}
						customer = null;
					}
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}finally{
					setChkBoxSelectedIds(null);
					ajaxTcSettings();
				}
				return SUCCESS;
			}
			 
		@Action(value = "ajaxGenerateStudyAndBonafied", results = {@Result(location = "academic/studyAndBonafied/ajaxDoStudyAndBonafiedGeneration.jsp", name = "success") })
		public String ajaxGenerateStudyAndBonafied() throws URTUniversalException 
		{
				if (log.isDebugEnabled()) {
						log.debug("Entering 'ajaxGenerateStudyAndBonafied' method");
				}
			try {
				
				Customer customer = (Customer) adminManager.get(Customer.class, getUserCustId());
				log.debug("Customer record exists customer short name: " + customer.getStrId());
				if(!ObjectFunctions.isNullOrEmpty(customer) && StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName()))
				{
					String certificateType = null;
					Map<String, String> msg = new HashMap<String,String>();
					msg.put("custId", customer.getStrId());
					msg.put("userId", getUser().getStrId());
					msg.put("academicYearId", String.valueOf(getUserAcademicYearId()));
					msg.put("classId", getClassId());
					msg.put("studentNumber", getStudentNumber());
					msg.put("className", getTempString());
					if("studyCertificate".equalsIgnoreCase(getDescription())){
						certificateType = "SC";
						msg.put("type","S");
						if(StringFunctions.isNullOrEmpty(getTempString()))
							getResponse().addHeader("Content-Disposition", "attachment; filename=STUDY_CERTIFICATES.zip");
						else
							getResponse().addHeader("Content-Disposition", "attachment; filename="+getTempString().replace(' ', '_')+"_STUDY_CERTIFICATES.zip");
					}else if("bonafiedCertificate".equalsIgnoreCase(getDescription())){
						certificateType = "BD";
						msg.put("type","B");
						if(StringFunctions.isNullOrEmpty(getTempString()))
							getResponse().addHeader("Content-Disposition", "attachment; filename=BONAFIED_CERTIFICATES.zip");
						else
							getResponse().addHeader("Content-Disposition", "attachment; filename="+getTempString().replace(' ', '_')+"_BONAFIED_CERTIFICATES.zip");
					}else if("noDuesCertificate".equalsIgnoreCase(getDescription())){
						certificateType = "ND";
						msg.put("type","N");
						if(StringFunctions.isNullOrEmpty(getTempString()))
							getResponse().addHeader("Content-Disposition", "attachment; filename=DUES_CERTIFICATES.zip");
						else
							getResponse().addHeader("Content-Disposition", "attachment; filename="+getTempString().replace(' ', '_')+"_DUES_CERTIFICATES.zip");
					}else {
						certificateType = "FC";
						if(StringFunctions.isNullOrEmpty(getTempString()))
							getResponse().addHeader("Content-Disposition", "attachment; filename=FEES_CERTIFICATES.zip");
						else
							getResponse().addHeader("Content-Disposition", "attachment; filename="+getTempString().replace(' ', '_')+"_FEES_CERTIFICATES.zip");
					}
					
					StringBuffer filePath = new StringBuffer();
					filePath.append(getSession().getServletContext().getRealPath("userFiles/StudyAndBonafiedTemplate/"+customer.getCustomerShortName()));
					log.debug(" Certificate Location : " + filePath.toString());
					msg = studentManager.GenerateStudyAndBonafiedCertificate(msg,filePath);
					filePath.append("temp/");
					//For generating zip file 
					ZipOutputStream zipOutStream = new ZipOutputStream(getResponse().getOutputStream());
					getResponse().setContentType("application/zip");
					File directory = new File(filePath.toString());
					if(directory.exists()){
					StringFunctions.zipFiles(directory,zipOutStream);
					FileUtils.deleteDirectory(directory);
					}
					zipOutStream = null;
					directory=null;
					customer = null;
					msg=null;
					filePath=null;
				}
				log.debug("Process completed");
				
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
			 
			 @Actions( {@Action(value = "ajaxAddStudyBookSettings", results = {@Result(location = "academic/studyAndBonafied/ajaxAddStudyAndBonafiedSettings.jsp", name = "success") })})
				public String ajaxAddStudyBookSettings() throws URTUniversalException {
					if (log.isDebugEnabled()) {
						log.debug("Entering 'ajaxAddStudyBookSettings' method");
					}
					try {
						int bookSettingsCount = 0;
						StudyCertificateBookSettings studyBookSettings = null;
						List<ClassName> classesList = null;
						if(StringFunctions.isNotNullOrEmpty(getAnyId())){
							bookSettingsCount = adminManager.getCount("studyBookSettings", "custId="+getUserCustId()+" and studyBookNumber="+getTempId()+" and academicYearId="+getUserAcademicYearId());
							if(bookSettingsCount == 0){
								 classesList = adminManager.getAll(ClassName.class, "id in("+getAnyId()+")");
								 studyBookSettings = new StudyCertificateBookSettings();
								 studyBookSettings.setStudyBookNumber((int)getTempId());
								 studyBookSettings.setStudyStartingNumber((int)getTempId1());
								 //tcBookSettings.setTcEndingNumber((int)getTempId2());
								 studyBookSettings.setCustId(getUserCustId());
								 studyBookSettings.setAcademicYearId(getUserAcademicYearId());
								 studyBookSettings.setClasses(ConvertUtil.convertListToSet(classesList));
								 studyBookSettings.setCreatedById(getUser().getId());
								 studyBookSettings.setLastUpdatedById(getUser().getId());
								 adminManager.save(studyBookSettings);
								 super.addActionMessage("Successfully created Study book settings.");
							}else{
								super.addActionError("Book number already exist. Please change book number.");
							}
						}
						 ajaxTcSettings();
						 setTempId(0);
						 setTempId1(0);
						 setTempId2(0);
						 setChkBoxSelectedIds(null);
					} catch (Exception ex) {
						ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
						JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
					}
					return SUCCESS;
				}

	@Actions( { @Action(value = "ajaxCheckStudentInvoiceNumber", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
	public String ajaxCheckStudentInvoiceNumber() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckStudentInvoiceNumber' method");
		}
		try {
			String receiptNumber = getParamValue("keyWord");
			if (StringFunctions.isNotNullOrEmpty(receiptNumber)) {
				int receiptAvailableCount = adminManager.getCount("fineFee","custId=" + getUserCustId() + " and invoiceNumber='" + receiptNumber + "'");
				if (receiptAvailableCount > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {@Action(value = "ajaxDoGetHallTicketGeneration", results = {@Result(location = "academic/hallticket/ajaxHallTickertGenerationSettings.jsp", name = "success") })})
	public String ajaxDoGetHallTicketGeneration() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetHallTicketGeneration' method");
		}
		try {
			if (getUserAcademicYearId() > 0) {
				setClassList(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
				StringBuffer query = new StringBuffer("custId=").append(getUserCustId());
				setObjectList(adminManager.getAll(HallTicketSettings.class, query.toString()));
				query = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
@Actions( {@Action(value = "ajaxHallTicketSettings", results = {@Result(location = "academic/hallticket/ajaxHallTicketUploadSettings.jsp", name = "success") }),
   @Action(value = "ajaxDoHallTicketTemplateAndBookSettings", results = {@Result(location = "academic/hallticket/ajaxAddHallTicketSettings.jsp", name = "success")})
   })
public String ajaxHallTicketSettings() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxHallTicketSettings' method");
	}
	try {
		setClassList(adminManager.getAllClassNames( getUserCustId(),getUserAcademicYearId()));
		StringBuffer query = new StringBuffer("custId=").append(getUserCustId());
		if("templateSettings".equalsIgnoreCase(getTempString()))
			setObjectList(adminManager.getAll(HallTicketSettings.class,query.toString()));
		query = null;
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
}		
@Actions( {@Action(value = "ajaxAddHallTicketSettings", results = {@Result(location = "academic/hallticket/ajaxHallTicketUploadSettings.jsp", name = "success") })})
public String hallTicketSettings() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'hallTicketSettings' method");
	}
	try {
		if (StringFunctions.isNotNullOrEmpty(getAnyId())) {
			HallTicketSettings htSettings = null;
			List<String> classNamesList = Arrays.asList(getAnyId().split(","));  
			Customer customer = (Customer)adminManager.get(Customer.class, getUserCustId());
			if(!ObjectFunctions.isNullOrEmpty(customer) && StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName())){
				StringBuffer pathName = new StringBuffer("userFiles/HTTemplate/").append(customer.getCustomerShortName()).append("/");
				if (getUserAcademicYearId() != 0) {
					MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) ServletActionContext.getRequest();
					for(String className : classNamesList){
						htSettings = (HallTicketSettings)adminManager.get(HallTicketSettings.class, "custId="+getUserCustId()+" and classNames='"+className+"'");
						if(ObjectFunctions.isNullOrEmpty(htSettings))
							htSettings = new HallTicketSettings();
						Enumeration fileParaNames = multiWrapper.getFileParameterNames();
						while (fileParaNames.hasMoreElements()) {
							String key = (String) fileParaNames.nextElement();
							File[] fileObject = multiWrapper.getFiles(key);
							String[] localSysfileNames = multiWrapper.getFileNames(key);
							setUploadFileName(StringFunctions.stripSymbols(localSysfileNames[0]));
							File destDir = new File(getSession().getServletContext().getRealPath(pathName+getUploadFileName()));
								htSettings.setFileName(getUploadFileName());
							FileUtils.copyFile(fileObject[0], destDir);
						}
						htSettings.setCustId(getUserCustId());
						htSettings.setCreatedById(getUser().getId());
						htSettings.setLastUpdatedById(getUser().getId());
						htSettings.setClassNames(className);
						adminManager.save(htSettings);
					}
					super.addActionMessage("Successfully created HallTicket settings.");
				}
				pathName = null;
			}
			customer = null;
			htSettings = null;
		}
	} catch (Exception ex) {
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}finally{
		ajaxHallTicketSettings();
	}
	return SUCCESS;
}	

	
	public String ajaxGenerateHallTicketReport() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGenerateHallTicket1' method");
		}
		try
		{
			if(StringFunctions.isNotNullOrEmpty(getClassId()) && StringFunctions.isNotNullOrEmpty(getStudentNumber())){
				AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class, getUserAcademicYearId());
				setTempString(academicYear.getAcademicYear());
				setTempList(adminManager.getAll(StudentsHallTicketDetails.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classId ="+getClassId()+" and studId in"+getStudentNumber()+"  group by studId"));
				academicYear=null;
			}
			if(ObjectFunctions.isNullOrEmpty(getTempList())){
				setAlertSendType("Currently there are no students");
				getResponse().setHeader("Content-Disposition","attachment; filename=studentshollTicketsReport"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
				return "errorMessage";
			}
			 getResponse().setHeader("Content-Disposition","attachment; filename=studentshollTicketsReport"+ StringFunctions.getReplaceAll(DateFormatter.getTodayDateStr(DateFormatter.DD_MM_YYYY_HHMMSS_PATTERN)," ", "-") + ".pdf");
		}
		catch(Exception ex)
		{
			log.error("Entering into 'catch block':"+ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}		
		return "hallTicketGenerator";
	}
	
	@Actions( { @Action(value = "ajaxDownloadApplications", results = { @Result(location = "admission/ajaxImportAdmissionStudentDetails.jsp", name = "success") }) })
	public String ajaxDownloadApplications() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadApplications' method");
		}
		try {
			getAdmissionsOnlineApplicationDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({@Action(value = "ajaxDoGetDayBookDetails",results ={@Result(location = "academic/class/ajaxGetCurrentDetails.jsp",name = "success") })})

	public String ajaxDoGetDayBookDetails() throws URTUniversalException {
		if(log.isDebugEnabled()){
		   log.debug("Entering 'ajaxDoGetDayBookDetails' method");
		}
		try{
			if(getUserAcademicYearId() > 0 && getUserCustId()>0){
			}				
		}
		catch(Exception ex){
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}	
 
	@Actions( { @Action(value = "ajaxRemoveVoucher", results = { @Result(location = "academic/class/ajaxGetCurrentDetails.jsp", name = "success") }) })
	public String ajaxRemoveDayBook() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxRemoveDayBook' method");
		}
		try{
			if(getVoucher().getId()>0){				
			adminManager.remove(Voucher.class, getVoucher().getId());			
			ajaxDoGetDayBookDetails();
			super.addActionMessage("Daybook removed successfully.");
			}
		}
		catch(Exception ex){
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}	
	@Actions({
		@Action(value = "ajaxDoImportCommunityAndCasteExcelSheet", results = { @Result(location = "admission/castSettings/ajaxImportCommunityAndCasteExcelSheet.jsp", name = "success")})})
	public String ajaxDoImportCommunityAndCasteExcelSheet() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxDoImportCommunityAndCasteExcelSheet' method");
	}
	try {
		if(!ObjectFunctions.isNullOrEmpty(getCustomerByCustId())){
			setTempString("userfiles/"+getCustomerByCustId().getCustomerShortName().trim().toLowerCase());
			if(StringFunctions.isNotNullOrEmpty(getTempString())){
		    	File destFile = new File(getSession().getServletContext().getRealPath(getTempString()));
		    	if(destFile.mkdirs())
					log.debug(getSession().getServletContext().getRealPath(getTempString())+" directory created.");
				else
					log.debug(getSession().getServletContext().getRealPath(getTempString())+" directories Not Created");
			}
		}
	} catch (Exception ex) {
		log.error("Entering into 'catch block':" + ex.getMessage());
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	
	@Actions({ @Action(value = "ajaxDownloadCasteAndCommunityDetails", results = { @Result(location = "admission/castSettings/ajaxEditUploadCasteAndCommunityDetails.jsp", name = "success") }) })
	public String ajaxDownloadCasteAndCommunityDetails() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddCastDetails' method");
			}
			try {
				if(getUserAcademicYearId() > 0){
					getSession().removeAttribute("GetAllStudyClasses");
					checkStudyClassHavingStudentsOrNot();
				}
	    	} catch (Exception ex) {
	    		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
	    		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	    	return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxUploadCommunityAndCasteData", results = { @Result(location = "admission/castSettings/ajaxEditUploadCasteAndCommunityDetails.jsp", name = "success"),
			 @Result(location = "admission/castSettings/ajaxEditUploadCasteAndCommunityDetails.jsp", name = "editDummyInit"),
			 @Result(location = "admission/castSettings/ajaxImportCommunityAndCasteExcelSheet.jsp", name = "importDummyInit"),
			 @Result(location = "admission/castSettings/ajaxImportCommunityAndCasteExcelSheet.jsp", name = "importSccess")
			 }) })
	public String ajaxUploadCommunityAndCasteData() 
	{
		if (log.isDebugEnabled()) {
		    log.debug("Entering 'ajaxUploadStaffData' method");
		}
		try {
			boolean excelFileType = false;
			excelFileType = validateExcelFileType(getUploadContentType());
			if(excelFileType){
				log.debug("No file to upload....");
				super.addActionError("File type not matched.");
				if("Import".equalsIgnoreCase(getTempString())){
					return "importDummyInit";
				}else{
					return "editDummyInit";
			    }
			}
			    StringBuffer failureMsg=new StringBuffer();
			    failureMsg.append("The following admission number(s) is(are) already available.");
			    if (getUserAcademicYearId() > 0) {
					WorkbookSettings ws = new WorkbookSettings();
					ws.setLocale(new Locale("en", "EN"));
					Workbook workbook = Workbook.getWorkbook(getUpload(), ws);
					Sheet sheet = null;
					setAcademicYear(adminManager.getCurrentAcademicYear("Y", getUserCustId()));
					// JSR TO-DO: academicYear Id is not used
					for (int sheetNum = 0; sheetNum < workbook.getNumberOfSheets(); sheetNum++) {
					    sheet = workbook.getSheet(sheetNum);
					    if("Import".equalsIgnoreCase(getTempString())){
					    	adminManager.updateCommunityAndCaste(getUserCustId(), getUser().getId(),sheet,"");
					    	super.addActionMessage("Imported Community(s) And Caste(s) details successfully.");
					    	return "importSccess";
					    }else{
					    	adminManager.updateCommunityAndCaste(getUserCustId(), getUser().getId(),sheet,"E");
					    	super.addActionMessage("Updated Community(s) And Caste(s) details successfully.");
					    }
					}
					setUpload(null);
			    }
			} catch (Exception ex) {
		    // TODO: handle exception
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDownLoadAllCommunityAndCasteDetails", results = {}) })
	public void ajaxDownLoadAllCommunityAndCasteDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownLoadAllCommunityAndCasteDetails' method");
		}
		try {
			List<Object[]> communityList=null;
			List<Object[]> castList=null;
			if (getUserAcademicYearId() != 0) {
					String fileName = "CommunityAndCasteDetailsDetails "+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN, new Date());
					log.debug("Filename: "+fileName);
					ExcelView excelView = new ExcelView();
					WritableCellFormat cellFormat = null;
					getResponse().setContentType(excelView.getMimeType());
					getResponse().setHeader("Content-Disposition","attachment; filename="+ fileName.replace(' ', '_') + ".xls");
					excelView.setWb(Workbook.createWorkbook(getResponse().getOutputStream()));
					WritableFont font = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
					WritableFont font1 = new WritableFont(WritableFont.ARIAL,10, WritableFont.BOLD, true);
					font1.setColour(Colour.WHITE);
					cellFormat = ExcelView.getUserFormattedCell(font1,Colour.GREEN, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);
					cellFormat = ExcelView.getUserFormattedCell(font,Colour.AQUA, false, false, Alignment.CENTRE,VerticalAlignment.CENTRE, Border.ALL,BorderLineStyle.NONE);
					
					excelView.setWorkSheetName("CommunityAndCasteDetailsDetails");
					excelView.createWorkSheet(0);
					
					excelView.getWs().setColumnView(0, 20);
					excelView.getWs().setColumnView(1, 20);
					excelView.getWs().setColumnView(2, 20);
					excelView.getWs().setColumnView(3, 20);
					CellView cv = new CellView();
					cv.setHidden(true);
					excelView.getWs().setColumnView(2, cv);
					excelView.getWs().setColumnView(3, cv);
					cv = null;
					excelView.setDefaultFormat(excelView.getArial10format());
					schoolAddresDetailsOnlyForExcel(excelView, 2);
					
					excelView.getWs().mergeCells(0, 7, 3, 7);
					excelView.getWs().addCell(new Label(0, 0, getCustomerByCustId().getCustomerShortName(),cellFormat));
					excelView.getWs().addCell(new Label(0, 7, "Community And Caste DETAILS",cellFormat));
					excelView.getWs().addCell(new Label(0, 8, "Community Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(1, 8, "Caste Name", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(2, 8, "Community Id", excelView.getUsermore10BoldformatGreenBgClr()));
					excelView.getWs().addCell(new Label(3, 8, "Caste Id", excelView.getUsermore10BoldformatGreenBgClr()));
					int columnStart = 10;
					communityList=adminManager.getAll("select castName,custId,id,createdById from castSettings where custId="+getUserCustId());	
					if (!ObjectFunctions.isNullOrEmpty(communityList)) {
						for (Object[] object : communityList) {
							int cellStart = 0;
							if (!ObjectFunctions.isNullOrEmpty(object)) {
								for (int i = 0; i < object.length; i++) {
									if (!ObjectFunctions.isNullOrEmpty(object[i])) {
										if (i == 0){
											excelView.getWs().addCell(new Label(cellStart,columnStart,object[i].toString()));
										}if(i == 2){
											excelView.getWs().addCell(new Label(cellStart,columnStart,object[i].toString()));
											castList=adminManager.getAll("select custId,subCastName,createdById,id from subCastSettings where custId="+getUserCustId()+" and castId="+Long.valueOf(object[i].toString()));
										}
									}
									cellStart++;
								}
								columnStart++;
								cellStart = 0;
							}
							if (!ObjectFunctions.isNullOrEmpty(castList)) {
								for (Object[] object1 : castList) {
									cellStart=0;
									if (!ObjectFunctions.isNullOrEmpty(object1)) {
										for (int j = 0; j < object1.length; j++) {
											if (!ObjectFunctions.isNullOrEmpty(object1[j])) {
												if (j == 1){
													excelView.getWs().addCell(new Label(cellStart,columnStart,object1[j].toString()));
												}else if(j == 3){
													excelView.getWs().addCell(new Label(cellStart,columnStart,object1[j].toString()));
												}
											}
											cellStart++;
										}
										columnStart++;
										cellStart = 0;
									}
								}
							} else{
								cellStart++;
							}
							} 
						}
					excelView.getWb().write();
					excelView.getWb().close();
				}  
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	@Actions( { @Action(value = "ajaxGetAcademicYearTimings", results = { @Result(type = "json", name = "success", params = {"includeProperties", "timingsList.*" }) }) })
	public String ajaxGetAcademicYearTimings() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetAcademicYearTimings' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getAcademicYearId())){
				List<AcademicYearTimings> acyList= adminManager.getAll(AcademicYearTimings.class, " academicYearId="+getAcademicYearId());
				if(!ObjectFunctions.isNullOrEmpty(acyList)){
					JSONArray res = new JSONArray();
					JSONObject j;
					int sNo=0;
					int classId=0;
				    for(AcademicYearTimings acdt :acyList){
					    j=new JSONObject();
					    if(classId!=acdt.getClassId()){
					    	sNo=0;
					    }
					    j.put("SNO", sNo);
					    j.put("STATUS", acdt.getStatus());
					    j.put("CLASSID", acdt.getClassId());
						j.put("DAYID", acdt.getWeekDay());
						j.put("SST", acdt.getStartTime());
						j.put("MBST", acdt.getMorningBreakStartTime());
						j.put("MBET", acdt.getMorningBreakEndTime());
						j.put("LBST", acdt.getLunchStartTime());
						j.put("LBET", acdt.getLunchEndTime());
						j.put("EBST", acdt.getEveningBreakStartTime());
						j.put("EBET", acdt.getEveningBreakEndTime());
						j.put("SET", acdt.getEndTime());
						classId=(int) acdt.getClassId();
						sNo++;
						res.put(j);
				  }
				    j = new JSONObject();
					j.put("data", res);
					getResponse().getOutputStream().print(j.toString());
				}
			  }
			}
		catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
		}
	@Actions( {
		@Action(value = "ajaxGetEditOnlineAdmissions", results = { @Result(location = "admission/ajaxDoEditAdmissionDetails.jsp", name = "success") })
		})
	public String ajaxGetEditOnlineAdmissions() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetEditOnlineAdmissions' method");
		}
		try {
			getAdmissionsOnlineApplicationDetails();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxDoCancelsAdmission", results = { @Result(location = "admission/approvedApplicationDetails.jsp", name = "success") }),
		@Action(value = "ajaxCheckStausOfApplications", results = { @Result(location = "admission/ajaxCheckStausOfDetails.jsp", name = "success") }) })
	public String ajaxCheckStausOfApplications() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckStausOfApplications' method");
		}
		try {
			OnlineApplicationDetails appDetails=null;
			if (getAcademicYearId() > 0) {
				List applicationList=adminManager.getAll(OnlineApplicationDetails.class,"custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" group by status");
				setObjectList(new ArrayList<OnlineApplicationDetails>());
				if(ObjectFunctions.isNotNullOrEmpty(applicationList)){
					for(Object obj:applicationList){
						appDetails=(OnlineApplicationDetails)obj;
						OnlineApplicationDetails onlineAppDetails=new OnlineApplicationDetails();
						if(!ObjectFunctions.isNullOrEmpty(appDetails)){
							if("S".equalsIgnoreCase(appDetails.getStatus())){
								onlineAppDetails.setStatus("Short Listed");
							}else if("R".equalsIgnoreCase(appDetails.getStatus())){
								onlineAppDetails.setStatus("Rejected");
							}else if("P".equalsIgnoreCase(appDetails.getStatus())){
								onlineAppDetails.setStatus("Pending");
							}else if("C".equalsIgnoreCase(appDetails.getStatus())){
								onlineAppDetails.setStatus("Admitted");
							}else{
								continue;
							}
							getObjectList().add(onlineAppDetails);
						}
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxCheckStausOfClassesAppList", results = { @Result(location = "admission/ajaxCheckStausOfClassListDetails.jsp", name = "success") }) })
	public String ajaxCheckStausOfClassesAppList() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckStausOfClassesAppList' method");
		}
		try {
			if (getAcademicYearId() > 0 && StringFunctions.isNotNullOrEmpty(getAnyTitle())) {
				String statusString[]=getAnyTitle().split(",");
				 StringBuffer buffer = new StringBuffer();
				for(String status:statusString){
					if(StringFunctions.isNotNullOrEmpty(status)){
						if("Pending".equalsIgnoreCase(status)){
							buffer.append("'P'");
						}if("Rejected".equalsIgnoreCase(status)){
							buffer.append("'R'");
						}if("Short Listed".equalsIgnoreCase(status)){
							buffer.append("'S'");
						}if("Admitted".equalsIgnoreCase(status)){
							buffer.append("'C'");
						}
					}
				}
				 setTempString(buffer.toString());
				 if("'C'".equalsIgnoreCase(buffer.toString())){
					 setTempList(adminManager.getAll(ViewStudentClassDetails.class,"joinedThroughAdmissions='"+ Constants.YES_STRING+ "' and custId=" + getUserCustId()+ " and academicYearId="+ getAcademicYearId()+ " and studDiscontinueDesc is null group by classId order by classId"));
				 }else
					 setTempList(adminManager.getAll(OnlineApplicationDetailsView.class,"custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and status = "+buffer.toString()+" group by status,classId"));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({
		@Action(value = "ajaxDoImportHolidaysExcelSheet", results = { @Result(location = "academic/ajaxImportHolidaysExcelSheet.jsp", name = "success")})})
	public String ajaxDoImportHolidaysExcelSheet() throws URTUniversalException {
	if (log.isDebugEnabled()) {
		log.debug("Entering 'ajaxDoImportHolidaysExcelSheet' method");
	}
	try {
		ajaxDownloadHolidaysDetails();
		if(!ObjectFunctions.isNullOrEmpty(getCustomerByCustId())){
			setTempString("userfiles/"+getCustomerByCustId().getCustomerShortName().trim().toLowerCase());
			if(StringFunctions.isNotNullOrEmpty(getTempString())){
		    	File destFile = new File(getSession().getServletContext().getRealPath(getTempString()));
		    	if(destFile.mkdirs())
					log.debug(getSession().getServletContext().getRealPath(getTempString())+" directory created.");
				else
					log.debug(getSession().getServletContext().getRealPath(getTempString())+" directories Not Created");
			}
		}
	} catch (Exception ex) {
		log.error("Entering into 'catch block':" + ex.getMessage());
		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
	}
	return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxUploadHolidaysData", results = { @Result(location = "academic/ajaxImportHolidaysExcelSheet.jsp", name = "success"),
			 @Result(location = "academic/ajaxEditUploadHolidaysDetails.jsp", name = "editHolidays")		
	})})
	
	    public String ajaxUploadHolidaysData() {
		if (log.isDebugEnabled()) {
		    log.debug("Entering 'ajaxUploadHolidaysData' method");
		}
		try {
				boolean excelFileType = false;
				excelFileType = validateExcelFileType(getUploadContentType());
				if(excelFileType){
					log.debug("No file to upload....");
					super.addActionError("File type not matched.");
					if("Edit".equalsIgnoreCase(getTempString()))
				    {
				    	ajaxDownloadHolidaysDetails();
				    	return "editHolidays";
				    }
				    else
				    	ajaxDoImportHolidaysExcelSheet();
					return SUCCESS;
				}
				String status = null;
			    if (getUserAcademicYearId() > 0) {
					WorkbookSettings ws = new WorkbookSettings();
					ws.setLocale(new Locale("en", "EN"));
					//Workbook workbook = Workbook.getWorkbook(getUpload(), ws);
					
					HSSFWorkbook workbook = new HSSFWorkbook(new FileInputStream(getUpload()));
					
					org.apache.poi.ss.usermodel.Sheet firstSheet1 = workbook.getSheetAt(0);
					Row secondRow = firstSheet1.getRow(1);
					if(!ObjectFunctions.isNullOrEmpty(secondRow))
					{
						if(!ObjectFunctions.isNullOrEmpty(secondRow.getCell(0)) && !ObjectFunctions.isNullOrEmpty(secondRow.getCell(1)))
						{
							String fistColumn = secondRow.getCell(0).getStringCellValue();
							String secondColumn = secondRow.getCell(1).getStringCellValue();
							
							if(!"holiday Id".equalsIgnoreCase(fistColumn.toString()) || !"Description".equalsIgnoreCase(secondColumn.toString()))
							{
								log.debug("No file to upload....");
								super.addActionError("File type not matched.");
								if("Edit".equalsIgnoreCase(getTempString()))
							    {
							    	ajaxDownloadHolidaysDetails();
							    	return "editHolidays";
							    }
							    else
							    	ajaxDoImportHolidaysExcelSheet();
								return SUCCESS;
							}
							fistColumn = null;
							secondColumn = null;
						}
						else
						{
							log.debug("No file to upload....");
							super.addActionError("File type not matched.");
							if("Edit".equalsIgnoreCase(getTempString()))
						    {
						    	ajaxDownloadHolidaysDetails();
						    	return "editHolidays";
						    }
						    else
						    	ajaxDoImportHolidaysExcelSheet();
							return SUCCESS;
						}
					}
					else
					{
						log.debug("No file to upload....");
						super.addActionError("File type not matched.");
						if("Edit".equalsIgnoreCase(getTempString()))
					    {
					    	ajaxDownloadHolidaysDetails();
					    	return "editHolidays";
					    }
					    else
					    	ajaxDoImportHolidaysExcelSheet();
						return SUCCESS;
					}
					
					
					org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheet("Configurations");
					SheetParser parser = new SheetParser();
					
					//Sheet sheet = null;
					List<SchoolHolidays> schoolHolidaysDetailsList = null;
					for (int sheetNo = 0; sheetNo < (workbook.getNumberOfSheets() - 1); sheetNo++) {
						sheet = workbook.getSheetAt(sheetNo);
						schoolHolidaysDetailsList = parser.createEntity(sheet, sheet.getSheetName(), SchoolHolidays.class);
						if("Import".equalsIgnoreCase(getTempString())){
							status = adminManager.createHolidays(getUserCustId(), getUser().getId(), getUserAcademicYearId(),sheet,"",schoolHolidaysDetailsList);
						}else{
							status = adminManager.createHolidays(getUserCustId(), getUser().getId(), getUserAcademicYearId(), sheet,"E",schoolHolidaysDetailsList);
						}
					}
					if(!ObjectFunctions.isNullOrEmpty(schoolHolidaysDetailsList)){
						if("Import".equalsIgnoreCase(getTempString())){ //here academicyear settings have class wise holidays(Ch), So sheetNames have multiple classes that's way put the out side success nessage.
							if(!ObjectFunctions.isNullOrEmpty(status))
								super.addActionError(""+status+" holiday(s) data not valid. Please verify the data.");
								super.addActionMessage("Holidays details imported successfully.");
							//adminManager.sendNotificationToAndroidMobileUsers(getUserCustId(),"Holidays added"); //To add notification for mobile app.
						}else{
							if(!ObjectFunctions.isNullOrEmpty(status))
								super.addActionError(""+status+" holiday(s) data not valid. Please verify the data.");
								super.addActionMessage("Holidays details updated successfully.");
							//adminManager.sendNotificationToAndroidMobileUsers(getUserCustId(),"Holidays updated"); //To add notification for mobile app.
						}
					}else{
						super.addActionError("Data entered is invalid.");
					}
					setUpload(null);
			    }
			    if("Edit".equalsIgnoreCase(getTempString()))
			    {
			    	ajaxDownloadHolidaysDetails();
			    	return "editHolidays";
			    }
			    else
			    	ajaxDoImportHolidaysExcelSheet();
			} catch (Exception ex) {
				super.addActionError("Invalid Data found, Please check the data.");
		    ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
		    JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	/********************************************************************
	 *
	 * Date              Name               Description
	 * ========          ============       ==================
	 * Dec 4, 2013		 Seshu				Validating whether book number is assigned to students or not.
	/********************************************************************/
	@Actions( { @Action(value = "ajaxCheckBookNumberAssignedToStudents", results = { @Result(type = "json", name = "success",params = {"includeProperties","thresholdMonths,classTeacherStatus"}) }) })
	public String ajaxCheckBookNumberAssignedToStudents() throws URTUniversalException {
	if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckBookNumberAssignedToStudents' method");
		}
		try {
			int count = 0;
			StringBuffer query = null;
			JSONObject studMarks =new JSONObject();
			if(!StringFunctions.isNullOrEmpty(getAnyId())){ //getAnyId() is bookSetting Id
				query = new StringBuffer("bookSettingId=").append(getAnyId());
				count = adminManager.getCount("studyCertificate", query.toString());
				query = null;
			}
			 if(count > 0)
				 studMarks.put("bookUsed","This book number is assigned to students. Are you sure you want to delete this book setting?");
			 getResponse().getOutputStream().print(studMarks.toString());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	
	/********************************************************************
	 *
	 * Date              Name               Description
	 * ========          ============       ==================
	 * Dec 5, 2013		 Seshu				Validating whether book number is assigned to students or not.
	/********************************************************************/
	@Actions( { @Action(value = "ajaxCheckTCBookNumberAssignedToStudents", results = { @Result(type = "json", name = "success",params = {"includeProperties","thresholdMonths,classTeacherStatus"}) }) })
	public String ajaxCheckTCBookNumberAssignedToStudents() throws URTUniversalException {
	if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckTCBookNumberAssignedToStudents' method");
		}
		try {
			int count = 0;
			StringBuffer query = null;
			JSONObject studMarks =new JSONObject();
			if(!StringFunctions.isNullOrEmpty(getAnyId())){ //getAnyId() is bookSetting Id
				query = new StringBuffer("bookSettingId=").append(getAnyId());
				count = adminManager.getCount("transferCertificate", query.toString());
				query = null;
			}
			 if(count > 0)
				 studMarks.put("bookUsed","This book number is assigned to students. Are you sure you want to delete this book setting?");
			 getResponse().getOutputStream().print(studMarks.toString());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "printHolidaysList", results = { }) })
	public String printHolidaysList() {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'printHolidaysList' method");
    	}
    try{
		getSession().removeAttribute("GetAllHolidaysListByAcademicYearId");
		Object[] classNameClassIds= adminManager.get("select classId,className from vw_classSectionDetails where custId="+getUserCustId()+ " and academicYearId="+getUserAcademicYearId()+" and classSectionId='"+getSelectedId()+"'");
		long classId = 0;
		if(!ObjectFunctions.isNullOrEmpty(classNameClassIds))
		{
			if(!ObjectFunctions.isNullOrEmpty(classNameClassIds[0]))
    		{
				classId = Long.valueOf(classNameClassIds[0].toString());
    		}
		}
		classNameClassIds = null;
		List<SchoolHolidays> holidayList = getAllHolidaysListByAcademicYearId("H", getUserCustId(),getUserAcademicYearId(),classId);
		if (!ObjectFunctions.isNullOrEmpty(holidayList)) {
			setHolidayBoardMessagesList(holidayList);
			Collections.sort(getHolidayBoardMessagesList());
			
			PDFGenerator pDFGenerator = new PDFGenerator();
			Customer customer = getCustomerByCustId();
			String fileName = "Holidays_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
			FontFactory.register(fontPath);
			getResponse().setContentType(pDFGenerator.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
			pDFGenerator.createDocumentJasper();
			pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
			PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
			pDFGenerator.getPdfWriter().setPageEvent(phfmj);
			phfmj = null;
			pDFGenerator.getDocument().open();
			
			// creating pDF page event to set header and Footer to document
			PdfPTable mainTable = new PdfPTable(1);
			mainTable.setWidthPercentage(100);
			mainTable.setSplitLate(false);
			mainTable.getDefaultCell().setBorder(Rectangle.BOX);
			int width =3;
			PdfPTable defaultersHeaderReport = new PdfPTable(width);
			defaultersHeaderReport.setWidthPercentage(100);
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
				}
				if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
				}
			}
			if (!ObjectFunctions.isNullOrEmpty(getHolidayBoardMessagesList())) {
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Holiday Description", "#000",fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("From Date (MM/DD/YYYY)",1, fontPath));
				defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperNoColor("To Date (MM/DD/YYYY)",1, fontPath));
				for (Object obj : getHolidayBoardMessagesList()) {
					SchoolHolidays holiday = (SchoolHolidays) obj;
					if (!ObjectFunctions.isNullOrEmpty(holiday)) {
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(holiday.getDescription(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(holiday.getStartDateStr(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithLeftAlignJasperWithBorder(holiday.getEndDateStr(), "#000",fontPath));
					}
					holiday = null;
				}
			}
			setHolidayBoardMessagesList(null);
			mainTable.addCell(defaultersHeaderReport);
			pDFGenerator.getDocument().add(mainTable);
			pDFGenerator.getDocument().close();
			pDFGenerator = null;
			mainTable = null;
			defaultersHeaderReport = null;
			pDFGenerator = null;
			phfmj = null;
		}
       }
       catch(Exception ex)
       {
            log.error("Entering into 'catch block':"+ex.getMessage());
            ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
            JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
       }
       return null;
    }
	
	@Actions( { @Action(value = "printAcademicPlanSettings", results = { }) })
	public String printAcademicPlanSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'printAcademicPlanSettings' method");
		}
		try {
			if (getAcademicYearId() != 0) {
			List<VWAcademicYearTimings> workingDays = null;
			PDFGenerator pDFGenerator = new PDFGenerator();
			Customer customer = getCustomerByCustId();
			String fileName = "Academic Plan Settings "+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
			FontFactory.register(fontPath);
			getResponse().setContentType(pDFGenerator.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".pdf");
			pDFGenerator.createDocumentJasper();
			pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
			PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
			pDFGenerator.getPdfWriter().setPageEvent(phfmj);
			phfmj = null;
			pDFGenerator.getDocument().open();
			
			// creating pDF page event to set header and Footer to document
			PdfPTable mainTable = new PdfPTable(1);
			mainTable.setWidthPercentage(100);
			mainTable.setSplitLate(false);
			mainTable.getDefaultCell().setBorder(Rectangle.BOX);
			int width =0;
			if("DT".equalsIgnoreCase(getTempString())){
				width = 9;
			}else{
				width = 8;
			}
			PdfPTable defaultersHeaderReport = new PdfPTable(width);
			defaultersHeaderReport.setWidthPercentage(100);
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				if (!StringFunctions.isNullOrEmpty(customer.getOrganization())) {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), width,fontPath, 15, "#005CB9",Element.ALIGN_CENTER, 5.0f));
				}
				if (!StringFunctions.isNullOrEmpty(customer.getOrganizationFullAddress())) {
					defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), width,fontPath, 8, "#005CB9",Element.ALIGN_CENTER, 5.0f));
				}
			}
			if(StringFunctions.isNotNullOrEmpty(getSelectedId())){
			if("ST".equalsIgnoreCase(getSelectedId())){
				workingDays = adminManager.getAll(VWAcademicYearTimings.class,"academicYearId="+getAcademicYearId());
				if(!ObjectFunctions.isNullOrEmpty(workingDays)) {
						if("DT".equalsIgnoreCase(getTempString())){
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Name Of The Day", "#000",fontPath));
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("SST",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("MBST",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("MBET",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("LBST",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("LBET",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("EBST",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("EBET",1, fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("SET",1, fontPath));
					for(VWAcademicYearTimings vwAcademicYearTimings : workingDays){
						if(!StringFunctions.isNullOrEmpty(vwAcademicYearTimings.getStartTime())){
						if("DT".equalsIgnoreCase(getTempString())){
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getWeekName(), "#000",fontPath));
						}
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getStartTime(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getMorningBreakStartTime(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getMorningBreakEndTime(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getLunchStartTime(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getLunchEndTime(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getEveningBreakStartTime(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getEveningBreakEndTime(), "#000",fontPath));
						defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getEndTime(), "#000",fontPath));
						}else{
							defaultersHeaderReport.deleteLastRow();
							defaultersHeaderReport.deleteLastRow();
						}
					}
					workingDays=null;
				}
			}else{
			  setClassList(adminManager.getAllByCustId("ClassName", getUserCustId(), getAcademicYearId()));
			  if(ObjectFunctions.isNotNullOrEmpty(getClassList())){
					for(ClassName className : getClassList()){
						workingDays = adminManager.getAll(VWAcademicYearTimings.class,"classId="+className.getId()+" and academicYearId="+getAcademicYearId());
						if(ObjectFunctions.isNotNullOrEmpty(workingDays)){
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndNoColor(className.getClassName(),width, fontPath));
							if("DT".equalsIgnoreCase(getTempString())){
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellHeaderCellJasperClass("Name Of The Day", "#000",fontPath));
							}
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("SST",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("MBST",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("MBET",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("LBST",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("LBET",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("EBST",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("EBET",1, fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellWithCenterAlignJasperNoColor("SET",1, fontPath));
						for(VWAcademicYearTimings vwAcademicYearTimings : workingDays){
							if(!StringFunctions.isNullOrEmpty(vwAcademicYearTimings.getStartTime())){
							if("DT".equalsIgnoreCase(getTempString())){
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getWeekName(), "#000",fontPath));
							}
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getStartTime(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getMorningBreakStartTime(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getMorningBreakEndTime(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getLunchStartTime(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getLunchEndTime(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getEveningBreakStartTime(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getEveningBreakEndTime(), "#000",fontPath));
							defaultersHeaderReport.addCell(PDFGenerator.getPdfCellAlignCenter(vwAcademicYearTimings.getEndTime(), "#000",fontPath));
							}else{
								defaultersHeaderReport.deleteLastRow();
								defaultersHeaderReport.deleteLastRow();
							}
						}
						workingDays=null;
					}
				  }
			  	}
			  }
			}
			workingDays=null;
			mainTable.addCell(defaultersHeaderReport);
			pDFGenerator.getDocument().add(mainTable);
			pDFGenerator.getDocument().close();
			pDFGenerator = null;
			mainTable = null;
			defaultersHeaderReport = null;
			pDFGenerator = null;
			phfmj = null;
		 }
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	private boolean defalutCheckTheDateOrAvalailableOrNot(Date toDayDate, Date dateStart, Date dateEnd) {
		 if (toDayDate != null && dateStart != null && dateEnd != null) {
	    	 if( dateEqualOrAfter(toDayDate,dateStart,dateEnd))
	         {
	             return true;
	         }
	         else {
	             return false;
	         }
	    }
	    return false;
	}

	private boolean dateEqualOrAfter(Date toDayDate,Date dateStart,Date dateEnd)
	{
		if(toDayDate.compareTo(dateEnd)==0 && dateStart.compareTo(dateEnd)==0){
			return true;
		}else if (toDayDate.compareTo(dateEnd)==0 && dateStart.compareTo(dateEnd)!=0){
			 return true;
		}else if(dateStart.compareTo(dateEnd)<0 && dateEnd.compareTo(dateStart)>0 && dateStart.compareTo(dateEnd)!=0)
	        return true;
	    else
	        return false;

	}
	@Actions( { @Action(value = "ajaxTeacherClassRatingDescription", results = { @Result(location = "academic/ajaxViewTeacherClassRatingDesCription.jsp", name = "success"),
			                                                                     @Result(location = "academic/ajaxViewStudentRatingDescriptionForStaff.jsp", name = "Student")}) })
	public String ajaxTeacherClassRatingDescription() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxTeacherClassRating' method");
		}
		try {
			setTempList(null);
			setTempList(adminManager.teacherClassRatingDescription(getUserCustId(), getParamValue("staffId"), getParamValue("feedBackQuesId")));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxIDCardsGenerationForAdmittedStu", results = { @Result(location = "idCards/ajaxDoIdCardGenerationForAdmittedStu.jsp", name = "success") }) })
	public String ajaxIDCardsGenerationForAdmittedStu() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxIDCardsGenerationForAdmittedStu' method");
		}
		try {
			onlineApplicationDetails();
			List<ViewStudentClassDetails> admittedStudentsClasses = null;
			if(getAcademicYearId()>0){
				//setClassList(adminManager.getClassesByAdmissionStatus(getUserCustId(),Constants.YES_STRING, getAcademicYearId()));
				 admittedStudentsClasses = adminManager.getAll(ViewStudentClassDetails.class,"custId="+getUserCustId()+" and academicYearId="+getAcademicYearId()+" and joinedThroughAdmissions='Y' and studDiscontinueDesc is null order by sortingOrder group by classId ");
				setTempId2(getAcademicYearId());
			}else{
				 admittedStudentsClasses = adminManager.getAll(ViewStudentClassDetails.class,"custId="+getUserCustId()+" and academicYearId="+getTempId2()+" and joinedThroughAdmissions='Y' and studDiscontinueDesc is null order by sortingOrder group by classId ");
			}	
			 if(!ObjectFunctions.isNullOrEmpty(admittedStudentsClasses)){
				setObjectList(new ArrayList<ClassName>());
				for(ViewStudentClassDetails obj : admittedStudentsClasses){
					Object admitclass = adminManager.get(ClassName.class,"custId="+getUserCustId()+" and academicYearId="+obj.getAcademicYearId()+" and id="+obj.getClassId());
					if(!ObjectFunctions.isNullOrEmpty(admitclass)){
						getObjectList().add(admitclass);
					}
				}
				
			}
			 setClassList(getObjectList());
				//setClassList(adminManager.getClassesByAdmissionStatus(getUserCustId(),Constants.YES_STRING, getTempId2()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxGetFeedbackSettings", results = { @Result(location = "academic/ajaxViewFeedBackSettingsList.jsp", name = "success") }) })
	public String ajaxGetStaffFeedBackQues() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStaffFeedBackQues' method");
		}
		try {
			setAcademicYear(getCurrentAcademicYear());
			setObjectList(adminManager.getAll(FeedBackSettings.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoAddNewFeedbackSettings", results = { @Result(location = "academic/ajaxDoAddNewFeedbackSettings.jsp", name = "success") }) })
	public String ajaxDoAddNewFeedbackSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddNewFeedbackSettings' method");
		}
		try {
			setAcademicYear(getCurrentAcademicYear());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCreateFeedbackSettings", results = { @Result(location = "academic/ajaxViewFeedBackSettingsList.jsp", name = "success") }) })
	public String ajaxCreateFeedbackSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCreateFeedbackSettings' method");
		}
		try {
			String settingId=getParamValue("feedBackSettingId");
			FeedBackSettings feedBackSettings=null;
			if(StringFunctions.isNotNullOrEmpty(settingId)){
				feedBackSettings=(FeedBackSettings) adminManager.get(FeedBackSettings.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+Long.valueOf(settingId));
			}else{
				feedBackSettings=new FeedBackSettings();
			}
			String feedbackPercentage=getParamValue("academicYear.attendancePercentage");
			if(StringFunctions.isNotNullOrEmpty(feedbackPercentage)){
				feedBackSettings.setAttendancePercentage(Integer.valueOf(feedbackPercentage));
			}
			feedBackSettings.setStartDate(getFeedBackSettings().getStartDate());
			feedBackSettings.setEndDate(getFeedBackSettings().getEndDate());
			feedBackSettings.setStatus("A");
			feedBackSettings.setCustId(getUserCustId());	
			feedBackSettings.setAcademicYear(getCurrentAcademicYear());
			adminManager.save(feedBackSettings);
			if(StringFunctions.isNotNullOrEmpty(settingId)){
				super.addActionMessage("Feedback settings updated successfully.");
			}else{
				super.addActionMessage("Feedback settings created successfully.");
			}
			setObjectList(adminManager.getAll(FeedBackSettings.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoEditFeedBackSettings", results = { @Result(location = "academic/ajaxDoAddNewFeedbackSettings.jsp", name = "success") }) })
	public String ajaxDoEditFeedBackSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoEditFeedBackSettings' method");
		}
		try {
			String settingId=getParamValue("feedBackSettingId");
			setAcademicYear(getCurrentAcademicYear());
			setFeedBackSettings((FeedBackSettings) adminManager.get(FeedBackSettings.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+Long.valueOf(settingId)));
			getAcademicYear().setAttendancePercentage(getFeedBackSettings().getAttendancePercentage());
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDeleteFeedBackSetting", results = { @Result(location = "academic/ajaxViewFeedBackSettingsList.jsp", name = "success") }) })
	public String ajaxDeleteFeedBackSetting() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxdeleteSchoolHolidays' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getParamValue("feedBackSettingId")) && getAcademicYearId() > 0){
				adminManager.remove(FeedBackSettings.class, Long.valueOf(getParamValue("feedBackSettingId")));
				super.addActionMessage("Feedback Setting is deleted successfully.");
			}
			ajaxGetStaffFeedBackQues();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoRatingInformation", results = { @Result(location = "reports/ajaxDoRatingInformation.jsp", name = "success") }) })
	public String ajaxDoRatingInformation() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoRatingInformation' method");
		}
		try {
			setObjectList(adminManager.getAll(ViewStaffPersonAccountDetails.class,"custId="+getUserCustId()+" and academicYearId<="+getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoRatingInformationForPdf", results = {}) })
	public String ajaxDoRatingInformationForPdf() {
		try {
			PdfPTable firstTable = null;
			PdfPTable textReport = null;
			PdfPTable secondTable = null;
			PDFGenerator pDFGenerator = new PDFGenerator();
			String fileNames = "Staff Rating Information"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
			getResponse().setContentType(pDFGenerator.getMimeType());
			getResponse().setHeader("Content-Disposition","attachment; filename="+ fileNames.replace(' ', '_') + ".pdf");
			pDFGenerator.createDocumentJasper();
			pDFGenerator.setPdfWriter(PdfWriter.getInstance(pDFGenerator.getDocument(), getResponse().getOutputStream()));
			PdfHeaderFooterMarkJasper phfmj = new PdfHeaderFooterMarkJasper();
			pDFGenerator.getPdfWriter().setPageEvent(phfmj);
			pDFGenerator.getDocument().open();
			
			String fontPath = getSession().getServletContext().getRealPath(getText(Constants.GILITE_FILE_DOCS_DIR)+ "/Droid-Sans/DroidSans-Bold.ttf");
			FontFactory.register(fontPath);
			// creating pDF page event to set header and Footer to document
			PdfPTable mainTable = null;
			Customer customer = getCustomerByCustId();
			List<FeedbackGrades> feedbackGradeList=adminManager.getAll(FeedbackGrades.class,"custId="+getUserCustId()) ;
			List<FeedbackQuestions> feedbackQuestionsList= adminManager.getAll(FeedbackQuestions.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and roleDescription='Teacher Feedback Questions'");
			if(!StringFunctions.isNullOrEmpty(getSelectedId()) && !ObjectFunctions.isNullOrEmpty(feedbackGradeList) && !ObjectFunctions.isNullOrEmpty(feedbackQuestionsList))
			{
					List<Object[]> staffDetails=adminManager.getAll("select staffId,fullName from vw_staffDetails where custId="+ getUserCustId() + " and status='"+ Constants.YES_STRING+ "' and academicYearId="+ getUserAcademicYearId()+" and staffId in "+getSelectedId()+" order by staffId ");
					if(!ObjectFunctions.isNullOrEmpty(staffDetails)){
					String checkValu="Check";
					for(Object[] stuObj : staffDetails)
					{
						mainTable = new PdfPTable(1);
						if(!ObjectFunctions.isNullOrEmpty(stuObj))
						{
							int finalWidths = 3;
							firstTable = new PdfPTable(finalWidths);
							float[] widths = new float[finalWidths];
							for(int q=0;q<finalWidths;q++){
								if(q==0){
									widths[0] = 80;
								}
								else if(q>=1){
									widths[q] =  20/(finalWidths-1);
								}
							}
							mainTable.setWidthPercentage(100);
							mainTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
							mainTable.setSplitLate(false);
							firstTable.setWidths(widths);
							if(!checkValu.equalsIgnoreCase(stuObj[0].toString())){
								if (!ObjectFunctions.isNullOrEmpty(customer)) {
									firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganization().toUpperCase(), 5, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 4.0f));
									firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(customer.getOrganizationFullAddress().toUpperCase(), 5, fontPath,"#FFFFFF", 15, "#005CB9",Element.ALIGN_CENTER, 4.0f));
								}
								FeedBackSettings feedBackSettings= (FeedBackSettings) adminManager.get(FeedBackSettings.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
								firstTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
								if(!ObjectFunctions.isNullOrEmpty(feedBackSettings)){
									firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Rating Information",8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 4.0f));
									firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper(feedBackSettings.getStartDateStr() +" To "+ feedBackSettings.getEndDateStr(),8, fontPath,"#FFFFFF", 12, "#005CB9",Element.ALIGN_CENTER, 4.0f));
								}
							}
							List<Object[]> ratingList=adminManager.getAll("select sum(resultGradeValue),roleDescription,count(studentId),description,qusDescription from vw_FeedbackRatingDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and roleDescription='Teacher Feedback Questions' and staffId="+Long.valueOf(stuObj[0].toString())+" group by qusDescription order By qusDescription");
							if(ObjectFunctions.isNotNullOrEmpty(ratingList))
							{
								if(!checkValu.equalsIgnoreCase(stuObj[0].toString())){
									firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Name:"+ stuObj[1].toString(), 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 4.0f));
									ViewClassSectionTeacher objTecher=(ViewClassSectionTeacher) adminManager.get(ViewClassSectionTeacher.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and teacherId="+Long.valueOf(stuObj[0].toString()));
									if(!ObjectFunctions.isNullOrEmpty(objTecher)){
										firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class&Section Name:"+ objTecher.getClassAndSection(), 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 4.0f));
									}
									firstTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasper1("", 8, fontPath));
									firstTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Question", 1, fontPath));
									firstTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Score", 1,fontPath));
									firstTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Average", 1, fontPath));
								}
								double aveScore=0.0;
								double totalAveScore=0.0;
								int numberOfSamples = ratingList.size();
								for(Object[] objRat:ratingList){
									if(!ObjectFunctions.isNullOrEmpty(objRat)){
										firstTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeBoldJasperNoColor(objRat[4].toString(), 1,9, fontPath));
										firstTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(objRat[0].toString(),1, fontPath));
										aveScore =Double.parseDouble(new DecimalFormat("##.##").format(Double.valueOf(objRat[0].toString())/Double.valueOf(objRat[2].toString())));
										totalAveScore+=aveScore;
										firstTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(String.valueOf(aveScore),1, fontPath));
									}else{
										firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("There is no rating this Staff", 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 4.0f));
									}
								}
								
								firstTable.addCell(PDFGenerator.getPdfCellWithRightAlignFontJasperNoColor("Overall Score", 2, fontPath));
								firstTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColorWithBold("" + roundTwoDecimals(Double.valueOf(totalAveScore/feedbackQuestionsList.size())), 1, fontPath));
							
								finalWidths = 4;
								
								textReport = new PdfPTable(finalWidths);
								textReport.setWidthPercentage(100);
								textReport.addCell(PDFGenerator.getPdfCellHeadersNoBorderWithFont("", "#000", finalWidths, 9,fontPath));
								textReport.addCell(PDFGenerator.getPdfCellHeadersNoBorderWithFont("", "#000", finalWidths, 9,fontPath));
								textReport.addCell(PDFGenerator.getPdfCellHeadersNoBorderWithFont("Total students participated :" + numberOfSamples, "#000", finalWidths, 9,fontPath));
								
								StringBuffer gradesName = new StringBuffer();
								StringBuffer gradesValues = new StringBuffer();
								int size=feedbackGradeList.size();
								for (FeedbackGrades feedbackGrades: feedbackGradeList) 
								{
								    gradesName.append(feedbackGrades.getDescription());
								    gradesValues.append(feedbackGrades.getDescription()+ "="+feedbackGrades.getTitle());
								    if(size-1 > 0) {
								    	gradesName.append(", ");
								    	gradesValues.append(", ");
								    }
								    size--;
								}
								gradesName.append(". ");
						    	gradesValues.append(".");
								textReport.addCell(PDFGenerator.getPdfCellHeadersNoBorderWithFont("For each question, the students were given " + feedbackGradeList.size() + " choices as " + gradesName.toString() + " Scores are calculated by " + gradesValues.toString(),"#000",finalWidths,9,fontPath));
								textReport.addCell(PDFGenerator.getPdfCellHeadersNoBorderWithFont("Overall score indicates the average score of all "+feedbackQuestionsList.size()+" questions.","#000",finalWidths,9,fontPath));
								textReport.addCell(PDFGenerator.getPdfCellHeadersNoBorderAlignCenter("******************************************","#000",finalWidths,9,fontPath));
								textReport.addCell(PDFGenerator.getPdfCellHeadersNoBorderWithFont("", "#000", finalWidths, 9,fontPath));
								
								finalWidths = 1+feedbackGradeList.size();
								secondTable = new PdfPTable(finalWidths);
								
								widths = new float[finalWidths];
								for(int k=0;k<finalWidths;k++)
								{
									if(k==0){
										widths[0] = 50;
									}
									else 
									{
										widths[k] =  50/(finalWidths-1);
									}
								}
								
								secondTable.setWidths(widths);
									
								if(!checkValu.equalsIgnoreCase(stuObj[0].toString())){
									secondTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("Question", 1, fontPath));
									secondTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("% of Student opted for", 5,fontPath));
									secondTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor("", 1, fontPath));
									for(Object objGradss:feedbackGradeList){
										FeedbackGrades feedGrades=(FeedbackGrades)objGradss;
										secondTable.addCell(PDFGenerator.getPdfCellWithCenterAlignHeadingJasperNoColor(feedGrades.getDescription(), 1, fontPath));
									}
								}
								for(FeedbackQuestions feedQuestion:feedbackQuestionsList){
									if(!ObjectFunctions.isNullOrEmpty(feedQuestion)){
										if(ObjectFunctions.isNotNullOrEmpty(feedbackGradeList)){
											secondTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeBoldJasperNoColor(feedQuestion.getDescription(), 1,9, fontPath));
											//secondTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(feedQuestion.getDescription(),1, fontPath));
											for(Object objGrads:feedbackGradeList){
												FeedbackGrades feedGrade=(FeedbackGrades)objGrads;
												Object[] ratingOptedList=adminManager.get("select id,count(studentId) from parentFeedbackResult where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and feedbackGradeId="+feedGrade.getId()+ " and feedbackQuestionId="+feedQuestion.getId()+" and staffId="+Long.valueOf(stuObj[0].toString()));
												if(!ObjectFunctions.isNullOrEmpty(ratingOptedList))
												{
													if(!ObjectFunctions.isNullOrEmpty(ratingOptedList))
													{
														Object[] sumofSampleCountObj =  ratingList.get(0);
														if(!ObjectFunctions.isNullOrEmpty(sumofSampleCountObj))
														{
															if(!ObjectFunctions.isNullOrEmpty(sumofSampleCountObj[2]))
															{
																Double sumofSampleCount = Double.valueOf(sumofSampleCountObj[2].toString());
																if(!ObjectFunctions.isNullOrEmpty(ratingOptedList[1]))
																{
																	Double countOfStu=Double.valueOf(ratingOptedList[1].toString());
																	
																	Double totalVal= (countOfStu/sumofSampleCount) * 100;
																	secondTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor(""+roundTwoDecimals(totalVal),1, fontPath));
																	
																}
																else{
																	secondTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor("0.0",1, fontPath));
																}
															}
															else{
																secondTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor("0.0",1, fontPath));
															}
														}
													}
													else{
														secondTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor("0.0",1, fontPath));
													}
												}else{
													secondTable.addCell(PDFGenerator.getPdfCellWithLeftAlignFontSizeJasperNoColor("0.0",1, fontPath));
												}
											}
										}
									}
								}
							}else{
								firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Name:"+ stuObj[1].toString(), 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 4.0f));
								ViewClassSectionTeacher objTecher=(ViewClassSectionTeacher) adminManager.get(ViewClassSectionTeacher.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and teacherId="+Long.valueOf(stuObj[0].toString()));
								if(!ObjectFunctions.isNullOrEmpty(objTecher)){
									firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class&Section Name:"+ objTecher.getClassAndSection(), 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 4.0f));
								}else{
									firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("Class&Section Name:", 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 4.0f));
								}
								firstTable.addCell(PDFGenerator.getPdfCellHeaderRowWithColspanAndFontColorFontSizeAndBackGrundColorAndAlignmentAndPaddingJasper("There is no rating to this staff", 4, fontPath,"#005CB9", 12, "#FFFFFF",Element.ALIGN_LEFT, 4.0f));
							}
							mainTable.addCell(firstTable);
							mainTable.addCell(textReport);
							mainTable.addCell(secondTable);
							pDFGenerator.getDocument().add(mainTable);
							pDFGenerator.getDocument().resetPageCount();
							pDFGenerator.getDocument().newPage();
							firstTable=null;textReport=null;secondTable=null;
						}
						checkValu = stuObj[0].toString();
						stuObj=null;
					}
				}
			}
			pDFGenerator.getDocument().close();
			pDFGenerator = null;
			mainTable = null;
			phfmj = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	
	/**  * @Description 2nd Jun 14 cvs: Here Not get the value from page. so we are set the MessageType value below method. when select the checkbox we call the ajaxcall */
	@Actions( { @Action(value = "ajaxPopupSendMessages", results = { @Result(location = "admission/ajaxSendAdmissionMessages.jsp", name = "success") }) })
	public String ajaxPopupSendMessages() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxPopupSendMessages' method");
		}
		try {
			if(!StringFunctions.isNullOrEmpty(getSelectedId())){
				List<String> mobileNumbers = Arrays.asList(getSelectedId().split(","));
				setMessages(new Messages());
				StringBuffer stBuffer=new StringBuffer();
				for(String mobileNum : mobileNumbers){
					if(!StringFunctions.isNullOrEmpty(mobileNum)){
						stBuffer.append("+"+mobileNum.trim()+",");
					}
				}
				log.debug("These are the mobile numbers..."+stBuffer);
				if(!ObjectFunctions.isNullOrEmpty(stBuffer))
				   getMessages().setMessageType(stBuffer.toString());
				stBuffer=null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	
	@Actions( { @Action(value = "ajaxImportDownloadHolidaysSheet", results = {}) })
	public void ajaxImportDownloadHolidaysSheet() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxImportDownloadHolidaysSheet' method");
		}
		try {
			if (getUserAcademicYearId() != 0) {
				String fileName = "SchoolHoliday_Details_"+ DateUtil.getDateTime(DateFormatter.MMDDYYY_PATTERN,new Date());
				getResponse().setContentType("application/vnd.ms-excel");
				getResponse().setHeader("Content-Disposition","attachment; filename=" + fileName.replace(' ', '_')+ ".xls");
				PrepareSchoolHolidaysExcel prepareSchoolHolidaysExcel = new PrepareSchoolHolidaysExcel();
				List<Object[]> schoolHolidaysDetails = null;
				prepareSchoolHolidaysExcel.createConfigurationsSheet("Configurations",getUserAcademicYearId(),getUserCustId());
				StringBuffer sheetTitleDesc = new StringBuffer();
				StringBuffer query = null;
				sheetTitleDesc.append("School Name : ");
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("organization"))) {
					sheetTitleDesc.append((String) getSession().getAttribute("organization"));
				}
				sheetTitleDesc.append(", Academic Year : ");
				if (!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("academicYearName"))) {
					sheetTitleDesc.append((String) getSession().getAttribute("academicYearName"));

				}
				Customer customer = getCustomerByCustId();
				AcademicYear academicYear = getCurrentAcademicYear();
				String todayDate= DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date());
				if(!ObjectFunctions.isNullOrEmpty(customer))
				{
					String govtHoliday = getParamValue("govtHoliday");
					String weekHoliday = getParamValue("weekHoliday");
					
					if("CH".equalsIgnoreCase(academicYear.getHolidayStatus()))
					{
						if ("A".equalsIgnoreCase(getSelectedId())) { 
							checkStudyClassHavingStudentsOrNot();
						}
						else if(StringFunctions.isNotNullOrEmpty(getSelectedId())){
							setStudyClassList(adminManager.getAll(StudyClass.class, "id in ("+ getSelectedId()+")"));
						}
						if (ObjectFunctions.isNotNullOrEmpty(getStudyClassList())) {
							for (StudyClass studyClass : getStudyClassList())
							{
								if ("update".equals(getAnyTitle())) 
								{
									Object[] classNameClassIds= adminManager.get("select classId,className from vw_classSectionDetails where custId="+getUserCustId()+ " and academicYearId="+getUserAcademicYearId()+" and classSectionId="+studyClass.getId());
									if(!ObjectFunctions.isNullOrEmpty(classNameClassIds) && !ObjectFunctions.isNullOrEmpty(classNameClassIds[0]) ){
										query = new StringBuffer(PrepareSchoolHolidaysExcel.query).append(" where custId=").append(getUserCustId());
										
										if(StringFunctions.isNotNullOrEmpty(govtHoliday) || StringFunctions.isNotNullOrEmpty(weekHoliday)){
											if("H".equalsIgnoreCase(govtHoliday))
											{
												query.append(" and (status= 'H' ");
											}
											if("W".equalsIgnoreCase(weekHoliday))
											{
												if("H".equalsIgnoreCase(govtHoliday))
												{
													query.append(" OR status= 'W' )");
												}
												else
													query.append(" and (status= 'W') ");
											}
											else
												query.append(")");
										}
										query.append(" and startDate >= '"+todayDate+"%' and classId in ("+classNameClassIds[0]+") and academicYearId="+getUserAcademicYearId()+" group by description,startDate,endDate order by startDate");
										log.debug(query.toString());
										schoolHolidaysDetails = staffManager.getAll(query.toString());
									}
								}
								prepareSchoolHolidaysExcel.createStaffSheet(studyClass.getClassAndSection(), schoolHolidaysDetails, sheetTitleDesc.toString());
							}
						}
					}
					else{
						if ("update".equals(getAnyTitle())) 
						{
							query = new StringBuffer(PrepareSchoolHolidaysExcel.query).append(" where custId=").append(getUserCustId());
							
							if(StringFunctions.isNotNullOrEmpty(govtHoliday) || StringFunctions.isNotNullOrEmpty(weekHoliday)){
								if("H".equalsIgnoreCase(govtHoliday))
								{
									query.append(" and (status= 'H'");
								}
								if("W".equalsIgnoreCase(weekHoliday))
								{
									if("H".equalsIgnoreCase(govtHoliday))
									{
										query.append(" OR status= 'W' )");
									}
									else
										query.append(" and (status= 'W') ");
								}						
								else
									query.append(")");
							}
							query.append(" and startDate >= '"+todayDate+"%' and academicYearId="+getUserAcademicYearId()+" group by description,startDate,endDate order by startDate");
							log.debug(query.toString());
							schoolHolidaysDetails = staffManager.getAll(query.toString());
								prepareSchoolHolidaysExcel.createStaffSheet("Holidays",schoolHolidaysDetails,sheetTitleDesc.toString());
						} else {
							prepareSchoolHolidaysExcel.createStaffSheet("Holidays",schoolHolidaysDetails, sheetTitleDesc.toString());
						}
					}
				}
				prepareSchoolHolidaysExcel.finalPrep("Configurations", schoolHolidaysDetails);
				prepareSchoolHolidaysExcel.getWb().write(getResponse().getOutputStream());
				prepareSchoolHolidaysExcel = null;
				schoolHolidaysDetails = null;
				customer = null;
				academicYear = null;
				query = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
	}
	
	
	/*This method calls when edit class---> change the classTeacher dropdown in  admin login. */
	@Actions( { @Action(value = "ajaxCheckIsClassTeacher", results = { @Result(type = "json", name = "success", params = {"includeProperties", "isClassTeacher" }) }) })
	public String ajaxCheckIsClassTeacher()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckIsClassTeacher' method");
		}
		try {
			if(StringFunctions.isNotNullOrEmpty(getClassId())){
				setStudyClass((StudyClass)adminManager.get(StudyClass.class, "id="+getClassId()));
				if(!ObjectFunctions.isNullOrEmpty(getStudyClass())){
					StringBuffer query = new StringBuffer("teacherId=").append(getIsClassTeacher()).append(" and academicYearId=").append(getUserAcademicYearId())
					.append(" and classTeacher='Y'");
					ClassTeacher classTeacher = (ClassTeacher)adminManager.get(ClassTeacher.class,query.toString());
					query = null;
					if(!ObjectFunctions.isNullOrEmpty(classTeacher)){
						JSONObject classTeacherJson=null;
						if(classTeacher.getStudyClassId() != getStudyClass().getId() ){//Staff is classTeacher for another class.
							if(!ObjectFunctions.isNullOrEmpty(classTeacher.getStaff()) && !ObjectFunctions.isNullOrEmpty(classTeacher.getStaff().getAccount()) && 
									!ObjectFunctions.isNullOrEmpty(classTeacher.getStaff().getAccount().getPerson())){
								classTeacherJson =new JSONObject().put("isClassTeacher", classTeacher.getStaff().getAccount().getPerson().getFullPersonName()+ " is Class Teacher for '"+ classTeacher.getStudyClass().getClassAndSection()+ "' class. System won't allow assigning a teacher to multiple classes as a Class Teacher. Please select different teacher".toString());
							}else{
								classTeacherJson =new JSONObject().put("isClassTeacher","System won't allow assigning a teacher to multiple classes as a Class Teacher. Please select different teacher".toString());
							}
							getResponse().getOutputStream().print(classTeacherJson.toString());
							classTeacherJson = null;
						}
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	@Actions( { @Action(value = "ajaxImportStudentsAttendance", results = { @Result(location = "../common/staffAttendance/ajaxStudentMonthlyAttendance.jsp", name = "success"),
			@Result(location = "../common/staffAttendance/ajaxStudentMonthlyAttendance.jsp", name = "dummyInit")}) })
	public String ajaxImportStudentsAttendance() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxImportStudentsAttendance' method");
		}
		try {
			log.debug("getUploadContentType() : "+getUploadContentType());
			boolean excelFileType = false;
			excelFileType = validateExcelFileType(getUploadContentType());
			if(excelFileType){
				log.debug("No file to upload....");
				super.addActionError("File type not matched.");
				return "dummyInit";
			}
			if (getUserAcademicYearId() > 0) {
				WorkbookSettings ws = new WorkbookSettings();
				ws.setLocale(new Locale("en", "EN"));
				Workbook workbook = Workbook.getWorkbook(getUpload(), ws);
				Sheet sheet = null;
				int rowSize;
				int columnSize;
				Cell cell;
				String accountIdAndClassSectionId;
				String month;
				long studentId;
				boolean isInteger = false;
				StudentMonthlyAttendance attendance = null;
				Map<String,String> monthwiseWrkgDays = new HashMap<String, String>();
				StringBuffer failureMsg=new StringBuffer();
				failureMsg.append("(");
				StringBuffer inValidata = new StringBuffer();
				StringBuffer monthFailureMsg=new StringBuffer();
				monthFailureMsg.append("(");
				int monthActualDays = 0;
				int givenMonthDays = 0;
				for (int sheetNum = 0; sheetNum < workbook.getNumberOfSheets(); sheetNum++) {
					sheet = workbook.getSheet(sheetNum);
					rowSize = sheet.getRows();
					columnSize = sheet.getColumns();
					for (int j = 5; j < columnSize; j++) {
						if(!ObjectFunctions.isNullOrEmpty(sheet.getCell(j, 6).getContents()) && !ObjectFunctions.isNullOrEmpty(sheet.getCell(j, 5).getContents()))
						{
							 monthActualDays = geActualMonthDaysByMonthName(sheet.getCell(j, 6).getContents());
		                    if(monthActualDays > 0)
		                    {
			                     givenMonthDays = 0;
			                    if(!StringFunctions.isNullOrEmpty(sheet.getCell(j, 5).getContents())){
			                    	isInteger = tryParseInt(sheet.getCell(j, 5).getContents());
			                    	if(isInteger)
			                    		givenMonthDays = Integer.parseInt(sheet.getCell(j, 5).getContents());
			                    	else
			                    		inValidata.append(sheet.getCell(j, 5).getContents());
			                    }
			                   
			                	if(monthActualDays >= givenMonthDays)
			                		monthwiseWrkgDays.put(sheet.getCell(j, 6).getContents(), sheet.getCell(j, 5).getContents());
			                	else
			                	{
			                		monthFailureMsg.append(sheet.getCell(j, 6).getContents());
			                		monthFailureMsg.append(",");
			                	}
		                    }
						}
					}
					monthFailureMsg.deleteCharAt(monthFailureMsg.length() - 1);
					monthFailureMsg.append(")");
					
		            if(!ObjectFunctions.isNullOrEmpty(monthwiseWrkgDays)){
					for (int i = 8; i < rowSize; i++) {
						cell = sheet.getCell(4, i);
						accountIdAndClassSectionId = cell.getContents();
						if (StringFunctions.isNotNullOrEmpty(accountIdAndClassSectionId)) {
							if(accountIdAndClassSectionId.split(":").length == 2){
								for (int j = 5; j < columnSize; j++) {
									month = sheet.getCell(j, 6).getContents();
									log.debug(sheet.getCell(j, 6).getContents());
									if(StringFunctions.isNotNullOrEmpty(monthwiseWrkgDays.get(month)) && StringFunctions.isNotNullOrEmpty(sheet.getCell(j, i).getContents())){
											log.debug(sheet.getCell(j, i).getContents());
												if(Float.valueOf(sheet.getCell(j, i).getContents()) <= Float.valueOf(monthwiseWrkgDays.get(month))){
													studentId = Long.valueOf(accountIdAndClassSectionId.split(":")[0]);
													attendance =(StudentMonthlyAttendance)adminManager.get(StudentMonthlyAttendance.class, "studentId="+studentId+" and monthName='"+month+"'");
												if(ObjectFunctions.isNullOrEmpty(attendance)){
													attendance = new StudentMonthlyAttendance();
													attendance.setStudentId(studentId);
													attendance.setCreatedById(getUser().getId());
													attendance.setCreatedDate(new Date());
													attendance.setMonthName(month);
													attendance.setMonth(getMonthNumberByMonthName(month)); 
												}
												attendance.setTotalWorkingDays(monthwiseWrkgDays.get(month));
												attendance.setNoOfPresentDays(sheet.getCell(j, i).getContents());
												attendance.setLastAccessDate(new Date());
												attendance.setLastUpdatedDate(new Date());
												attendance.setLastUpdatedById(getUser().getId());
												
												adminManager.save(attendance);
												attendance = null;	
										}
										else{
												cell = sheet.getCell(3, i);
												if(StringFunctions.isNotNullOrEmpty(cell.getContents()) && StringFunctions.isNotNullOrEmpty(sheet.getCell(j, i).getContents())){
													failureMsg.append(cell.getContents());
													failureMsg.append(",");
												}
											}
									}
								}
		                    	
							}
						}
					}
				}
			}
			failureMsg.deleteCharAt(failureMsg.length() - 1);
			failureMsg.append(")");
			setAnyTitle(failureMsg.toString());
			if(getAnyTitle().length() > 1){
				super.addActionError("The following "+getAnyTitle()+" student(s) data not loaded,Because of present days more than working days.");
			}
			if(monthFailureMsg.length() > 1){
				super.addActionError("The following months "+monthFailureMsg.toString()+" data not loaded,Because of present month days more than actual month days.");
			}
			if(inValidata.length() >1){
				super.addActionError("Some of the data is not loaded,Because of incorrect data.");
			}
			failureMsg = null;
			inValidata = null;
			monthwiseWrkgDays = null;
			super.addActionMessage("You have successfully uploaded attendance.");
		}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally{
			ajaxDoGetAttendanceForm();
		}
		return SUCCESS;
	}

	/* This method calls when admin user login. */
	@Actions( { @Action(value = "manageAcademics", results = {@Result(location = "academic/class/adminDashboard.jsp", name = "success") }) })
		public String manageAcademics() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'manageAcademics' method");
			}
			try {
				log.debug("Login User Account Id:" + getUser().getId());
				log.debug("Cust Id:" + getUserCustId());
				log.debug("Academic Year Id:" + getUserAcademicYearId());
			    setUser((User)subscriptionManager.get(User.class,getUser().getId()));
			    Customer customer = getCustomerByCustId();
				/* below lines used to get alloted sms and used sms for this acedemic year to show in the dashboard */
				int allotedsms = 0;
				AcademicYear currentAcademicYear = getCurrentAcademicYear();
				AcademicYear prvAcademicYear  = (AcademicYear)adminManager.get(AcademicYear.class, "custId="+getUserCustId()+" and id="+getUserAcademicYearId()+" and status='"+Constants.NO_STRING+"'");
				if(!ObjectFunctions.isNullOrEmpty(prvAcademicYear)){
					 allotedsms = (int)prvAcademicYear.getAllotedsms()+(int)prvAcademicYear.getPaidSms();
				}else{
					 allotedsms = (int)currentAcademicYear.getAllotedsms()+(int)currentAcademicYear.getPaidSms();
				}
				setSmsAlloted(allotedsms);
				//setSmsAlloted((int) getCurrentAcademicYear().getAllotedsms()+(int)getCurrentAcademicYear().getPaidSms());
				setSmsCnt(staffManager.getTotalSmsCount(getUserCustId(),getUserAcademicYearId()));
				/*below lines used to  today absent for sataff and student  in Dashboard*/
				String todayDate = DateFormatter.formatDate (DateFormatter.CCYY_MM_DD_PATTERN, new Date());
				prepareNotifications(todayDate,currentAcademicYear);
				if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("showReminder")))
					getReminderToUserLogin();
				setScrapMessagesList(adminManager.getAll(ScrapMessage.class,"custId="+getUserCustId()+" and (receiverAccountId="+getUser().getId()+" or senderAccountId="+getUser().getId()+") and  status='"+Constants.ACTIVE_STATUS+"' and isNewMessage='UR' and academicYearId='"+getUserAcademicYearId()+"' and  scrapDate like '%"+todayDate+"%'" ));
				if(!ObjectFunctions.isNullOrEmpty(getScrapMessagesList()))
				{
					Collections.sort(getScrapMessagesList());
				}
				if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("showTaskReminder")))
					getTaskReminderToUserLogin();
				/*below lines used to get pending admissions current and  feature show in Dashboard*/
				//getAdmissionsOnlineApplicationDetails();
				setToDate(new Date()); //This line used to campare the admissions enddate in page
				log.debug("Cust Id:" + getUserCustId() + " AcademicYear Id:"+getUserAcademicYearId());
				setTempId1(adminManager.getCount("student", "description is null and custId="+ getUserCustId()+ " and academicYearId="+getUserAcademicYearId()));
				setTempId2(adminManager.getCount("staff", "status='Y' and custId="+ getUserCustId()));
				setStudentsTransportCount(adminManager.getCount("vw_studentsTransportDetails","custId="+ getUserCustId()));
				SimpleDateFormat lastUpdatedStr = new SimpleDateFormat(DateFormatter.YYYY_MM_DD_PATTERN);
				String today = lastUpdatedStr.format(getToDate());
				setTempList1(adminManager.getAll("select s.accountId,concat(if(isnull(p.firstName), '', p.firstName), if((isnull(p.lastName) or (p.lastName = '')), '',concat(' - ', p.lastName))) AS fullName,concat(if(isnull(c.className), '', c.className), if((isnull(c.section) or (c.section = '')), '',concat(' - ', c.section))) AS classAndSection FROM student s LEFT JOIN Account a ON(a.id = s.accountId) LEFT JOIN Person p ON(p.id = a.personId) left join studyClass c ON (c.id = s.classSectionId) where s.status = 'Y' and DATE_FORMAT(CURDATE(),'%c-%d') = DATE_FORMAT(p.dateOfBirth, '%c-%d') and s.custId="+ getUserCustId()+" and s.academicYearId="+getUserAcademicYearId()));
				setTempList2(adminManager.getAll("select concat(if(isnull(p.firstName), '', p.firstName), if((isnull(p.lastName) or (p.lastName = '')), '',concat(' - ', p.lastName))) AS fullName,r.description FROM staff s LEFT JOIN Account a ON(a.id = s.accountId) LEFT JOIN Address d ON a.paddressId = d.id LEFT JOIN Person p ON(p.id = a.personId) LEFT JOIN UserRoles ur ON(ur.userId = a.id) LEFT JOIN Role r ON(r.id = ur.roleId) where s.status = 'Y' and DATE_FORMAT(CURDATE(),'%c-%d') = DATE_FORMAT(p.dateOfBirth, '%c-%d') and s.custId="+ getUserCustId()+" and s.academicYearId<="+getUserAcademicYearId()));
			    
				
				/* Payment Details*/
				
				Object[] overAllPaymentDetails = accountManager.getOverAllFeePaymentSummary(getUserCustId(), currentAcademicYear.getId());
				getSchoolFeeList().add(overAllPaymentDetails);
			
			    /*below lines used to  today absent for sataff and student  in Dashboard*/
				//AcademicYear academicYear = getCurrentAcademicYear();
				if("D".equalsIgnoreCase(currentAcademicYear.getManageAttendanceBy()) && "N".equalsIgnoreCase(currentAcademicYear.getUseBiometricForStudent())){
					setObjectList(adminManager.getAll("select studentname,admissionNumber,classNameAndSection,present,afternoonSession from vw_StudentDailyAttendance where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and attendanceDate = '"+today+"' "));
				}
				if("D".equalsIgnoreCase(currentAcademicYear.getManageStaffAttendanceBy()) && "N".equalsIgnoreCase(currentAcademicYear.getUseBiometricForStaff())){
					log.debug("select  accountId,staffName,roleName,present,afternoonSession from vw_StaffDailyAttendance where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and attendanceDate ='"+today+"' ");
					setTempList(adminManager.getAll("select  accountId,staffName,roleName,present,afternoonSession from vw_StaffDailyAttendance where custId="+getUserCustId()+" and academicYearId<="+getUserAcademicYearId()+" and attendanceDate ='"+today+"' "));
				}
				
				int countActiveClasses = adminManager.getCount("studyClass", "custId = "+ getUserCustId()+ " and academicYearId = "+getUserAcademicYearId()+" and filledSeats > 0");
				List<Object[]>	 attendanceRecordList = adminManager.getAll("select classSectionId,staffAccountId FROM staffDailyAttendanceSubmitTrack  where custId ="+ getUserCustId()+ " and academicYearId = "+getUserAcademicYearId()+
						" and Date(attendanceDate) = Date(curdate()) ");
				
				int countOfAttendaceSubmittedClasses = attendanceRecordList.size();
						
				setAttendanceSubmittedClassesCount(countActiveClasses - countOfAttendaceSubmittedClasses);
				String classIds ="";
				boolean temp = false;
				for( Object[] obj:attendanceRecordList){
					if(!temp){
						classIds = ((BigInteger) obj[0]).toString();
						temp = true;
					}else{
						classIds = classIds +","+obj[0];
					}
				}
				//Adding Attendence not sumitted class details
				List<StudyClass> studyClassList = null;
				if(!ObjectFunctions.isNullOrEmpty(classIds) && classIds.trim().length() > 0){
				setClassNameList(adminManager.getAll("select id, concat(className, if(isnull(section) or (section = ''),'', concat('-', section)) )from studyClass where custId = "
				+ getUserCustId()+ " and academicYearId = "+getUserAcademicYearId()+" and filledSeats > 0 and id not in ("+ classIds+ ") order by id asc"));
				
				studyClassList = adminManager.getAll(StudyClass.class,"custId = "+ getUserCustId()+ " and academicYearId = "+getUserAcademicYearId()+" and filledSeats > 0 and id not in ("+ classIds+ ") ");				
				
				}else{
					setClassNameList(adminManager.getAll("select id,concat(className, if(isnull(section) or (section = ''),'', concat('-', section)) )from studyClass where custId = "
							+ getUserCustId()+ " and academicYearId = "+getUserAcademicYearId()+" and filledSeats > 0  order by id asc"));
					
				studyClassList = adminManager.getAll(StudyClass.class,"custId = "+ getUserCustId()+ " and academicYearId = "+getUserAcademicYearId()+" and filledSeats > 0");				
				}
				String temp1  = null;
				//Adding class teacher for class for view purpose
				for(StudyClass obj: studyClassList){
					temp1 = null;
					for (Object  classTeacher :obj.getClassTeacherList()){
						temp1 = (String) classTeacher;
						if((!ObjectFunctions.isNullOrEmpty(obj.getSection()))&&(obj.getSection().trim()).equalsIgnoreCase(temp1.split(" : " )[0].trim())){
							obj.setGroupNumber(temp1.split(" : " )[1].trim());
							break;
						}
					}
				}
				Collections.sort(studyClassList);
				setStudyClassList(studyClassList);
				
				//Added for displaying currency symbol
				if(!ObjectFunctions.isNullOrEmpty(customer.getAddress()))
					setCountryId(customer.getAddress().getCountryId());
			
				currentAcademicYear = null;
				prvAcademicYear = null;
				customer = null;
				ajaxShowTaskDetailsLoginUser();
			} catch (Exception ex) { 
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 /* Check whether the CCReport generated as PDF */
	  @Actions( { @Action(value = "ajaxDownloadCCReportPDF", results = { @Result(type = "json", name = "success", params = {"includeProperties", "isExist" }) }) })
		public String ajaxDownloadCCReportPDF() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadCCReportPDF' method");
			}
			try {
				if(StringFunctions.isNotNullOrEmpty(getClassId()) && StringFunctions.isNotNullOrEmpty(getParamValue("examTypeId")) && StringFunctions.isNotNullOrEmpty(getPlTitle())){
					JSONObject templateJson=null;					
					/*this code used to scoreCardTemplate uploded or not*/
					/*@Ganesh Below line we face with customers here we are passing class name as "XI COMM & P EDUC - D" So in ajax url in any string come with & symbol it will treat as another varible parameter. So not I change that string with "~" in jsp page once get here I am replacing value with "&"*/
					setPlTitle(getPlTitle().replace("`", "&"));
					ScoreCardTemplates scoreCardTemplate =(ScoreCardTemplates) adminManager.get(ScoreCardTemplates.class, "custId="+ getUserCustId()+" and className='"+getPlTitle()+"' and examTypeId="+getParamValue("examTypeId"));
					if(ObjectFunctions.isNullOrEmpty(scoreCardTemplate)){
						templateJson =new JSONObject().put("isExist","NotGenerate");
						getResponse().getOutputStream().print(templateJson.getString("isExist"));
						templateJson = null;
						return null;
					} 
					JSONObject CCReportJson=null;
					//StringBuffer filePath = new StringBuffer("userfiles/ccer/"+getCustomerByCustId().getCustomerShortName()+"/").append(getCurrentAcademicYear().getAcademicYear()+"/").append(getClassId().toString());
					
					StringBuffer filePath = new StringBuffer("userfiles/ccer/"+getUserCustId()+"/").append(getUserAcademicYearId()+"/scorecards/").append(getParamValue("examTypeId")+"/").append(getClassId().toString());
					String fieLocation = getSession().getServletContext().getRealPath(filePath.toString());
					File file =new File(fieLocation);
					log.debug(file.exists()+"----is file for PDF---"+fieLocation);
					if(file.exists()){
						CCReportJson =new JSONObject().put("isExist", true);
					 }else{
						CCReportJson =new JSONObject().put("isExist",false);
					 }
					getResponse().getOutputStream().print(CCReportJson.getString("isExist"));
					CCReportJson = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
	@Actions( { @Action(value = "ajaxDeleteClassAttachment", results = { @Result(location = "../common/classAssignment/ajaxCreateClassAssignment.jsp", name = "success") }) })
	public String ajaxDeleteClassAttachment() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDeleteClassAttachment' method");
		}
		try{
			if(getTempId()>0 && getTempId1()>0){	
				
				Attachment attachment  = (Attachment)adminManager.get(Attachment.class, "id="+getTempId());
				if(!ObjectFunctions.isNullOrEmpty(attachment))
				{
					log.debug(attachment.getFilePath()+attachment.getFileName());
					adminManager.remove(Attachment.class, getTempId());		
					super.addActionMessage("Attachment removed successfully.");
					
					ClassAssignment classAssignment = (ClassAssignment) adminManager.get(ClassAssignment.class,getTempId1());
					if(!ObjectFunctions.isNullOrEmpty(classAssignment))
					{
						if(ObjectFunctions.isNullOrEmpty(classAssignment.getAttachmentList()))
						{
							classAssignment.setIsDocsUpload(Constants.NO_STRING);
							adminManager.merge(classAssignment);
						}
					}
					classAssignment = null;
				}
				
				setTempId(getTempId1());
				ajaxDoEditClassAssignment();
			}
		}
		catch(Exception ex){
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	public String doAssignedManageLeaves() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'doAssignedManageLeaves' method");
		}
		try {
			Customer customer = getCustomerByCustId();
			List rolesList=adminManager.getAll(Role.class);
			List leaveManagementList=null;
			leaveManagementList=adminManager.getAll(LeaveManagement.class,"custId="+getUserCustId()+" and permanentOrContract='"+getLeaveManagement().getPermanentOrContract()+"' and academicYearId="+getUserAcademicYearId()+" group by roleId");
			if(ObjectFunctions.isNullOrEmpty(leaveManagementList)){
				leaveManagementList=adminManager.getAll(LeaveManagement.class,"custId="+getUserCustId()+" and permanentOrContract='C' and academicYearId="+getUserAcademicYearId()+" group by roleId");
			}
			HashMap<Long, String> teachingAndNonTeachingStaffRoles = new HashMap<Long, String>();
			if(!ObjectFunctions.isNullOrEmpty(rolesList)){
				if(ObjectFunctions.isNotNullOrEmpty(leaveManagementList)){
					for(Object objRole:rolesList){
						Role role=(Role)objRole;
						if(!ObjectFunctions.isNullOrEmpty(role)){
							teachingAndNonTeachingStaffRoles.put(role.getId(),role.getName());
							log.debug("Role Name:" + role.getName());
						}
					}
					log.debug("***************");
					for(Object leaveManagementObj:leaveManagementList){
						LeaveManagement leaveObj=(LeaveManagement)leaveManagementObj;
						if(!ObjectFunctions.isNullOrEmpty(leaveObj))
						{
							String roleName=teachingAndNonTeachingStaffRoles.get(leaveObj.getRole().getId());
							log.debug("Role Name:" + roleName);
							if(roleName.equalsIgnoreCase(Constants.SCHOOL_PRINCIPAL )){
								getTeachingRoleMap().put(Constants.SCHOOL_PRINCIPAL, "Principal");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_VICEPRINCIPAL)){
								getTeachingRoleMap().put(Constants.SCHOOL_VICEPRINCIPAL, "Vice Principal");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_HOD )){
								getTeachingRoleMap().put(Constants.SCHOOL_HOD, "Hod");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_TEACHER )){
								getTeachingRoleMap().put(Constants.SCHOOL_TEACHER, "Teacher");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ASST_STAFF)){
								getTeachingRoleMap().put(Constants.SCHOOL_ASST_STAFF, "Asst Teacher");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ADMIN_COORDINATOR)){
								getTeachingRoleMap().put(Constants.SCHOOL_ADMIN_COORDINATOR, "Admin Coordinator");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_LIBRARIAN )){
								getNonTeachingRoleMap().put(Constants.SCHOOL_LIBRARIAN, "Librarian");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_CLERK)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_CLERK, "Clerk");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_FINANCE)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_FINANCE, "Finance");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_OTHER)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_OTHER, "Others");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_PEON)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_PEON, "Peon");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_AYAH)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_AYAH, "Ayah");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_CONDUCTOR)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_CONDUCTOR, "Conductor");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_SYSTEMADMINISTRATOR)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_SYSTEMADMINISTRATOR, "System Administrator");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_LABASST)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_LABASST, "LabAsst");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_MANAGEMENTTRAINEE)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_MANAGEMENTTRAINEE, "Management Trainee");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_WATCHMAN)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_WATCHMAN, "Watchman");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_TYPIST)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_TYPIST, "Typist");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_SWEEPER)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_SWEEPER, "Sweeper");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_PUBLICRELATIONOFFICER)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_PUBLICRELATIONOFFICER, " Public Relation Officer");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ADMINOFFICER)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_ADMINOFFICER, "Admin Officer");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_HOSTEL)){
								if(customer.isHostelModuleStatus())
									getNonTeachingRoleMap().put(Constants.SCHOOL_HOSTEL, "Hostel");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_HOSTELFINANCE)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_HOSTELFINANCE, "HostelFinance");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_TRANSPORT)){
								if(customer.isTransportModuleStatus())
									getNonTeachingRoleMap().put(Constants.SCHOOL_TRANSPORT,"Transport");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_HELPER )){
								getNonTeachingRoleMap().put(Constants.SCHOOL_HELPER, "Helper");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_DRIVER)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_DRIVER, "Driver");
							}
							else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ADMIN)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_ADMIN, "Admin");
							}
							else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ROLE_MESS_MANAGER)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_MESS_MANAGER, "Mess Manager");
							}
							else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ROLE_DIRECTOR)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_DIRECTOR, "Director");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ROLE_STOREKEEPER)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_STOREKEEPER, "Store Keeper");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ROLE_RECEPTIONIST)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_RECEPTIONIST, "Receptionist");
							}else if(roleName.equalsIgnoreCase(Constants.SCHOOL_ROLE_STAFF_NURSE)){
								getNonTeachingRoleMap().put(Constants.SCHOOL_ROLE_STAFF_NURSE, "Staff Nurse");
							}
							else{
								if(customer.isTransportModuleStatus())
									getNonTeachingRoleMap().put(Constants.SCHOOL_TRANSPORTFINANCE, "TransportFinance");
							}
							roleName=null;
						}leaveObj=null;leaveManagementObj=null;
					}					
				}leaveManagementList=null;
			}rolesList=null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxGetRoleByLeaveDetails", results = { @Result(location = "staff/leaves/ajaxGetRoleByLeaveDetails.jsp", name = "success") }) })
	public String ajaxGetRoleByLeaveDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetRoleByLeaveDetails' method");
		}
		try {
			setLeaveManagement(null);
			LeaveManagement leavemangementObj=null;
			if(StringFunctions.isNotNullOrEmpty(getAnyTitle()) && StringFunctions.isNotNullOrEmpty(getAnyId())){
				Role role = adminManager.getRoleByName(getAnyTitle());
				leavemangementObj = (LeaveManagement) adminManager.get(LeaveManagement.class,"custId="+getUserCustId()+" and roleId="+role.getId()+" and permanentOrContract='"+getAnyId()+"' and academicYearId="+getUserAcademicYearId());
				role=null;
			}
			setLeaveManagement(leavemangementObj);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoStaffBiometricAttendanceForm", results = { @Result(location = "../common/staffAttendance/ajaxViewStaffBiometricAttendance.jsp", name = "success") }) })
	public String ajaxDoStaffBiometricAttendanceForm(){
		try{
			setAttendanceDate(DateFormatter.getTodayDateStr(DateFormatter.YYYY_MM_DD_PATTERN));
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxManageLoginAccessbilityForRoles", results = { @Result(location = "staff/ajaxViewLoginAccessRoles.jsp", name = "success") }) })
	public String ajaxManageLoginAccessbilityForRoles(){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetLoginAccessbilityForRoles' method");
		}
		try{
			List<Role> rolesList = null;
			 rolesList = adminManager.getAll(Role.class,"id in(2,8,12,31,35,53)");
			 if(!ObjectFunctions.isNullOrEmpty(rolesList)){
					setTempList2(rolesList);
					for(Role roleId : rolesList){
						LoginAccessbilityRoles matchedRoleIds = (LoginAccessbilityRoles)adminManager.get(LoginAccessbilityRoles.class,"roleId="+roleId.getId()+" and customerId="+getUserCustId()+"  and status='"+Constants.YES_STRING+"' ");
						if(!ObjectFunctions.isNullOrEmpty(matchedRoleIds)){
							getTempList().add(matchedRoleIds.getRoleId());
						}
					}
					rolesList = null;
				}
			 rolesList = adminManager.getAll(Role.class,"id in(4,9,10,11,14,32,38,42,54,55)");
			 if(!ObjectFunctions.isNullOrEmpty(rolesList)){
				 	setObjectList(rolesList);
					for(Role roleId : rolesList){
						LoginAccessbilityRoles matchedRoleIds = (LoginAccessbilityRoles)adminManager.get(LoginAccessbilityRoles.class,"roleId="+roleId.getId()+" and customerId="+getUserCustId()+"  and status='"+Constants.YES_STRING+"' ");
						if(!ObjectFunctions.isNullOrEmpty(matchedRoleIds)){
							getTempList().add(matchedRoleIds.getRoleId());
						}
					}
					rolesList = null;
				}			 
			rolesList = adminManager.getAll(Role.class,"id in(3,7)");
				if(!ObjectFunctions.isNullOrEmpty(rolesList)){
					setTempList1(rolesList);
					for(Role roleId : rolesList){
						LoginAccessbilityRoles matchedRoleIds = (LoginAccessbilityRoles)adminManager.get(LoginAccessbilityRoles.class,"roleId="+roleId.getId()+" and customerId="+getUserCustId()+"  and status='"+Constants.YES_STRING+"' ");
						if(!ObjectFunctions.isNullOrEmpty(matchedRoleIds)){
							getTempList().add(matchedRoleIds.getRoleId());
						}
					}
					rolesList = null;
				}
			
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxChangeStatusForCheckedRoles", results = { @Result(location = "staff/ajaxViewLoginAccessRoles.jsp", name = "success") }) })
	public String ajaxChangeStatusForCheckedRoles(){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxChangeStatusForCheckedRoles' method");
		}
		try{
			if(!ObjectFunctions.isNullOrEmpty(getSelectedId())){
				adminManager.updateSelectedLoginRoles(getSelectedId(),getUserCustId());
			}
			if(!ObjectFunctions.isNullOrEmpty(getAnyId())){
				adminManager.updateUnselectedLoginRoles(getAnyId(),getUserCustId());				
			}
			super.addActionMessage("Roles Access status updated successfully.");
			ajaxManageLoginAccessbilityForRoles();
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "asstStaffClassHome", results = { @Result(location = "../common/attendance/ajaxManageStudentAttendance.jsp", name = "success") }) })
	public String asstStaffClassHome(){
		if (log.isDebugEnabled()) {
			log.debug("Entering 'asstStaffClassHome' method");
		}
		try{		
			ajaxDoGetAttendanceForm();
			ajaxShowTaskDetailsLoginUser();
			ajaxDoGetSchoolWideAlertsList();
			getSchoolWideAlertsforAllRoles();
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("showTaskReminder")))
				getTaskReminderToUserLogin();
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCheckStudentAdmissionReceiptNumber", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
	public String ajaxCheckStudentAdmissionReceiptNumber() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCheckStudentAdmissionReceiptNumber' method");
		}
		try {
			String receiptNumber = getParamValue("keyWord");
			Customer customer = getCustomerByCustId();
			if (StringFunctions.isNotNullOrEmpty(receiptNumber)) {
				int receiptAvailableCount = 0 ;
				if(customer.isAcademicWiseFeeReceipt())
					receiptAvailableCount = adminManager.getCount("onlineApplicationDetails", "custId=" + getUserCustId()+ " and receiptNumber='" + receiptNumber + "' and academicYearId="+getUserAcademicYearId());
				else
					receiptAvailableCount = adminManager.getCount("onlineApplicationDetails", "custId=" + getUserCustId()+ " and receiptNumber='" + receiptNumber + "'");
				if (receiptAvailableCount > 0) {
					setAutoCheck("1");
				} else {
					setAutoCheck("0");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoStaffMonthWiseLeaveDetails", results = { @Result(location = "staff/leaves/ajaxDoViewStaffList.jsp", name = "success") }) })
	public String ajaxDoStaffMonthWiseLeaveDetails() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoStaffMonthWiseLeaveDetails' method");
		}
		try {
			setViewStaffAccountDetails(adminManager.getAllStaffList(getUserCustId(),getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxGetStaffMonthlyLeaveDetails", results = { @Result(location = "staff/leaves/ajaxViewStaffMonthlyLeavesList.jsp", name = "success") }) })
	public String ajaxGetStaffMonthlyLeaveDetails() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetStaffMonthlyLeaveDetails' method");
		}
		try {
			setViewStaffPersonAccountDetailsList(adminManager.getAllStaffList(getUserCustId(),getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoAddStaffRoomDetails", results = { @Result(location = "ajaxAddStaffRooms.jsp", name = "success") , @Result(location = "ajaxStaffRoomssList.jsp", name = "roomsList") }) })
	public String ajaxDoAddStaffRoomDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddStaffRoomDetails' method");
		}
		try {
			StaffRoom staffRooms = (StaffRoom)adminManager.get(StaffRoom.class, " academicYearId=" + getUserAcademicYearId() + " and custId=" + getUserCustId());
			if(!ObjectFunctions.isNullOrEmpty(staffRooms))
			{
				setStaffRoom(staffRooms);
				if(StringFunctions.isNullOrEmpty(getAnyTitle()))
					return "roomsList";
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	

	@Actions( { @Action(value = "ajaxAddOrUpdateStaffRoomsForSchool", results = { @Result(location = "ajaxStaffRoomssList.jsp", name = "success") }) })
	public String ajaxAddOrUpdateStaffRoomsForSchool() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEditManageLeaves' method");
		}
		try {
			StaffRoom staffRoom = new StaffRoom();
			if (getStaffRoom().getId() > 0) {
				staffRoom = (StaffRoom) adminManager.get(StaffRoom.class, getStaffRoom().getId());
				super.addActionMessage("Staff rooms updated successfully.");
			}
			else
				super.addActionMessage("Staff rooms added successfully.");
				
			//Customer customer = getCustomerByCustId();
			staffRoom.setNoofRoomsForHeadMasters(getStaffRoom().getNoofRoomsForHeadMasters());
			staffRoom.setNoofRoomsForTeachers(getStaffRoom().getNoofRoomsForTeachers());
			staffRoom.setNoofRoomsForNonTeachers(getStaffRoom().getNoofRoomsForNonTeachers());
			staffRoom.setAcademicYearId(getAcademicYearId());
			staffRoom.setLastUpdatedById(getUser().getId());
			staffRoom.setLastAccessDate(new Date());
			staffRoom.setLastUpdatedDate(new Date());
			staffRoom.setCustId(getUserCustId());
			//customer.addStaffRooms(staffRoom);
			adminManager.merge(staffRoom);
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxDoAddStaffRoomDetails();
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxViewEventPhotos", results = { @Result(location = "event/ajaxViewEventPhotos.jsp", name = "success") }) })
	public String ajaxViewEventPhotos() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewEventPhotos' method");
		}
		try {
			List<BigInteger> albumAttachmentIds=null;
			List albumAttachmentList=null;
			List<EventsAlbum> eventsAlbumList= null;
			if(!ObjectFunctions.isNullOrEmpty(getEventsAlbum()))
			{
				if(!ObjectFunctions.isNullOrEmpty(getEventsAlbum().getEventId()))
				{
					eventsAlbumList=adminManager.getAll(EventsAlbum.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+ " and eventId="+getEventsAlbum().getEventId());
				}
			}
			else
				eventsAlbumList=adminManager.getAll(EventsAlbum.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
			if(!ObjectFunctions.isNullOrEmpty(eventsAlbumList)){
				for(EventsAlbum eventsAlbum : eventsAlbumList){	
					albumAttachmentIds = adminManager.getAll("select albumAttachmentId from eventAndAlbum where eventAlbumId="+eventsAlbum.getId());
						if (!ObjectFunctions.isNullOrEmpty(albumAttachmentIds)) {
							String albumAttIdsString=null;
							if (ObjectFunctions.isNotNullOrEmpty(albumAttachmentIds)) 
								albumAttIdsString = StringFunctions.convertListToCommaDelimitedString(albumAttachmentIds);
							else
								albumAttIdsString="0";
							albumAttachmentList= adminManager.getAll(AlbumAttachment.class, "id in ("+albumAttIdsString+")"+" ORDER BY createdDate DESC LIMIT 4");
							if(!ObjectFunctions.isNullOrEmpty(albumAttachmentList)){
								eventsAlbum.setAlbumAttachmentList(albumAttachmentList);
							}
							albumAttachmentList = null;
						}
						getObjectList().add(eventsAlbum);
						eventsAlbum=null;
				}
				
			} 
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( { @Action(value = "ajaxDoAddAlbum", results = { @Result(location = "event/ajaxDoAddAlbum.jsp", name = "success") }) })
	public String ajaxDoAddAlbum() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddAlbum' method");
		}
		try {
			log.debug(getTempString2());
			setObjectList(adminManager.getAllEventsByCustIdAndAcademicYearId(getUserCustId(),getUserAcademicYearId()));
			setTempList(adminManager.getAll(AlbumAttachment.class, " id in ("+getSelectedId()+")"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxAddPhotos", results = { @Result(location = "event/ajaxSelectPhotos.jsp", name = "success") }) })
	public String ajaxDoAddPhotos() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoAddPhotos' method");
		}
		try {
		    if(getFileUpload().size()!=0){
		    	AcademicYear academicYear=(AcademicYear) adminManager.get(AcademicYear.class, "id="+getUserAcademicYearId());
		    	 AlbumAttachment photos = null;
		    	 List<String> photosIds = new ArrayList<String>();
		    	 if(getFileUpload().size()!=0){
		    	  for(int i=0;i<getFileUpload().size();i++){
		    		 if(!ObjectFunctions.isNullOrEmpty(getFileUpload().get(i))){
			    		 File file = getFileUpload().get(i);
			    		 String fileName = getFileUploadFileName().get(i);
			    		 String ext = FilenameUtils.getExtension(fileName);
			    		 try {
			    			 	photos = new AlbumAttachment();
			    			 	photos.setFilePath(adminManager.getUploadImageFilePath(file, academicYear.getAcademicYear(),fileName));
			    			 	photos.setFileName(fileName);
			    			 	photos.setCustId(getUserCustId());
			    				photos.setAcademicYearId(academicYear.getId());
							} catch (Throwable e) {
								e.printStackTrace();
							}
						 photos = (AlbumAttachment) adminManager.saveOrUpdateObject(photos);
						 photosIds.add(String.valueOf(photos.getId()));
		    		 }
		        }
		    	  setSelectedId(StringFunctions.convertListToCommaDelimitedString(photosIds)); //this is uesd to when upload the new photos in edit screen
		    	  setTempString(getSelectedId());
		      }
		     photos = null;
		     if(getTempId2()==0) //here tempId2 is a eventAlbum id
		       ajaxDoAddAlbum();
		     
		     academicYear = null;
		    }
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { 
		@Action(value = "ajaxAddAlbum", results = { @Result(location = "event/ajaxViewEventPhotos.jsp", name = "success") }),
		@Action(value = "ajaxUpdateSchoolPhotos", results = { @Result(location = "event/ajaxSelectPhotos.jsp", name = "success") }),
		@Action(value = "ajaxUpdateAlbum", results = { @Result(location = "event/ajaxViewEventPhotos.jsp", name = "success") }) })
	public String ajaxAddOrUpdatePhotos() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxAddPhotos' method");
		}
		try {
			
			 if(getFileUpload().size()!=0){
				ajaxDoAddPhotos();
			}
			 List<AlbumAttachment> albumAttachmentList = null;
			EventsAlbum album = null;
				if(getTempId2()>0) {
					album = ((EventsAlbum)adminManager.get(EventsAlbum.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+getTempId2()));
					album.setLastUpdatedById(getUser().getId());
					super.addActionMessage("Album photos updated successfully.");
				}else{
					album = new EventsAlbum();
					album.setCreatedById(getUser().getId());
					album.setCreatedDate(new Date());
					super.addActionMessage("Album photos added successfully.");
				}
				album.setCustId(getUserCustId());
				album.setAcademicYearId(getUserAcademicYearId());
				album.setEventId(getEventsAlbum().getEventId());
				album.setAlbumName(getEventsAlbum().getAlbumName());
				if(!StringFunctions.isNullOrEmpty(getSelectedId())) {
					albumAttachmentList = adminManager.getAll(AlbumAttachment.class, " id in ("+getSelectedId()+")");
	 			}
				else if(!StringFunctions.isNullOrEmpty(getTempString()) &&  getTempId2() == 0) 
				{
					albumAttachmentList = adminManager.getAll(AlbumAttachment.class, " id in ("+getTempString()+")");
				}
				
				if(!ObjectFunctions.isNullOrEmpty(albumAttachmentList))
 	 			{
					album.getAlbumAttachment().addAll(ConvertUtil.convertListToSet(albumAttachmentList));
					//albumAttachmentList = null;
 	 			}
				
				album=(EventsAlbum)adminManager.save(album);
 				
 				 Events events =  (Events)adminManager.get(Events.class, "id="+album.getEventId());
				 if(!ObjectFunctions.isNullOrEmpty(events))
				 {
					 EventsNotificationThread R1 = new EventsNotificationThread(events,events.getId(),Constants.YES_STRING,albumAttachmentList);
					 R1.start();
				 }
				 events = null;
 				if(getTempId2()==0 || "UpdateAlbumView".equalsIgnoreCase(getAnyTitle())){ //here tempId2 is a eventAlbum id 
					 ajaxViewEventPhotos();
				 }else{
					 ajaxEidtAlbumPhotos();
				 }
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxEidtAlbumPhotos", results = { @Result(location = "event/ajaxEditAlbumDetails.jsp", name = "success") }),
				@Action(value = "ajaxViewAllPhotos", results = { @Result(location = "event/ajaxViewAllPhotos.jsp", name = "success") })})
	public String ajaxEidtAlbumPhotos() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxEidtAlbumPhotos' method");
		}
		try {
			if(getTempId2()>0){
				setEventsAlbum((EventsAlbum)adminManager.get(EventsAlbum.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id="+getTempId2()));
				setObjectList(adminManager.getAllEventsByCustIdAndAcademicYearId(getUserCustId(),getUserAcademicYearId()));
				setTempList(ConvertUtil.convertSetToList(getEventsAlbum().getAlbumAttachment()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( {
		@Action(value = "ajaxDeleteEditViewPhotos", results = { @Result(location = "event/ajaxSelectPhotos.jsp", name = "success") }),
		@Action(value = "ajaxDeletePhotos", results = { @Result(location = "event/ajaxViewEventPhotos.jsp", name = "success") }) })
	public String ajaxDeletePhotos() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDeletePhotos' method");
		}
		try {
			if(!StringFunctions.isNullOrEmpty(getAnyId()) && getTempId2()>0){
				AlbumAttachment albumAttachment = (AlbumAttachment) adminManager.get(AlbumAttachment.class, "id="+getAnyId());
				if(!ObjectFunctions.isNullOrEmpty(albumAttachment))
				{
					log.debug(albumAttachment.getFilePath());
					StringBuffer query = new StringBuffer("albumAttachmentId="+albumAttachment.getId()+" and eventAlbumId="+getTempId2());
					adminManager.remove("eventAndAlbum",query.toString());
					adminManager.remove("albumAttachment","id="+albumAttachment.getId());
					super.addActionMessage("Successfully removed photos.");
					List<BigInteger> albumAttachmentIds = adminManager.getAll("select albumAttachmentId from eventAndAlbum where eventAlbumId="+ getTempId2());
					if(albumAttachmentIds.size() == 0)
						adminManager.remove(EventsAlbum.class,getTempId2());
					query=null;
					albumAttachmentIds=null;
				}
				albumAttachment=null;
			}
			if("deleteUpdateAlbum".equalsIgnoreCase(getAnyTitle())){
				ajaxEidtAlbumPhotos();
			}else{
				ajaxViewEventPhotos();
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxChooseFromSmsPhotos", results = { @Result(location = "event/ajaxUpdateSchoolPhotos.jsp", name = "success") }) })
	public String ajaxChooseFromSmsPhotos() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxChooseFromSmsPhotos' method");
		}
		try {
				setTempList(adminManager.getAll(AlbumAttachment.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDownloadHolidaysDetails", results = { @Result(location = "academic/ajaxEditUploadHolidaysDetails.jsp", name = "success") }) })
	public String ajaxDownloadHolidaysDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDownloadHolidaysDetails' method");
		}
		try {
			HashMap<String, String> schoolHolidaysMap = new HashMap<String, String>();
			schoolHolidaysMap.put("H", "Govt Holidays");
			schoolHolidaysMap.put("W", "Week Holidays");
			setLeaveTypes(schoolHolidaysMap);
			AcademicYear academicYear = getCurrentAcademicYear();
			if(!ObjectFunctions.isNullOrEmpty(academicYear)){
				if ("CH".equalsIgnoreCase(academicYear.getHolidayStatus())) {
					checkStudyClassHavingStudentsOrNot();
				}
			}
			academicYear = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxSendEmail", results = { @Result(location = "secretary/ajaxViewSchoolDetailsHome.jsp", name = "success") }),
			     @Action(value = "ajaxSendMessageToManager", results = { @Result(location = "secretary/ajaxViewSchoolDetailsHome.jsp", name = "success") })
	})
	public String ajaxSendEmail() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSendEmail' method");
		}
		try {			
			Set<String> mobileNumberset = new HashSet<String>();
			Customer customer = adminManager.getCustomerByCustId(getCustId());
			if (!ObjectFunctions.isNullOrEmpty(customer) && customer.isCheckMobileService()) 
			{
				SMSServiceProviders smsServiceProvider = (SMSServiceProviders)adminManager.getSMSServiceProviderByCustId(customer.getSmsServiceProviderId());
				if("M".equalsIgnoreCase(getTempString()))
				{
					StringBuffer msgDesc = new StringBuffer();
					getMessages().setCustomer(customer);
					getMessages().setStatus("SM");//SM means school Manager
					getMessages().setAcademicYear(getCurrentAcademicYear());
					mobileNumberset.add(getAnyId());
					getMessages().setPurposeType("Send MSG To School Manager");
					log.debug("Before Calling Deviler SMS.....mobileNumberset---"+mobileNumberset+"-------messageDesc-----"+getMessages().getMessageDescription());
					if (communicationManager.deliverSms(getMessages(), mobileNumberset, smsServiceProvider)) {
						super.addActionMessage("SMS has been delivered successfully.");
					} else {
						super.addActionError("SMS has not been delivered.");
					}
				}
				else
				{
					String subject = getParamValue("subject");
					User user = null;
					if (getTempId() != 0) {
						user = (User) staffManager.get(User.class, getTempId());
						if (!ObjectFunctions.isNullOrEmpty(user)) {
							String[] emailAddresses = new String[1];
							emailAddresses[0] = getParamValue("messageTo");
							MailUtil mailUtil=new MailUtil(emailAddresses, subject, getParamValue("summaryMessage"), user);
							mailUtil.sendEmailToSchoolManagerFromSecretary(user);
							mailUtil=null;
							super.addActionMessage("mail sent successfully.");
						}user = null;
						setSubject(null);
						setDescription(null);
					}
				}
				
				setCustId(customer.getId());
			} else {
				super.addActionError("SMS service disabled, enable service.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxViewSchoolDetailsHome();
		return SUCCESS;
	}
	@Actions( {@Action(value = "schoolManagerDashboard", results = { @Result(location = "manager/schoolManagerDashboard.jsp", name = "success") }) })
	public String schoolManagerDashboard() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'schoolManagerDashboard' method");
		}
		try {
			setCustId(getUserCustId());
			FinancialYear financialYear = (FinancialYear)adminManager.get(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='Y'");
			if(!ObjectFunctions.isNullOrEmpty(financialYear))
				setFinancialYear(financialYear);
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionCurrentFinancialYearId")))
			{
				setTempId(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()));
				setTempList(adminManager.getAllViewBudgetRequestDetailsByFinancialYearIdCustIdStatus(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()), getUserCustId(), "R,A"));
				setTempList1(adminManager.getAllViewBudgetRequestDetailsByFinancialYearIdCustIdStatus(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()), getUserCustId(), "N,F,P"));
			}
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("showTaskReminder")))
				getTaskReminderToUserLogin();
			setObjectList(adminManager.getAllViewMeetingRequestDetailsByOrgIdCustIdDate(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()), getUserCustId(), ""));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxParticularDetailsHome", results = { @Result(location = "secretary/ajaxParticularDetailsHome.jsp", name = "success") }) })
	public String ajaxParticularDetailsHome() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxParticularDetailsHome' method");
		}
		try {
			ajaxViewParticualrs();
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoCreateParticularType", results = { @Result(location = "secretary/ajaxCreateParticularType.jsp", name = "success") }) })
	public String ajaxDoCreateParticularType() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCreateParticularType' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getParticularType())){
				if(getParticularType().getId() > 0)
					setParticularType((ParticularType) adminManager.get(ParticularType.class, getParticularType().getId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCreateParticularType", results = { @Result(location = "secretary/ajaxViewAllPerticularTypesDetails.jsp", name = "success") }) })
	public String ajaxCreateParticularType() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCreateParticularType' method");
		}
		try {
			ParticularType particularType = new ParticularType();
			if(getParticularType().getId() > 0)
			{
				super.addActionMessage("Successfully updated particular type.");
				particularType = (ParticularType) adminManager.get(ParticularType.class, getParticularType().getId());
			}
			else
				super.addActionMessage("Successfully added particular type.");
			particularType.setParticularTypeName(getParticularType().getParticularTypeName());
			particularType.setStatus(Constants.YES_STRING);
			particularType.setOrgId(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()));
			particularType.setCreatedById(getUser().getId()); 
			particularType.setCreatedDate(new Date());
			adminManager.save(particularType);
			particularType = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxViewParticualrTypes();
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxViewParticualrTypes", results = { @Result(location = "secretary/ajaxViewAllPerticularTypesDetails.jsp", name = "success") }) })
	public String ajaxViewParticualrTypes() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewParticualrTypes' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
				setObjectList(adminManager.getAll(ParticularType.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='"+Constants.YES_STRING+"'"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoCreateParticular", results = { @Result(location = "secretary/ajaxCreateParticulars.jsp", name = "success") }) })
	public String ajaxDoCreateParticular() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCreateParticularType' method");
		}
		try {
			ajaxViewParticualrTypes();
			if(!ObjectFunctions.isNullOrEmpty(getParticular())){
				if(getParticular().getId() > 0 && getParticularType().getId() > 0)
				{
					setParticular((Particular) adminManager.get(Particular.class, getParticular().getId()));
					setParticularType((ParticularType) adminManager.get(ParticularType.class, getParticularType().getId()));
				}
				else{
					setParticular(null);
					setParticularType(null);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCreateParticulars", results = { @Result(location = "secretary/ajaxParticularDetailsHome.jsp", name = "success") }) })
	public String ajaxCreateParticulars() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCreateParticulars' method");
		}
		try {
			Particular particular = null;
			ParticularType particularType = (ParticularType) adminManager.get(ParticularType.class, getParticularType().getId());
			if(getParticular().getId() > 0)
			{
				particular = (Particular) adminManager.get(Particular.class, getParticular().getId());
				super.addActionMessage("Successfully updated particular.");
			}
			else
			{
				particular = new Particular();
				super.addActionMessage("Successfully added particular.");
			}
			particular.setParticularName(getParticular().getParticularName());
			particular.setStatus(Constants.YES_STRING);
			particular.setCreatedById(getUser().getId()); 
			particular.setCreatedDate(new Date());
			particularType.addParticulars(particular);
			adminManager.save(particularType);
			particularType = null;
			particular = null;
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxViewParticualrs();
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxViewParticualrs", results = { @Result(location = "secretary/ajaxViewPerticularDetails.jsp", name = "success") }) })
	public String ajaxViewParticualrs() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewParticualrTypes' method");
		}
		try {
			setObjectList(adminManager.getAll("select particularTypeName,particularName,p.id,p.particularTypeId from particular p LEFT JOIN particularType pt on (pt.id=p.particularTypeId) where orgId='"+getSession().getAttribute("SessionOrganizationId").toString() + "' and pt.status='"+Constants.YES_STRING+"'"));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxFinancialYearHome", results = { @Result(location = "secretary/ajaxFinancialYearHome.jsp", name = "success") }) })
	public String ajaxFinancialYearHome() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxFinancialYearHome' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
			{
				setObjectList(adminManager.getAll(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString())));
				setFinancialYear((FinancialYear)adminManager.get(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='"+Constants.YES_STRING+"'"));
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxDoCreateFinancialYear", results = { @Result(location = "secretary/ajaxCreateFinancialYear.jsp", name = "success") }) })
	public String ajaxDoCreateFinancialYear() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoCreateFinancialYear' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getFinancialYear())){
				if(getFinancialYear().getId() > 0)
					setFinancialYear((FinancialYear)adminManager.get(FinancialYear.class,getFinancialYear().getId()));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxCreateFinancialYear", results = { @Result(location = "secretary/ajaxViewFinancialYearDetails.jsp", name = "success") }) })
	public String ajaxCreateFinancialYear() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCreateParticularType' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
			{
				FinancialYear financialYear = null;
				if(getFinancialYear().getId() > 0)
				{
					super.addActionMessage("Successfully updated financial year.");
					financialYear = (FinancialYear)adminManager.get(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='"+Constants.YES_STRING+"'");
				}
				else
				{
					super.addActionMessage("Successfully added financial year.");
					financialYear = new FinancialYear();
				}
				financialYear.setDescription(getFinancialYear().getDescription());
				financialYear.setStartDate(getFinancialYear().getStartDate());
				financialYear.setEndDate(getFinancialYear().getEndDate());
				financialYear.setStatus(Constants.YES_STRING);
				financialYear.setOrgId(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()));
				financialYear.setYearName(getFinancialYear().getGenerateAcacemicYearStr());
				financialYear.setCreatedById(getUser().getId()); 
				financialYear.setCreatedDate(new Date());
				adminManager.save(financialYear);
				financialYear = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxFinancialYearHome();
		return SUCCESS;
	}
	@Actions( {@Action(value = "ajaxManagerBudgetRequestDetails", results = { @Result(location = "manager/ajaxManagerBudgetRequestDetails.jsp", name = "success") }) })
	public String ajaxManagerBudgetRequestDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxManagerBudgetRequestDetails' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
				setObjectList(adminManager.getAll(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString())));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	@Actions( {@Action(value = "ajaxDoBudgetRequestForm", results = { @Result(location = "manager/ajaxBudgetRequestForm.jsp", name = "success") }) })
	public String ajaxDoBudgetRequestForm() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoBudgetRequestForm' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
			{
				FinancialYear financialYear = (FinancialYear)adminManager.get(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='Y'");	
				if(!ObjectFunctions.isNullOrEmpty(financialYear))
				{
					setWeekDaysList(DateFunctions.ajaxGetAllMonthNamesMonthIdByStartAndEndDate(financialYear.getStartDate(),financialYear.getEndDate()));
					ajaxViewParticualrTypes();
					setFinancialYear(financialYear);
				}
				financialYear = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxAddSchoolAnnualBudget", results = { @Result(location = "manager/ajaxManagerBudgetRequestDetails.jsp", name = "success") }),
		 @Action(value = "ajaxApproveORRejectSchoolAnnualBudget", results = { @Result(location = "secretary/ajaxViewSchoolDetailsHome.jsp", name = "success") }) 	
	})
	public String ajaxAddSchoolAnnualBudget() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxCreateParticularType' method");
		}
		long custId = 0;
		try {
			//String monthId = getParamValue("requestedMonth");
			int monthId = getBudgetRequest().getRequestedMonth();
			custId = getUserCustId();
			String budgetType = Constants.EVENT_RECURRING_STATUS;
			long budgetRequestId =0;
			if(monthId > 0 && getFinancialYear().getId() > 0)
			{
				BudgetRequest budgetRequest = null;
				String comments = getParamValue("budgetRequest.comments");
				String createdBy = Constants.CHURCH_WIDE_MESSAGE_TYPE;
				
				if(getUser().isSecretary() || getUser().isSecretaryPA())
				{
					if(getBudgetRequest().getId() > 0)
					{
						budgetRequestId = getBudgetRequest().getId();
						createdBy = "PA";
						custId = getBudgetRequest().getCustId();
						if(getUser().isSecretaryPA())
							adminManager.remove("budgetParticularHistory", "budgetRequestId="+getBudgetRequest().getId() + " and createdBy='PA'");
						else
							adminManager.remove("finalBudgetRequest", "budgetRequestId="+getBudgetRequest().getId() + " and createdBy='S'");
					}
					super.addActionMessage("Successfully updated budget request.");
				}
				else if(getUser().isSchoolManager())
				{
					
					BudgetRequest budgetRequestObj =(BudgetRequest) adminManager.get(BudgetRequest.class," custId="+getUserCustId() + " and financialYearId=" + getFinancialYear().getId() + " and requestedMonth="+monthId);
					if(!ObjectFunctions.isNullOrEmpty(budgetRequest))
					{
						budgetType = "M";
					}
					budgetRequestObj = null;
					super.addActionMessage("Successfully submitted budget request.");
				}
					
				if(getUser().isSecretary())
				{
					createdBy = "S";
					budgetRequest = (BudgetRequest) adminManager.saveBudgetRequest(custId, getFinancialYear().getId(),getTotalAmount(), getTempString(), getUser().getId(), monthId, comments,createdBy,budgetRequestId,true,budgetType);
				}
				else
					budgetRequest = (BudgetRequest) adminManager.saveBudgetRequest(custId, getFinancialYear().getId(),getTotalAmount(), getTempString(), getUser().getId(), monthId, comments,createdBy,budgetRequestId,false,budgetType);
				if(!ObjectFunctions.isNullOrEmpty(budgetRequest))
				{
					
					if(getUser().isSecretary() || getUser().isSecretaryPA())
					{
						if(getUser().isSecretaryPA())
						{
							if("SF".equalsIgnoreCase(getAnyId()))
							{
								budgetRequest.setStatus("F");
							}
						}
						else if(getUser().isSecretary())
						{
							budgetRequest.setStatus(getAnyId());
						}
					}
					else
					{
						budgetRequest.setManagerId(getUser().getId());
					}
					adminManager.save(budgetRequest);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		if(getUser().isSecretary() || getUser().isSecretaryPA())
		{
			setCustId(custId);
			//secretaryDashboard();
			ajaxViewSchoolDetailsHome();
		}
		else
			ajaxManagerBudgetRequestDetails();
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxViewManagerBudgetRequestsList", results = { @Result(location = "manager/ajaxViewManagerBudgetRequestsList.jsp", name = "success") }) })
	public String ajaxViewManagerBudgetRequestsList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewManagerBudgetRequestsList' method");
		}
		try {
			if(getFinancialYear().getId() > 0)
			{
				setTempList(adminManager.getAll(BudgetRequest.class," custId="+getUserCustId() + " and financialYearId=" + getFinancialYear().getId() + " and ( status = '" + Constants.NO_STRING + "' OR status = '" + Constants.PENDING_STATUS + "' OR status = 'F')"));
				setTempList1(adminManager.getAll(BudgetRequest.class," custId="+getUserCustId() + " and financialYearId=" + getFinancialYear().getId() + " and ( status = '" + Constants.ACTIVE_STATUS + "' OR status = '" + Constants.REJECTED_STATUS + "')"));
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxViewBudgetDetails", results = { @Result(location = "manager/ajaxViewBudgetDetails.jsp", name = "success") }),
		@Action(value = "ajaxViewBudgetDetailsBySecratary", results = { @Result(location = "secretary/ajaxViewBudgetDetailsBySecratary.jsp", name = "success") }) 
	})
	public String ajaxViewBudgetDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewBudgetDetails' method");
		}
		try {
			ajaxDoBudgetRequestForm();
			if(getBudgetRequest().getId() > 0)
			{
				BudgetRequest budgetRequest = (BudgetRequest)adminManager.get(BudgetRequest.class,getBudgetRequest().getId());
				if(!ObjectFunctions.isNullOrEmpty(budgetRequest)){
					setBudgetRequest(budgetRequest);
				}
				setTempString(getTempString());
				budgetRequest = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetajaxViewBudgetJsonRes", results = { @Result(type = "json", name = "success", params = {"includeProperties", "timingsList.*" }) }) })
	public String ajaxGetajaxViewBudgetJsonRes() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetAttendanceSettingsList' method");
		}
		try {
			if(getBudgetRequest().getId() > 0)
			{
				BudgetRequest budgetRequest = (BudgetRequest)adminManager.get(BudgetRequest.class,getBudgetRequest().getId());
				if(!ObjectFunctions.isNullOrEmpty(budgetRequest)){
					List<BudgetParticularHistory> budgetParticularHistoryList = budgetRequest.getBudgetParticularHistory();
					if(!ObjectFunctions.isNullOrEmpty(budgetParticularHistoryList)){
						JSONArray res = new JSONArray();
						JSONArray resPA = new JSONArray();
						JSONObject j;
						JSONObject pa;
						int sNo=0;
						long subjectId=0;
					    for(BudgetParticularHistory budgetParticularHistory :budgetParticularHistoryList){
						    j=new JSONObject();
						    pa=new JSONObject();
						    if("M".equalsIgnoreCase(budgetParticularHistory.getCreatedBy()))
						    {
						    	j.put("PARTICULARID",budgetParticularHistory.getParticularId());
							    j.put("AMOUNT",budgetParticularHistory.getAmount());
								res.put(j);
						    }
						    else if("PA".equalsIgnoreCase(budgetParticularHistory.getCreatedBy()))
						    {
						    	pa.put("PARTICULARID",budgetParticularHistory.getParticularId());
							    pa.put("AMOUNT",budgetParticularHistory.getAmount());
							    resPA.put(pa);
						    }
					    }
					    j = new JSONObject();
						j.put("budgetRequestData", res);
						j.put("budgetRequestDataForSP", resPA);
						getResponse().getOutputStream().print(j.toString());
					}
				 }
				budgetRequest = null;
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return null;
		}
	
	@Actions( {@Action(value = "ajaxViewBudgetDetailsMonthWise", results = { @Result(location = "manager/ajaxViewBudgetDetailsMonthWise.jsp", name = "success") ,
			 @Result(location = "secretary/ajaxViewBudgetDetailsMonthWise.jsp", name = "secretaryPA") ,
			 @Result(location = "secretary/ajaxViewBudgetDetailsMonthWiseBySecretary.jsp", name = "secretary") 			
	})
		})
	public String ajaxViewBudgetDetailsMonthWise() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewBudgetDetailsMonthWise' method");
		}
		try {
			if(getBudgetRequest().getRequestedMonth() > 0)
			{
				ajaxDoBudgetRequestForm();
				if(!ObjectFunctions.isNullOrEmpty(getFinancialYear()))
				{
					setBudgetRequest((BudgetRequest)adminManager.get(BudgetRequest.class," requestedMonth=" + getBudgetRequest().getRequestedMonth() +" and financialYearId="+ getFinancialYear().getId()));
					getBudgetRequest();
				}
			}
			if(getUser().isSecretary())
				return "secretary";
			else if(getUser().isSecretaryPA())
				return "secretaryPA";
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxViewSchoolDetailsHome", results = { @Result(location = "secretary/ajaxViewSchoolDetailsHome.jsp", name = "success") }) })
	public String ajaxViewSchoolDetailsHome() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewSchoolDetailsHome' method");
		}
		try {
			
			if(getCustId() > 0)
			{
				setCustomer(adminManager.getCustomerByCustId(getCustId()));
				AcademicYear academicYear  = adminManager.getCurrentAcademicYear("Y",getCustId());
				setTempId1(adminManager.getCount("student", "description is null and custId="+ getCustomer().getId()+ " and academicYearId="+academicYear.getId()));
				setTempId2(adminManager.getCount("staff", "status='Y' and custId="+ getCustomer().getId()));
				//OrganizationMembers orgMembers =(OrganizationMembers)adminManager.get(OrganizationMembers.class,"accountId="+getUser().getId());
				List<ViewStaffPersonAccountDetails> staffDetailsList = adminManager.getViewStaffDetailsByRoleName(Constants.SCHOOL_MANAGER, getCustId(), Constants.YES_STRING);
				if(!ObjectFunctions.isNullOrEmpty(staffDetailsList))
				{
					setViewStaffPersonAccountDetails(staffDetailsList.get(0));
					if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
					{
						FinancialYear financialYear = (FinancialYear)adminManager.get(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='Y'");	
						if(!ObjectFunctions.isNullOrEmpty(financialYear))
						{
							if(getUser().isSecretaryPA())
							{
								setObjectList(adminManager.getAll(BudgetRequest.class," custId=" + getCustomer().getId() +" and financialYearId="+ financialYear.getId()));
							}
							else if(getUser().isSecretary())
							{
								setObjectList(adminManager.getAll(BudgetRequest.class," custId=" + getCustomer().getId() +" and financialYearId="+ financialYear.getId() + " and (status='F' OR status='A' OR status='P')"));
							}
							setFinancialYear(financialYear);
							financialYear = null;
						}
						setTempList1(adminManager.getAllViewMeetingRequestDetailsByOrgIdCustIdDate(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()), getCustomer().getId(), ""));
					}
				}
				staffDetailsList = null;
				setSchoolName(getCustomer().getOrganization());
				academicYear = null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( { @Action(value = "ajaxGetSchoolBudgetDetailsJsonByCustId", results = { @Result(type = "json", name = "success", params = {"includeProperties", "timingsList.*" }) }) })
	public String ajaxGetSchoolBudgetDetailsJsonByCustId() throws URTUniversalException {

		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxGetSchoolBudgetDetailsJsonByCustId' method");
		}
		try {
			if(getFinancialYear().getId() > 0)
			{
				List<BudgetRequest> budgetRequestsList = null; //Secretary do have custId, is only orgId and status=N(New),PF(Pending,Progress),A(Approve),R(reject)
				if(getCustId() > 0){
					budgetRequestsList = adminManager.getAll(BudgetRequest.class, "custId="+getCustId() + " and financialYearId=" + getFinancialYear().getId() + " and status = '" + Constants.ACTIVE_STATUS + "'");
				}else if(getUser().isSecretary()){
					StringBuffer query = new StringBuffer("select id from customer where orgId=").append(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()));
					List<BigInteger> custIds = adminManager.getAll(query.toString());
					String custString=null;
					if (ObjectFunctions.isNotNullOrEmpty(custIds)) 
						custString = StringFunctions.convertListToCommaDelimitedString(custIds);
					else
						custString="0";
					budgetRequestsList = adminManager.getAll(BudgetRequest.class, "custId in ("+custString+") and financialYearId=" + getFinancialYear().getId() + " and status = '" + Constants.ACTIVE_STATUS + "'");
				}
				if(!ObjectFunctions.isNullOrEmpty(budgetRequestsList)){
					String colourAr[] = {"FF0F00","FF6600","FF9E01","FCD202","F8FF01","B0DE09","04D215","0D8ECF","0D52D1","2A0CD0","8A0CCF","CD0D74"};
					JSONArray res = new JSONArray();
					JSONArray resPA = new JSONArray();
					JSONObject j;
					JSONObject pa;
					int i=0;
					long subjectId=0;
					for(BudgetRequest budgetRequest : budgetRequestsList)
					{
					    j=new JSONObject();
				    	j.put("country",budgetRequest.getMonthName());
					    j.put("visits",budgetRequest.getTotalBudgetAmount());
					    j.put("color",colourAr[i]);
						res.put(j);
						i++;
				    }
				    j = new JSONObject();
					j.put("budgetRequestData", res);
					//log.debug(j.toString());
					getResponse().getOutputStream().print(j.toString());
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Actions( {@Action(value = "secretaryPADashboard", results = { @Result(location = "secretary/secretaryDashboard.jsp", name = "success") }),
		@Action(value = "ajaxSecretaryDashboard", results = { @Result(location = "secretary/secretaryDashboard.jsp", name = "success") }),
		@Action(value = "ajaxSecretaryPADashboard", results = { @Result(location = "secretary/secretaryDashboard.jsp", name = "success") }),
		@Action(value = "ajaxUpcommingMetingsDasboard", results = { @Result(location = "secretary/ajaxMeetingMinutesDashboard.jsp", name = "success") }),
		@Action(value = "ajaxBudgetRequestDashboard", results = { @Result(location = "secretary/ajaxBudgetAcceptsRejectsDashboard.jsp", name = "success") }),
		@Action(value = "ajaxDoBudgetRequestDashboard", results = { @Result(location = "secretary/ajaxViewBudgetRequestDashboard.jsp", name = "success") }),
		@Action(value = "ajaxDoGetMeetingMinutesDashboard", results = { @Result(location = "secretary/ajaxViewMeetingDashboard.jsp", name = "success") }),
		@Action(value = "secretaryDashboard", results = { @Result(location = "secretary/secretaryDashboard.jsp", name = "success") })	
	})
	public String secretaryDashboard() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'secretaryDashboard' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId"))){
				setObjectList(adminManager.getAllViewMeetingRequestDetailsByOrgIdCustIdDate(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()), 0, ""));
			}
			//objectList use for show upcoming and meeting requests details
			FinancialYear financialYear = (FinancialYear)adminManager.get(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='Y'");
			if(!ObjectFunctions.isNullOrEmpty(financialYear)){
				setFinancialYear(financialYear);
			}else
				super.addActionError("Financial year is not created.");
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionCurrentFinancialYearId")))
			{
				setTempId2(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()));
				setTempList(adminManager.getAllViewBudgetRequestDetailsByFinancialYearIdCustIdStatus(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()), 0, "A"));
				//tempList2 use for show count of Budget Accepts
				setTempList1(adminManager.getAllViewBudgetRequestDetailsByFinancialYearIdCustIdStatus(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()), 0, "N,F,P"));
				//tempList1 use for count of budget Requests
				setTempList2(adminManager.getAllViewBudgetRequestDetailsByFinancialYearIdCustIdStatus(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()), 0, "R"));
				//tempList2 use for show count of Budget Rejects
				setMessList(adminManager.getAllViewBudgetRequestDetailsByFinancialYearIdCustIdStatus(Long.valueOf(getSession().getAttribute("SessionCurrentFinancialYearId").toString()), 0, "R,A"));
				//messList use for budget Accepts / Rejects list
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxMeetingDetailsHome", results = { @Result(location = "secretary/ajaxMeetingDetailsHome.jsp", name = "success") }) })
	public String ajaxMeetingDetailsHome() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewBudgetDetailsMonthWise' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
			setObjectList(adminManager.getAllViewMeetingRequestDetailsByOrgIdCustIdDate(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()), 0,""));
					
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	
	@Actions( {@Action(value = "ajaxDoAddMeetingDetails", results = { @Result(location = "secretary/ajaxAddMeetingDetails.jsp", name = "success") }) })
	public String ajaxDoAddMeetingDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewBudgetDetailsMonthWise' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
			setObjectList(adminManager.getAll(Customer.class, "orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString())));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	@Actions( {@Action(value = "ajaxAddMeetingDetails", results = { @Result(location = "secretary/ajaxMeetingDetailsHome.jsp", name = "success") }) })
	public String ajaxAddMeetingDetails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewBudgetDetailsMonthWise' method");
		}
		try {
			if(!ObjectFunctions.isNullOrEmpty(getMeetingDetails()))
			{
				MeetingDetails meetingDetails = new MeetingDetails();
				meetingDetails.setMeetingDate(getMeetingDetails().getMeetingDate());
				meetingDetails.setMeetingAgenda(getMeetingDetails().getMeetingAgenda());
				meetingDetails.setComments(getMeetingDetails().getComments());
				meetingDetails.setPlace(getMeetingDetails().getPlace());
				meetingDetails.setStartTime(getMeetingDetails().getStartTime());
				meetingDetails.setOrgId(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()));
				meetingDetails.setCreatedById(getUser().getId());
				meetingDetails.setCreatedDate(new Date());
				meetingDetails.setLastAccessDate(new Date());
				meetingDetails.setLastUpdatedDate(new Date());
				meetingDetails.setLastUpdatedById(getUser().getId());
				if(!StringFunctions.isNullOrEmpty(getTempString()))
				{
					String customerIds[] = getTempString().split(",");
					for(String custId : customerIds)
					{
						MeetingRequestToCustomers meetingRequestToCustomers = new MeetingRequestToCustomers();
						meetingRequestToCustomers.setCustId(Long.valueOf(custId.replaceAll("\\s","")));
						meetingRequestToCustomers.setCreatedById(getUser().getId());
						meetingRequestToCustomers.setCreatedDate(new Date());
						meetingRequestToCustomers.setLastAccessDate(new Date());
						meetingRequestToCustomers.setLastUpdatedDate(new Date());
						meetingRequestToCustomers.setLastUpdatedById(getUser().getId());
						meetingDetails.addMeetingRequestToCustomers(meetingRequestToCustomers);
					}
				}
				adminManager.save(meetingDetails);
				super.addActionMessage("Successfully added meetings.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxMeetingDetailsHome();
		return SUCCESS;
	}
	@Actions( { @Action(value = "ajaxDoUploadMeetingMinutes", results = { @Result(location = "secretary/ajaxDoUploadMeetingMinutes.jsp", name = "success") }), 
        @Action(value = "ajaxUploadMeetingsDetails", results = { @Result(location = "secretary/ajaxViewMeetingDetails.jsp", name = "success") }) })
		public String ajaxDoUploadMeetingMinutes() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoUploadMeetingMinutes' method");
			}
			try {
				if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
				setObjectList(adminManager.getAllViewMeetingRequestDetailsByOrgIdCustIdDate(Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()), 0, "completedMeeting"));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 
	public static RockSpaceFilesClient checkRockspaceAcount() {
		try {
			RockSpaceFilesClient client = new RockSpaceFilesClient();
			if (client.login()) {
				return client;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return null;
	}
	 @Actions( { @Action(value = "ajaxUploadMeetingMinutes", results = { @Result(location = "secretary/ajaxDoUploadMeetingMinutes.jsp", name ="success") }) })
         public String ajaxUploadMeetingMinutes() throws URTUniversalException {
             if (log.isDebugEnabled()) {
                 log.debug("Entering 'ajaxUploadMeetingMinutes' method");
             }
             try {
            	 long meetDetId=getMeetingDetails().getId();
            	 long orgId=Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString());
                 if(meetDetId > 0 && orgId >0 && !ObjectFunctions.isNullOrEmpty(getFileUpload())){
                	StringBuffer buffRead=new StringBuffer();
                	buffRead.append("(");
                	MeetingDetails  meetingDetails = (MeetingDetails) adminManager.get(MeetingDetails.class,"id="+meetDetId+" and orgId="+orgId);
                	Customer customer = (Customer)adminManager.get(Customer.class,getUserCustId());
                	MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) ServletActionContext.getRequest();
         			Enumeration fileParaNames = multiWrapper.getFileParameterNames();
         			while (fileParaNames.hasMoreElements()) {
        				String key = (String) fileParaNames.nextElement();
        				String[] cTypes = multiWrapper.getContentTypes(key);
        				String fileType[] = cTypes[0].split("/");
        				File[] fileObject = (File[]) multiWrapper.getFiles(key);
        				if (fileObject[0] instanceof File) {
        					/*
        					 * The following logic is to determine the order of the file
        					 * upload from the html. Due to strange requirements, we
        					 * have single file upload - upload as name and mulitple
        					 * files - uploadList[] as a name So in order to handle all
        					 * the situations, check the length of the name before ???
        					 * the chars Also this supports more than 10 file uploads
        					 * from a single html submit
        					 */
        					String[] localSysfileNames = multiWrapper.getFileNames(key);
        					StringBuffer srcFileWithDir = new StringBuffer();
        					StringBuffer userDir = new StringBuffer();
        					StringBuffer url = new StringBuffer();
        					url.append(getText(Constants.FILE_DOCS_DIR));
        					userDir.append(getSession().getServletContext().getRealPath(url.toString()));
        					srcFileWithDir.append(userDir.toString());
        					srcFileWithDir.append("/");
        					setUploadFileName(StringFunctions.stripSymbols(localSysfileNames[0].replaceAll(" ", "_")));
        					buffRead.append(getUploadFileName());
        					buffRead.append(",");
        					String fileName = "OrgId" + Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString())+ "_MeetId" + getMeetingDetails().getId()+ getUploadFileName();
        					srcFileWithDir.append(fileName);
        					Attachment audio = new Attachment();

        					File destDirPath = new File(srcFileWithDir.toString());
        					FileUtils.copyFile(fileObject[0], destDirPath);

        					String filePath = destDirPath.getPath();
        					audio.setFileName(fileName);
        					audio.setFileType(cTypes[0]);
        					String shortFileTypeName[] = cTypes[0].split("/");
        					audio.setMapFile(shortFileTypeName[0]);
        					int fileSize = multiWrapper.getContentLength();
        					audio.setFileSize(String.valueOf(multiWrapper.getContentLength()));
        					audio.setFileUsed(Constants.FILE_DOCS_USAGE);
        					log.error(audio.toString());
        					String container =null;
        					if(!ObjectFunctions.isNullOrEmpty(customer)){
        						container = "Prod_"+ customer.getCustomerShortName() + "_"+ customer.getId();
        					}else{
        						container = "Prod_"+ orgId + "_"+ meetDetId;
        					}
        					RockSpaceFilesClient client = checkRockspaceAcount();
        					// client.login();
        					if (!client.containerExists(container)) {
        						client.createContainer(container);
        						client.cdnEnableContainer(container);
        					}
        					client.storeObject(container, destDirPath, getContentType());
        					FilesCDNContainer info = client.getCDNContainerInfo(container);
        					String cdnUrl = info.getCdnURL();
        					log.debug("container-----" + container);
        					log.debug("fileName"+fileName);
        					log.debug("cdnUrl:-"+cdnUrl);
        					audio.setFilePath(cdnUrl);
        					meetingDetails.addAttachmentDetails(audio);
        					adminManager.save(meetingDetails);
        					destDirPath.delete();
        				}
        			 } buffRead.append(")");
                     if(buffRead.toString().length() != 2){
                    	 buffRead.deleteCharAt(buffRead.toString().length() - 2);
                    	 super.addActionMessage(" "+buffRead.toString()+" Successfully uploaded meetings minutes files. If not uploaded please try once again.");
                     }
                     meetingDetails=null;
                     setTempId(meetDetId);
                     setTempId1(orgId);
                 }else{
                	 super.addActionError("Meetings minutes not uploaded.");
                 }
             } catch (Exception ex) {
                 ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
                 JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
             }
            ajaxDoUploadMeetingMinutes();
             return SUCCESS;
         }
	 
	 @Actions( { @Action(value = "ajaxDownloadMeetingMinutesFiles", results = {}) })
		public String ajaxDownloadMeetingMinutesFiles() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadMeetingMinutesFiles' method");
			}
			try {
				 if(!ObjectFunctions.isNullOrEmpty(getTempId()) && !ObjectFunctions.isNullOrEmpty(getTempId1())){
					 downloadMeetingMinutsFiles(getTempId1(),getTempId(),getTempString());
				 }
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
	 
	 
	 @Actions( { @Action(value = "ajaxRemoveMeetingMinutesDirectory", results = { @Result(location = "secretary/ajaxDoUploadMeetingMinutes.jsp", name = "success") }) })
		public String ajaxRemoveMeetingMinutesDirectory() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveMeetingMinutesDirectory' method");
			}
			try {
				StringBuffer pathName = null;
				File directory=null;
				if(!ObjectFunctions.isNullOrEmpty(getTempId()) && !ObjectFunctions.isNullOrEmpty(getTempId1())){
					pathName = new StringBuffer(generateMeetingMinutesUploadFilepath(getTempId1(),getTempId()));
				   if(!ObjectFunctions.isNullOrEmpty(pathName)){
					Boolean fileExists=false;
	        	    directory = new File(getSession().getServletContext().getRealPath(pathName.toString()));
	        	    if(!ObjectFunctions.isNullOrEmpty(directory)){
     	    	 if(!directory.exists()){
				           log.debug("Directory does not exist.");
				         //  System.exit(0);
				      }else{
				    	  if(directory.isDirectory()){
		        				if(directory.listFiles().length == 1){
		        					fileExists=true;
		        				}
		                	}
							if(!ObjectFunctions.isNullOrEmpty(pathName)){
								if(!StringFunctions.isNullOrEmpty(getFileName())){
									pathName.append(getFileName()+"/");
								}
								directory = new File(getSession().getServletContext().getRealPath(pathName.toString()));
						        	try{
						                ObjectFunctions.fileDelete(directory);
						                if(!StringFunctions.isNullOrEmpty(getTempString()) && !ObjectFunctions.isNullOrEmpty(getTempId())){
							             }
						            }catch(IOException ex){
						                ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
						                JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
						               // System.exit(0);
						            }
							   }  
				        }
					}
				}
			 }
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxGetSchoolBudgetDetailsJsonByFinancialYearId", results = { @Result(type = "json", name = "success", params = {"includeProperties", "timingsList.*" }) }) })
		public String ajaxGetSchoolBudgetDetailsJsonByFinancialYearId() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetSchoolBudgetDetailsJsonByFinancialYearId' method");
			}
			try {
				FinancialYear financialYear=null;
				if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("SessionOrganizationId")))
				financialYear = (FinancialYear)adminManager.get(FinancialYear.class," orgId="+Long.valueOf(getSession().getAttribute("SessionOrganizationId").toString()) + " and status='"+Constants.YES_STRING+"'");
				if(!ObjectFunctions.isNullOrEmpty(financialYear))
				{
					String colourAr[] = {"FF0F00","FF6600","FF9E01","FCD202","F8FF01","B0DE09","04D215","0D8ECF","0D52D1","2A0CD0","8A0CCF","CD0D74"};
					List<Object[]> budgetRequestsList = adminManager.getAll("select sum(totalBudgetAmount),monthName from budgetRequest where financialYearId=" + financialYear.getId() + " and  status = '" + Constants.ACTIVE_STATUS+ "' group by requestedMonth");
					if(!ObjectFunctions.isNullOrEmpty(budgetRequestsList)){
						JSONArray res = new JSONArray();
						JSONArray resPA = new JSONArray();
						JSONObject j;
						JSONObject pa;
						int i=0;
						long subjectId=0;
						for(Object[] budgetRequest : budgetRequestsList)
						{
							if(!ObjectFunctions.isNullOrEmpty(budgetRequest[0]) && !ObjectFunctions.isNullOrEmpty(budgetRequest[1]))
							{
								j=new JSONObject();
						    	j.put("country",budgetRequest[1]);
							    j.put("visits",budgetRequest[0]);
							    j.put("color",colourAr[i]);
								res.put(j);
								i++;
							}
					    }
					    j = new JSONObject();
						j.put("budgetRequestData", res);
						//log.debug(j.toString());
						getResponse().getOutputStream().print(j.toString());
					}
				}
				financialYear = null;
			}
			catch (Exception e) {
				e.printStackTrace();
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(e);jre = null;
			}
			return null;
		}
	 @Actions( {
			@Action(value = "ajaxDoViewClassesAndTodyDate", results = { @Result(location = "reports/ajaxGetClassesDailyAttendanceByDate.jsp", name = "classdetails"),
					                                                    @Result(location = "reports/ajaxDoViewParentChildrens.jsp", name = "children"),
					                                                    @Result(location = "reports/ajaxDoViewClassDetailsByTodayDate.jsp", name = "success") }),
			@Action(value = "ajaxDoViewClassesAndMonths", results = { @Result(location = "reports/ajaxDoViewClassesAndMonths.jsp", name = "success") }),
			@Action(value = "ajaxDoViewClassesAndCommunities", results = { @Result(location = "reports/ajaxDoViewClassesAndCommunities.jsp", name = "success") }),
			@Action(value = "ajaxDoViewClassesAndExamTypes", results = { @Result(location = "reports/ ajaxDoViewStudyClassesAndExamTypes.jsp", name = "success") }) })
		  public String ajaxDoClassesAndTodyDate() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			
			log.debug("Entering 'ajaxDoClassesAndTodyDate' method");
		}
		try {
			setLastName(getUser().getUserRoleDescription());
			loadAcademicYearStartDateAndDates(getUserAcademicYearId());
			if(getUser().isParent() && !getUser().isOnlySchoolAdmin() || getUser().isSchoolStudent()){
				if(getUser().getId()!=0){
					if(getUser().isParent()){
						//String clause = " parentId="+getUser().getId()+" and academicYearId="+getUserAcademicYearId()+" and description is null";
						String clause = " accountId="+getUser().getSelectedStudentId()+" and academicYearId="+getUserAcademicYearId()+" and description is null";
						setViewStudentPersonAccountDetailsList(adminManager.getAll(ViewStudentPersonAccountDetails.class, clause));
						StringBuffer buffer = new StringBuffer();
						buffer.append("(");
						for(ViewStudentPersonAccountDetails accountDetails:getViewStudentPersonAccountDetailsList()){
							buffer.append(accountDetails.getClassSectionId()+",");
						}
						buffer.append("0)");
						setStudyClassList(adminManager.getAll(StudyClass.class, "custId="+getUserCustId()+" and id in "+buffer.toString()));
						Collections.sort(getStudyClassList());
						String sql = "custId =" + getUserCustId() +" and academicYearId = "+ getUserAcademicYearId();
						setExamTypeList(adminManager.getAll(ExamTypes.class, sql));
						if (getPlTitle().equalsIgnoreCase("Daily Attendance")) {
							return "children";
						}
					}else{
						Student student = studentManager.getStudentByAccountId(getUser().getId(), getUserAcademicYearId(),getUserCustId());
						if(!ObjectFunctions.isNullOrEmpty(student)){
							StudyClass studyClass = (StudyClass)adminManager.get(StudyClass.class, " id="+student.getClassSectionId());	
							if(!ObjectFunctions.isNullOrEmpty(studyClass)){
							getStudyClassList().add(studyClass);
							}
						}
					}
					String sql = "custId =" + getUserCustId() +" and academicYearId = "+ getUserAcademicYearId();
					setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null, null,true,"", getClassId())); //here getClassId() used to academicyear have class wise holiday(CH).
					setExamTypeList(adminManager.getAll(ExamTypes.class, sql));
					setTodayDate(DateFormatter.formatDate(DateFormatter.MMDDCCYY_PATTERN,academicYear.getStartDate()));
				}
			}else{
				 AcademicYear year=getCurrentAcademicYear();
				 if(!ObjectFunctions.isNullOrEmpty(year)){
					 setAcademicYear(year);
				 }
				if (!StringFunctions.isNullOrEmpty(getPlTitle())) {
					if (getPlTitle().equalsIgnoreCase("Daily Attendance") || getPlTitle().equalsIgnoreCase("Daily Assignment")) {
						setAttendanceDate(DateFormatter.formatDate(DateFormatter.MM_DD_YYYY_PATTERN1,new Date()));
						return "classdetails";
					}
					if (getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Monthly)") || getPlTitle().equalsIgnoreCase("Attendance Summary Class Wise(Fully)") || getPlTitle().equalsIgnoreCase("Attendance Not Submitted Details")   ) {
						setMonthNamesList(adminManager.getMonthwiseSchoolWorkingDays(getUserCustId(),getUserAcademicYearId(),null, null,true,"", getClassId())); //here getClassId() used to academicyear have class wise holiday(CH).
					}
					if (getPlTitle().equalsIgnoreCase("Class Wise Marks") || getPlTitle().equalsIgnoreCase("Community Wise Marks")) {
						String sql = "custId =" + getUserCustId() +" and academicYearId = "+getUserAcademicYearId();
						setExamTypeList(adminManager.getAll(ExamTypes.class, sql));
					}
					if (getPlTitle().equalsIgnoreCase("Community Wise Marks")) {
						setCastSettingList(adminManager.getAll(CastSettings.class, " custId="+getUserCustId()));
					}
					if(getUser().isOnlySchoolTeacher() || getUser().isOnlySchoolHod() || getUser().isAdminCoordinator()){
						ajaxGetStaffStudyClasses();
					}else{
						checkStudyClassHavingStudentsOrNot();		
					}				
				}
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
		}
	 
	 @Actions({ @Action(value = "ajaxDownloadTCAndLCTemplate", results = {}) })
		public String ajaxDownloadTCAndLCTemplate() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadTCAndLCTemplate' method");
			}
			try {
				StringBuffer tcCustomerPath = null;
				if (getTempId() != 0) {
					
					URL url = null;
					File tempFile = null;
					TcSettings tcSetting = (TcSettings) adminManager.get(TcSettings.class, getTempId());
					Customer customer = getCustomerByCustId();
					if (!ObjectFunctions.isNullOrEmpty(tcSetting) && !ObjectFunctions.isNullOrEmpty(customer) && !ObjectFunctions.isNullOrEmpty(getTempString())) {
						
						if (StringFunctions.isNotNullOrEmpty(tcSetting.getFileName())) 
						{
							url = new URL(tcSetting.getFilePath());
							
							URLConnection conn = url.openConnection();
		                    InputStream is = conn.getInputStream();
		                    
		                    tempFile = File.createTempFile(tcSetting.getFileName(),"");
		                    tempFile.deleteOnExit();
		                    FileUtils.copyInputStreamToFile(is, tempFile);
							if (!ObjectFunctions.isNullOrEmpty(tempFile)) 
							{
								getResponse().setContentType("application/octet-stream");
								getResponse().addHeader("Content-Disposition","attachment; filename="+ tcSetting.getFileName().replaceAll(" ", "_"));
								ServletOutputStream out = getResponse().getOutputStream();
								DataInputStream in = new DataInputStream(new FileInputStream(tempFile));
								byte[] bbuf = new byte[1024];
								int length = 0;
								while ((in != null) && ((length = in.read(bbuf)) != -1)) {
									out.write(bbuf, 0, length);
								}
								in.close();
								out.flush();
								out.close();
							}
						}
						tempFile.deleteOnExit();
						tcSetting = null;
						customer = null;
						tempFile = null;
						tcCustomerPath = null;
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				RayGunException raygex = new RayGunException();
				raygex.sendRayGunException(ex);
				raygex = null;
			}
			return null;
		}
	 @Actions({ @Action(value = "ajaxDownloadStudyAndHTTemplate", results = {}) })
		public String ajaxDownloadHTTemplate() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadHTTemplate' method");
			}
			try {
				File templateFile = null;
				StudyAndBonafiedSettings studySettings = null;
				HallTicketSettings htSetting = null;
				if (getTempId() != 0) {
					
					URL url = null;
					File tempFile = null;
					if (!StringFunctions.isNullOrEmpty(getTempString())) {
						 studySettings = (StudyAndBonafiedSettings)adminManager.get(StudyAndBonafiedSettings.class, getTempId());
						 url = new URL(studySettings.getFilePath());
					}else{
						 htSetting = (HallTicketSettings)adminManager.get(HallTicketSettings.class, getTempId());						 
						 url = new URL(htSetting.getFilePath());
					}
					
					Customer customer = getCustomerByCustId();
					if((!ObjectFunctions.isNullOrEmpty(htSetting) && !ObjectFunctions.isNullOrEmpty(htSetting.getFilePath())) || (!ObjectFunctions.isNullOrEmpty(studySettings) && (StringFunctions.isNotNullOrEmpty(studySettings.getFilePath()))) && !ObjectFunctions.isNullOrEmpty(customer)){
						
	                    URLConnection conn = url.openConnection();
	                    InputStream is = conn.getInputStream();
						if("studyCertificate".equals(getTempString()) || "bonafiedCertificate".equals(getTempString()) || "noDuesCertificate".equals(getTempString()) || "feeCertificate".equals(getTempString())){
							tempFile = File.createTempFile(studySettings.getFileName(),"");
						}else
							tempFile = File.createTempFile(htSetting.getFileName(),"");
						
						if (!StringFunctions.isNullOrEmpty(tempFile.toString())) 
						{
							tempFile.deleteOnExit();
		                    FileUtils.copyInputStreamToFile(is, tempFile);
		                    
							getResponse().setContentType("application/octet-stream");
							
							if("studyCertificate".equals(getTempString()) || "bonafiedCertificate".equals(getTempString()) || "noDuesCertificate".equals(getTempString()) || "feeCertificate".equals(getTempString())){
								getResponse().addHeader("Content-Disposition","attachment; filename="+ studySettings.getFileName().replaceAll(" ", "_"));
							}
							else
								getResponse().addHeader("Content-Disposition","attachment; filename="+ htSetting.getFileName().replaceAll(" ", "_"));
							
							ServletOutputStream out = getResponse().getOutputStream();
							DataInputStream in = new DataInputStream(new FileInputStream(tempFile));
							byte[] bbuf = new byte[1024];
							int length = 0;
							while ((in != null) && ((length = in.read(bbuf)) != -1)) {
								out.write(bbuf, 0, length);
							}
							in.close();
							out.flush();
							out.close();
							tempFile.delete();
						}
						htSetting = null;
						customer = null;
						templateFile = null;
						studySettings = null;
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				RayGunException raygex = new RayGunException();
				raygex.sendRayGunException(ex);
				raygex = null;
			}
			return null;
		}
	 @Actions( { @Action(value = "ajaxPlayOrViewMeetingDetails", results = { @Result(location = "secretary/ajaxPlayOrViewMeetingDetails.jsp", name = "success") }) })
		public String ajaxPlayOrViewMeetingDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxPlayOrViewMeetingDetails' method");
			}
			try {
				if(getTempId1() >0 && StringFunctions.isNotNullOrEmpty(getAnyId()) ){
					setTempList1(adminManager.getAll(Attachment.class," meetingDetailsId=" + getTempId1()+" and mapFile='"+getAnyId()+"'"));
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxPassAndFailPersentGraphMoreDetails", results = { @Result(location = "academic/class/ajaxPassAndFailPersentGraphMoreDetails.jsp", name = "success") }) })
		public String ajaxPassAndFailPersentGraphMoreDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxPassAndFailPersentGraphMoreDetails' method");
			}
			try {
				List<ViewStudentsLatestExamMarksDetails> studentLastestMarksClasses = null;
				studentLastestMarksClasses = adminManager.getLatestExamsClasses(getUserCustId(),getUserAcademicYearId());
				if(!ObjectFunctions.isNullOrEmpty(studentLastestMarksClasses)){
					setViewStudentsLatestExamMarksDetailsList(studentLastestMarksClasses);
					ViewStudentsLatestExamMarksDetails examConductedclass = getViewStudentsLatestExamMarksDetailsList().get(0);
					if (!ObjectFunctions.isNullOrEmpty(examConductedclass)) {
						setTempId2(examConductedclass.getClassSectionId());
						examConductedclass = null;
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 	
	@Actions({ @Action(value = "ajaxViewStudyClassMaterialList", results = { @Result(location = "../studyMaterial/ajaxViewStudyMaterials.jsp", name = "success") })
	})
	public String viewStaffStudyClassMaterialList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewStudyClassMaterialList' method");
		}
		try {
			if(getUser().isSchoolStudent()){
				Student student = (Student)studentManager.get(Student.class,"accountId="+getUser().getId()+" and academicYearId="+getUserAcademicYearId()+" ");
				if(!ObjectFunctions.isNullOrEmpty(student)){
					setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(), String.valueOf(student.getClassSectionId())));
				}
			}else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole()) ){
				Staff staff = adminManager.getStaffByAcountId(getUser().getId(),Constants.YES_STRING);
				if (!ObjectFunctions.isNullOrEmpty(staff)){
					StringBuffer query =  new StringBuffer("select studyClassId from classTeacher ").append(" where custId=").append(getUserCustId()).append(" and academicYearId=").append(getUserAcademicYearId()).append(" and teacherId=").append(staff.getId()).append(" group by studyClassId");
					List<BigInteger> studyclassIds = adminManager.getAll(query.toString());
					query = null;
					String classIdsString=null;
					if (ObjectFunctions.isNotNullOrEmpty(studyclassIds)) 
						classIdsString = StringFunctions.convertListToCommaDelimitedString(studyclassIds);
					else
						classIdsString="0";
					HashSet<StudyClass> classSections = new HashSet<StudyClass>();
					List<StudyClass> studyClasseList = adminManager.getAll(StudyClass.class, "id in("+classIdsString+")");
					if(!ObjectFunctions.isNullOrEmpty(studyClasseList)){
						classSections.addAll(studyClasseList);
					}
					if (ObjectFunctions.isNotNullOrEmpty(classSections)) {
						setStudyClassList(ConvertUtil.convertSetToList(classSections));
						Collections.sort(getStudyClassList());
					}
					classSections = null;
					studyClasseList = null;
				}
				staff=null;
			}else if("ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())){
				List<BigInteger> studyClassIdsList = null;
				Object[] staff = adminManager.get("select id,description from staff where accountId="+getUser().getId()+" and  status='Y'");
				Long staffId = null;
				if(!ObjectFunctions.isNullOrEmpty(staff))
				{
					if(!ObjectFunctions.isNullOrEmpty(staff[0]))
					{
						staffId = Long.valueOf(staff[0].toString());
					}
				}
				if(!ObjectFunctions.isNullOrEmpty(staffId)){
					StringBuffer query = new StringBuffer("select studyClassId from classTeacher where teacherId in(").append(staffId+")");
					List<BigInteger> studyClassIds = adminManager.getAll(query.toString());
					StringBuffer sqlQuery = new StringBuffer("select st.id  from staffMultipleStudyClasses sm LEFT JOIN studyClass st  on (st.id=sm.studyClassId)") 
					.append(" where st.custId=").append(getUserCustId()).append(" and st.academicYearId="+getUserAcademicYearId()).append(" and sm.staffId=").append(staffId);

					List<BigInteger> coOrdinatorStudyClassIds = adminManager.getAll(sqlQuery.toString());
					if (ObjectFunctions.isNotNullOrEmpty(studyClassIds) && ObjectFunctions.isNotNullOrEmpty(coOrdinatorStudyClassIds)) {
						for(BigInteger obj:coOrdinatorStudyClassIds){
							if(!studyClassIds.contains(obj)){
								studyClassIds.add(obj);
							}
						}
						studyClassIdsList = studyClassIds;
					}else if (ObjectFunctions.isNotNullOrEmpty(studyClassIds)) {
						studyClassIdsList = studyClassIds;
					}else if (ObjectFunctions.isNotNullOrEmpty(coOrdinatorStudyClassIds)) {
						studyClassIdsList = coOrdinatorStudyClassIds;
					} 
					if (ObjectFunctions.isNotNullOrEmpty(studyClassIdsList)) 
					{
						String classSectionIdsString = StringFunctions.convertListToCommaDelimitedString(studyClassIdsList);
						List<StudyClass> studyClassList = adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(),classSectionIdsString);
						if (ObjectFunctions.isNotNullOrEmpty(studyClassList)) 
						{
							for (StudyClass studyClass : studyClassList) 
							{
								 getStudyClassList().add(studyClass);
							}
						}
					}
				}
			}else
				setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(),getUserAcademicYearId(), null));
			
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex = null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	   @Actions( { @Action(value = "ajaxDownloadStudyMaterialDocs", results = {}) })
		public String ajaxDownloadMemberDocs() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadStudyMaterialDocs' method");
			}
			try {
				 if(!ObjectFunctions.isNullOrEmpty(getClassSectionId()) && !ObjectFunctions.isNullOrEmpty(getSubjectId())){
					 Customer customer = getCustomerByCustId();
					 ZipOutputStream zipOutStream = new ZipOutputStream(getResponse().getOutputStream());
					 File directory = Files.createTempDirectory("StudyMaterial").toFile();
					 String materialId = getParamValue("materialId");
					 getResponse().setContentType("application/zip");
					 getResponse().addHeader("Content-Disposition", "attachment; filename="+customer.getCustomerShortName().toUpperCase()+"_DOCUMENTS.zip");
					 
					 List<StudyMaterialAttachments> StudyMaterialAttachmentsList = adminManager.getAll(StudyMaterialAttachments.class,"id="+materialId);
					 
					 if(!ObjectFunctions.isNullOrEmpty(StudyMaterialAttachmentsList))
					 {
						 for(StudyMaterialAttachments studyMaterialAttachments : StudyMaterialAttachmentsList)
						 {
							 	URL url = new URL(studyMaterialAttachments.getFilePath());
								URLConnection conn = url.openConnection();
								InputStream is = conn.getInputStream();
								
								String ext = FilenameUtils.getExtension(studyMaterialAttachments.getFileName());
								File file = new File(directory,studyMaterialAttachments.getFileName());
								FileUtils.copyInputStreamToFile(is, file);
						 }
					 }
					 
					 if(!ObjectFunctions.isNullOrEmpty(directory.listFiles())){
						if(directory.listFiles().length > 0)
						 StringFunctions.zipFiles(directory,zipOutStream);
						else
						 super.addActionError("There are no files found because you have not uploaded or you might be deleted.");
					}							
					else{
						super.addActionError("There are no files to download.");
					}
					 zipOutStream = null;
					 
					 FileUtils.deleteDirectory(directory);
				 }
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return null;
		}
		@Actions( {@Action(value = "ajaxViewUploadStudyMaterialsInfo", results = { @Result(location = "../studyMaterial/ajaxViewStudyMaterialDetails.jsp", name = "success") }) })
		public String ajaxViewUploadStudyMaterialsInfo() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxViewUploadStudyMaterialsInfo' method");
		}
		try {
				StringBuffer pathName =null;
				Attachment attachment =null;
				if((!StringFunctions.isNullOrEmpty(getClassSectionId())) && (!StringFunctions.isNullOrEmpty(getSubjectId()))){
					List<ViewStudyClassMaterials> materialsList = adminManager.getAll(ViewStudyClassMaterials.class,"custId="+getUserCustId()+" and academicYearId ="+getUserAcademicYearId()+" and classSectionId="+getClassSectionId()+" and subjectId="+getSubjectId());
					if(!ObjectFunctions.isNullOrEmpty(materialsList)){
						setTempList1(materialsList);
						setSubjectId(getSubjectId());
						for(ViewStudyClassMaterials obj : materialsList){
							if(!ObjectFunctions.isNullOrEmpty(obj) && !ObjectFunctions.isNullOrEmpty(obj.getMaterialId()))
							{
								obj.setAttachmentsList(adminManager.getAll(StudyMaterialAttachments.class,"studyMaterialsId="+obj.getMaterialId()));
							}
							getTempList().add(obj);
						}
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
				return SUCCESS;
		}
	 @Actions({@Action(value = "ajaxDoAddStudyMaterial",results ={@Result(location = "../studyMaterial/ajaxDoAddStudyMaterials.jsp",name = "success") })})
		public String ajaxDoAddStudyMaterial()  throws URTUniversalException {
		if(log.isDebugEnabled()){
			   log.debug("Entering 'ajaxDoAddStudyMaterial' method");
			}
			try{	
				if(!ObjectFunctions.isNullOrEmpty(getStudyMaterial())){
					if(getStudyMaterial().getId() > 0)
					{
						setStudyMaterial((StudyMaterials)adminManager.get(StudyMaterials.class,getStudyMaterial().getId()));
						setStudySubjectList(adminManager.getAll(StudySubject.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
						
						ViewStudyClassMaterials materials = (ViewStudyClassMaterials) adminManager.get(ViewStudyClassMaterials.class,"materialId="+getStudyMaterial().getId()+" group by materialId");
						if(!ObjectFunctions.isNullOrEmpty(materials)){
								if(!ObjectFunctions.isNullOrEmpty(materials) && !ObjectFunctions.isNullOrEmpty(materials.getMaterialId())){
									
									materials.setAttachmentsList(adminManager.getAll(StudyMaterialAttachments.class,"studyMaterialsId="+materials.getMaterialId()));
								}
								setViewStudyClassMaterials(materials);
						}
						materials = null;
					}
				}
				if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) { //requirement changed for select the subject then show the respeced classes
					setStudySubjectList(adminManager.getAll(StudySubject.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
				} 
				else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole()) )
				{
					StringBuffer querys = null;
					StringBuffer subjectIdsString = new StringBuffer();
					Staff staff = adminManager.getStaffByAcountId(getUser().getId(),Constants.YES_STRING);
					if (!ObjectFunctions.isNullOrEmpty(staff)){
						 querys = new StringBuffer("select studyClassId,id from classTeacher where custId=").append(getUserCustId()).append(" and academicYearId=").append(getUserAcademicYearId()).append(" and teacherId=").append(staff.getId()).append(" and classTeacher='Y'");
						Object[] studyClassIds = adminManager.get(querys.toString());
						if(!ObjectFunctions.isNullOrEmpty(studyClassIds) && !ObjectFunctions.isNullOrEmpty(studyClassIds[0])){
							StringBuffer qury = new StringBuffer("select subjectId,classSectionId from vw_classSubjectsSettings ").append(" where custId=").append(getUserCustId()).append(" and academicYearId=").append(getUserAcademicYearId()).append(" and classSectionId=").append(studyClassIds[0].toString());
							List<Object[]> studySubjectIdsList = adminManager.getAll(qury.toString());
							if(!ObjectFunctions.isNullOrEmpty(studySubjectIdsList)){
					    		for(Object[] obj :studySubjectIdsList){
					    			if (!ObjectFunctions.isNullOrEmpty(obj[0])) {
					    				subjectIdsString.append(obj[0].toString()).append(",");
					    			}
					    		}
					    	}
							log.debug(subjectIdsString.toString());
							studySubjectIdsList = null;
						}
						StringBuffer query =  new StringBuffer("select studySubjectId,teacherId from classTeacher ").append(" where custId=").append(getUserCustId()).append(" and academicYearId=").append(getUserAcademicYearId()).append(" and teacherId=").append(staff.getId()).append(" and classTeacher='N'").append(" group by studySubjectId");
						List<Object[]> studySubjectIdsList = adminManager.getAll(query.toString());
						if(!ObjectFunctions.isNullOrEmpty(studySubjectIdsList)){
				    		for(Object[] obj :studySubjectIdsList){
				    			if (!ObjectFunctions.isNullOrEmpty(obj[0])) {
				    				subjectIdsString.append(obj[0].toString()).append(",");
				    			}
				    		}
				    	}
						subjectIdsString.append("0");
						log.debug(subjectIdsString.toString());
						setStudySubjectList(adminManager.getAll(StudySubject.class, "id in("+subjectIdsString+")"));
					}
					staff=null;
				}else if ("ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())){
					Staff staff = (Staff)adminManager.get(Staff.class,"accountId="+getUser().getId());
					if(!ObjectFunctions.isNullOrEmpty(staff)){
						StringBuffer subjectIdsString = new StringBuffer();
						ArrayList<StudyClass> classSectionsList = new ArrayList<StudyClass>();
						List<BigInteger> studyClassIdsList = null;


						StringBuffer query = new StringBuffer("select studyClassId from classTeacher where teacherId in(").append(staff.getId()+")");
						List<BigInteger> studyClassIds = adminManager.getAll(query.toString());
						StringBuffer sqlQuery = new StringBuffer("select st.id  from staffMultipleStudyClasses sm LEFT JOIN studyClass st  on (st.id=sm.studyClassId)") 
						.append(" where st.custId=").append(getUserCustId()).append(" and st.academicYearId="+getUserAcademicYearId()).append(" and sm.staffId=").append(staff.getId());

						List<BigInteger> coOrdinatorStudyClassIds = adminManager.getAll(sqlQuery.toString());
						if (ObjectFunctions.isNotNullOrEmpty(studyClassIds) && ObjectFunctions.isNotNullOrEmpty(coOrdinatorStudyClassIds)) {
							for(BigInteger obj:coOrdinatorStudyClassIds){
								if(!studyClassIds.contains(obj)){
									studyClassIds.add(obj);
								}
							}
							studyClassIdsList = studyClassIds;
						}else if (ObjectFunctions.isNotNullOrEmpty(studyClassIds)) {
							studyClassIdsList = studyClassIds;
						}else if (ObjectFunctions.isNotNullOrEmpty(coOrdinatorStudyClassIds)) {
							studyClassIdsList = coOrdinatorStudyClassIds;
						} 
						if (ObjectFunctions.isNotNullOrEmpty(studyClassIdsList)) 
						{
							String classSectionIdsString = StringFunctions.convertListToCommaDelimitedString(studyClassIdsList);

							StringBuffer qury = new StringBuffer("select subjectId,classSectionId from vw_classSubjectsSettings ").append(" where custId=").
									append(getUserCustId()).append(" and academicYearId=").append(getUserAcademicYearId()).append(" and classSectionId in (").append(classSectionIdsString).append(")");;
									List<Object[]> studySubjectIdsList = adminManager.getAll(qury.toString());
									if(!ObjectFunctions.isNullOrEmpty(studySubjectIdsList)){
										for(Object[] obj :studySubjectIdsList){
											if (!ObjectFunctions.isNullOrEmpty(obj[0])) {
												subjectIdsString.append(obj[0].toString()).append(",");
											}
										}
									}
									log.debug(subjectIdsString.toString());
									studySubjectIdsList = null;
									subjectIdsString.append("0");
									log.debug(subjectIdsString.toString());
									setStudySubjectList(adminManager.getAll(StudySubject.class, "id in("+subjectIdsString+")"));
						}
					}
				}
					
				if(ObjectFunctions.isNotNullOrEmpty(getClassList()))
					Collections.sort(getClassList());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions( { @Action(value = "ajaxAddStudyMaterials", results = { @Result(location = "../studyMaterial/ajaxViewStudyMaterials.jsp", name = "success") }) })
		public String ajaxAddStudyMaterials() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAddStudyMaterials' method");
			}
			try {
				log.debug(getClassSectionId());
				StudyMaterials material = null;	
				StringBuffer pathName =null;
				List<StudyClass> studyClassesList = null;
					Customer customer = getCustomerByCustId();
					AcademicYear academicYear = getCurrentAcademicYear();
					if(!ObjectFunctions.isNullOrEmpty(getStudyMaterial())){
						if(getStudyMaterial().getId() > 0){
							material = (StudyMaterials)adminManager.get(StudyMaterials.class,getStudyMaterial().getId());
							material.setLastUpdatedById(getUser().getId());
							material.setLastUpdatedDate(new Date());
							super.addActionMessage("Study Material updated successfully.");
						}
						else{
							material = new StudyMaterials();
							material.setCreatedById(getUser().getId());
							material.setCreatedDate(new Date());					
							material.setAcademicYearId(getUserAcademicYearId());
							material.setCustId(getUserCustId());
							super.addActionMessage("Study Material added successfully.");
						}
						material.setLastAccessDate(new Date());
						material.setMaterialName(getStudyMaterial().getMaterialName());
						material.setDescription(getStudyMaterial().getDescription());
						material.setSubjectId(getStudyMaterial().getSubjectId());
						if(!ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds())){
							if(getStudyMaterial().getId() > 0){
								adminManager.remove("materialsStudyClasses", "materialId="+getStudyMaterial().getId()+" and studyClassId="+getClassSectionId());
							}
							String commaDelimitedString = StringUtil.convertListToString(getChkBoxSelectedIds());
							studyClassesList = adminManager.getAll(StudyClass.class,"id in (" +commaDelimitedString+")");
							material.addNewStudyClasses(studyClassesList);
						}else if(getTempId2() > 0){
							studyClassesList = adminManager.getAll(StudyClass.class," classNameClassId ="+getTempId2()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
							if(!ObjectFunctions.isNullOrEmpty(studyClassesList)){
								if(getStudyMaterial().getId() > 0){
									adminManager.remove("materialsStudyClasses", "materialId="+getStudyMaterial().getId()+" and studyClassId="+getTempId2());
								}
								material.addNewStudyClasses(studyClassesList);
								StudyClass studyClassId = studyClassesList.get(0);
								if (!ObjectFunctions.isNullOrEmpty(studyClassId)) {
									setChkBoxSelectedIds(adminManager.getAll("select CONVERT(group_concat(id), CHAR) from studyClass where id ="+studyClassId.getId()));
								}
							}
						}
						
						if(getFileUpload().size()!=0)
						{
							List<StudyMaterialAttachments> studyMaterialAttachmentsList = material.getStudyMaterialAttachments();
							if(!ObjectFunctions.isNullOrEmpty(studyMaterialAttachmentsList))
								studyMaterialAttachmentsList = new ArrayList<StudyMaterialAttachments>();
							
							 for(int i=0;i<getFileUpload().size();i++){
								 if(!ObjectFunctions.isNullOrEmpty(getFileUpload().get(i))){
					    		     File file = getFileUpload().get(i);
					    			 String fileName = getFileUploadFileName().get(i);
					    			String filePath = adminManager.getUploadDocuments(file, academicYear.getAcademicYear(), fileName);
					    			if(!StringFunctions.isNullOrEmpty(filePath))
					    			{
					    				StudyMaterialAttachments studyMaterialAttachments = new StudyMaterialAttachments();
					    				studyMaterialAttachments.setFileName(fileName);
					    				studyMaterialAttachments.setCreatedById(getUser().getId());
					    				studyMaterialAttachments.setFilePath(filePath);
					    				
					    				studyMaterialAttachmentsList.add(studyMaterialAttachments);
					    			}
					    		 }
					    	}
							 material.setStudyMaterialAttachments(studyMaterialAttachmentsList);
						}
						
						adminManager.saveOrUpdateObject(material);
						
						material=null;
					}
					viewStaffStudyClassMaterialList();
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions( { @Action(value = "ajaxAllClassesSections", results = { @Result(location = "../studyMaterial/ajaxShowClassesSection.jsp", name = "success") }) })
		public String ajaxAllClassesSections() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAllClassesSections' method");
			}
			try {
				if(getQuizId()>0){
					List<BigInteger> classId = null;
					List<StudyClass> objectList = null;
					if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) {
						 objectList = adminManager.getAll(StudyClass.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  classNameClassId="+getClassSectionId()+" and section!='' ");
					}else{
						String classIdsString=null;
						classId = adminManager.getAll("select studyClassId from vw_staffSubjectsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  classId="+getClassSectionId()+" and section!=''  and accountId="+getUser().getId());
						if (ObjectFunctions.isNotNullOrEmpty(classId)) {
							classIdsString = StringFunctions.convertListToCommaDelimitedString(classId);
							if(!ObjectFunctions.isNullOrEmpty(classIdsString))
								objectList = adminManager.getAll(StudyClass.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  id in("+classIdsString.toString()+") and section!='' ");
						}
					}
					for(StudyClass obj : objectList) {
						List<ViewStudyClassMaterials> objectLists = adminManager.getAll(ViewStudyClassMaterials.class,"materialId="+getQuizId()+" and sectionName!='' and custId="+getUserCustId()+" and classSectionId="+obj.getId());
						if(!ObjectFunctions.isNullOrEmpty(objectLists)){
							for(ViewStudyClassMaterials objs : objectLists){
								List<StudyClass> classSectionsIdList = adminManager.getAll(StudyClass.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  id="+objs.getClassSectionId()+" and section!='' ");
								for(StudyClass objts : classSectionsIdList){
									getChkBoxSelectedIds().add(String.valueOf(objts.getId()));
								}
								setObjectList(objectList);
							}
						}
					}
				}else
					setObjectList(adminManager.getAll(StudyClass.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and  classNameClassId="+getClassSectionId()+" and section!='' "));	
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions( { @Action(value = "ajaxGetAllStudySubjects", results = { @Result(location = "../studyMaterial/ajaxGetStudySubjects.jsp", name = "success"),
			 															@Result(location = "../studyMaterial/ajaxViewStudyMaterialSubjects.jsp", name = "subjectView")
	 })})
		public String ajaxGetAllStudySubjects() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetAllStudySubjects' method");
			}
			try {
				List<ViewStaffSubjectsDetails> staffClassList = null;
				if(getTempId1()>0 || !StringFunctions.isNullOrEmpty(getClassId())){   // requirement changed for select the subject then show the respeced classes
					String classSectionIdsString=null;
					List<BigInteger> studyClassIds=null;
					if(!getUser().isSchoolStudent()){
						if(getTempId1()>0){
							List<ClassName> studyClassList = null;
							if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) {
								studyClassIds = adminManager.getAll("select classId from vw_classSubjectsSettings where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and subjectId="+getTempId1()+" group by classId");
								if (ObjectFunctions.isNotNullOrEmpty(studyClassIds)){ 
									 classSectionIdsString = StringFunctions.convertListToCommaDelimitedString(studyClassIds);
									 if(!ObjectFunctions.isNullOrEmpty(classSectionIdsString))
										 studyClassList = adminManager.getAll(ClassName.class, "id in("+classSectionIdsString+")");
								}
							}else if ("ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())) {

								 Staff staff = (Staff)adminManager.get(Staff.class,"accountId="+getUser().getId());
								if(!ObjectFunctions.isNullOrEmpty(staff)){
									List<StudyClass> studayClassList = getAdminCoordinatorStudyClassesList(staff.getId(),getUserAcademicYearId());
									StringBuffer classIds = new StringBuffer();
									for(StudyClass obj:studayClassList){
										classIds.append(obj.getClassId()).append(",");
									}
									classIds.append("0");
								 studyClassList = adminManager.getAll(ClassName.class, "id in("+classIds.toString()+")");
								}
							}else{
								StringBuffer classIds = new StringBuffer();
								Object[] StudyClassIds = adminManager.get("select classId,studySubjectId from vw_staffSubjectsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" and classTeacher='Y' group by classId");
								if(!ObjectFunctions.isNullOrEmpty(StudyClassIds)){
									if(!ObjectFunctions.isNullOrEmpty(StudyClassIds) && !ObjectFunctions.isNullOrEmpty(StudyClassIds[0].toString()) && !ObjectFunctions.isNullOrEmpty(StudyClassIds[1].toString())){
										Object[] classId = adminManager.get("select classId,subjectId from vw_classSubjectsSettings where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and subjectId="+getTempId1()+" and classId="+StudyClassIds[0].toString());
										if(!ObjectFunctions.isNullOrEmpty(classId)){
											classIds.append(StudyClassIds[0].toString()).append(",");
										}
									}
									StudyClassIds = null;
								}
								List<Object[]> classIdsLists = adminManager.getAll("select classId,studySubjectId from vw_staffSubjectsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and studySubjectId="+getTempId1()+" and accountId="+getUser().getId()+" and classTeacher='N' group by classId");
								if(!ObjectFunctions.isNullOrEmpty(classIdsLists)){
									for(Object[] obj :classIdsLists){
										if(!ObjectFunctions.isNullOrEmpty(obj) && !ObjectFunctions.isNullOrEmpty(obj[0].toString()) && !ObjectFunctions.isNullOrEmpty(obj[1].toString())){
											Object[] classId = adminManager.get("select classId,subjectId from vw_classSubjectsSettings where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and subjectId="+getTempId1()+" and classId="+obj[0].toString());
											if(!ObjectFunctions.isNullOrEmpty(classId)){
												classIds.append(obj[0].toString()).append(",");
											}
										}
									}
									classIdsLists = null;
								}
								classIds.append("0");
								 studyClassList = adminManager.getAll(ClassName.class, "id in("+classIds.toString()+")");
							}
							if (!ObjectFunctions.isNullOrEmpty(studyClassList)) 							
							{ 
								if(getQuizId()>0){
									List<StudyClass>  classSectionsIdList = adminManager.getAll(StudyClass.class," id="+getTempId2());
									for(StudyClass objs : classSectionsIdList){
										List<ClassName> classNamesList = adminManager.getAll(ClassName.class, "id="+objs.getClassNameClassId().getId());
										if(!ObjectFunctions.isNullOrEmpty(classNamesList)){
											ClassName className = classNamesList.get(0);
											if (!ObjectFunctions.isNullOrEmpty(className)) {
												setTempId2(className.getId());
												log.debug(getTempId2());
												className=null;
											}
										}
									}
								}
								setTempList(studyClassList);
							}
							studyClassList = null;
							setQuizId(getQuizId());
								
						}else{
							List<ViewStudyClassMaterials> materialsList = null;
							HashSet<ViewStudyClassMaterials> classSections = new HashSet<ViewStudyClassMaterials>();
							if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) {
								 materialsList = adminManager.getAll(ViewStudyClassMaterials.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getClassId()+" group by subjectId");
							}else if ("ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())) {
								List<BigInteger> subjectIds = null;
								String subjectIdsString ;
								 Staff staff = (Staff)adminManager.get(Staff.class,"accountId="+getUser().getId());
								if(!ObjectFunctions.isNullOrEmpty(staff)){
									List<StudyClass> studayClassList = getAdminCoordinatorStudyClassesList(staff.getId(),getUserAcademicYearId());
									StringBuffer classIds = new StringBuffer();
									for(StudyClass obj:studayClassList){
										classIds.append(obj.getId()).append(",");
									}
									classIds.append("0");
									subjectIds = adminManager.getAll("select subjectId from vw_classSubjectsSettings where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+
											" and classSectionId in ("+classIds.append(")"));
									if (ObjectFunctions.isNotNullOrEmpty(subjectIds)) {
										subjectIdsString = StringFunctions.convertListToCommaDelimitedString(subjectIds);
										if(!ObjectFunctions.isNullOrEmpty(subjectIdsString))
											materialsList = adminManager.getAll(ViewStudyClassMaterials.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getClassId()+" and subjectId in ("+subjectIdsString.toString()+") group by subjectId");
									}
								}
							}else{
								List<BigInteger> subjectIds = null;
								String subjectIdsString=null;
								Object[] StudyClassIds = adminManager.get("select studyClassId,studySubjectId from vw_staffSubjectsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" and classTeacher='Y' and studyClassId="+getClassId()+" group by studyClassId");
								if(!ObjectFunctions.isNullOrEmpty(StudyClassIds)){
									if(!ObjectFunctions.isNullOrEmpty(StudyClassIds) && !ObjectFunctions.isNullOrEmpty(StudyClassIds[0].toString()) && !ObjectFunctions.isNullOrEmpty(StudyClassIds[1].toString())){
										subjectIds = adminManager.getAll("select subjectId from vw_classSubjectsSettings where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+StudyClassIds[0].toString());
										if (ObjectFunctions.isNotNullOrEmpty(subjectIds)) {
											subjectIdsString = StringFunctions.convertListToCommaDelimitedString(subjectIds);
											if(!ObjectFunctions.isNullOrEmpty(subjectIdsString))
												materialsList = adminManager.getAll(ViewStudyClassMaterials.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getClassId()+" and subjectId in ("+subjectIdsString.toString()+") group by subjectId");
										}
									}
									StudyClassIds = null;
								}else{
									 subjectIds = adminManager.getAll("select studySubjectId from vw_staffSubjectsDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" and studyClassId="+getClassId()+" and classTeacher='N' group by studySubjectId");
									if (ObjectFunctions.isNotNullOrEmpty(subjectIds)) {
										subjectIdsString = StringFunctions.convertListToCommaDelimitedString(subjectIds);
										if(!ObjectFunctions.isNullOrEmpty(subjectIdsString))
											materialsList = adminManager.getAll(ViewStudyClassMaterials.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getClassId()+" and subjectId in ("+subjectIdsString.toString()+") group by subjectId");
									}
								}
							}
							setTempList2(materialsList);
							return "subjectView";
						}
					}else if(getUser().isSchoolStudent()){
						List<ViewStudyClassMaterials> materialsList = adminManager.getAll(ViewStudyClassMaterials.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getClassId()+" group by subjectId");
						setTempList2(materialsList);
						return "subjectView";
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions( { @Action(value = "ajaxRemoveStudyMaterial", results = { @Result(location = "../studyMaterial/ajaxViewStudyMaterialDetails.jsp", name = "success") }) })
		public String ajaxRemoveStudyMaterial() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveStudyMaterial' method");
			}
			try{
				if(getStudyMaterial().getId()>0){	
					adminManager.remove("materialsStudyClasses", "studyClassId="+getClassSectionId()+" and materialId="+getStudyMaterial().getId());
					setClassSectionId(getClassSectionId());
					setSubjectId(getSubjectId());
					ajaxViewUploadStudyMaterialsInfo();
					super.addActionMessage("Study Material removed successfully.");
				}
			}
			catch(Exception ex){
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxUploadPrincipalsignature", results = { @Result(location = "ajaxSchoolInformation.jsp", name = "success") })})
		public String ajaxUploadPrincipalsignature()throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxUploadPrincipalsignature' method");
		} 
		try {
		 if(getFileUpload().size()!=0)
		 {
			Customer customer = adminManager.getCustomerByCustId(getUserCustId());
			if(!ObjectFunctions.isNullOrEmpty(customer))
			{
				UserImage principalSignature = new UserImage();
				if(!ObjectFunctions.isNullOrEmpty(customer.getPrincipalDigitalSignature()))
				{
					principalSignature = customer.getPrincipalDigitalSignature();
				}
				
				for(int i=0;i<getFileUpload().size();i++)
				{
		    		 File file = getFileUpload().get(0);
		    		 if(!ObjectFunctions.isNullOrEmpty(file))
		    		 {
		    			 String fileName = getFileUploadFileName().get(i);
		    			 String path = adminManager.getUploadImageFilePath(file, getCurrentAcademicYear().getAcademicYear(),fileName.replaceAll(fileName, getUserCustId()+".png"));
		    			 
		    			 principalSignature.setName(fileName.replaceAll(fileName, getUserCustId()+".png"));  
		    			 principalSignature.setThumbNail(fileName.replaceAll(fileName, getUserCustId()+".png"));
		    			 principalSignature.setPath(path);
		    			 principalSignature = (UserImage)adminManager.saveOrUpdateObject(principalSignature);
		    			
		    			 customer.setPrincipalDigitalSignature(principalSignature);
		    			 adminManager.merge(customer);
		    		 }
		    	}
			}
			customer = null;
	    	 super.addActionMessage("Successfully uploaded digital signature.");
		  }
		}catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxDoSchoolInformation();
		return SUCCESS;
		}
	 
	 @Actions({ @Action(value = "ajaxUpdateFromEmailInfo", results = { @Result(location = "ajaxCustomerFromEmailInfo.jsp", name = "success") }) })
		public String ajaxUpdateFromEmailInfo() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxUpdateFromEmailInfo' method");
			}
			try {
				if(!ObjectFunctions.isNullOrEmpty(getCustomer())){
					Map<Integer,String> msgs = adminManager.addorUpdateEmailContactDetails(getCustomer(), getCustomerByCustId(),getUser().getId());
					if (!StringFunctions.isNullOrEmpty(msgs.get(0)))
						super.addActionMessage(msgs.get(0));
					else if(!StringFunctions.isNullOrEmpty(msgs.get(1)))
						super.addActionError(msgs.get(1));
					else if(!StringFunctions.isNullOrEmpty(msgs.get(2)))
						super.addActionError(msgs.get(2));
					else if(!StringFunctions.isNullOrEmpty(msgs.get(3)))
						super.addActionError(msgs.get(3));
					ajaxDoSchoolInformation();
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions({ @Action(value = "ajaxDownloadNoEmailAndMobileStudentDetails", results = { @Result(location = "../admin/reports/ajaxDownloadNoEmailAndMobileStudentDetails.jsp", name = "success") }) })
			public String ajaxDownloadNoEmailAndMobileStudentDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDownloadNoEmailAndMobileStudentDetails' method");
			}
			try
			{
				if(getUserAcademicYearId() > 0){
					getSession().removeAttribute("GetAllStudyClasses");
					checkStudyClassHavingStudentsOrNot();
				}
			}
			catch(Exception ex)
			{
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 @Actions({ @Action(value = "ajaxBuySms", results = { @Result(location = "ajaxRequirestHandlerSms.jsp", name = "success") }) })
		public String ajaxBuySms() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxBuySms' method");
		}
		try
		{
			Date newDate = new Date();
			
			Customer customer = getCustomerByCustId();
			if (!ObjectFunctions.isNullOrEmpty(customer)) {
				AcademicYear currentYear=(AcademicYear) adminManager.get(AcademicYear.class, "custId="+getUserCustId()+" and status='Y'");
				
				PaidSMS paidSMS = new PaidSMS();
				
				paidSMS.setAcademicYearId(currentYear.getId());
				paidSMS.setCreatedById(getUser().getId());
				paidSMS.setPaidDate(newDate);
				paidSMS.setStatus(Constants.PENDING_STATUS);
				paidSMS.setPaidSms(Long.valueOf(getParamValue("noOfsms")));
				paidSMS.setPaidSmsAmount(getTotalAmount());
				paidSMS.setCustId(getUserCustId());
				
				paidSMS = (PaidSMS) adminManager.save(paidSMS);
				String randamNumber=Math.round(Math.random()*100)+DateFormatter.formatDate(DateFormatter.YYYYMMDDHHMMSS_PATTERN, new Date());
				
				long time = newDate.getTime();
				StringBuffer query = new StringBuffer();
				query.append("tid=").append(time);
				query.append("&merchant_id=76059");
				
				//query.append("&order_id=").append(randamNumber);
				query.append("&order_id=").append(paidSMS.getId());
				
				//query.append("&redirect_url=").append("https://eazyschool.in/admin/ajaxDoBuySms.do");
				//query.append("&cancel_url=").append("https://eazyschool.in/admin/ajaxDoBuySms.do");
				query.append("&language=").append("EN");
				query.append("&amount=").append(getTotalAmount());
				
				//query.append("&amount=1");
				
				query.append("&currency=INR");
				query.append("&source=eschool");
				query.append("&billing_name=").append(customer.getOrganization());
				if (!ObjectFunctions.isNullOrEmpty(customer.getAddress())) {
					if (!ObjectFunctions.isNullOrEmpty(customer.getAddress().getStreetName())) {
						query.append("&billing_address=").append(customer.getAddress().getStreetName());
					}
					if (!ObjectFunctions.isNullOrEmpty(customer.getAddress().getCity())) {
						query.append("&billing_city=").append(customer.getAddress().getCity());			
					}
					if (!ObjectFunctions.isNullOrEmpty(customer.getAddress().getState())) {
						query.append("&billing_state=").append(customer.getAddress().getAddressLine1());
					}
					if (!ObjectFunctions.isNullOrEmpty(customer.getAddress().getPostalCode())) {
						query.append("&billing_zip=").append(customer.getAddress().getPostalCode());
					}
					query.append("&billing_country=India");
				}
				 log.debug("======"+query.toString()+"======");
				 setTempString(query.toString());
				customer=null;
				query=null;
				
		   }
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	 @Actions({ @Action(value = "verifyBuySMSPayment", results = { @Result(location = "ajaxPaidSmsDetails.jsp", name = "success") }) })
		public String verifyBuySMSPayment() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'verifyBuySMSPayment' method");
		}
		try
		{
			String workingKey = "63E8BC3765E40B888895B8DD2A23EF75";		//32 Bit Alphanumeric Working Key should be entered here so that data can be decrypted.
			log.debug("encResp:" + getParamValue("encResp"));
			if(!StringFunctions.isNullOrEmpty(getParamValue("encResp")))
			{
				String encResp= getParamValue("encResp");
				AesCryptUtil aesUtil=new AesCryptUtil(workingKey);
				String decResp = aesUtil.decrypt(encResp);
				StringTokenizer tokenizer = new StringTokenizer(decResp, "&");
				Hashtable<String,String> hs=new Hashtable<String,String>();
				String pair=null, pname=null, pvalue=null;
				while (tokenizer.hasMoreTokens()) {
					pair = (String)tokenizer.nextToken();
					if(pair!=null) {
						StringTokenizer strTok=new StringTokenizer(pair, "=");
						pname=""; pvalue="";
						if(strTok.hasMoreTokens()) {
							pname=(String)strTok.nextToken();
							if(strTok.hasMoreTokens())
								pvalue=(String)strTok.nextToken();
							hs.put(pname, pvalue);
						}
					}
				}
				Enumeration enumeration = hs.keys();
				while(enumeration.hasMoreElements()) {
					pname=""+enumeration.nextElement();
					pvalue=""+ hs.get(pname);
					
					log.debug("pname:"+ pname + "  pvalue: "+pvalue);
					
				}
				String paidSMSId = hs.get("order_id");
				if(!StringFunctions.isNullOrEmpty(paidSMSId))
				{
					PaidSMS paidSMS=(PaidSMS) adminManager.get(PaidSMS.class, "id="+paidSMSId);
					
					if(!ObjectFunctions.isNullOrEmpty(paidSMS))
					{
						paidSMS.setTrackingId(hs.get("tracking_id"));
						paidSMS.setBankRefNo(hs.get("bank_ref_no"));
						paidSMS.setPaymentMode(hs.get("payment_mode"));
						paidSMS.setCardName(hs.get("card_name"));
						
						if("Success".equalsIgnoreCase(hs.get("order_status")))
						{
							paidSMS.setStatus(Constants.ACTIVE_STATUS);
							AcademicYear currentYear=(AcademicYear) adminManager.get(AcademicYear.class, "id="+paidSMS.getAcademicYearId());
							currentYear.setPaidSms((paidSMS.getPaidSms()+currentYear.getPaidSms()));
							adminManager.save(currentYear);
							currentYear = null;
							super.addActionMessage("Successfully added paid SMS.");
						}
						else
							super.addActionError("Your payment is not successful, Please try again.");
						
						adminManager.save(paidSMS);
					}
					paidSMS = null;
				}
			}
			else
				super.addActionError("Your payment is not successful, Please try again.");
				
		}
		catch(Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		ajaxViewBuySmsDetails();
		return SUCCESS;
	 }
	 
	 @Actions({ @Action(value = "ajaxDoAddStaffLateSettings", results = { @Result(location = "academic/permissions/ajaxStaffLateSettings.jsp", name = "success") }),
		 @Action(value = "ajaxDoAddStaffPermissionSettings", results = { @Result(location = "academic/permissions/ajaxStaffLateSettings.jsp", name = "success") }) 
	 })
		public String doAddLatePermissions() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'doAddLatePermissions' method");
		}
		try {
			String status=null;
			if(getUserAcademicYearId() > 0 && !StringFunctions.isNullOrEmpty(getTempString())){
				if("L".equalsIgnoreCase(getTempString()))
					status="Late Settings";
				else
					status="Permissions Settings";
				setTempList(adminManager.getAll(ViewStaffPermissionsSettings.class, "custId="+getUserCustId()+" and academicYearId<="+getUserAcademicYearId()+" and status='"+status+"' "));
				setObjectList(adminManager.getAll(Role.class, "id not in (1,3,7,13,26,27,28,29,34,36,37,38)"));
				setStatus(getTempString());
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	@Actions({ @Action(value = "ajaxAddLatePermissions", results = { @Result(location = "academic/permissions/ajaxStaffLateSettings.jsp", name = "success") }) })
		public String addLatePermissions() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'addLatePermissions' method");
		}
		try {
			//here p=permission settings,L=late settings,R=isRolebased(or)all staff
			StaffPermissionsDayDetails staffDayDetails=null;
			StaffPermissionsSettings permissionsSettings=null;
			JSONObject dayObj = null;
			JSONObject formData = new JSONObject(getAnyTitle());
			if (ObjectFunctions.isNullOrEmpty(formData)) {
				super.addActionMessage("Student Permission is not registered due to system error. Please contact System Administrator");
				return SUCCESS;
			}
			JSONArray staffData = (JSONArray) formData.getJSONArray("permissionData");
			int l=1;
			if(!StringFunctions.isNullOrEmpty(getPlTitle()))
			 l=l+1;
			String status1="N";
			//when select the check box in the page we are saved permission settings same data provide to Late settings. so we need to loop 2 times 
			for (int k = 0; k < l; k++) {
				for (int i = 0; i < staffData.length(); i++) {
					JSONObject permissionObj = (JSONObject) staffData.get(i);
					if (!ObjectFunctions.isNullOrEmpty(permissionObj)) {
						String monthOrYear = (String) permissionObj.getString("monthOrYear");
						String status =  permissionObj.getString("status");
						String isRolebased =  permissionObj.getString("isRolebased");
						if (!ObjectFunctions.isNullOrEmpty(status)) {
							permissionsSettings=new StaffPermissionsSettings();
							if("P".equalsIgnoreCase(status1))
							{
								permissionsSettings.setStatus("L");
							}
							else if("L".equalsIgnoreCase(status1))
							{
								permissionsSettings.setStatus(Constants.PENDING_STATUS);
							}
							else{
								permissionsSettings.setStatus(status);
							}
							permissionsSettings.setAcademicYearId(getUserAcademicYearId());
							permissionsSettings.setCreatedById(getUser().getId());
							permissionsSettings.setCustId(getUserCustId());
							permissionsSettings.setMonthOrYear(monthOrYear);	
							permissionsSettings.setIsRolebased(isRolebased);
							permissionsSettings = (StaffPermissionsSettings) adminManager.saveOrUpdateObject(permissionsSettings);
							JSONArray daysObj = (JSONArray) permissionObj.getJSONArray("dayValues");
							if (!ObjectFunctions.isNullOrEmpty(daysObj)) {
								for (int j = 0; j < daysObj.length(); j++) {
									dayObj = daysObj.getJSONObject(j);
									if (!ObjectFunctions.isNullOrEmpty(dayObj)) {
										String days = dayObj.getString("noOfdays");		
										long roleId = dayObj.getLong("roleId");
										staffDayDetails=new StaffPermissionsDayDetails();
										staffDayDetails.setDays(Integer.valueOf(days));
										staffDayDetails.setRoleId(roleId);
										staffDayDetails.setStaffPermissionsSettings(permissionsSettings);
										adminManager.save(staffDayDetails);
										
									}
								}
							}
						}
						status1=status;
					}
				 }
			}
			super.addActionMessage("Successfully added staff permissions settings.");
			setStatus(getTempString());
			doAddLatePermissions();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}

	 @Actions({ @Action(value = "ajaxMailchimpAccountSettings", results = { @Result(location = "mailchimp/ajaxMailchimpHome.jsp", name = "success") })
	 })
		public String ajaxMailchimpAccountSettings() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxMailchimpAccountSettings' method");
		}
		Customer customer = getCustomerByCustId();
		try {
			if("submit".equalsIgnoreCase(getTempString()))
			{
				MailChimpClient mailChimpClient = new MailChimpClient();
				
				ListsMethod listsMethod = new ListsMethod();
				
				listsMethod.apikey = getCustomer().getMailChimpAPIKey();
				
				mailChimpClient.execute(listsMethod);
				
				customer.setMailChimpAPIKey(getCustomer().getMailChimpAPIKey());
				customer.setMailChimpUserName(getCustomer().getMailChimpUserName());
				customer.setMailChimpPassword(getCustomer().getMailChimpPassword());
				
				customer = (Customer)adminManager.save(customer);
				super.addActionMessage("Your Account settings updated successfully.");
			}
		}
		catch(Exception ex)
		{
			customer.setMailChimpAPIKey(null);
			super.addActionError(ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		finally
		{
			setCustomer(customer);
			customer=null;
		}
		return SUCCESS;
	}
	
	 @Actions({ @Action(value = "ajaxDoSendCampaignMails", results = { @Result(location = "mailchimp/ajaxSendCampaignMails.jsp", name = "success") })
	 })
		public String ajaxDoSendCampaignMails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoSendCampaignMails' method");
		}
		try {
			
			Map<String,String> mailchimpListsMap = new HashMap<String,String>();
			
			Customer customer = getCustomerByCustId();
			if(!StringFunctions.isNullOrEmpty(customer.getMailChimpAPIKey()))
			{
				MailChimpClient mailChimpClient = new MailChimpClient();
				
				ListsMethod listsMethod = new ListsMethod();
				
				listsMethod.apikey = customer.getMailChimpAPIKey();
				
				ListsResult listsResult =(ListsResult) mailChimpClient.execute(listsMethod);
				
				
				List<ListInformation> data = listsResult.data;
				
				for(ListInformation listInformation : data)
				{
					/*log.debug("List ID" + listInformation.id);
					log.debug("List Name" + listInformation.name);*/
					mailchimpListsMap.put(listInformation.id, listInformation.name);
				}
				
				setSelectboxMap(mailchimpListsMap);
			}
			
			setCustomer(customer);
		}
		catch(Exception ex)
		{
			super.addActionError(ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	 @Actions({ @Action(value = "ajaxSendCampaignMails", results = { @Result(location = "mailchimp/ajaxMailchimpHome.jsp", name = "success") })
	 })
		public String ajaxSendCampaignMails() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxSendCampaignMails' method");
		}
		try {
			Customer customer = getCustomerByCustId();
			if(!StringFunctions.isNullOrEmpty(customer.getMailChimpAPIKey()))
			{
				MailChimpClient mailChimpClient = new MailChimpClient();
				
				CampaignCreateMethod campaignCreateMethod = new CampaignCreateMethod();
				
				campaignCreateMethod.type = CampaignType.regular;
				campaignCreateMethod.apikey= customer.getMailChimpAPIKey();
				
				MailChimpObject options = new MailChimpObject();
				
				options.put("list_id", getParamValue("listId"));
				options.put("subject", getParamValue("subject"));
				
				options.put("from_email", getParamValue("from_email"));
				options.put("from_name", getParamValue("from_name"));
				
				campaignCreateMethod.options = options;
				
				//options.put(mcServices.CAMPAIGN_OPTION_TEMPLATE_ID, "Narahari HYNIVA");
				
				MailChimpObject content = new MailChimpObject();
				content.put("html", getParamValue("description"));
				
				campaignCreateMethod.content = content;
				
				MailChimpObject segment_opts = new MailChimpObject();
				campaignCreateMethod.segment_opts = segment_opts;
				
				String campainId;
				try {
					campainId = mailChimpClient.execute(campaignCreateMethod);
					log.debug("campainId:" + campainId);
					
					CampaignSendNowMethod campaignSendNowMethod = new CampaignSendNowMethod();
					 
					campaignSendNowMethod.apikey = customer.getMailChimpAPIKey();
					campaignSendNowMethod.cid = campainId;
					
					try {
						mailChimpClient.execute(campaignSendNowMethod);
						super.addActionMessage("Your campaign create and send a mail successfully.");
					} catch (Exception e) {
						//log.debug("*************** Catch 2 *****************");
						super.addActionError(e.getMessage());
						e.printStackTrace();
					}
					
				} catch (Exception e) {
					//log.debug("*************** Catch 1 *****************");
					super.addActionError(e.getMessage());
					e.printStackTrace();
				}
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		
		ajaxMailchimpAccountSettings();
		return SUCCESS;
	}
	 
	 @Actions({ @Action(value = "ajaxDoGetCampaignStats", results = { @Result(location = "mailchimp/ajaxGetCampaignStats.jsp", name = "success") })
	 })
		public String ajaxDoGetCampaignStats() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetCampaignStats' method");
		}
		try {
			
			Map<String,String> mailchimpListsMap = new HashMap<String,String>();
			
			Customer customer = getCustomerByCustId();
			
			if(!StringFunctions.isNullOrEmpty(customer.getMailChimpAPIKey()))
			{
				MailChimpClient mailChimpClient = new MailChimpClient();
				
				//Getting all Campaigns list
				ListCampaigsMethod listCampaigsMethod = new ListCampaigsMethod();
				
				listCampaigsMethod.apikey = customer.getMailChimpAPIKey();
				
				ListsResult listsResult =(ListsResult) mailChimpClient.execute(listCampaigsMethod);
				
				List<ListInformation> data = listsResult.data;
				
				log.debug("Data:" + data);
				for(ListInformation listInformation : data)
				{
					log.debug("List ID:" + listInformation.id);
					log.debug("List Name:" + listInformation.get("title"));
					mailchimpListsMap.put(listInformation.id, (String)listInformation.get("title"));
				}
				
				setSelectboxMap(mailchimpListsMap);
				
			}
			
			setCustomer(customer);
		}
		catch(Exception ex)
		{
			super.addActionError(ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	 @Actions({ @Action(value = "ajaxViewCampaignsStats", results = { @Result(location = "mailchimp/ajaxViewCampaignStats.jsp", name = "success") })
	 })
		public String ajaxAllCampaignsList() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoGetCampaignStats' method");
		}
		try {
			
			Map<String,String> mailchimpListsMap = new HashMap<String,String>();
			
			Customer customer = getCustomerByCustId();
			if(!StringFunctions.isNullOrEmpty(customer.getMailChimpAPIKey()))
			{
				MailChimpClient mailChimpClient = new MailChimpClient();
				
				CampaignReportMethod campaignReportMethod = new CampaignReportMethod();
				
				campaignReportMethod.apikey = customer.getMailChimpAPIKey();
				campaignReportMethod.cid = getParamValue("campaignsId");
				
				ListsResult listsResult =(ListsResult) mailChimpClient.execute(campaignReportMethod);
				
				setTempId((long)Double.parseDouble(listsResult.get("hard_bounces").toString()) + (long)Double.parseDouble(listsResult.get("soft_bounces").toString()));
				
				setTempId1((long)Double.parseDouble(listsResult.get("emails_sent").toString()) - getTempId());
				getObjectList().add(listsResult); 
			}
			
			setCustomer(customer);
		}
		catch(Exception ex)
		{
			super.addActionError(ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	 
	 @Actions({ @Action(value = "ajaxDoUploadEmailsToMailchimp", results = { @Result(location = "mailchimp/ajaxUploadEmailsToMailchimp.jsp", name = "success") })
	 })
		public String ajaxDoUploadEmailsToMailchimp() throws URTUniversalException {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxDoUploadEmailsToMailchimp' method");
		}
		try {
			ajaxDoSendCampaignMails();//Getting the lists map
			if(getUserAcademicYearId() > 0){
				getSession().removeAttribute("GetAllStudyClasses");
				checkStudyClassHavingStudentsOrNot();
			}
		}
		catch(Exception ex)
		{
			super.addActionError(ex.getMessage());
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
	}
	
	 @Actions({ @Action(value = "ajaxUploadEmailsToMailchimp", results = { @Result(location = "mailchimp/ajaxUploadEmailsToMailchimp.jsp", name = "success") })
	 })
		public String ajaxUploadEmailsToMailchimp() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxUploadEmailsToMailchimp' method");
			}
			try {
				if (getUserAcademicYearId() != 0 && StringFunctions.isNotNullOrEmpty(getSelectedId())) {
					
					Customer customer = getCustomerByCustId();
					List<Object[]> studentDetails = null;
					List<StudyClass> studyClasses =  studentManager.getAll(StudyClass.class, "id in " + getSelectedId()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId());
					String query = "select studentId, firstName,lastName,studentEmail,parentEmail from vw_studentDetails ";
					 
					if (ObjectFunctions.isNotNullOrEmpty(studyClasses)) {
						for (StudyClass studyClass : studyClasses) {
							studentDetails = studentManager.getAll(query+ " where classSectionId="+ studyClass.getId()+ "  and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null and studentEmail is not null");
								
							log.debug(query+ " where classSectionId="+ studyClass.getId()+ "  and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and description is null and studentEmail is not null"); 
							if (!ObjectFunctions.isNullOrEmpty(studentDetails)) {
								for (Object[] obj : studentDetails) 
								{
									if (!ObjectFunctions.isNullOrEmpty(obj[4])) 
									{
										MailChimpClient mailChimpClient = new MailChimpClient();
										
										String email = obj[4].toString();
										
										String firstName = obj[1].toString();
										String lastName = null;
										if(!ObjectFunctions.isNullOrEmpty(obj[2]))
											lastName = obj[2].toString();
										
										log.debug(" Email:" + email + " firstName:" + firstName + " lastName:" + lastName);
										// Subscribe a person
										SubscribeMethod subscribeMethod = new SubscribeMethod();
										subscribeMethod.apikey = customer.getMailChimpAPIKey();
										subscribeMethod.id = getParamValue("listId");
										subscribeMethod.email = new Email();
										subscribeMethod.email.email = email;
										subscribeMethod.double_optin = false;
										subscribeMethod.update_existing = true;
										subscribeMethod.merge_vars = new MergeVars(email, firstName, lastName);
										mailChimpClient.execute(subscribeMethod);
										mailChimpClient.close();
									}
									
								}
							}
						}
						
						super.addActionMessage("Uploaded Emails To Mailchimp Successfully.");
					} 
				}
			} catch (Exception ex) {
				super.addActionError(ex.getMessage());
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			ajaxDoUploadEmailsToMailchimp();
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxViewDepartmentHead", results = { @Result(location = "../admin/ajaxDepartmentHeadDetails.jsp", name = "success") }) })
		public String ajaxViewDepartmentHead() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewDepartmentHead' method");
			}
			try {
				setObjectList(adminManager.getAll(Departments.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		//@Description 15th Oct 2015 RaviTeja: added organization add to multiple school  
		@Actions( { @Action(value = "ajaxCreateDepartment", results = { @Result(location = "../admin/ajaxCreateDepartment.jsp", name = "success") }) })
		public String ajaxCreateDepartment() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCreateDepartment' method");
			}
			try {
				Departments departments = null;
				List<String> studyCLassIds= null;
				List<StudyClass> studyclassList = null; 
				if(getTempId() != 0){
					departments =(Departments) adminManager.get(Departments.class,"id="+getTempId());
					for(StudyClass odj: departments.getStudyClass()){
						getChkBoxSelectedIds().add(String.valueOf(odj.getId()));
					}
					setDepartments(departments);
					setAnyTitle(departments.getDeptStaffId()+","+departments.getDepartmentHeadName());
					studyCLassIds = adminManager.getAll("select id from studyClass where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id in (select studyClassesId from deptStudyClasses where deptId="+getTempId()+")");
				}else{
		  			studyCLassIds = adminManager.getAll("select id from studyClass where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and id not in (select studyClassesId from deptStudyClasses)");
				}
				List<ViewStaffPersonAccountDetails> StaffDetails=adminManager.getAllStaffList(getUserCustId(),getUserAcademicYearId());
	  			if(ObjectFunctions.isNotNullOrEmpty(StaffDetails)){
	  				setStaffsList(StaffDetails);
	  				StaffDetails=null;
	  			}
	  			if(!ObjectFunctions.isNullOrEmpty(studyCLassIds)){
	  				studyclassList = adminManager.getAll(StudyClass.class,"custId="+getUserCustId()+" and id in ("+StringUtil.convertListToString(studyCLassIds)+")");
	  			}
	  			if(!ObjectFunctions.isNullOrEmpty(studyclassList)){
	  				getStudyClassList().addAll(studyclassList);
	  			}
				departments=null;			
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoAddOrEditDepartments", results = { @Result(location = "../admin/ajaxDepartmentHeadDetails.jsp", name = "success") }) })
		public String ajaxDoAddOrEditDepartments() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAddOrEditDepartments' method");
			}
			try {
				Departments departments = null;
				if(!ObjectFunctions.isNullOrEmpty(getDepartments()) ){
					if(getTempId() != 0){
						departments =(Departments) adminManager.get(Departments.class,"id="+getTempId());
						departments.setLastAccessDate(new Date());
						departments.setLastUpdatedById(getUser().getId());
							departments.setLastUpdatedDate(new Date());
							setPlTitle("OU"); // OU means OrganizationUpdate
					}else{
						departments = new Departments();
						departments.setCreatedById(getUser().getId());
						departments.setCreatedDate(new Date());
					}
					String accountIdAndFullName[]=getAnyTitle().split(",");
					if(!ObjectFunctions.isNullOrEmpty(accountIdAndFullName)){
						departments.setDeptStaffId(Long.parseLong(accountIdAndFullName[0]));
						departments.setDepartmentHeadName(accountIdAndFullName[1]);
					}
					departments.setAcademicYearId(getUserAcademicYearId());
					departments.setCustId(getUserCustId());
					departments.setMobileNumber(getDepartments().getMobileNumber());
					departments.setDepartmentName(getDepartments().getDepartmentName());
					String deptClassesIds[]=getTempString().split(",");
					   for(String depatClassesId : deptClassesIds) {
						   StudyClass deptObj =null;
						  if(Long.valueOf(depatClassesId)>0){
							   deptObj = (StudyClass) adminManager.get(StudyClass.class, Long.parseLong(depatClassesId));
							   if(!ObjectFunctions.isNullOrEmpty(deptObj))
								   departments.addDeptClasses(deptObj);
						   }deptObj = null;
					   }
					adminManager.saveOrUpdateObject(departments);
						if(!ObjectFunctions.isNullOrEmpty(getPlTitle())){
							if(getPlTitle().equalsIgnoreCase("OU"))
								super.addActionMessage("Department updated successfully.");
						} else
							super.addActionMessage("Department created successfully.");
				}
				departments =null;
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			ajaxViewDepartmentHead();
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxCheckDayBookReceiptNumber", results = { @Result(type = "json", params = {"includeProperties", "autoCheck" }, name = "success") }) })
		public String ajaxCheckDayBookReceiptNumber() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckDayBookReceiptNumber' method");
			}
			try {
				String receiptNumber = getParamValue("keyWord");
				if (StringFunctions.isNotNullOrEmpty(receiptNumber)) {
					int receiptAvailableCount = adminManager.getCount("dayBook", "custId=" + getUserCustId()+ " and invoiceNumber='" + receiptNumber + "' and academicYearId="+getUserAcademicYearId());
					if (receiptAvailableCount > 0) {
						setAutoCheck("1");
					} else {
						setAutoCheck("0");
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxViewBuySmsDetails", results = { @Result(location = "ajaxPaidSmsDetails.jsp", name = "success") }) })
		public String ajaxViewBuySmsDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewBuySmsDetails' method");
			}
			try {
				setObjectList(adminManager.getAll(PaidSMS.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and status='A'"));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoBuySms", results = { @Result(location = "ajaxDoBuySms.jsp", name = "success") }) })
		public String ajaxDoBuySms() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoBuySms' method");
			}
			try {
				setCustomer(getCustomerByCustId());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		@Action(value = "ajaxDoSwithFeatureAcademicYear", results = { @Result(location = "academic/ajaxSwithFeatureAcademicYear.jsp", name = "success") })
		public String ajaxDoSwithFeatureAcademicYear() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoSwithFeatureAcademicYear' method");
			}
			try {
				//setCustomer(getCustomerByCustId());
				AcademicYear academicYear=(AcademicYear)adminManager.get(AcademicYear.class,Long.valueOf(getUserAcademicYearId()));
				if(!ObjectFunctions.isNullOrEmpty(academicYear.getStartDate()) || !ObjectFunctions.isNullOrEmpty(academicYear.getEndDate())){
					
					AcademicYearVo academicYearVo = academicYear.copyFromEntityToVo(academicYear);
					if(!ObjectFunctions.isNullOrEmpty(academicYearVo))
					{
						academicYearVo.setAcademicStartDate(DateFunctions.getDatePlusNdays(academicYearVo.getAcademicEndDate(),1));
						setAcademicYearVo(academicYearVo);
					}
					//setAcademicYear(academicYear);
				}
				academicYear = null;
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxShowStudentDetails", results = { @Result(location = "ajaxShowStudentDetails.jsp", name = "success") }) })
		public String ajaxShowStudentDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxShowStudentDetails' method");
			}
			try {
				String searchInfo = getAnyTitle();
				List<ViewAllUsers> allUserList=null;
				if(!StringFunctions.isNullOrEmpty(searchInfo))
					allUserList = adminManager.getAll(ViewAllUsers.class,"custId="+ getUserCustId()+ " and (admissionNumber='"+searchInfo+"' or firstName='"+searchInfo+"' or lastName='"+searchInfo+"' or fatherName='"+searchInfo+"' or mobileNumber='"+"+91-"+searchInfo+"') and roleName='ROLE_STUDENT' ");
				if(!ObjectFunctions.isNullOrEmpty(allUserList)) {
					for(ViewAllUsers allUsers : allUserList){
						if("Student".equalsIgnoreCase(allUsers.getRoleDescription())){
							setTempId(allUsers.getAccountId());
							ajaxGetCommanSearchDetails(getTempId(),allUsers);
						}
					}
					if(getTempList().size() == 1){
						 setViewAllUsers((ViewAllUsers)getTempList().get(0));
				    }
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxViewAllCommonDetails", results = { @Result(location = "ajaxViewStudentPersonalDetails.jsp", name = "success") }) })
		 public String ajaxViewAllCommonDetails() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewAllCommonDetails' method");
			}
			try {
		 		ViewAllUsers allUsers = (ViewAllUsers)adminManager.get(ViewAllUsers.class,"accountId="+getTempId());
			 	if(!ObjectFunctions.isNullOrEmpty(allUsers)){
			 		ajaxGetCommanSearchDetails(getTempId(),allUsers);
			 		if(getTempList().size() == 1){
						 setViewAllUsers((ViewAllUsers)getTempList().get(0));
				    }
			 	}
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
	    } 
		@Actions( { @Action(value = "ajaxDoGroupVoucher", results = { @Result(location = "academic/voucher/ajaxDoGroupVoucher.jsp", name = "success") }) })
		public String ajaxDoGroupVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoGroupVoucher' method");
			}
			try {
				setCategoryQuestionList(adminManager.getAll(AccountCategorys.class));
				if(!ObjectFunctions.isNullOrEmpty(getAccountGroup())){
					setAccountGroup((AccountGroup)adminManager.get(AccountGroup.class,getAccountGroup().getId()));
					setTempId1(getAccountCategorys().getId());
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxViewGroupVoucher", results = { @Result(location = "academic/voucher/ajaxManageGroups.jsp", name = "success") }) })
		public String ajaxViewGroupVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewGroupVoucher' method");
			}
			try {
				//setObjectList(adminManager.getAll(AccountCategorys.class));
				setObjectList(adminManager.getAll("select accountGroupId,name,groupName,categoryId from vw_accountGroupCategory where custId="+getUserCustId()+" and status='"+Constants.ACTIVE_STATUS+"' "));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxGroupVoucher", results = { @Result(location = "academic/voucher/ajaxManageGroups.jsp", name = "success") }) })
		public String ajaxGroupVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGroupVoucher' method");
			}
			try {
				AccountGroup group=null;
				AccountCategorys ac = null;
				long accountGroupId = getAccountGroup().getId();
				if(accountGroupId > 0){
					group = (AccountGroup)adminManager.get(AccountGroup.class,accountGroupId);
					group.setLastUpdatedById(getUser().getId());
					group.setLastUpdatedDate(new Date());
				}
				else{
					group = new AccountGroup();
					group.setCreatedById(getUser().getId());
					group.setCreatedDate(new Date());					
					group.setCustId(getUserCustId());
					group.setStatus("A");
				}
				ac=(AccountCategorys)adminManager.get(AccountCategorys.class,getTempId1());
				group.setGroupName(getAccountGroup().getGroupName());
				group.setAccountCategorysId(ac.getId());
				adminManager.save(group);
				if(accountGroupId > 0){
					super.addActionMessage("Group updated successfully.");
				}else
					super.addActionMessage("Group added successfully.");
					
				    ajaxViewGroupVoucher();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoLedgerVoucher", results = { @Result(location = "academic/voucher/ajaxDoLedgerVoucher.jsp", name = "success") }) })
		public String ajaxDoLedgerVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoLedgerVoucher' method");
			}
			try {
				setTempList2(adminManager.getAll(AccountGroup.class, "custId="+getUserCustId()+" and status='"+Constants.ACTIVE_STATUS+"' "));
				if(!ObjectFunctions.isNullOrEmpty(getLedgerDetails()))
					setLedgerDetails((LedgerDetails)adminManager.get(LedgerDetails.class,getLedgerDetails().getId()));
				if(!ObjectFunctions.isNullOrEmpty(getAccountGroup())){
					setTempId(getAccountGroup().getId());
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxViewLedgerVoucher", results = { @Result(location = "academic/voucher/ajaxManageLedgers.jsp", name = "success") }) })
		public String ajaxViewLedgerVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxViewLedgerVoucher' method");
			}
			try {
				setTempList(adminManager.getAll(AccountGroup.class,"custId="+getUserCustId()+" and status='"+Constants.ACTIVE_STATUS+"' "));
				setTempList2(adminManager.getAll(LedgerDetails.class,"custId="+getUserCustId()+" and status='"+Constants.ACTIVE_STATUS+"' "));
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}

		@Actions( { @Action(value = "ajaxLedgerVoucher", results = { @Result(location = "academic/voucher/ajaxManageLedgers.jsp", name = "success") }) })
		public String ajaxLedgerVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxLedgerVoucher' method");
			}
			try {
				LedgerDetails ledgerDetails=null;
				AccountGroup ag = null;
				long ledgerId = getLedgerDetails().getId();
				if(ledgerId > 0){
					ledgerDetails = (LedgerDetails)adminManager.get(LedgerDetails.class,ledgerId);
					ledgerDetails.setLastUpdatedById(getUser().getId());
					ledgerDetails.setLastUpdatedDate(new Date());
				}
				else{
					ledgerDetails = new LedgerDetails();
					ledgerDetails.setCreatedById(getUser().getId());
					ledgerDetails.setCreatedDate(new Date());					
					ledgerDetails.setCustId(getUserCustId());
					ledgerDetails.setStatus("A");
				}
				ledgerDetails.setLedgerName(getLedgerDetails().getLedgerName()); 
				
				ag=(AccountGroup)adminManager.get(AccountGroup.class,getTempId());
				ledgerDetails.setAccountGroupId(ag.getId());
				adminManager.save(ledgerDetails);
				if(ledgerId > 0)
					super.addActionMessage("Ledger updated successfully.");
				else
					super.addActionMessage("Ledger added successfully.");
				ajaxViewLedgerVoucher();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoVoucher", results = { @Result(location = "academic/voucher/ajaxDoVoucher.jsp", name = "success"),
				                                                 @Result(location = "academic/voucher/ajaxEditVoucher.jsp", name = "edit") }) })
		public String ajaxDoVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoVoucher' method");
			}
			try {
				log.debug(getUserCustId());
				long voucherId = getVoucher().getId();
				setTempList1(null);
				setTempId(0);
				setTempList1(adminManager.getAll(AccountGroup.class,"custId="+getUserCustId()+" and status='"+Constants.ACTIVE_STATUS+"' and accountCategorysId in (5)"));
				if(voucherId>0){
					setViewVoucherDetailsList(adminManager.getAll(ViewVoucherDetails.class,"custId="+getUserCustId()+" and voucherId="+voucherId+" and status='"+Constants.ACTIVE_STATUS+"'"));
					for(ViewVoucherDetails voucherDetails : getViewVoucherDetailsList()){
						if(!ObjectFunctions.isNullOrEmpty(voucherDetails)){
							setEmpId(voucherDetails.getVoucherDateFormet());
							setTempId(Long.valueOf(voucherDetails.getFromAccountId()));
							setPlTitle(voucherDetails.getVoucherNo());
							setTempId2(voucherId);;
						}
					}
					return "edit";
				}else{
					setAttendanceDate(DateFormatter.getTodayDateStr(DateFormatter.MMDDCCYY_PATTERN));
					setPlTitle(Math.round(Math.random()*100)+DateFormatter.formatDate(DateFormatter.MM_DD_YY_PATTERN, new Date()));
				}
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxAddVoucher", results = { @Result(location = "academic/class/ajaxGetCurrentDetails.jsp", name = "success") }) })
		public String ajaxAddVoucher() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAddVoucher' method");
			}
			try {
				JSONArray voucherDetailsJsonArray=null;
				JSONObject voucherJson=null;
				Voucher voucher=null;
				long accountIds=0;
				String narrations=null;
				double voucherAmount=0;
				double countAmount=0;
				VoucherDetails voucherDetails=null;
				long voucherId = getVoucher().getId();
				long voucherDetailsId= 0;
				if(voucherId > 0){
					voucher = (Voucher)adminManager.get(Voucher.class,voucherId);
					voucher.setLastUpdatedById(getUser().getId());
					voucher.setLastUpdatedDate(new Date());
				}
				else{
					voucher = new Voucher();
					voucher.setCreatedById(getUser().getId());
					voucher.setCreatedDate(new Date());					
					voucher.setCustId(getUserCustId());
				}
				    voucher.setFromAccountId(getTempId());
					Date aDate = DateFormatter.parseString(DateFormatter.MMDDCCYY_PATTERN, getAttendanceDate());
					voucher.setVoucherDate(aDate);
					voucher.setVoucherNo(getVoucher().getVoucherNo());
					voucher.setFinancialYearId(getFinancialYear().getId());
					try {
						if(StringFunctions.isNotNullOrEmpty(getTempString())){
							voucherDetailsJsonArray=new JSONArray(getTempString());
							for(int i=0;i<voucherDetailsJsonArray.length();i++)
							{
								voucherJson=voucherDetailsJsonArray.getJSONObject(i);
								if(!ObjectFunctions.isNullOrEmpty(voucherJson))
								{
								accountIds = voucherJson.getLong("accountNo");
								if(!voucherJson.isNull("title"))
									voucherDetailsId = voucherJson.getLong("title");
								if(voucherDetailsId > 0 && accountIds > 0){
									voucherDetails = (VoucherDetails)adminManager.get(VoucherDetails.class,"id="+voucherDetailsId);
									voucherDetails.setLastUpdatedById(getUser().getId());
									voucherDetails.setLastUpdatedDate(new Date());
								}else
									voucherDetails = new VoucherDetails();
									narrations = voucherJson.getString("narrations");
									voucherAmount = voucherJson.getDouble("voucherAmount");
									//voucherDetailsId = voucherDetailsJsonArray.getString("voucherDetailsId");
									voucherDetails.setToAccountId(accountIds);
									voucherDetails.setAmount(voucherAmount);
									voucherDetails.setNarration(narrations);
									voucherDetails.setCreatedById(getUser().getId());
									voucherDetails.setCreatedDate(new Date());
									voucherDetails.setStatus("A");
									countAmount=countAmount+voucherAmount;
									voucher.setTotalAmount(countAmount);
								}
								if(!ObjectFunctions.isNullOrEmpty(voucherDetails)) {
									voucher.addvoucherDetailsList(voucherDetails);
					            }
							}
						}
						voucherDetails = null;
					} catch (Throwable e) {
						e.printStackTrace();
					}
				//}
				Voucher vObj =vObj =(Voucher) adminManager.merge(voucher);
				countAmount=0;
				if(voucherId > 0){
					super.addActionMessage("Voucher updated successfully.");
				}else{
					super.addActionMessage("Voucher added successfully.");
				}
					
				setTempId(vObj.getId());
				setTotalAmount(vObj.getTotalAmount());
				vObj=null;
				ajaxDoGetDayBookDetails();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxRemoveGroupVoucher", results = { @Result(location = "academic/voucher/ajaxViewGroupVoucher.jsp", name = "success") }) })
		public String ajaxRemoveGroupVoucher() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveGroupVoucher' method");
			}
			try{
				if(getAccountGroup().getId()>0){
					int count = adminManager.getCount("ledgerDetails","accountGroupId="+getAccountGroup().getId()+" and custId="+getUserCustId());
					if(count > 0){
						super.addActionError("group contains ledgers. You can't remove this group.");
					}else{
						AccountGroup group =(AccountGroup)adminManager.get(AccountGroup.class, getAccountGroup().getId());
						group.setStatus("I"); //inactive
						adminManager.save(group);
						super.addActionMessage("Group removed successfully.");
					}
				//ajaxDoGetDayBookDetails();
				ajaxViewGroupVoucher();
				
				}
			}
			catch(Exception ex){
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}	
		@Actions( { @Action(value = "ajaxRemoveLedger", results = { @Result(location = "academic/voucher/ajaxViewLedgerVoucher.jsp", name = "success") }) })
		public String ajaxRemoveLedger() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveLedger' method");
			}
			try{
				if(getVoucher().getId()>0){				
					LedgerDetails ledgerDetails =(LedgerDetails)adminManager.get(LedgerDetails.class, getAccountGroup().getId());
					ledgerDetails.setStatus("I"); //inactive
					adminManager.save(ledgerDetails);
					super.addActionMessage("Ledger removed successfully.");
				}
			}
			catch(Exception ex){
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}	
		
		@Actions( { @Action(value = "ajaxRemoveVoucherDetails", results = { @Result(location = "academic/class/ajaxGetCurrentDetails.jsp", name = "success") }) })
		public String ajaxRemoveVoucherDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveVoucherDetails' method");
			}
			try{
				if(getVoucherDetails().getId()>0){
					VoucherDetails voucherDetails = (VoucherDetails)adminManager.get(VoucherDetails.class, getVoucherDetails().getId());
					voucherDetails.setStatus("I"); //inactive
					adminManager.save(voucherDetails);
					super.addActionMessage("Voucher Details removed successfully.");
					ajaxDoGetDayBookDetails();
				
				}
			}
			catch(Exception ex){
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}	
		
		@Actions({ @Action(value = "ajaxInternalSoftwareTicketDetails", results = { @Result(location = "tickets/ajaxInternalSoftwareTicketDetails.jsp", name = "success") }) })
		public String ajaxInternalSoftwareTicketDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxInternalSoftwareTicketDetails' method");
			}
			try {
				String staffType="S";
				if(getUser().isSchoolAdmin())
				{
					staffType="A";
				}
				Properties urlConfigProp = getResouceBundleURLConfiguraionPropertiesFileDetails();
				//http://www.mkyong.com/webservices/jax-rs/restfull-java-client-with-java-net-url/
				String ticketUrl = urlConfigProp.getProperty("s.internalSoftware.url")+"api/Rest/GetTicketsDetail/"+getUserCustId()+"/"+getUser().getId()+"/S/"+staffType;
				//URL url = new URL("http://192.168.0.150/api/Rest/GetTicketsDetail/43/34745/S/A");
				URL url = new URL(ticketUrl);
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
				conn.setRequestMethod("GET");
				conn.setRequestProperty("Accept", "application/json");

				if (conn.getResponseCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : "
							+ conn.getResponseCode());
				}

				BufferedReader br = new BufferedReader(new InputStreamReader(
					(conn.getInputStream())));

				String output;
				log.debug("Output from Server .... \n");
				while ((output = br.readLine()) != null) {
					log.debug(output);
					
					List<TicketDetailsVO> ticketDetailsVOList = new ArrayList<TicketDetailsVO>();
					JSONObject formData = new JSONObject(output);
					JSONArray ticketDetailsArray = (JSONArray) formData.getJSONArray("TicketDetails");
					for(int i=0;i<ticketDetailsArray.length();i++)
					{
						JSONObject ticketDetailsJsonObj=ticketDetailsArray.getJSONObject(i);
						if(!ObjectFunctions.isNullOrEmpty(ticketDetailsJsonObj))
						{
							TicketDetailsVO ticketDetailsVO = new TicketDetailsVO();
							ticketDetailsVO.setRefNumber((String)ticketDetailsJsonObj.get("RefNumber"));
							ticketDetailsVO.setReportedBy((String)ticketDetailsJsonObj.get("ReportedBy"));
							ticketDetailsVO.setIssueDate((String)ticketDetailsJsonObj.get("IssueDate"));
							ticketDetailsVO.setIssue((String)ticketDetailsJsonObj.get("Issue"));
							ticketDetailsVO.setStatus((String)ticketDetailsJsonObj.get("Status"));
							
							ticketDetailsVO.setAssignedTo((String)ticketDetailsJsonObj.get("AssignedTo"));
							ticketDetailsVO.setExpCompletionDate((String)ticketDetailsJsonObj.get("CommittedToCustomer"));
							ticketDetailsVOList.add(ticketDetailsVO);
						}
					}
					
					if(!ObjectFunctions.isNullOrEmpty(ticketDetailsVOList))
					{
						setObjectList(ticketDetailsVOList);
					}
				}

				conn.disconnect();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		
		@Actions({ @Action(value = "ajaxDoAddInternalSoftwareTicketDetails", results = { @Result(location = "tickets/ajaxAddInternalSoftwareTicketDetails.jsp", name = "success") }) })
		public String ajaxDoAddInternalSoftwareTicketDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAddInternalSoftwareTicketDetails' method");
			}
			try {
				
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		@Actions({ @Action(value = "ajaxAddInternalSoftwareTicketDetails", results = { @Result(location = "tickets/ajaxViewInternalSoftwareTicketDetails.jsp", name = "success") }) })
		public String ajaxAddInternalSoftwareTicketDetails() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAddInternalSoftwareTicketDetails' method");
			}
			try {
				if(!ObjectFunctions.isNullOrEmpty(getTicketDetailsVO()))
				{
					try {
						//http://www.mkyong.com/webservices/jax-rs/restfull-java-client-with-java-net-url/
						Properties urlConfigProp = getResouceBundleURLConfiguraionPropertiesFileDetails();
						
						String ticketUrl = urlConfigProp.getProperty("s.internalSoftware.url")+"api/Rest/Post/";
						JSONObject ticketsAddJson = new JSONObject();
						
						ticketsAddJson.put("CustomerId",getUserCustId());
						ticketsAddJson.put("ReportedBy", getUser().getId());
						ticketsAddJson.put("Issue",getTicketDetailsVO().getIssue());
						ticketsAddJson.put("CustomerType","S");
						
						log.debug(ticketsAddJson.toString());

						URL url = new URL(ticketUrl);
						HttpURLConnection conn = (HttpURLConnection) url.openConnection();
						conn.setDoOutput(true);
						conn.setRequestMethod("POST");
						conn.setRequestProperty("Content-Type", "application/json");

						//String input = "{\"qty\":100,\"name\":\"iPad 4\"}";
						String input = ticketsAddJson.toString();

						OutputStream os = conn.getOutputStream();
						os.write(input.getBytes());
						os.flush();

						if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
							super.addActionError("Your ticket not posted successfully, Please contact administrator.");
							throw new RuntimeException("Failed : HTTP error code : "
								+ conn.getResponseCode());
						}
						else
						{
							BufferedReader br = new BufferedReader(new InputStreamReader(
									(conn.getInputStream())));

							String output;
							log.debug("Output from Server .... \n");
							while ((output = br.readLine()) != null) {
								log.debug(output);
								
								JSONObject formData = new JSONObject(output);
								String status = (String)formData.get("Status");
								String message = (String)formData.get("Message");
								if("Success".equalsIgnoreCase(status))
									super.addActionMessage("You have successfully submited your ticket");
								else
									super.addActionError(message);
							}
						}
						conn.disconnect();

					  } catch (Exception e) {
						e.printStackTrace();
					  }
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			ajaxInternalSoftwareTicketDetails();
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxDoUpateAcademicDetails", results = { @Result(location = "academic/ajaxDoEditSchoolSettings.jsp", name = "success") }) })
		public String ajaxDoUpateAcademicDetails() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoUpateAcademicDetails' method");
			}
			try {
				setCustomer(getCustomerByCustId());
				setChkBoxSelectedIds(null);
				setAcademicYear(getCurrentAcademicYear());
				setAcademicYearId(getAcademicYear().getId());
				setTempString3("Feature"); 
				if(!ObjectFunctions.isNullOrEmpty(getAcademicYearId()) && !ObjectFunctions.isNullOrEmpty(getUserCustId())){
					setAcademicYear((AcademicYear)adminManager.get(AcademicYear.class, Long.valueOf(getAcademicYearId())));
					//setTempString(getAcademicYear().getPastYear()+":"+(Long.valueOf(getAcademicYear().getPastYear())+1));
					//setAnyTitle((Long.valueOf(getAcademicYear().getPastYear())+1)+":"+(Long.valueOf(getAcademicYear().getPastYear())+2));
					generateSchoolWorkingDays();
					prepareWeekDays();
					setWeekDayList(adminManager.getAll(WeekDays.class));
					setClassList(adminManager.getAllByCustId("ClassName", getUserCustId(), getUserAcademicYearId()));
					setApprovedLeavesList(adminManager.getAll(AcademicYear.class, "status = '"+ Constants.YES_STRING +"' and custId="+getCustomer().getId()));
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		@Actions( { @Action(value = "ajaxGetLedgerDetailsByledgerId",results = { @Result(location = "academic/voucher/ajaxDoLedgerDetailsList.jsp", name = "success"),
                                                                                 @Result(location = "academic/voucher/ajaxEditLedgerDetailsList.jsp", name = "edit") }) })
				
		public String ajaxGetLedgerDetailsByledgerId() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetLedgerDetailsByledgerId' method");
			}
			try {
				long voucherId = getTempId2();
			    setTempList(adminManager.getAll(ViewLedgerDetailsWithAccountCategories.class,"custId="+getUserCustId()+" and status='"+Constants.ACTIVE_STATUS+"' and accountGroupId="+getTempId()));
				if(voucherId>0){
					setViewVoucherDetailsList(adminManager.getAll(ViewVoucherDetails.class,"custId="+getUserCustId()+" and voucherId="+voucherId+" and status='"+Constants.ACTIVE_STATUS+"'"));
					for(ViewVoucherDetails voucherDetails : getViewVoucherDetailsList()){
						if(!ObjectFunctions.isNullOrEmpty(voucherDetails)){
							setEmpId(voucherDetails.getVoucherDateFormet());
							setTempId(Long.valueOf(voucherDetails.getFromAccountId()));
							setPlTitle(voucherDetails.getVoucherNo());
						}
					}
					return "edit";
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		@Action(value = "ajaxCopyPasteLoginPage", results = { @Result(location = "academic/ajaxCopyPasteLoginPage.jsp", name = "success") })
		public String ajaxCopyPasteLoginPage() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCopyPasteLoginPage' method");
			}
			try {
				// Nothing to do here.
				 
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions( { @Action(value = "ajaxCheckCurrentPasswordMatchedOrNot", results = { @Result(type = "json", name = "success", params = { "includeProperties", "autoCheck" }) }) })
		public String ajaxCheckCurrentPasswordMatchedOrNot() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckCurrentPasswordMatchedOrNot' method");
			}
			try {
				String changedpassword = null;
				changedpassword = getParamValue("keyWord");
				User user= (User)userManager.get(User.class, getUser().getId());
				String encryptPassword=PasswordUtils.passwordEncoder(changedpassword,null); 
				if(encryptPassword.equalsIgnoreCase(getUser().getPassword())){
					setAutoCheck("0");
				}else
					 setAutoCheck("2");
			} catch (Exception ex) {
				log.error("Entering into 'catch block':" + ex.getMessage());
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		@Actions({ @Action(value = "ajaxChangeTransportServiceStatus", results = { @Result(type = "json", name = "success", params = {"includeProperties", "status" }) }) })
		public String ajaxChangeTransportServiceStatus() {
		if (log.isDebugEnabled()) {
			log.debug("Entering 'ajaxChangeTransportServiceStatus' method");
		}
		try {
			Customer customer = getCustomerByCustId();
			if(!ObjectFunctions.isNullOrEmpty(customer)){
				if(customer.isCheckTransportService()){
					customer.setCheckTransportService(false);
				}else
					customer.setCheckTransportService(true);
				    customer=userManager.saveCustomer(customer);
			}
			setStatus(String.valueOf(customer.isCheckTransportService()));
		} catch (Exception ex) {
			ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
		}
		return SUCCESS;
		}
		@Action(value = "ajaxTcGenerateInActiveStudent", results = { @Result(location = "academic/tcGeneration/ajaxDoTcGeneration.jsp", name = "success") })
		public String ajaxTcGenerateInActiveStudent() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxTcGenerateInActiveStudent' method");
			}
			try {
				if(!ObjectFunctions.isNullOrEmpty(getWishTitle())){
					studentManager.updateTcGenerateInActiveStudents(getWishTitle(),getUserCustId());
					super.addActionMessage("Student inactivated successfully."); 
					//ajaxGetStudentPendingDues();
					setAnyTitle("templateSettings");
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}finally{
				ajaxTcGeneration();
			}
			return SUCCESS;
		}
		
		 @Actions( {
				@Action(value = "ajaxDoStudentAssignmentReport", results = { @Result(location = "reports/ajaxStudentAssignmentReport.jsp", name = "success") }) })
		public String ajaxDoStudentAssignmentReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				
				log.debug("Entering 'ajaxDoStudentAssignmentReport' method");
			}
			try {
				if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) {
					setTempList(adminManager.getAll(ViewClassAssignmentDetails.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" group by classSectionId"));
				} 
				else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())  || "ROLE_HOD".equalsIgnoreCase(getUser().getUserRole())  || getUser().isSchoolAsstStaff())
				{
					StringBuffer studyClassIds = new StringBuffer();
					List<ViewStaffSubjectsDetails> staffClassList =  adminManager.getAll(ViewStaffSubjectsDetails.class,"custId ="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" group by studyClassId");
					 if (!ObjectFunctions.isNullOrEmpty(staffClassList)){ 
						for (ViewStaffSubjectsDetails viewStaffSubjectsDetails : staffClassList) 
						{
							studyClassIds.append(viewStaffSubjectsDetails.getStudyClassId()+",");
						}
					 }
					 setTempList(adminManager.getAll(ViewClassAssignmentDetails.class,"custId ="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId in ("+studyClassIds.toString()+"0) group by classSectionId"));
					//setObjectList(adminManager.getAll(ViewStaffSubjectsDetails.class,"custId ="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and accountId="+getUser().getId()+" group by studyClassId"));
				}
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		 
		 @Actions( { @Action(value = "ajaxGetAssignmentClassSubjects", results = { @Result(location = "../common/classAssignment/ajaxGetAssignmentClassSubjects.jsp", name = "success") }) })
			public String ajaxGetAssignmentClassSubjects() {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxGetStudClassSubjects' method");
				}
				try {
					if(getTempId2()>0){   // requirement changed for select the subject then show the respeced classes
						if ("ROLE_ADMIN".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_PRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_VICEPRINCIPAL".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMINOFFICER".equalsIgnoreCase(getUser().getUserRole())) {
							setSubjectsList(adminManager.getAll(ViewClassAssignmentDetails.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getTempId2()+" group by subjectId"));
						} 
						else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())  || "ROLE_HOD".equalsIgnoreCase(getUser().getUserRole()) || getUser().isSchoolAsstStaff())
						{
							List<ClassTeacher> classTeacherList = null;
							Staff staff = (Staff) staffManager.get(Staff.class, " accountId = " + getUser().getId() + " and status = '" + Constants.YES_STRING+"'");
							ClassTeacher classTeacher = (ClassTeacher)staffManager.get(ClassTeacher.class,"studyClassId="+getTempId2()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and teacherId="+staff.getId()+ " and classTeacher='Y' group by studySubjectId ");
							if(!ObjectFunctions.isNullOrEmpty(classTeacher))
								classTeacherList = staffManager.getAll(ClassTeacher.class,"studyClassId="+getTempId2()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+ " group by studySubjectId ");
							else
								classTeacherList = staffManager.getAll(ClassTeacher.class,"studyClassId="+getTempId2()+" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and teacherId="+staff.getId()+ " group by studySubjectId ");
							
							if(ObjectFunctions.isNotNullOrEmpty(classTeacherList))
							{
								StringBuffer subjectIds = new StringBuffer();
								for(ClassTeacher classTeacher1 : classTeacherList)
								{
									subjectIds.append(classTeacher1.getStudySubjectId()+",");
									classTeacher1 = null;
								}
								setSubjectsList(adminManager.getAll(ViewClassAssignmentDetails.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+getTempId2()+ " and subjectId in ("+subjectIds.toString()+"0) group by subjectId order by assignmentDate ASC"));
								log.debug(getSubjectsList());
							}
							
							staff = null;
							classTeacher = null;
							classTeacherList = null;
							
						}
						else if("ROLE_TEACHER".equalsIgnoreCase(getUser().getUserRole()) || "ROLE_ADMIN_COORDINATOR".equalsIgnoreCase(getUser().getUserRole())  || "ROLE_HOD".equalsIgnoreCase(getUser().getUserRole())  || getUser().isSchoolAsstStaff()){
							setSubjectsList(getStaffSubjectsListForAssignment(getTempId2()));
						}
					}
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			} 
	
		 @Actions( {
				@Action(value = "ajaxStudentAssignmentReport", results = { @Result(location = "reports/ajaxViewStudentAssignmentReport.jsp", name = "success") }) })
		public String ajaxStudentAssignmentReport() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				
				log.debug("Entering 'ajaxStudentAssignmentReport' method");
			}
			try {

				List<ViewClassAssignmentDetails> studentsDetailsList =null;
				if(!ObjectFunctions.isNullOrEmpty(getViewClassAssignmentDetails().getSubjectId())){
					 studentsDetailsList = staffManager.getAll(ViewClassAssignmentDetails.class,"classSectionId="+getViewClassAssignmentDetails().getClassSectionId()+" and subjectId="+getViewClassAssignmentDetails().getSubjectId()+" and academicYearId is not null");
				}else if(StringFunctions.isNotNullOrEmpty(getClassId())){
					 studentsDetailsList = staffManager.getAll(ViewClassAssignmentDetails.class,"classSectionId="+getViewClassAssignmentDetails().getClassSectionId()+"  and academicYearId is not null");
				}
				if(ObjectFunctions.isNotNullOrEmpty(studentsDetailsList))
				{
					Collections.sort(studentsDetailsList);
					setStudentsList(studentsDetailsList); 
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
		 @Actions( {
				@Action(value = "ajaxDoUploadEventPhotos", results = { @Result(location = "event/ajaxUploadEventPhotos.jsp", name = "success") }) })
		public String ajaxDoUploadEventPhotos() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoUploadEventPhotos' method");
			}
			try {
				setEvents((Events)adminManager.get(Events.class, "id="+getEvents().getId()));
				
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		 
		 @Actions( { 
				@Action(value = "ajaxUploadEventPhotos", results = { @Result(location = "event/ajaxViewAllPhotos.jsp", name = "success") }) })
			public String ajaxUploadEventPhotos() throws URTUniversalException {

				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxAddPhotos' method");
				}
				try {
					 Events events =  (Events)adminManager.get(Events.class, "id="+getEvents().getId());
					 if(!ObjectFunctions.isNullOrEmpty(events))
					 {
						 if(getFileUpload().size()!=0){
							ajaxDoAddPhotos();
						 }
					 	List<AlbumAttachment> albumAttachmentList = null;
						EventsAlbum album = ((EventsAlbum)adminManager.get(EventsAlbum.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and albumName='"+events.getEventName()+"' and eventId="+events.getId() ));
						if(!ObjectFunctions.isNullOrEmpty(album))
						 {
								album.setLastUpdatedById(getUser().getId());
								super.addActionMessage("Album photos updated successfully.");
							}else{
								album = new EventsAlbum();
								album.setCreatedById(getUser().getId());
								album.setCreatedDate(new Date());
								super.addActionMessage("Album photos added successfully.");
							}
							album.setCustId(events.getCustId());
							album.setAcademicYearId(events.getAcademicYear().getId());
							album.setEventId(events.getId());
							album.setAlbumName(events.getEventName());
							if(!StringFunctions.isNullOrEmpty(getSelectedId())) {
								albumAttachmentList = adminManager.getAll(AlbumAttachment.class, " id in ("+getSelectedId()+")");
				 			}
							else if(!StringFunctions.isNullOrEmpty(getTempString())) 
							{
								albumAttachmentList = adminManager.getAll(AlbumAttachment.class, " id in ("+getTempString()+")");
							}
							
							if(!ObjectFunctions.isNullOrEmpty(albumAttachmentList))
			 	 			{
								album.getAlbumAttachment().addAll(ConvertUtil.convertListToSet(albumAttachmentList));
								//albumAttachmentList = null;
			 	 			}
							
							album = (EventsAlbum) adminManager.save(album);
			 				setTempId2(album.getId());
			 				album = null;
			 				
			 				EventsNotificationThread R1 = new EventsNotificationThread(events,events.getId(),Constants.YES_STRING,albumAttachmentList);
						    R1.start();
					 }
					 events = null;
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				ajaxEidtAlbumPhotos();
				return SUCCESS;
			}
		 
		 @Actions( {
				@Action(value = "ajaxViewCompletedEvent", results = { @Result(location = "event/ajaxViewCompletedEvent.jsp", name = "success") })
				 })
			public String ajaxViewCompletedEvent() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'eventHome' method");
			}
			try {
				if(getUserAcademicYearId() > 0){
					
					List<Events> eventsCompletedList = 	adminManager.getAll(Events.class, "custId =" + getUserCustId() +" and academicYearId = "+ getUserAcademicYearId()+" and endDate <'"+DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN, new Date())+" 00:00:00' order By startDate DESC");
					if(!ObjectFunctions.isNullOrEmpty(eventsCompletedList)){
						for(Events events : eventsCompletedList)
						{
							List<EventsAlbum> eventsAlbumList=adminManager.getAll(EventsAlbum.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and eventId="+events.getId());
							if(!ObjectFunctions.isNullOrEmpty(eventsAlbumList)){
								events.setEventsAlbum(eventsAlbumList);
							}
							getTempList().add(events);
						}
					}
					eventsCompletedList = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
			}
		 
		 @Actions( { @Action(value = "ajaxRemoveStudentDisabilityDocuments", results = { @Result(location = "admission/ajaxApplicationDetails.jsp", name = "success"),
				 																		 @Result(location = "admission/ajaxEditAdmittedStudentDetails.jsp", name = "admittedStudents")}) })	
			public String ajaxRemoveStudentDisabilityDocuments() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxRemoveStudentDisabilityDocuments' method");
				}
				try {
					if(!StringFunctions.isNullOrEmpty(getStatus()))
						removeStudentDisabiltyDocuments(getTempId1(),0);
					else
						removeStudentDisabiltyDocuments(0,getTempId1());
					setEmpId(String.valueOf(getTempId1()));
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				if(!StringFunctions.isNullOrEmpty(getStatus()))
					ajaxGetApplicationDetails();
				else{
					ajaxDoEditAdmittedStudents();
					setAnyId(String.valueOf(getQuizId()));
					return "admittedStudents";
				}
				return SUCCESS;
			}
		 
		 @Actions( { @Action(value = "ajaxDownloadClassAssignmentDocs", results = {}) })
			public String ajaxDownloadClassAssignmentDocs() {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxDownloadClassAssignmentDocs' method");
				}
				try {
					 if(!ObjectFunctions.isNullOrEmpty(getClassAssignment())){
						 if(!ObjectFunctions.isNullOrEmpty(getClassAssignment().getId())){
							 downloadClassAssignmentDocuments(getClassAssignment().getId());
						 }
					 }
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return null;
			}
		 @Actions({ @Action(value = "ajaxDoConfigureAutoReports", results = { @Result(location = "academic/schoolSettings/ajaxDoConfigureAutoReports.jsp", name = "success") }) })
			public String ajaxDoConfigureAutoReports() {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxDoConfigureAutoReports' method");
				}
				try {
					List<AutoReportsTypes> reportTypesList =adminManager.getAll(AutoReportsTypes.class);
					List<UserAutoReportsConfiguration> autoConfigurationsList= adminManager.getAll(UserAutoReportsConfiguration.class, "custId="+getUserCustId());
					Map<Long,UserAutoReportsConfiguration> userAutoMap = new HashMap<Long, UserAutoReportsConfiguration>();
					
					if(!ObjectFunctions.isNullOrEmpty(autoConfigurationsList)){
						for(UserAutoReportsConfiguration reportsConfiguration : autoConfigurationsList){
							userAutoMap.put(reportsConfiguration.getAutoReportsTypes().getId(), reportsConfiguration);
						}
					}
					UserAutoReportsConfiguration userAutoReportsConfiguration =null;
					List<UserAutoReportsConfiguration> configurations =new ArrayList<UserAutoReportsConfiguration>();
					if(!ObjectFunctions.isNullOrEmpty(reportTypesList)){
						for(AutoReportsTypes reportsTypes : reportTypesList){
							if(!ObjectFunctions.isNullOrEmpty(userAutoMap.get(reportsTypes.getId()))){
								userAutoReportsConfiguration=userAutoMap.get(reportsTypes.getId());
							}else{
								userAutoReportsConfiguration =new UserAutoReportsConfiguration();
								userAutoReportsConfiguration.setId(0);
								userAutoReportsConfiguration.setAutoReportsTypes(reportsTypes);
							}
							configurations.add(userAutoReportsConfiguration);
						}
					}
					setObjectList(configurations);
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			}
		 @Actions({ @Action(value = "ajaxConfigureAutoReportsForm", results = { @Result(location = "academic/schoolSettings/ajaxDoConfigureAutoReports.jsp", name = "success") }) })
			public String ajaxConfigureAutoReportsForm() {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxConfigureAutoReportsForm' method");
				}
				try {
					 int returnCode = adminManager.saveAutoReportsDetails(getTempString(),getUserCustId(),getUser().getId());
					 if(returnCode==1)
						 super.addActionMessage("Auto reports configured successfully.");
					 else
						 super.addActionError("Some issue accoured. Please contact support team.");
					 ajaxDoConfigureAutoReports();
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			}
		 
		 @Actions( { @Action(value = "generateBarCodeForAllCustomers", results = {@Result(location = "academic/class/adminDashboard.jsp", name = "success") }) })
			public void generateBarCodeForAllCustomers() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'generateBarCodeForAllCustomers' method");
				}
				try {
					GenerateBarCodeForAllCustomersThread R1 = new GenerateBarCodeForAllCustomersThread();
				    R1.start();
				} catch (Exception ex) { 
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
			}
	 @Actions({ @Action(value = "ajaxRemoveStudyClassSubjectAssignedTecher", results = { @Result(type = "json", name = "success", params = {"includeProperties", "status" }) }) })
		public String ajaxRemoveStudyClassSubjectAssignedTecher() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxRemoveStudyClassSubjectAssignedTecher' method");
			}
			try {
				/* Before removing we will check wheather staff available in classTeacher table if not availbe we will pass status as Y because we need to remove front end script. if staff object available first we need to remove from table then we need to remove record from fornt page also */
				ClassTeacher classTeacher = (ClassTeacher)adminManager.get(ClassTeacher.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and studyClassId="+getStudyClassId()+" and studySubjectId="+getSubjectId()+" and teacherId="+getTempId());
				if(!ObjectFunctions.isNullOrEmpty(classTeacher)){
					boolean removeStatus = adminManager.removeStudyClassSubjectAssignedTecher(getUserCustId(),getUserAcademicYearId(),Long.valueOf(getStudyClassId()),Long.valueOf(getSubjectId()),getTempId());
					// if(removeStatus)
					//	 setStatus("Y");
				//	 else
						// setStatus("N");
				}//else
				
					setStatus("Y");
				 
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxAdmissionNumber", results = {@Result(location = "student/ajaxAdmissionNumber.jsp", name = "success") }),
		 @Action(value = "ajaxRoleNumber", results = {@Result(location = "student/ajaxRoleNumber.jsp", name = "success") }) 	 
	 })
		public String ajaxAdmissionNumber() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAdmissionNumber' method");
			}
			try {
				
			    
			} catch (Exception ex) { 
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		 
	 @Actions( { @Action(value = "ajaxCheckAdmissionNumberAvailableOrNotForAdmissions", results = { @Result(type = "json", name = "success", params = { "includeProperties", "autoCheck" }) }) })
		public String ajaxCheckAdmissionNumberAvailableOrNotForAdmissions() throws URTUniversalException {

			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckAdmissionNumberAvailableOrNotForAdmissions' method");
			}
			try {
				 String text=getSelectedId().replace(",","0");			
				 String desc=text.replace("?",",");
				 if(!StringFunctions.isNullOrEmpty(desc)){
					String[] keyWordAndId=desc.split(",");	
					String str=keyWordAndId[1].replace("keyWord=","");			
					String sdk=str;//.replace("0",",") /*@Ganesh - I removed replace command because if I put this one when I give admission number with "0" like 1270 it is replacing like 127, this is wrong but some other scenario we added 0 but that one is not coming as of now. */
					List viewStudentClassDetailsList = null;
					if(getCustomerByCustId().isAddStudentsSameAdmissionNumber())
					{
						viewStudentClassDetailsList = studentManager.getAll(ViewStudentClassDetails.class,"custId ="+getUserCustId()+" and classId ="+ keyWordAndId[0].toString()+ " and admissionNumber='"+sdk.trim()+"'");
					}
					else
					{
						viewStudentClassDetailsList = studentManager.getAll(User.class,"custId ="+getUserCustId()+" and admissionNumber='"+sdk.trim()+"'");
					}
					
					if(!ObjectFunctions.isNullOrEmpty(viewStudentClassDetailsList))
					{
						if (viewStudentClassDetailsList.size() > 0) {
							setAutoCheck("1");
						} else {
							setAutoCheck("0");
						}
					}
					else {
						setAutoCheck("0");
					}
					viewStudentClassDetailsList = null;
			    }
			
				
			} catch (Exception ex) {
				log.error("Entering into 'catch block':" + ex.getMessage());
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 
	 @Actions( { @Action(value = "ajaxAdmissionInquiryDetails", results = { @Result(location = "admission/ajaxAdmissionInquiryForm.jsp", name = "success") }) })
		public String ajaxAdmissionInquiryDetails() {
			try {
				AdmissionSettings openedAdmissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, "custId=" + getUserCustId()+ " and status='"+Constants.YES_STRING+"'");
				if (!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings)) {
					setClassList(adminManager.getClassesByClassIdsAndAdmissionStatus(getUserCustId(),openedAdmissionSettings.getAcademicYearId(),Constants.YES_STRING,null,false));
					if (ObjectFunctions.isNotNullOrEmpty(getClassList())) {
						Collections.sort(getClassList());
					}
					setStatesList((List<State>)SMSLookUpDataCache.lookUpDataMap.get(Constants.STATE_LIST));
					setAcademicYear(openedAdmissionSettings.getAcademicYear());
					setCustomer(getCustomerByCustId());
					setAdmissionSettings(openedAdmissionSettings);
				}
				setAdmissionInquiryList(adminManager.getAll(AdmissionInquiry.class, "custId=" +getUserCustId() + " and studentAddmitted='"+Constants.NO_STRING+"'"));
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxSaveAdmissionInquiryDetails", results = { @Result(location = "admission/ajaxAdmissionInquiryForm.jsp", name = "success") }) })
		public String ajaxSaveAdmissionInquiryDetails() {
			try {
				if (!ObjectFunctions.isNullOrEmpty(getAdmissionInquiry())) 
				{
					AdmissionSettings openedAdmissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, "id=" + getAdmissionSettings().getId());
					if (!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings)) {
						Address address=new Address();
						address.setAddressLine1(getAddressVo().getAddressLine1());
						address.setAddressLine2(getAddressVo().getAddressLine2());
						address.setCity(getAddressVo().getCity());
						address.setPostalCode(getAddressVo().getPostalCode());
						address.setState(getAddressVo().getState());
						address = (Address) adminManager.save(address);
						AdmissionInquiry admissionInquiry = new AdmissionInquiry();
						admissionInquiry.setStudentName(getAdmissionInquiry().getStudentName());
						admissionInquiry.setParentName(getAdmissionInquiry().getParentName());
						admissionInquiry.setParentMobileNumber(getAdmissionInquiry().getParentMobileNumber());
						admissionInquiry.setPreviousSchoolName(getAdmissionInquiry().getPreviousSchoolName());
						admissionInquiry.setStudentType(getAdmissionInquiry().getStudentType());
						admissionInquiry.setAddress(address);
						ClassName className = (ClassName) adminManager.get(ClassName.class, "id=" + getOnlineApplicationDetails().getClassId().getId());
						if (!ObjectFunctions.isNullOrEmpty(className)) 
						{
							admissionInquiry.setClassId(className);
							className = null;
							AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class, "id=" + getAcademicYearId());
							admissionInquiry.setAcademicYear(academicYear);
							academicYear = null;
							admissionInquiry.setApplicationFee(openedAdmissionSettings.getApplicationFee());
							admissionInquiry.setCreatedDate(new Date());
							admissionInquiry.setCreatedById(getUser().getId());
							admissionInquiry.setCustId(getUserCustId());
							admissionInquiry.setStudentAddmitted(Constants.NO_STRING);
							
							int recepitNumber = 1;
							Object[] admissionInquiryObj = adminManager.get("SELECT id,recepitNumber from admissionInquiry where custId="+getUserCustId()+" ORDER BY id DESC LIMIT 1");
							if (!ObjectFunctions.isNullOrEmpty(admissionInquiryObj)) 
							{
								if (!ObjectFunctions.isNullOrEmpty(admissionInquiryObj[1])) 
								{
									recepitNumber = Integer.valueOf(admissionInquiryObj[1].toString()) + 1;
								}
							}
							admissionInquiry.setRecepitNumber(recepitNumber);
							admissionInquiry =(AdmissionInquiry) adminManager.save(admissionInquiry);
							setTempId(admissionInquiry.getId());
							super.addActionMessage("Admission Enquiry saved successfully.");
							admissionInquiry = null;
							admissionInquiryObj = null;
						}
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			ajaxAdmissionInquiryDetails();
			setAdmissionInquiry(null);
			setOnlineApplicationDetails(null);
			setAddressVo(null);
			setAcademicYearId(0);
			return SUCCESS;
		}
	 
	 @Action(value = "ajaxGenerateAdmissionForm", results = {@Result(location = "academic/studyAndBonafied/ajaxDoStudyAndBonafiedGeneration.jsp", name = "success") })
		public void ajaxGenerateAdmissionForm() throws URTUniversalException 
		{
			if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxGenerateAdmissionForm' method");
			}
			try {
				AdmissionInquiry admissionInquiry = (AdmissionInquiry) adminManager.get(AdmissionInquiry.class, getAdmissionInquiry().getId());
				AdmissionSettings openedAdmissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, getAdmissionSettings().getId());
				//Customer customer = (Customer) adminManager.get(Customer.class, admissionInquiry.getCustId());
				if(!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings))
				{
					//printDocument(getSession().getServletContext().getRealPath(admissionSettings.getAdmissionFormTemplatepath())+"/"+admissionSettings.getAdmissionFormTemplateFileName());
					
					log.debug("************ generateAdmissionFormReport ************* ");
					File directory = null;
					InputStream templateFile= null;
			 		IXDocReport report = null;
			 		IContext context = null;
			 		OutputStream out = null;
			 		StringBuffer studentDOCXFilePath = null;
			 		
					try {
						
						Customer customer = getCustomerByCustId();
						if(!ObjectFunctions.isNullOrEmpty(customer) && StringFunctions.isNotNullOrEmpty(customer.getCustomerShortName())){
							
							String fileName = openedAdmissionSettings.getAdmissionFormTemplateFileName();
							//getResponse().setContentType("application/msword");
							//getResponse().addHeader("Content-Disposition", "attachment; filename="+fileName);
							
							OnlineApplicationDetails onlineApplicationDetails = new OnlineApplicationDetails();
							OnlineApplicationDetailsVO onlineApplicationDetailsVO = onlineApplicationDetails.copyFromEntityToVo(onlineApplicationDetails);
							
							onlineApplicationDetailsVO.setOrganizationName(customer.getOrganization());
							onlineApplicationDetailsVO.setAcademicYear(admissionInquiry.getAcademicYear().getAcademicYear());
							
							StringBuffer tcTemplateFilePath = new StringBuffer(openedAdmissionSettings.getAdmissionFormTemplatepath()).append("/");
						
							StringBuffer generatedTCsFilePath = new StringBuffer(tcTemplateFilePath).append("temp/");
							File outFile = new File(getSession().getServletContext().getRealPath(generatedTCsFilePath.toString())); 
							if(outFile.exists())
								FileUtils.deleteDirectory(outFile);// Removes existing files
							outFile.mkdirs(); // If directories are not available it creates directories
							
							studentDOCXFilePath = new StringBuffer(generatedTCsFilePath).append(fileName);
						
							TcSettings tcSetting = null;
							if(!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings) && StringFunctions.isNotNullOrEmpty(openedAdmissionSettings.getAdmissionFormTemplateFileName())){
								directory=new File(getSession().getServletContext().getRealPath(tcTemplateFilePath.toString()+openedAdmissionSettings.getAdmissionFormTemplateFileName()));
								if(directory.exists()){
								templateFile= new FileInputStream(directory);
									if(!ObjectFunctions.isNullOrEmpty(templateFile)){
										try{
											report = XDocReportRegistry.getRegistry().loadReport( templateFile, TemplateEngineKind.Velocity );
											context = report.createContext();
										   	context.put( "student", onlineApplicationDetailsVO );
										   	
										  File f1 =	new File(getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
										   	
							            	out = new FileOutputStream(f1);
							                report.process(context, out);
							                
							                out.flush();
							                out.close();
											
						            	}catch (Exception ex) {
						            		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
						            		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
										}
										
						            	studentDOCXFilePath = null;
						            	
									}
								}	
							}
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
		}
	 public  void printDocument(String filepath) 
	 {
		 if (log.isDebugEnabled()) {
				log.debug("Entering 'printDocument' method");
		} 
		 //http://stackoverflow.com/questions/16293859/print-a-pdf-file-using-printerjob-in-java
		 
		try {
			
			log.debug("filepath:" + filepath);
			System.setProperty("java.awt.headless", "false"); 
			        
			PrinterJob printerJob = PrinterJob.getPrinterJob();
			PrintService printService = null;
			if(printerJob.printDialog())
			{
			    printService = printerJob.getPrintService();
			}
			DocFlavor docType = DocFlavor.INPUT_STREAM.AUTOSENSE;
			FileInputStream fis = new FileInputStream(filepath);
			
			DocPrintJob printJob = printService.createPrintJob();
			Doc documentToBePrinted = new SimpleDoc(fis, docType, null);
			printJob.print(documentToBePrinted, null);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		      
	}
	 
	 
	 @Actions( { 
	        @Action(value = "ajaxGenerateAdmissionFormReport", results = {@Result(location = "../admin/reports/ajaxAdmissionEnquiryFeePaidReport.jsp", name = "success") }) })
		public String ajaxGenerateAdmissionFormReport(){
			
			log.debug("************ generateAdmissionFormReport ************* ");
			File directory = null;
			InputStream templateFile= null;
	 		IXDocReport report = null;
	 		IContext context = null;
	 		OutputStream out = null;
	 		StringBuffer studentDOCXFilePath = null;
	 		
			try {
				Map<Long,String> motherToungeMap = new HashMap<Long, String>();
				List<MotherTongue> motherToungeLsit = (List<MotherTongue>)SMSLookUpDataCache.lookUpDataMap.get(Constants.MOTHER_TONGUE_LIST);
				if(!ObjectFunctions.isNullOrEmpty(motherToungeLsit))
				{
					for(MotherTongue motherTongue : motherToungeLsit)
					{
						motherToungeMap.put(motherTongue.getId(), motherTongue.getName());
					}
				}
				AdmissionSettings openedAdmissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, "id="+getAdmissionSettings().getId());
				Customer customer = getCustomerByCustId();
				
				ZipOutputStream zipOutStream = new ZipOutputStream(getResponse().getOutputStream());
				getResponse().setContentType("application/zip");
				
				getResponse().addHeader("Content-Disposition", "attachment; filename=ADMISSION_FORMS.zip");
				
				StringBuffer tcTemplateFilePath = new StringBuffer(openedAdmissionSettings.getAdmissionFormTemplatepath()).append("/");
				
				StringBuffer generatedTCsFilePath = new StringBuffer(tcTemplateFilePath).append("temp/");
				
				File outFile = new File(getSession().getServletContext().getRealPath(generatedTCsFilePath.toString())); 
				if(outFile.exists())
					FileUtils.deleteDirectory(outFile);// Removes existing files
				outFile.mkdirs(); // If directories are not available it creates directories
				
				if(!ObjectFunctions.isNullOrEmpty(getStudentNumber()))
				{
					List<OnlineApplicationDetails> onlineApplicationDetailsList  = adminManager.getAll(OnlineApplicationDetails.class, "id in " + getStudentNumber());
					
					if(!ObjectFunctions.isNullOrEmpty(onlineApplicationDetailsList))
					{
						for(OnlineApplicationDetails onlineApplicationDetails : onlineApplicationDetailsList)
						{
							if(!ObjectFunctions.isNullOrEmpty(onlineApplicationDetails)){
								
								//getResponse().addHeader("Content-Disposition", "attachment; filename=TRANSEFER_CERTIFICATES.zip");
								
								if(!ObjectFunctions.isNullOrEmpty(onlineApplicationDetails.getMotherToungId()))
								{
									if(!ObjectFunctions.isNullOrEmpty(motherToungeMap.get(onlineApplicationDetails.getMotherToungId())))
									{
										onlineApplicationDetails.setMotherToung(motherToungeMap.get(onlineApplicationDetails.getMotherToungId()));
									}
									else
										onlineApplicationDetails.setMotherToung("");
								}
								else
									onlineApplicationDetails.setMotherToung("");
								
								OnlineApplicationDetailsVO onlineApplicationDetailsVO = onlineApplicationDetails.copyFromEntityToVo(onlineApplicationDetails);
								
								onlineApplicationDetailsVO.setOrganizationName(customer.getOrganization());
								studentDOCXFilePath = new StringBuffer(generatedTCsFilePath).append(onlineApplicationDetails.getFirstName()+".doc");
							
								TcSettings tcSetting = null;
								if(!ObjectFunctions.isNullOrEmpty(openedAdmissionSettings) && StringFunctions.isNotNullOrEmpty(openedAdmissionSettings.getAdmissionFormTemplateFileName())){
									directory=new File(getSession().getServletContext().getRealPath(tcTemplateFilePath.toString()+openedAdmissionSettings.getAdmissionFormTemplateFileName()));
									if(directory.exists()){
									templateFile= new FileInputStream(directory);
										if(!ObjectFunctions.isNullOrEmpty(templateFile)){
											try{
												report = XDocReportRegistry.getRegistry().loadReport( templateFile, TemplateEngineKind.Velocity );
												context = report.createContext();
											   	context.put( "student", onlineApplicationDetailsVO );
											   	
											  File f1 =	new File(getSession().getServletContext().getRealPath(studentDOCXFilePath.toString()));
											   	
								            	out = new FileOutputStream(f1);
								                report.process(context, out);
								                
								                out.flush();
								                out.close();
												
							            	}catch (Exception ex) {
							            		ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
							            		JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
											}
											
							            	studentDOCXFilePath = null;
							            	
										}
									}	
								}
							}
						}
					}
				}
				
				directory = new File(getSession().getServletContext().getRealPath(generatedTCsFilePath.toString()));
				StringFunctions.zipFiles(directory,zipOutStream);
				FileUtils.deleteDirectory(directory);
				zipOutStream = null;
				
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
			
		}
	 
	 @Action(value = "ajaxSyllabusTypeSchoolCode", results = {@Result(location = "academic/class/ajaxSyllabusTypeSchoolCode.jsp", name = "success") })
	 public String ajaxSyllabusTypeSchoolCode()
	 {
		 setTempList1(adminManager.getAll(SyllabusTypeSchoolCode.class, "custId="+getUserCustId()+ " and syllabusTypeId=" + getSyllabusType().getId()));
		 //log.debug("Size:" + getObjectList().size());
		 return SUCCESS;
	 }
	
	 
	 @Actions( { @Action(value = "ajaxGetSyllabusTypeSchoolCodes", results = { @Result(type = "json", name = "success", params = {"includeProperties", "timingsList.*" }) }) })
		public String ajaxGetSyllabusTypeSchoolCodes() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxGetSyllabusTypeSchoolCodes' method");
			}
			try {
				
				List<SyllabusTypeSchoolCode> syllabusTypeSchoolCodeList = adminManager.getAll(SyllabusTypeSchoolCode.class, "custId="+getUserCustId()+ " and syllabusTypeId=" + getSyllabusType().getId());
				
				if(!ObjectFunctions.isNullOrEmpty(syllabusTypeSchoolCodeList))
				{
					JSONArray res = new JSONArray();
					JSONObject j;
					int sNo=0;
				for(SyllabusTypeSchoolCode syllabusTypeSchoolCode:syllabusTypeSchoolCodeList)
				{
					if(!ObjectFunctions.isNullOrEmpty(syllabusTypeSchoolCode))
					{
						j=new JSONObject();
					    if(subjectId!=String.valueOf(syllabusTypeSchoolCode.getId())){
					    	sNo=0;
					    }
					    
					    j.put("SYLLABUSTYPEID",syllabusTypeSchoolCode.getSyllabusType().getId());
					    
						if("P".equalsIgnoreCase(syllabusTypeSchoolCode.getType()))
							j.put("PRIMARYSCHOOLCODE",syllabusTypeSchoolCode.getSchoolCode());
						else
							j.put("PRIMARYSCHOOLCODE","");
						
						if("H".equalsIgnoreCase(syllabusTypeSchoolCode.getType()))
							j.put("HIGHERSCHOOLCODE",syllabusTypeSchoolCode.getSchoolCode());
						else
							j.put("HIGHERSCHOOLCODE","");
					    
						subjectId= String.valueOf(syllabusTypeSchoolCode.getId());
						sNo++;
						res.put(j);
					}
				}
				j = new JSONObject();
				j.put("schoolCodesData", res);
				getResponse().getOutputStream().print(j.toString());
					
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			}
			return null;
		}
	 
	 @Actions( { 
		    @Action(value = "ajaxCheckStudentRoleNumber", results = { @Result(type = "json", name = "success", params = {"includeProperties", "autoCheck" }) }) })
			public String ajaxCheckStudentRoleNumber() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckStudentRoleNumber' method");
			}
			try {
				 String text=getSelectedId().replace(",","0");			
				 String desc=text.replace("?",",");
				 if(!StringFunctions.isNullOrEmpty(desc)){
					String[] keyWordAndId=desc.split(",");	
					String rollNumber=keyWordAndId[1].replace("keyWord=","");			
					StringBuffer sqlQuery = new StringBuffer(" classSectionId="+ keyWordAndId[0].toString() + " and rollNumber = '"+rollNumber+"'");
					Student rollNumberStudent = (Student)adminManager.get(Student.class,sqlQuery.toString());
					if(!ObjectFunctions.isNullOrEmpty(rollNumberStudent))
					{
						setAutoCheck("1");
					}
					else {
						setAutoCheck("0");
					}
			    }
			} catch (Exception ex) {
				log.error("Entering into 'catch block':" + ex.getMessage());
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			}
			return SUCCESS;
		}
	 
	 @Actions({ @Action(value = "ajaxDoAdmissionNumberSettings", results = { @Result(location = "ajaxAdmissionNumberSettings.jsp", name = "success") }) })
		public String ajaxDoAdmissionNumberSettings() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoAdmissionNumberSettings' method");
			}
			try {
				setAcademicYearList(getAdmissionAcademicYears());
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxDoGetAdmissionNumberSettings", results = { @Result(location = "ajaxDoGetAdmissionNumberSettings.jsp", name = "success") }) })
		public String ajaxDoGetAdmissionNumberSettings() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDoGetAdmissionNumberSettings' method");
			}
			try {
				AdmissionSettings admissionSettings = adminManager.getAdmissionSettingsByCustIdAndYear(getUserCustId(),getAcademicYearId());
				if(!ObjectFunctions.isNullOrEmpty(admissionSettings))
				{
					setAdmissionSettings(admissionSettings);
					
					AdmissionNumberSettings admissionNumberSettings = (AdmissionNumberSettings)adminManager.get(AdmissionNumberSettings.class, "custId="+getUserCustId()+" and academicYearId="+ admissionSettings.getAcademicYearId());
					if(!ObjectFunctions.isNullOrEmpty(admissionNumberSettings))
					{
						if("SW".equalsIgnoreCase(admissionNumberSettings.getAdmissionNumberType()))
						{
							setAdmissionNumberSettings(admissionNumberSettings);
							super.addActionMessage("Admission Number Setting is already added for School wide and hence the submit button is disabled.");
						}
						else
						{
							AdmissionNumberSettings admissionNumberSettingsObj = new AdmissionNumberSettings();
							admissionNumberSettingsObj.setAdmissionNumberType(admissionNumberSettings.getAdmissionNumberType());
							setAdmissionNumberSettings(admissionNumberSettingsObj);
							getClassListForAutoAcademicNumber(admissionSettings.getId(),getAcademicYearId());
						}
					}
					else
						getClassListForAutoAcademicNumber(admissionSettings.getId(),getAcademicYearId());
					admissionNumberSettings = null;
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 @Actions( { @Action(value = "ajaxAddAdmissionNumberSettings", results = { @Result(location = "ajaxDoGetAdmissionNumberSettings.jsp", name = "success") }) })
		public String ajaxAddAdmissionNumberSettings() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxAddAdmissionNumberSettings' method");
			}
			try {
				
				AcademicYear academicYear = (AcademicYear) adminManager.get(AcademicYear.class, getAcademicYearId());
				AdmissionSettings admissionSettings = (AdmissionSettings) adminManager.get(AdmissionSettings.class, getAdmissionSettings().getId());
				if(!ObjectFunctions.isNullOrEmpty(admissionSettings))
				{
					if(getAdmissionSettings().isAtuoGenerationAdmissionNumberStatus())
					{
						AdmissionNumberSettings admissionNumberSettings = new AdmissionNumberSettings();
						
						admissionNumberSettings.setPrefix(getAdmissionNumberSettings().getPrefix());
						admissionNumberSettings.setPostfix(getAdmissionNumberSettings().getPostfix());
						admissionNumberSettings.setSequenceNumber(getAdmissionNumberSettings().getSequenceNumber());
						admissionNumberSettings.setAcademicYear(academicYear);
						admissionNumberSettings.setCustId(getUserCustId());
						admissionNumberSettings.setAdmissionSettingsId(admissionSettings.getId());
						admissionNumberSettings.setAdmissionNumberType(getAdmissionNumberSettings().getAdmissionNumberType());
						
						if("CW".equalsIgnoreCase(getAdmissionNumberSettings().getAdmissionNumberType()))
						{
							if(!ObjectFunctions.isNullOrEmpty(getChkBoxSelectedIds()))
							{
								String classIds = StringFunctions.convertListToCommaDelimitedString(getChkBoxSelectedIds());
								List<ClassName> classNameList = adminManager.getAll(ClassName.class, "id in (" + classIds+")");
								if(!ObjectFunctions.isNullOrEmpty(classNameList))
								{
									admissionNumberSettings.setClassNameClassId(ConvertUtil.convertListToSet(classNameList));
								}
							}
						}
						admissionNumberSettings.setCreatedById(getUser().getId());
						admissionNumberSettings.setCreatedDate(new Date());
						
						setAdmissionNumberSettings((AdmissionNumberSettings)adminManager.save(admissionNumberSettings));
						
					}
					admissionSettings.setAtuoGenerationAdmissionNumberStatus(getAdmissionSettings().isAtuoGenerationAdmissionNumberStatus());
					setAdmissionSettings((AdmissionSettings)adminManager.merge(admissionSettings));
					
					if("CW".equalsIgnoreCase(getAdmissionNumberSettings().getAdmissionNumberType()))
					{
						getClassListForAutoAcademicNumber(getAdmissionSettings().getId(),academicYear.getId());
						AdmissionNumberSettings admissionNumberSettingsObj = new AdmissionNumberSettings();
						admissionNumberSettingsObj.setAdmissionNumberType(getAdmissionNumberSettings().getAdmissionNumberType());
						setAdmissionNumberSettings(admissionNumberSettingsObj);
					}
					super.addActionMessage("Admission Number Setting added successfully");
				}
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
	 public void getClassListForAutoAcademicNumber(long admissionSettingsId,long academicYearId)
	 {
		 List<AdmissionNumberSettings> admissionNumberSettingsList = adminManager.getAll(AdmissionNumberSettings.class, "custId="+getUserCustId()+" and academicYearId=" +academicYearId+ " and admissionSettingsId="+admissionSettingsId);
		 if(!ObjectFunctions.isNullOrEmpty(admissionNumberSettingsList))
		 {
			 
			 StringBuilder builder = new StringBuilder("(");
			 for(AdmissionNumberSettings admissionNumberSettings : admissionNumberSettingsList)
			 {
				 Set<ClassName> classNameList =  admissionNumberSettings.getClassNameClassId();
				 if(!ObjectFunctions.isNullOrEmpty(classNameList))
				 {
					 for(ClassName className : classNameList)
					 {
						 builder.append(className.getId()+",");
						 ClassNameAutoAcademicNumberVO classNameAutoAcademicNumberVO = new ClassNameAutoAcademicNumberVO();
						 classNameAutoAcademicNumberVO.setClassName(className.getClassName());
						 classNameAutoAcademicNumberVO.setClassId(className.getId());
						 classNameAutoAcademicNumberVO.setAcademicYear(admissionNumberSettings.getAcademicYear().getAcademicYear());
						 classNameAutoAcademicNumberVO.setAcademicYearId(admissionNumberSettings.getAcademicYear().getId());
						 classNameAutoAcademicNumberVO.setAdmissionNumberSettingsId(admissionNumberSettings.getId());
						 classNameAutoAcademicNumberVO.setPrefix(admissionNumberSettings.getPrefix());
						 classNameAutoAcademicNumberVO.setPostfix(admissionNumberSettings.getPostfix());
						 classNameAutoAcademicNumberVO.setSequenceNumber(admissionNumberSettings.getSequenceNumber());
						 classNameAutoAcademicNumberVO.setAdmissionSettingId(admissionSettingsId);
						 
						 StringBuilder stBuilder = new StringBuilder();
						
						 stBuilder.append(" custId=" + getUserCustId());
						 stBuilder.append(" and academicYearId=" + admissionNumberSettings.getAcademicYear().getId());
						 stBuilder.append(" and classId=" + className.getId());
						 stBuilder.append(" and joinedThroughAdmissions='"+ Constants.YES_STRING+ "'");
						 
						 List<ViewStudentClassDetails> viewStudentClassDetailsList = adminManager.getAll(ViewStudentClassDetails.class,stBuilder.toString());
						 if(!ObjectFunctions.isNullOrEmpty(viewStudentClassDetailsList))
							 classNameAutoAcademicNumberVO.setStudentsAvailable(true); 
						 else
							 classNameAutoAcademicNumberVO.setStudentsAvailable(false); 
							
						 getObjectList().add(classNameAutoAcademicNumberVO);
					 }
				 }
			 }
			 builder.append("0)");
			 setClassList(adminManager.getAll(ClassName.class,"custId="+getUserCustId()+" and academicYearId="+academicYearId+" and id not in " + builder.toString()+" order by sortingOrder"));
		 }
		 else
			 setClassList(adminManager.getAllClassNames( getUserCustId(),academicYearId));
	 }
	 
	 
	 @Actions( { @Action(value = "ajaxDeleteAutoAcademicNumberClass", results = { @Result(location = "ajaxDoGetAdmissionNumberSettings.jsp", name = "success") }) })
		public String ajaxDeleteAutoAcademicNumberClass() {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxDeleteAutoAcademicNumberClass' method");
			}
			try {
				adminManager.remove("admissionNumberClasses", "admissionNumberSettingsId="+getClassNameAutoAcademicNumberVO().getAdmissionNumberSettingsId()+" and classId="+getClassNameAutoAcademicNumberVO().getClassId());
				super.addActionMessage("Admission Number Setting deleted successfully");
				setAcademicYearId(getClassNameAutoAcademicNumberVO().getAcademicYearId());
				ajaxDoGetAdmissionNumberSettings();
			} catch (Exception ex) {
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
	 
		public void downloadClassAssignmentDocuments(long classAssignmentId)
		{
			 try{
				 ZipOutputStream zipOutStream = new ZipOutputStream(getResponse().getOutputStream());
					String memberName = "Class Assignment";
					 memberName = memberName.replaceAll(" ", "_");
						getResponse().setContentType("application/zip");
						getResponse().addHeader("Content-Disposition", "attachment; filename="+memberName+"_DOCUMENTS.zip"); 
						
						File directory = Files.createTempDirectory("classAssignment").toFile();
						ClassAssignment classAssignment =	(ClassAssignment) adminManager.get(ClassAssignment.class,classAssignmentId);
						if(!ObjectFunctions.isNullOrEmpty(classAssignment))
						{
							if(!ObjectFunctions.isNullOrEmpty(classAssignment.getAttachmentList()))
							{
								for(Attachment attachmentObj: classAssignment.getAttachmentList())
					    	    {
					    		   if(!ObjectFunctions.isNullOrEmpty(attachmentObj) && !ObjectFunctions.isNullOrEmpty(attachmentObj.getFilePath()))
					    		   {
					    			   URL url = new URL(attachmentObj.getFilePath());
					    			   URLConnection conn = url.openConnection();
										InputStream is = conn.getInputStream();
										
										File file = new File(directory,attachmentObj.getFileName());
										FileUtils.copyInputStreamToFile(is, file);
										is.close();
					    		   }
					    	    }
							}
						}
						if(!ObjectFunctions.isNullOrEmpty(directory.listFiles())){
							if(directory.listFiles().length > 0)
							 StringFunctions.zipFiles(directory,zipOutStream);
							else
							 super.addActionError("There are no files found because you have not uploaded or you might be deleted.");
						}							
						else{
							super.addActionError("There are no files to download.");
						}
				zipOutStream.close();;
				FileUtils.deleteDirectory(directory);
			 }
			 catch(Exception ex){
				 ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
				 JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			 }
		}
		
		public void ajaxGetCommanSearchDetails(long accountId,ViewAllUsers allUsers) {
			Student student = null;
			if(getUser().isSchoolAdmin()){
				 student = (Student)adminManager.get(Student.class,"accountId="+accountId+" and academicYearId="+getUserAcademicYearId());
				 ajaxSetCommanSearchDetails(student,allUsers);
			}else{
				if(getUser().getId() > 0 ){
					setStaff(adminManager.getStaffByAcountId(getUser().getId(),Constants.YES_STRING));
					if (!ObjectFunctions.isNullOrEmpty(getStaff())) {
						if (getStaff().getId() > 0 && getUserAcademicYearId() > 0) {
							List<Object[]> staffStudyClassIdsList = adminManager.getAll("select studyClassId from classTeacher where teacherId="+getStaff().getId()+" and academicYearId="+getUserAcademicYearId()+" and custId="+getUserCustId());
							if(!ObjectFunctions.isNullOrEmpty(staffStudyClassIdsList)){
								String studyClassIdsString=null;
								if (ObjectFunctions.isNotNullOrEmpty(staffStudyClassIdsList)) 
									studyClassIdsString = StringFunctions.convertListToCommaDelimitedString(staffStudyClassIdsList);
								else
									studyClassIdsString="0";
								student = (Student)adminManager.get(Student.class,"custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId in("+studyClassIdsString+") and accountId="+accountId+" group by accountId");
								ajaxSetCommanSearchDetails(student,allUsers);
								staffStudyClassIdsList = null;
							}
						}
					}
				}else if(accountId > 0 ){
					 student = (Student)adminManager.get(Student.class,"accountId="+accountId+" and academicYearId="+getUserAcademicYearId());
					 ajaxSetCommanSearchDetails(student,allUsers);
				}
			}
		}
		public void ajaxSetCommanSearchDetails(Student student,ViewAllUsers allUsers) {
			double percentage = 0;
			Object[] grade = null;
			String status = null;
			if(!ObjectFunctions.isNullOrEmpty(student)){
		 		allUsers.setClassAndSection(student.getClassAndSection());
		 		
		 		allUsers.setStatus(student.getStatus());
		 		//allUsers.setActiveStudent(student.isActiveStudent());
		 		
		 		if(!ObjectFunctions.isNullOrEmpty(student.getProfileImage()))
					allUsers.setProfileImage(student.getProfileImage().getAdjustedAttachmentFilePath());
		 		Object[] stateName = adminManager.get("select stateName,id from State where stateCode='"+allUsers.getStateCode()+"'");
		 		if(!ObjectFunctions.isNullOrEmpty(stateName))
		 			allUsers.setStateName(stateName[0].toString());
		 		// for gettigng Stduent Attendance Details
				ajaxGetBaseStudentsAttendance();
				allUsers.setAttendanceList(getObjectList());
				// for getting stduent fee details
				List<Object[]>  feeDetailsList = adminManager.getAll("select sum(paymentAmount),sum(feeAmount),dueDate,termName,discountAmount from vw_studentFeePaymentDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and studentId="+student.getId()+" and classSectionId="+student.getClassSectionId()+" and deleteStatus='N' group by schoolTermId");
				List<ViewStudentFeePaymentDetailsVO> studentFeeList = new ArrayList();
			 	if(!ObjectFunctions.isNullOrEmpty(feeDetailsList)){
			 		for(Object[] obj : feeDetailsList){
			 			// for displaying duedays
			 			ViewStudentFeePaymentDetailsVO viewStudentFeePaymentDetailsVO = new ViewStudentFeePaymentDetailsVO();
			 			viewStudentFeePaymentDetailsVO.setPaidAmount(Double.valueOf(obj[0].toString()) + Double.valueOf(obj[4].toString()));
			 			viewStudentFeePaymentDetailsVO.setBalanceAmount(Double.valueOf(obj[1].toString()));
			 			Date dueDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,obj[2].toString().replace(".0", ""));
			 			int feeDueDays = DateFunctions.daysBetween(dueDate,new Date());
			 			viewStudentFeePaymentDetailsVO.setDueDate(feeDueDays);
			 			viewStudentFeePaymentDetailsVO.setTermName(obj[3].toString());
			 			studentFeeList.add(viewStudentFeePaymentDetailsVO);
			 			dueDate = null;
			 			feeDueDays = 0;
			 		}
			 		allUsers.setFeesList(studentFeeList);
			 		
			 		ViewStudentFeeRefundDetails studentFeeRefundDetails = (ViewStudentFeeRefundDetails)adminManager.get(ViewStudentFeeRefundDetails.class, "custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and studentId="+student.getId()); 
			 		if(!ObjectFunctions.isNullOrEmpty(studentFeeRefundDetails))
			 			setRefundedFeeDetails(studentFeeRefundDetails);
			 	}
			 	// For getting Student Exam resutls, grade and performance
			    List<StudentMarks> latestStudentMarks=adminManager.getLatestUploadedExamTypesByStudentId(student.getId(), 1);
				log.debug(latestStudentMarks.size());
				if(!ObjectFunctions.isNullOrEmpty(latestStudentMarks)){
					StudentMarks studentMarksExamType=latestStudentMarks.get(0);
					StringBuffer query = new StringBuffer("select sum(totalSubjectMarksObtained),sum(subjectTotalMarks),examType from vw_studentMarksDetails vsm  where vsm.custId="+getUserCustId()+" and vsm.academicYearId="+getUserAcademicYearId()+" and vsm.classSectionId="+student.getClassSectionId()+" and vsm.examTypeId="+studentMarksExamType.getExamTypeId()+" and vsm.status='Y' and vsm.studId="+student.getId()+"  group by vsm.studId order by sum(totalSubjectMarksObtained) desc");
					//StringBuffer query = new StringBuffer("select marksObtained,totalMarks,examType,studId, FIND_IN_SET( marksObtained, (select group_concat(distinct marksObtained order by marksObtained desc) from vw_studentRanks where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId="+student.getClassSectionId()+" and examTypeId="+studentMarksExamType.getExamTypeId()+" and status='Y')) as rank from vw_studentRanks where studId="+student.getId());
					log.debug(query.toString());
					List<Object[]> stduentsMarks = adminManager.getAll(query.toString());
					 if(!ObjectFunctions.isNullOrEmpty(stduentsMarks)){
						 for(Object[] obj : stduentsMarks){
							 if((Double.valueOf(obj[0].toString()) != 0.0) &&  (Double.valueOf(obj[1].toString()) != 0.0)){
								percentage = ((Double.valueOf(obj[0].toString())) / (Double.valueOf(obj[1].toString())) * 100);
								grade = adminManager.get("select description,gradeName from overAllGrades where custId="+ getUserCustId()+ " and maxmarks >="+ Math.round(percentage)+ " and minmarks <="+ Math.round(percentage)+ " and academicYearId="+ getUserAcademicYearId());
								if (!ObjectFunctions.isNullOrEmpty(grade) && !ObjectFunctions.isNullOrEmpty(grade[1])) {
									allUsers.setGrade(grade[1].toString());
									allUsers.setDescription(grade[0].toString());
								}
							 }
							 allUsers.setStudentMarksList(stduentsMarks);
						  }
				     }
					 stduentsMarks = null;
				 }
				// For getting Students Assignment
				List<ClassAssignment> assignmentsList = studentManager.getAll(ClassAssignment.class,"classSectionId="+student.getClassSectionId()+" order by assignmentDate desc");
				List<ClassAssignment> studeAssignmentsList = new ArrayList();
				if(!ObjectFunctions.isNullOrEmpty(assignmentsList)){
					for(ClassAssignment assignments : assignmentsList){
						Date assignmentDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,assignments.getAssignmentDate()));
						String assignmentYear =DateFormatter.formatDate(DateFormatter.YYYY_PATTERN, assignmentDate);
						if(!ObjectFunctions.isNullOrEmpty(assignmentDate) && !ObjectFunctions.isNullOrEmpty(assignmentYear)){
							Date todayDate = DateFormatter.parseString(DateFormatter.YYYY_MM_DD_PATTERN,DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_PATTERN,new Date()));
							String thisYear = DateFormatter.formatDate(DateFormatter.YYYY_PATTERN, todayDate);
							ClassAssignment clsAssignment = new ClassAssignment();
							if(assignmentDate.compareTo(todayDate)<=0 && assignmentYear.compareTo(thisYear) ==0){
								StudentClassAssignment stClassAssignment = (StudentClassAssignment) studentManager.get(StudentClassAssignment.class,"assignmentId="+assignments.getId());
								if(!ObjectFunctions.isNullOrEmpty(stClassAssignment))
									 status = "Incomplete";
								else
									 status = "Complete";
							}
							else
								 status = "Need To Do";
							
							clsAssignment.setStatus(status);
							clsAssignment.setAssignmentDate(assignments.getAssignmentDate());
							clsAssignment.setSubjectName(assignments.getSubjectName());
							studeAssignmentsList.add(clsAssignment);
						}
						allUsers.setClassAssignmentsList(studeAssignmentsList);
					}
				}
				assignmentsList = null;
			    getTempList().add(allUsers);
			    feeDetailsList = null;
			    student = null;
			    allUsers = null;
			    stateName = null;
		 	}
		}
		
		 public void ajaxGetSuspendStudent(String classId) {
			 StringBuffer qury = new StringBuffer("select studentId from suspendAndBlacklistStudents where studentId in (select id from student where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId=");
				qury.append(Long.valueOf(classId)).append(")").append(" and custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and '"+getAttendanceDate()+"' between blackedOrSuspendFromDate and blackedOrSuspendToDate and status ='"+Constants.SUSPEND_STATUS+"' group by studentId");
				log.debug(qury.toString());
				List<BigInteger> studentIds = adminManager.getAll(qury.toString());
				String classIdsString=null;
				if (ObjectFunctions.isNotNullOrEmpty(studentIds)) 
					classIdsString = StringFunctions.convertListToCommaDelimitedString(studentIds);
				else
					classIdsString="0";
				setEventId(classIdsString.toString());
		 }
		 
		 
		 @Actions( {
				@Action(value = "ajaxDoGenerateStudentRollNumber", results = { @Result(location = "student/ajaxDoGenerateStudentRollNumberDetails.jsp", name = "success")})	
		 }) 
			public String ajaxDoGenerateStudentRollNumber() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxDoGenerateStudentRollNumber' method");
				}
				try {
					checkStudyClassHavingStudentsOrNot();
					setClassSectionId(null);
					setTempString2(null);
					setTempString3(null);
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
			}
		 
		 @Actions( {
				@Action(value = "ajaxGenerateStudentRollNumber", results = { @Result(location = "student/ajaxDoGenerateStudentRollNumberDetails.jsp", name = "success")})	
		 }) 
			public String ajaxGenerateStudentRollNumber() throws URTUniversalException {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxGenerateStudentRollNumber' method");
				}
				try {
					StringBuilder query = new StringBuilder("select studId,gender,fullName from vw_studentClassDetails where custId="+getUserCustId()+" and academicYearId="+getUserAcademicYearId()+" and classSectionId=" + getClassSectionId()+" and status='Y'");
					
					if("RA".equalsIgnoreCase(getTempString2()))
					{
						query.append(" order by fullName");
					}
					else
					{
						if("RF".equalsIgnoreCase(getTempString3())) // Checking for female
							query.append(" order by gender Asc,fullName Asc");
						else
						{
							query.append(" order by gender DESC,fullName Asc");
						}
					}
					List<Object[]> studentsList =   adminManager.getAll(query.toString());
					if(!ObjectFunctions.isNullOrEmpty(studentsList))
					{
						int i=1;
						for(Object[] stuObj : studentsList)
						{
							adminManager.updateQuery("update student set rollNumber="+i+" where id = "+stuObj[0].toString());
							i++;
						}
					}
					super.addActionMessage("successfully updated student roll numbers");
				} catch (Exception ex) {
					ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				ajaxDoGenerateStudentRollNumber();
				return SUCCESS;
			}
		 
		 /**
		  * 
		  * @return
		  * @throws URTUniversalException
		  */
		 @Action(value = "ajaxSubmitAttendance", results = { @Result(location = "../common/attendance/ajaxEditPreSchoolStudentAttendanceForm.jsp", name = "success"),
				 @Result(location = "AttendanceList.jsp", name = "Failure") })
		 public String ajaxSubmitAttendance() throws URTUniversalException {
			 if (log.isDebugEnabled()) {
				 log.debug("Entering 'createAttendance' method in Admin Action");
			 }
			 try {
				 if (!StringFunctions.isNullOrEmpty(getStudentNumber())) {
					 log.debug("********* starting the function:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,new Date()));
					 getSmsCount();
					 addActionMessages(
					 studentManager.addOrUpdateStudentAttendance(Long.valueOf(getStudentNumber()),getAttendanceDate(),getUserAcademicYearId(),getUserCustId(), getUser().getId(),
							 (getSmsAlloted() > 0?"SMS":null),Long.valueOf(getClassId()),getAttendanceType()));
					 log.debug("********* End the function:" + DateFormatter.formatDate(DateFormatter.YYYY_MM_DD_HHMMSS_PATTERN,new Date()));
					 ajaxGetSuspendStudent(getClassId());
				 }

			 } catch (Exception ex) {
				 ex.printStackTrace();
				 JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				 RayGunException raygex = new RayGunException();
				 raygex.sendRayGunException(ex);
				 raygex = null;
			 }
			 finally
			 {
				 ajaxViewAttendanceForm();
			 }
			 return SUCCESS;
		 }

		/**
		 * @return the selectedRolesList
		 */
		public List getSelectedRolesList() {
			if (ObjectFunctions.isNullOrEmpty(this.selectedRolesList)) {
				this.selectedRolesList = new ArrayList();
			}
			return selectedRolesList;
		}

		/**
		 * @param selectedRolesList the selectedRolesList to set
		 */
		public void setSelectedRolesList(List selectedRolesList) {
			this.selectedRolesList = selectedRolesList;
		}

		@Actions({ @Action(value = "ajaxChangeAttendanceEmailServiceStatus", results = { @Result(type = "json", name = "success", params = {
				"includeProperties", "status" }) }) })
				public String ajaxChangeAttendanceEmailService() {
				if (log.isDebugEnabled()) {
					log.debug("Entering 'ajaxChangeAttendanceEmailService' method");
				}
				try {
					Customer customer = getCustomerByCustId();
					if(!ObjectFunctions.isNullOrEmpty(customer)){
						if(customer.isCheckAttendanceEmailService()){
							customer.setCheckAttendanceEmailService(false);
						}else
							customer.setCheckAttendanceEmailService(true);
						    customer=userManager.saveCustomer(customer);
					}
					setStatus(String.valueOf(customer.isCheckAttendanceEmailService()));
				} catch (Exception ex) {
					ex.printStackTrace();
					JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
				}
				return SUCCESS;
				}
		@Actions( { 
		    @Action(value = "ajaxCheckStudentRollNumberAvailableOrNotForAdmissions", results = { @Result(type = "json", name = "success", params = {"includeProperties", "autoCheck" }) }) })
			public String ajaxCheckStudentRollNumberAvailableOrNotForAdmissions() throws URTUniversalException {
			if (log.isDebugEnabled()) {
				log.debug("Entering 'ajaxCheckStudentRollNumberAvailableOrNotForAdmissions' method");
			}
			try {
				 String text=getSelectedId().replace(",","0");			
				 String desc=text.replace("?",",");
				 if(!StringFunctions.isNullOrEmpty(desc)){
					String[] keyWordAndId=desc.split(",");	
					String rollNumber=keyWordAndId[1].replace("keyWord=","");			
					StringBuffer sqlQuery = new StringBuffer(" classNameClassId="+ keyWordAndId[0].toString() + " and rollNumber = '"+rollNumber+"'");
					Student rollNumberStudent = (Student)adminManager.get(Student.class,sqlQuery.toString());
					if(!ObjectFunctions.isNullOrEmpty(rollNumberStudent))
					{
						setAutoCheck("1");
					}
					else {
						setAutoCheck("0");
					}
			    }
			} catch (Exception ex) {
				log.error("Entering into 'catch block':" + ex.getMessage());
				ex.printStackTrace();RayGunException raygex = new RayGunException();raygex.sendRayGunException(ex);raygex=null;
			}
			return SUCCESS;
		}
		
		@Actions( { @Action(value = "receptionistHome", results = { @Result(location = "../admin/common/ajaxViewStudyClassList.jsp", name = "success")  }) })
		public String receptionistHome(){
			if (log.isDebugEnabled()) {
				log.debug("Entering 'receptionistHome' method");
			}
			try{		
				setClassList(null);
				setStudyClassList(null);
				setStudyClassList(adminManager.GetAllStudyClasses(getUserCustId(), getUserAcademicYearId(),null));
				Collections.sort(getStudyClassList());
				if(!ObjectFunctions.isNullOrEmpty(getSession().getAttribute("showTaskReminder")))
					getTaskReminderToUserLogin();
			}catch (Exception ex) {
				ex.printStackTrace();
				JRExceptionClient jre = new JRExceptionClient();jre.sendException(ex);jre = null;
			}
			return SUCCESS;
		}
		
}
